00000000                            ; ====================================================================================================
00000000                            ; I SPAT ON GOD
00000000                            ; ====================================================================================================
00000000                            ; I Spat on God is a port of Super Mario World to the SEGA Mega Drive using
00000000                            ; the Sonic the Hedgehog engine
00000000                            ; ----------------------------------------------------------------------------------------------------
00000000                            
00000000                            		include "CPU Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Change CPU
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            cpu:		macro
00000000                            		if strcmp("\1","z80")
00000000                            		pusho			; save previous options
00000000                            		cpu_mode:	= 1	; Z80
00000000                            		opt	an+		; 1234h style numbering
00000000                            		opt	ae-		; disable auto evens
00000000                            		else
00000000                            		if def(cpu_mode)
00000000                            		popo			; restore options
00000000                            		endc
00000000                            		cpu_mode:	= 0	; 68000 by default
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; AS compatibility
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            phase:		macros
00000000                            		obj \1
00000000                            
00000000                            dephase:	macros
00000000                            		objend
00000000                            
00000000                            listing:	macro
00000000                            		if strcmp("\1","on")
00000000                            		list
00000000                            		else
00000000                            		nolist
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            binclude:	macros
00000000                            		incbin	\_
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Z80 instruction set
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            getzreg:	macro		; convert register to numerical value
00000000                            		if strcmp("\1","a")
00000000                            		zreg: = 7
00000000                            		elseif strcmp("\1","b")
00000000                            		zreg: = 0
00000000                            		elseif strcmp("\1","c")
00000000                            		zreg: = 1
00000000                            		elseif strcmp("\1","d")
00000000                            		zreg: = 2
00000000                            		elseif strcmp("\1","e")
00000000                            		zreg: = 3
00000000                            		elseif strcmp("\1","h")
00000000                            		zreg: = 4
00000000                            		elseif strcmp("\1","l")
00000000                            		zreg: = 5
00000000                            		elseif strcmp("\1","(hl)")
00000000                            		zreg: = 6
00000000                            		else
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            dc3:		macro		; write 3 bytes
00000000                            		rept narg
00000000                            		dc.w (\1)>>8
00000000                            		dc.b (\1)&$ff
00000000                            		shift
00000000                            		endr
00000000                            		endm
00000000                            
00000000                            
00000000 =00000000                  ix:		equ 0		; allows (ix+n) to be parsed as n
00000000 =00200000                  iy:		equ $200000
00000000                            
00000000                            
00000000                            adc:		macro
00000000                            		if strcmp("\1","a")
00000000                            			if instr("a b c d e h l (hl) ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.b $88+zreg
00000000                            			elseif strcmp("\2","ixh")
00000000                            			dc.w $dd8c
00000000                            			elseif strcmp("\2","ixl")
00000000                            			dc.w $dd8d
00000000                            			elseif strcmp("\2","iyh")
00000000                            			dc.w $fd8c
00000000                            			elseif strcmp("\2","iyl")
00000000                            			dc.w $fd8d
00000000                            			elseif instr("\2","(i") ; adc a,(ix+n)
00000000                            			dc3 $dd8e00+\2
00000000                            			else			; adc a,n
00000000                            			dc.b $ce, \2
00000000                            			endc
00000000                            		elseif strcmp("\1","hl")
00000000                            			if strcmp("\2","bc")
00000000                            			dc.w $ed4a
00000000                            			elseif strcmp("\2","de")
00000000                            			dc.w $ed5a
00000000                            			elseif strcmp("\2","hl")
00000000                            			dc.w $ed6a
00000000                            			elseif strcmp("\2","sp")
00000000                            			dc.w $ed7a
00000000                            			else
00000000                            			fail
00000000                            			endc
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            bit:		macro
00000000                            		if instr("a b c d e h l (hl) ","\2\ ")
00000000                            		getzreg	\2
00000000                            		dc.b $cb, $40+(\1*8)+zreg
00000000                            		elseif instr("\2","(i")		; bit n,(ix+n)
00000000                            		dc3 $ddcb00+\2
00000000                            		dc.b $40+((\1)*8)
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            call:		macro
00000000                            		if strcmp("\1","nz")
00000000                            		dc.b $c4
00000000                            		elseif strcmp("\1","z")
00000000                            		dc.b $cc
00000000                            		elseif strcmp("\1","nc")
00000000                            		dc.b $d4
00000000                            		elseif strcmp("\1","c")
00000000                            		dc.b $dc
00000000                            		elseif strcmp("\1","po")
00000000                            		dc.b $e4
00000000                            		elseif strcmp("\1","pe")
00000000                            		dc.b $ec
00000000                            		elseif strcmp("\1","p")
00000000                            		dc.b $f4
00000000                            		elseif strcmp("\1","m")
00000000                            		dc.b $fc
00000000                            		else		; call n
00000000                            		dc.b $cd
00000000                            		endc
00000000                            		if narg=2
00000000                            		shift
00000000                            		endc
00000000                            		dc.b (\1)&$ff, (\1)>>8
00000000                            		endm
00000000                            
00000000                            ccf:		macros
00000000                            		dc.b $3f
00000000                            
00000000                            
00000000                            cp:		macro
00000000                            		if instr("a b c d e h l (hl) ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $b8+zreg
00000000                            		elseif strcmp("\1","ixh")
00000000                            		dc.w $ddbc
00000000                            		elseif strcmp("\1","ixl")
00000000                            		dc.w $ddbd
00000000                            		elseif strcmp("\1","iyh")
00000000                            		dc.w $fdbc
00000000                            		elseif strcmp("\1","iyl")
00000000                            		dc.w $fdbd
00000000                            		elseif instr("\1","(i") ; cp (ix+n)
00000000                            		dc3 $ddbe00+\1
00000000                            		else			; cp n
00000000                            		dc.b $fe, \1
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            cpd:		macros
00000000                            		dc.w $eda9
00000000                            
00000000                            
00000000                            cpdr:		macros
00000000                            		dc.w $edb9
00000000                            
00000000                            
00000000                            cpi:		macros
00000000                            		dc.w $eda1
00000000                            
00000000                            
00000000                            cpir:		macros
00000000                            		dc.w $edb1
00000000                            
00000000                            
00000000                            cpl:		macros
00000000                            		dc.b $2f
00000000                            
00000000                            
00000000                            daa:		macros
00000000                            		dc.b $27
00000000                            
00000000                            
00000000                            dec:		macro
00000000                            		if instr("a b c d e h l ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $5+(zreg*8)
00000000                            		elseif strcmp("\1","ixh")
00000000                            		dc.w $dd25
00000000                            		elseif strcmp("\1","ixl")
00000000                            		dc.w $dd2d
00000000                            		elseif strcmp("\1","iyh")
00000000                            		dc.w $fd25
00000000                            		elseif strcmp("\1","iyl")
00000000                            		dc.w $fd2d
00000000                            		elseif strcmp("\1","bc")
00000000                            		dc.b $b
00000000                            		elseif strcmp("\1","de")
00000000                            		dc.b $1b
00000000                            		elseif strcmp("\1","hl")
00000000                            		dc.b $2b
00000000                            		elseif strcmp("\1","ix")
00000000                            		dc.w $dd2b
00000000                            		elseif strcmp("\1","iy")
00000000                            		dc.w $fd2b
00000000                            		elseif strcmp("\1","sp")
00000000                            		dc.b $3b
00000000                            		elseif instr("\1","(i")		; dec (ix+n)
00000000                            		dc3 $dd3500+\1
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            di:		macros
00000000                            		dc.b $f3
00000000                            
00000000                            
00000000                            djnz:		macros
00000000                            		dc.b $10, \1-*-2
00000000                            
00000000                            
00000000                            ei:		macros
00000000                            		dc.b $fb
00000000                            
00000000                            
00000000                            ex:		macro
00000000                            		if strcmp("\_","af,af")		; ex af,af'
00000000                            		dc.b 8
00000000                            		elseif strcmp("\_","(sp),hl")
00000000                            		dc.b $e3
00000000                            		elseif strcmp("\_","(sp),ix")
00000000                            		dc.w $dde3
00000000                            		elseif strcmp("\_","(sp),iy")
00000000                            		dc.w $fde3
00000000                            		elseif strcmp("\_","de,hl")
00000000                            		dc.b $eb
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            exx:		macros
00000000                            		dc.b $d9
00000000                            
00000000                            
00000000                            halt:		macros
00000000                            		dc.b $76
00000000                            
00000000                            
00000000                            im:		macro
00000000                            		if \1=0
00000000                            		dc.w $ed46
00000000                            		elseif \1=1
00000000                            		dc.w $ed56
00000000                            		elseif \1=2
00000000                            		dc.w $ed5e
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            in:		macro
00000000                            		if strcmp("\1","a")
00000000                            			if strcmp("\2","(c)")
00000000                            			dc.w $ed78
00000000                            			else		; in a,n
00000000                            			dc.b $db, \2
00000000                            			endc
00000000                            		elseif instr("b c d e h l ","\1\ ")&strcmp("\2","(c)")
00000000                            		getzreg	\1
00000000                            		dc.w $ed40+(zreg*8)
00000000                            		elseif strcmp("\1","(c)")
00000000                            		dc.w $ed70
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            inc:		macro
00000000                            		if instr("a b c d e h l ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $4+(zreg*8)
00000000                            		elseif strcmp("\1","ixh")
00000000                            		dc.w $dd24
00000000                            		elseif strcmp("\1","ixl")
00000000                            		dc.w $dd2c
00000000                            		elseif strcmp("\1","iyh")
00000000                            		dc.w $fd24
00000000                            		elseif strcmp("\1","iyl")
00000000                            		dc.w $fd2c
00000000                            		elseif strcmp("\1","bc")
00000000                            		dc.b $3
00000000                            		elseif strcmp("\1","de")
00000000                            		dc.b $13
00000000                            		elseif strcmp("\1","hl")
00000000                            		dc.b $23
00000000                            		elseif strcmp("\1","ix")
00000000                            		dc.w $dd23
00000000                            		elseif strcmp("\1","iy")
00000000                            		dc.w $fd23
00000000                            		elseif strcmp("\1","sp")
00000000                            		dc.b $33
00000000                            		elseif instr("\1","(i") ; inc (ix+n)
00000000                            		dc3 $dd3400+\1
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            ind:		macros
00000000                            		dc.w $edaa
00000000                            
00000000                            
00000000                            indr:		macros
00000000                            		dc.w $edba
00000000                            
00000000                            
00000000                            ini:		macros
00000000                            		dc.w $eda2
00000000                            
00000000                            
00000000                            inir:		macros
00000000                            		dc.w $edb2
00000000                            
00000000                            
00000000                            jp:		macro
00000000                            		if strcmp("\1","(hl)")
00000000                            		dc.b $e9
00000000                            		elseif strcmp("\1","(ix)")
00000000                            		dc.w $dde9
00000000                            		elseif strcmp("\1","(iy)")
00000000                            		dc.w $fde9
00000000                            		else
00000000                            			if strcmp("\1","nz")
00000000                            			dc.b $c2
00000000                            			elseif strcmp("\1","z")
00000000                            			dc.b $ca
00000000                            			elseif strcmp("\1","nc")
00000000                            			dc.b $d2
00000000                            			elseif strcmp("\1","c")
00000000                            			dc.b $da
00000000                            			elseif strcmp("\1","po")
00000000                            			dc.b $e2
00000000                            			elseif strcmp("\1","pe")
00000000                            			dc.b $ea
00000000                            			elseif strcmp("\1","p")
00000000                            			dc.b $f2
00000000                            			elseif strcmp("\1","m")
00000000                            			dc.b $fa
00000000                            			else		; jp n
00000000                            			dc.b $c3
00000000                            			endc
00000000                            			if narg=2
00000000                            			shift
00000000                            			endc
00000000                            			dc.b (\1)&$ff, (\1)>>8
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            jr:		macro
00000000                            		if strcmp("\1","nz")
00000000                            		dc.b $20
00000000                            		elseif strcmp("\1","z")
00000000                            		dc.b $28
00000000                            		elseif strcmp("\1","nc")
00000000                            		dc.b $30
00000000                            		elseif strcmp("\1","c")
00000000                            		dc.b $38
00000000                            		else		; jr n
00000000                            		dc.b $18
00000000                            		endc
00000000                            		if narg=2
00000000                            		shift
00000000                            		endc
00000000                            		dc.b (\1)-*-1
00000000                            		;if (((\1)-*)>=-$80)&(((\1)-*)<=$7f)
00000000                            		;fail
00000000                            		;endc
00000000                            		endm
00000000                            
00000000                            
00000000                            ld:		macro
00000000                            		if strcmp("\1","a")
00000000                            			if instr("a b c d e h l (hl) ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.b $78+zreg
00000000                            			elseif strcmp("\2","i")
00000000                            			dc.w $ed57
00000000                            			elseif strcmp("\2","r")
00000000                            			dc.w $ed5f
00000000                            			elseif strcmp("\2","ixh")
00000000                            			dc.w $dd7c
00000000                            			elseif strcmp("\2","ixl")
00000000                            			dc.w $dd7d
00000000                            			elseif strcmp("\2","iyh")
00000000                            			dc.w $fd7c
00000000                            			elseif strcmp("\2","iyl")
00000000                            			dc.w $fd7d
00000000                            			elseif strcmp("\2","(bc)")
00000000                            			dc.b $0a
00000000                            			elseif strcmp("\2","(de)")
00000000                            			dc.b $1a
00000000                            			elseif instr("\2","(i") ; ld a,(ix+n)
00000000                            			dc3 $dd7e00+\2
00000000                            			else
00000000                            				tmp_len: = strlen("\2")
00000000                            				tmp_fc:	substr	1,1,"\2"
00000000                            				tmp_lc:	substr	tmp_len,tmp_len,"\2"
00000000                            				if strcmp("\tmp_fc","(") & strcmp("\tmp_lc",")") ; ld a,(n)
00000000                            				dc.b $3a, (\2)&$ff, (\2)>>8
00000000                            				else			; ld a,n
00000000                            				dc.b $3e, \2
00000000                            				endc
00000000                            			endc
00000000                            		elseif strcmp("\1","b")
00000000                            			if instr("a b c d e h l (hl) ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.b $40+zreg
00000000                            			elseif strcmp("\2","ixh")
00000000                            			dc.w $dd44
00000000                            			elseif strcmp("\2","ixl")
00000000                            			dc.w $dd45
00000000                            			elseif strcmp("\2","iyh")
00000000                            			dc.w $fd44
00000000                            			elseif strcmp("\2","iyl")
00000000                            			dc.w $fd45
00000000                            			elseif instr("\2","(i") ; ld b,(ix+n)
00000000                            			dc3 $dd4600+\2
00000000                            			else			; ld b,n
00000000                            			dc.b $6, \2
00000000                            			endc
00000000                            		elseif strcmp("\1","c")
00000000                            			if instr("a b c d e h l (hl) ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.b $48+zreg
00000000                            			elseif strcmp("\2","ixh")
00000000                            			dc.w $dd4c
00000000                            			elseif strcmp("\2","ixl")
00000000                            			dc.w $dd4d
00000000                            			elseif strcmp("\2","iyh")
00000000                            			dc.w $fd4c
00000000                            			elseif strcmp("\2","iyl")
00000000                            			dc.w $fd4d
00000000                            			elseif instr("\2","(i") ; ld c,(ix+n)
00000000                            			dc3 $dd4e00+\2
00000000                            			else			; ld c,n
00000000                            			dc.b $e, \2
00000000                            			endc
00000000                            		elseif strcmp("\1","d")
00000000                            			if instr("a b c d e h l (hl) ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.b $50+zreg
00000000                            			elseif strcmp("\2","ixh")
00000000                            			dc.w $dd54
00000000                            			elseif strcmp("\2","ixl")
00000000                            			dc.w $dd55
00000000                            			elseif strcmp("\2","iyh")
00000000                            			dc.w $fd54
00000000                            			elseif strcmp("\2","iyl")
00000000                            			dc.w $fd55
00000000                            			elseif instr("\2","(i") ; ld d,(ix+n)
00000000                            			dc3 $dd5600+\2
00000000                            			else			; ld d,n
00000000                            			dc.b $16, \2
00000000                            			endc
00000000                            		elseif strcmp("\1","e")
00000000                            			if instr("a b c d e h l (hl) ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.b $58+zreg
00000000                            			elseif strcmp("\2","ixh")
00000000                            			dc.w $dd5c
00000000                            			elseif strcmp("\2","ixl")
00000000                            			dc.w $dd5d
00000000                            			elseif strcmp("\2","iyh")
00000000                            			dc.w $fd5c
00000000                            			elseif strcmp("\2","iyl")
00000000                            			dc.w $fd5d
00000000                            			elseif instr("\2","(i") ; ld e,(ix+n)
00000000                            			dc3 $dd5e00+\2
00000000                            			else			; ld e,n
00000000                            			dc.b $1e, \2
00000000                            			endc
00000000                            		elseif strcmp("\1","h")
00000000                            			if instr("a b c d e h l (hl) ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.b $60+zreg
00000000                            			elseif instr("\2","(i") ; ld h,(ix+n)
00000000                            			dc3 $dd6600+\2
00000000                            			else			; ld h,n
00000000                            			dc.b $26, \2
00000000                            			endc
00000000                            		elseif strcmp("\1","l")
00000000                            			if instr("a b c d e h l (hl) ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.b $68+zreg
00000000                            			elseif instr("\2","(i") ; ld l,(ix+n)
00000000                            			dc3 $dd6e00+\2
00000000                            			else			; ld l,n
00000000                            			dc.b $2e, \2
00000000                            			endc
00000000                            		elseif strcmp("\1","i")
00000000                            		dc.w $ed47
00000000                            		elseif strcmp("\1","r")
00000000                            		dc.w $ed4f
00000000                            		elseif strcmp("\1","ixh")
00000000                            			if instr("a b c d e ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.w $dd60+zreg
00000000                            			elseif strcmp("\2","ixh")
00000000                            			dc.w $dd64
00000000                            			elseif strcmp("\2","ixl")
00000000                            			dc.w $dd65
00000000                            			else			; ld ixh,n
00000000                            			dc.b $dd, $26, \2
00000000                            			endc
00000000                            		elseif strcmp("\1","ixl")
00000000                            			if instr("a b c d e ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.w $dd68+zreg
00000000                            			elseif strcmp("\2","ixh")
00000000                            			dc.w $dd6c
00000000                            			elseif strcmp("\2","ixl")
00000000                            			dc.w $dd6d
00000000                            			else			; ld ixl,n
00000000                            			dc.b $dd, $2e, \2
00000000                            			endc
00000000                            		elseif strcmp("\1","iyh")
00000000                            			if instr("a b c d e ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.w $fd60+zreg
00000000                            			elseif strcmp("\2","iyh")
00000000                            			dc.w $fd64
00000000                            			elseif strcmp("\2","iyl")
00000000                            			dc.w $fd65
00000000                            			else			; ld iyh,n
00000000                            			dc.b $fd, $26, \2
00000000                            			endc
00000000                            		elseif strcmp("\1","iyl")
00000000                            			if instr("a b c d e ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.w $fd68+zreg
00000000                            			elseif strcmp("\2","iyh")
00000000                            			dc.w $fd6c
00000000                            			elseif strcmp("\2","iyl")
00000000                            			dc.w $fd6d
00000000                            			else			; ld iyl,n
00000000                            			dc.b $fd, $2e, \2
00000000                            			endc
00000000                            		elseif strcmp("\1","bc")
00000000                            			tmp_len: = strlen("\2")
00000000                            			tmp_fc:	substr	1,1,"\2"
00000000                            			tmp_lc:	substr	tmp_len,tmp_len,"\2"
00000000                            			if strcmp("\tmp_fc","(") & strcmp("\tmp_lc",")") ; ld bc,(n)
00000000                            			dc.b $ed, $4b, \2&$ff, \2>>8
00000000                            			else			; ld bc,n
00000000                            			dc.b $1, (\2)&$ff, (\2)>>8
00000000                            			endc
00000000                            		elseif strcmp("\1","de")
00000000                            			tmp_len: = strlen("\2")
00000000                            			tmp_fc:	substr	1,1,"\2"
00000000                            			tmp_lc:	substr	tmp_len,tmp_len,"\2"
00000000                            			if strcmp("\tmp_fc","(") & strcmp("\tmp_lc",")") ; ld de,(n)
00000000                            			dc.b $ed, $5b, \2&$ff, \2>>8
00000000                            			else			; ld de,n
00000000                            			dc.b $11, (\2)&$ff, (\2)>>8
00000000                            			endc
00000000                            		elseif strcmp("\1","hl")
00000000                            			tmp_len: = strlen("\2")
00000000                            			tmp_fc:	substr	1,1,"\2"
00000000                            			tmp_lc:	substr	tmp_len,tmp_len,"\2"
00000000                            			if strcmp("\tmp_fc","(") & strcmp("\tmp_lc",")") ; ld hl,(n)
00000000                            			dc.b $ed, $6b, \2&$ff, \2>>8
00000000                            			else			; ld hl,n
00000000                            			dc.b $21, (\2)&$ff, (\2)>>8
00000000                            			endc
00000000                            		elseif strcmp("\1","sp")
00000000                            			if strcmp("\2","hl")
00000000                            			dc.b $f9
00000000                            			elseif strcmp("\2","ix")
00000000                            			dc.w $ddf9
00000000                            			elseif strcmp("\2","iy")
00000000                            			dc.w $fdf9
00000000                            			else
00000000                            				tmp_len: = strlen("\2")
00000000                            				tmp_fc:	substr	1,1,"\2"
00000000                            				tmp_lc:	substr	tmp_len,tmp_len,"\2"
00000000                            				if strcmp("\tmp_fc","(") & strcmp("\tmp_lc",")") ; ld sp,(n)
00000000                            				dc.b $ed, $7b, \2&$ff, \2>>8
00000000                            				else			; ld sp,n
00000000                            				dc.b $31, (\2)&$ff, (\2)>>8
00000000                            				endc
00000000                            			endc
00000000                            		elseif strcmp("\1","ix")
00000000                            			tmp_len: = strlen("\2")
00000000                            			tmp_fc:	substr	1,1,"\2"
00000000                            			tmp_lc:	substr	tmp_len,tmp_len,"\2"
00000000                            			if strcmp("\tmp_fc","(") & strcmp("\tmp_lc",")") ; ld ix,(n)
00000000                            			dc.b $dd, $2a, \2&$ff, \2>>8
00000000                            			else			; ld ix,n
00000000                            			dc.b $dd, $21, (\2)&$ff, (\2)>>8
00000000                            			endc
00000000                            		elseif strcmp("\1","iy")
00000000                            			tmp_len: = strlen("\2")
00000000                            			tmp_fc:	substr	1,1,"\2"
00000000                            			tmp_lc:	substr	tmp_len,tmp_len,"\2"
00000000                            			if strcmp("\tmp_fc","(") & strcmp("\tmp_lc",")") ; ld iy,(n)
00000000                            			dc.b $fd, $2a, \2&$ff, \2>>8
00000000                            			else			; ld iy,n
00000000                            			dc.b $fd, $21, (\2)&$ff, (\2)>>8
00000000                            			endc
00000000                            		elseif strcmp("\1","(bc)")
00000000                            		dc.b 2
00000000                            		elseif strcmp("\1","(de)")
00000000                            		dc.b $12
00000000                            		elseif strcmp("\1","(hl)")
00000000                            			if instr("a b c d e h l ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.b $70+zreg
00000000                            			else			; ld (hl),n
00000000                            			dc.b $36, \2
00000000                            			endc
00000000                            		elseif instr("\1","(i")		; ld (ix+n),?
00000000                            			if instr("a b c d e h l ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc3 $dd7000+(zreg*$100)+\1
00000000                            			else			; ld (ix+n),n
00000000                            			dc3 $dd3600+\1
00000000                            			dc.b \2
00000000                            			endc
00000000                            		else			; ld (n),?
00000000                            			if strcmp("\2","a")
00000000                            			dc.b $32
00000000                            			elseif strcmp("\2","bc")
00000000                            			dc.w $ed43
00000000                            			elseif strcmp("\2","de")
00000000                            			dc.w $ed53
00000000                            			elseif strcmp("\2","hl")
00000000                            			dc.w $ed63
00000000                            			elseif strcmp("\2","sp")
00000000                            			dc.w $ed73
00000000                            			elseif strcmp("\2","ix")
00000000                            			dc.w $dd22
00000000                            			elseif strcmp("\2","iy")
00000000                            			dc.w $fd22
00000000                            			else
00000000                            			fail
00000000                            			endc
00000000                            			dc.b \1&$ff, \1>>8
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            ldd:		macros
00000000                            		dc.w $eda8
00000000                            
00000000                            
00000000                            lddr:		macros
00000000                            		dc.w $edb8
00000000                            
00000000                            
00000000                            ldi:		macros
00000000                            		dc.w $eda0
00000000                            
00000000                            
00000000                            ldir:		macros
00000000                            		dc.w $edb0
00000000                            
00000000                            
00000000                            otdr:		macros
00000000                            		dc.w $edbb
00000000                            
00000000                            
00000000                            otir:		macros
00000000                            		dc.w $edb3
00000000                            
00000000                            
00000000                            out:		macro
00000000                            		if strcmp("\1","(c)")&instr("a b c d e h l ","\2\ ")
00000000                            		getzreg	\2
00000000                            		dc.w $ed41+(zreg*8)
00000000                            		elseif strcmp("\_","(c),0")
00000000                            		dc.w $ed71
00000000                            		elseif strcmp("\2","a")	; out n,a
00000000                            		dc.b $d3, \1
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            outd:		macros
00000000                            		dc.w $edab
00000000                            
00000000                            
00000000                            outi:		macros
00000000                            		dc.w $eda3
00000000                            
00000000                            
00000000                            pop:		macro
00000000                            		if strcmp("\1","bc")
00000000                            		dc.b $c1
00000000                            		elseif strcmp("\1","de")
00000000                            		dc.b $d1
00000000                            		elseif strcmp("\1","hl")
00000000                            		dc.b $e1
00000000                            		elseif strcmp("\1","af")
00000000                            		dc.b $f1
00000000                            		elseif strcmp("\1","ix")
00000000                            		dc.w $dde1
00000000                            		elseif strcmp("\1","iy")
00000000                            		dc.w $fde1
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            push:		macro
00000000                            		if strcmp("\1","bc")
00000000                            		dc.b $c5
00000000                            		elseif strcmp("\1","de")
00000000                            		dc.b $d5
00000000                            		elseif strcmp("\1","hl")
00000000                            		dc.b $e5
00000000                            		elseif strcmp("\1","af")
00000000                            		dc.b $f5
00000000                            		elseif strcmp("\1","ix")
00000000                            		dc.w $fde5
00000000                            		elseif strcmp("\1","iy")
00000000                            		dc.w $fde5
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            res:		macro
00000000                            		if instr("a b c d e h l (hl) ","\2\ ")
00000000                            		getzreg	\2
00000000                            		dc.b $cb, $80+(\1*8)+zreg
00000000                            		elseif instr("\2","(i") ; res n,(ix+n)
00000000                            		dc3 $ddcb00+\2
00000000                            		dc.b $80+((\1)*8)
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            ret:		macro
00000000                            		if strcmp("\1","nz")
00000000                            		dc.b $c0
00000000                            		elseif strcmp("\1","z")
00000000                            		dc.b $c8
00000000                            		elseif strcmp("\1","nc")
00000000                            		dc.b $d0
00000000                            		elseif strcmp("\1","c")
00000000                            		dc.b $d8
00000000                            		elseif strcmp("\1","po")
00000000                            		dc.b $e0
00000000                            		elseif strcmp("\1","pe")
00000000                            		dc.b $e8
00000000                            		elseif strcmp("\1","p")
00000000                            		dc.b $f0
00000000                            		elseif strcmp("\1","m")
00000000                            		dc.b $f8
00000000                            		elseif strlen("\1")=0	; ret
00000000                            		dc.b $c9
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            reti:		macros
00000000                            		dc.w $ed4d
00000000                            
00000000                            
00000000                            retn:		macros
00000000                            		dc.w $ed45
00000000                            
00000000                            
00000000                            rl:		macro
00000000                            		if instr("a b c d e h l (hl) ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $cb, $10+zreg
00000000                            		elseif instr("\1","(i") ; rl (ix+n)
00000000                            		dc3 $ddcb00+\1
00000000                            			if narg=2	; rl (ix+n),?
00000000                            			getzreg	\2
00000000                            			dc.b $10+zreg
00000000                            			else
00000000                            			dc.b $16
00000000                            			endc
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            rla:		macros
00000000                            		dc.b $17
00000000                            
00000000                            
00000000                            rlc:		macro
00000000                            		if instr("a b c d e h l (hl) ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $cb, zreg
00000000                            		elseif instr("\1","(i") ; rlc (ix+n)
00000000                            		dc3 $ddcb00+\1
00000000                            			if narg=2	; rlc (ix+n),?
00000000                            			getzreg	\2
00000000                            			dc.b zreg
00000000                            			else
00000000                            			dc.b $6
00000000                            			endc
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            rlca:		macros
00000000                            		dc.b $7
00000000                            
00000000                            
00000000                            rld:		macros
00000000                            		dc.w $ed6f
00000000                            
00000000                            
00000000                            rr:		macro
00000000                            		if instr("a b c d e h l (hl) ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $cb, $18+zreg
00000000                            		elseif instr("\1","(i") ; rr (ix+n)
00000000                            		dc3 $ddcb00+\1
00000000                            			if narg=2	; rr (ix+n),?
00000000                            			getzreg	\2
00000000                            			dc.b $18+zreg
00000000                            			else
00000000                            			dc.b $1e
00000000                            			endc
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            rra:		macros
00000000                            		dc.b $1f
00000000                            
00000000                            
00000000                            rrc:		macro
00000000                            		if instr("a b c d e h l (hl) ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $cb, $8+zreg
00000000                            		elseif instr("\1","(i") ; rrc (ix+n)
00000000                            		dc3 $ddcb00+\1
00000000                            			if narg=2	; rrc (ix+n),?
00000000                            			getzreg	\2
00000000                            			dc.b $8+zreg
00000000                            			else
00000000                            			dc.b $e
00000000                            			endc
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            rrca:		macros
00000000                            		dc.b $f
00000000                            
00000000                            
00000000                            rrd:		macros
00000000                            		dc.w $ed67
00000000                            
00000000                            
00000000                            rst:		macros
00000000                            		dc.b $c7+(\1&$38)
00000000                            
00000000                            
00000000                            sbc:		macro
00000000                            		if strcmp("\1","a")
00000000                            			if instr("a b c d e h l (hl) ","\2\ ")
00000000                            			getzreg	\2
00000000                            			dc.b $98+zreg
00000000                            			elseif strcmp("\2","ixh")
00000000                            			dc.w $dd9c
00000000                            			elseif strcmp("\2","ixl")
00000000                            			dc.w $dd9d
00000000                            			elseif strcmp("\2","iyh")
00000000                            			dc.w $fd9c
00000000                            			elseif strcmp("\2","iyl")
00000000                            			dc.w $fd9d
00000000                            			elseif instr("\2","(i") ; sbc a,(ix+n)
00000000                            			dc3 $dd9e00+\2
00000000                            			else			; sbc a,n
00000000                            			dc.b $de, \2
00000000                            			endc
00000000                            		elseif strcmp("\1","hl")
00000000                            			if strcmp("\2","bc")
00000000                            			dc.w $ed42
00000000                            			elseif strcmp("\2","de")
00000000                            			dc.w $ed52
00000000                            			elseif strcmp("\2","hl")
00000000                            			dc.w $ed62
00000000                            			elseif strcmp("\2","sp")
00000000                            			dc.w $ed72
00000000                            			else
00000000                            			fail
00000000                            			endc
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            scf:		macros
00000000                            		dc.b $37
00000000                            
00000000                            
00000000                            set:		macro
00000000                            		if instr("a b c d e h l (hl) ","\2\ ")
00000000                            		getzreg	\2
00000000                            		dc.b $cb, $c0+(\1*8)+zreg
00000000                            		elseif instr("\2","(i") ; set n,(ix+n)
00000000                            		dc3 $ddcb00+\2
00000000                            		dc.b $c0+((\1)*8)
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            sla:		macro
00000000                            		if instr("a b c d e h l (hl) ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $cb, $20+zreg
00000000                            		elseif instr("\1","(i")
00000000                            		dc3 $ddcb00+\1
00000000                            			if narg=2	; sla (ix+n),?
00000000                            			getzreg	\2
00000000                            			dc.b $20+zreg
00000000                            			else		; sla (ix+n)
00000000                            			dc.b $26
00000000                            			endc
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            sll:		macro
00000000                            		if instr("a b c d e h l (hl) ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $cb, $30+zreg
00000000                            		elseif instr("\1","(i")
00000000                            		dc3 $ddcb00+\1
00000000                            			if narg=2	; sll (ix+n),?
00000000                            			getzreg	\2
00000000                            			dc.b $30+zreg
00000000                            			else		; sll (ix+n)
00000000                            			dc.b $36
00000000                            			endc
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            sra:		macro
00000000                            		if instr("a b c d e h l (hl) ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $cb, $28+zreg
00000000                            		elseif instr("\1","(i")
00000000                            		dc3 $ddcb00+\1
00000000                            			if narg=2	; sra (ix+n),?
00000000                            			getzreg	\2
00000000                            			dc.b $28+zreg
00000000                            			else		; sra (ix+n)
00000000                            			dc.b $2e
00000000                            			endc
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            srl:		macro
00000000                            		if instr("a b c d e h l (hl) ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $cb, $38+zreg
00000000                            		elseif instr("\1","(i")
00000000                            		dc3 $ddcb00+\1
00000000                            			if narg=2	; srl (ix+n),?
00000000                            			getzreg	\2
00000000                            			dc.b $38+zreg
00000000                            			else		; srl (ix+n)
00000000                            			dc.b $3e
00000000                            			endc
00000000                            		else
00000000                            		fail
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            xor:		macro
00000000                            		if instr("a b c d e h l (hl) ","\1\ ")
00000000                            		getzreg	\1
00000000                            		dc.b $a8+zreg
00000000                            		elseif strcmp("\1","ixh")
00000000                            		dc.w $ddac
00000000                            		elseif strcmp("\1","ixl")
00000000                            		dc.w $ddad
00000000                            		elseif strcmp("\1","iyh")
00000000                            		dc.w $fdac
00000000                            		elseif strcmp("\1","iyl")
00000000                            		dc.w $fdad
00000000                            		elseif instr("\1","(i") ; xor (ix+n)
00000000                            		dc3 $ddae00+\1
00000000                            		else			; xor n
00000000                            		dc.b $ee, \1
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            db:		macros
00000000                            		dc.b \_
00000000                            
00000000                            
00000000                            dw:		macro
00000000                            		rept narg
00000000                            		dc.b (\1)&$ff, (\1)>>8
00000000                            		shift
00000000                            		endr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Mixed instruction set
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            add:		macro
00000000                            		if cpu_mode=1		; Z80
00000000                            			if strcmp("\1","a")
00000000                            				if instr("a b c d e h l (hl) ","\2\ ")
00000000                            				getzreg	\2
00000000                            				dc.b $80+zreg
00000000                            				elseif strcmp("\2","ixh")
00000000                            				dc.w $dd84
00000000                            				elseif strcmp("\2","ixl")
00000000                            				dc.w $dd85
00000000                            				elseif strcmp("\2","iyh")
00000000                            				dc.w $fd84
00000000                            				elseif strcmp("\2","iyl")
00000000                            				dc.w $fd85
00000000                            				elseif instr("\2","(i") ; add a,(ix+n)
00000000                            				dc3 $dd8600+\2
00000000                            				else			; add a,n
00000000                            				dc.b $c6, \2
00000000                            				endc
00000000                            			elseif strcmp("\1","hl")
00000000                            				if strcmp("\2","bc")
00000000                            				dc.b $9
00000000                            				elseif strcmp("\2","de")
00000000                            				dc.b $19
00000000                            				elseif strcmp("\2","hl")
00000000                            				dc.b $29
00000000                            				elseif strcmp("\2","sp")
00000000                            				dc.b $39
00000000                            				else
00000000                            				fail
00000000                            				endc
00000000                            			elseif strcmp("\1","ix")
00000000                            				if strcmp("\2","bc")
00000000                            				dc.w $dd09
00000000                            				elseif strcmp("\2","de")
00000000                            				dc.w $dd19
00000000                            				elseif strcmp("\2","ix")
00000000                            				dc.w $dd29
00000000                            				elseif strcmp("\2","sp")
00000000                            				dc.w $dd39
00000000                            				else
00000000                            				fail
00000000                            				endc
00000000                            			elseif strcmp("\1","iy")
00000000                            				if strcmp("\2","bc")
00000000                            				dc.w $fd09
00000000                            				elseif strcmp("\2","de")
00000000                            				dc.w $fd19
00000000                            				elseif strcmp("\2","iy")
00000000                            				dc.w $fd29
00000000                            				elseif strcmp("\2","sp")
00000000                            				dc.w $fd39
00000000                            				else
00000000                            				fail
00000000                            				endc
00000000                            			else
00000000                            			fail
00000000                            			endc
00000000                            		else			; 68k
00000000                            		axd.\0	\_
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            and:		macro
00000000                            		if cpu_mode=1		; Z80
00000000                            			if instr("a b c d e h l (hl) ","\1\ ")
00000000                            			getzreg	\2
00000000                            			dc.b $a0+zreg
00000000                            			elseif strcmp("\1","ixh")
00000000                            			dc.w $dda4
00000000                            			elseif strcmp("\1","ixl")
00000000                            			dc.w $dda5
00000000                            			elseif strcmp("\1","iyh")
00000000                            			dc.w $fda4
00000000                            			elseif strcmp("\1","iyl")
00000000                            			dc.w $fda5
00000000                            			elseif instr("\1","(i") ; and (ix+n)
00000000                            			dc3 $dda600+\1
00000000                            			else			; and n
00000000                            			dc.b $e6, \1
00000000                            			endc
00000000                            		else			; 68k
00000000                            		anx.\0	\_
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            neg:		macro
00000000                            		if cpu_mode=1		; Z80
00000000                            		dc.w $ed44
00000000                            		else			; 68k
00000000                            		nxg
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            nop:		macro
00000000                            		if cpu_mode=1		; Z80
00000000                            		dc.b 0
00000000                            		else			; 68k
00000000                            		nxp
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            or:		macro
00000000                            		if cpu_mode=1		; Z80
00000000                            			if instr("a b c d e h l (hl) ","\1\ ")
00000000                            			getzreg	\1
00000000                            			dc.b $b0+zreg
00000000                            			elseif strcmp("\1","ixh")
00000000                            			dc.w $ddb4
00000000                            			elseif strcmp("\1","ixl")
00000000                            			dc.w $ddb5
00000000                            			elseif strcmp("\1","iyh")
00000000                            			dc.w $fdb4
00000000                            			elseif strcmp("\1","iyl")
00000000                            			dc.w $fdb5
00000000                            			elseif instr("\1","(i") ; or (ix+n)
00000000                            			dc3 $ddb600+\1
00000000                            			else			; or n
00000000                            			dc.b $f6, \1
00000000                            			endc
00000000                            		else			; 68k
00000000                            		ox.\0	\_
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            
00000000                            sub:		macro
00000000                            		if cpu_mode=1		; Z80
00000000                            			if instr("a b c d e h l (hl) ","\1\ ")
00000000                            			getzreg	\2
00000000                            			dc.b $90+zreg
00000000                            			elseif strcmp("\1","ixh")
00000000                            			dc.w $dd94
00000000                            			elseif strcmp("\1","ixl")
00000000                            			dc.w $dd95
00000000                            			elseif strcmp("\1","iyh")
00000000                            			dc.w $fd94
00000000                            			elseif strcmp("\1","iyl")
00000000                            			dc.w $fd95
00000000                            			elseif instr("\1","(i") ; sub (ix+n)
00000000                            			dc3 $dd9600+\1
00000000                            			else			; sub n
00000000                            			dc.b $d6, \1
00000000                            			endc
00000000                            		else			; 68k
00000000                            		sxb.\0	\_
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Restored ASM68k instruction set
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            adda:		macros
00000000                            		axda.\0	\_
00000000                            
00000000                            addi:		macros
00000000                            		axdi.\0	\_
00000000                            
00000000                            addq:		macros
00000000                            		axdq.\0	\_
00000000                            
00000000                            addx:		macros
00000000                            		axdx.\0	\_
00000000                            
00000000                            andi:		macros
00000000                            		anxi.\0	\_
00000000                            
00000000                            negx:		macros
00000000                            		nxgx.\0	\_
00000000                            
00000000                            ori:		macros
00000000                            		oxi.\0	\_
00000000                            
00000000                            suba:		macros
00000000                            		sxba.\0	\_
00000000                            
00000000                            subi:		macros
00000000                            		sxbi.\0	\_
00000000                            
00000000                            subq:		macros
00000000                            		sxbq.\0	\_
00000000                            
00000000                            subx:		macros
00000000                            		sxbx.\0	\_
00000000                            		sxbx.\0	\_
00000000                            		include   "Debugger.asm"
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Error handling and debugging modules
00000000                            ; 2016-2017, Vladikcomper
00000000                            ; 2020 mod - AURORA FIELDS
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugging macros definitions file
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ----------------------------
00000000                            ; Arguments formatting flags
00000000                            ; ----------------------------
00000000                            
00000000                            ; General arguments format flags
00000000 =00000080                  hex		equ		$80				; flag to display as hexadecimal number
00000000 =00000090                  deci		equ		$90				; flag to display as decimal number
00000000 =000000A0                  bin		equ		$A0				; flag to display as binary number
00000000 =000000B0                  sym		equ		$B0				; flag to display as symbol (treat as offset, decode into symbol +displacement, if present)
00000000 =000000C0                  symdisp		equ		$C0				; flag to display as symbol's displacement alone (DO NOT USE, unless complex formatting is required, see notes below)
00000000 =000000DF                  str		equ		$DF				; flag to display as string (treat as offset, insert string from that offset)
00000000 =000000D0                  asm		equ		$D0				; flag to display as code (treat as offset, decode from that offset)
00000000                            
00000000                            ; NOTES:
00000000                            ;	* By default, the "sym" flag displays both symbol and displacement (e.g.: "Map_Sonic+$2E")
00000000                            ;		In case, you need a different formatting for the displacement part (different text color and such),
00000000                            ;		use "sym|split", so the displacement won't be displayed until symdisp is met
00000000                            ;	* The "symdisp" can only be used after the "sym|split" instance, which decodes offset, otherwise, it'll
00000000                            ;		display a garbage offset.
00000000                            ;	* No other argument format flags (hex, dec, bin, str) are allowed between "sym|split" and "symdisp",
00000000                            ;		otherwise, the "symdisp" results are undefined.
00000000                            ;	* When using "str" flag, the argument should point to string offset that will be inserted.
00000000                            ;		Arguments format flags CAN NOT be used in the string (as no arguments are meant to be here),
00000000                            ;		only console control flags (see below).
00000000                            ;	* The "asm" flag will use "setpat" flag to switch text color, and will reset pattern to normal again.
00000000                            ;		you must reapply any pattern you used before yourself.
00000000                            ;	* The "asm" flag will overwrite $FF0000-$FF0080, so be careful when viewing RAM.
00000000                            
00000000                            
00000000                            ; Additional flags ...
00000000                            ; ... for number formatters (hex, dec, bin)
00000000 =00000008                  signed	equ		8				; treat number as signed (display + or - before the number depending on sign)
00000000                            
00000000                            ; ... for symbol formatter (sym)
00000000 =00000008                  split	equ		8				; DO NOT write displacement (if present), skip and wait for "symdisp" flag to write it later (optional)
00000000 =00000004                  forced	equ		4				; display "<unknown>" if symbol was not found, otherwise, plain offset is displayed by the displacement formatter
00000000                            
00000000                            ; ... for symbol displacement formatter (symdisp)
00000000 =00000008                  weak	equ		8				; DO NOT write plain offset if symbol is displayed as "<unknown>"
00000000                            
00000000                            ; Argument type flags:
00000000                            ; - DO NOT USE in formatted strings processed by macros, as these are included automatically
00000000                            ; - ONLY USE when writting down strings manually with DC.B
00000000 =00000000                  byte	equ		0
00000000 =00000001                  word	equ		1
00000000 =00000003                  long	equ		3
00000000                            
00000000                            ; -----------------------
00000000                            ; Console control flags
00000000                            ; -----------------------
00000000                            
00000000                            ; Plain control flags: no arguments following
00000000 =000000E0                  endl	equ		$E0				; "End of line": flag for line break
00000000 =000000E6                  cr	equ		$E6				; "Carriage return": jump to the beginning of the line
00000000 =000000E8                  pal0	equ		$E8				; use palette line #0
00000000 =000000EA                  pal1	equ		$EA				; use palette line #1
00000000 =000000EC                  pal2	equ		$EC				; use palette line #2
00000000 =000000EE                  pal3	equ		$EE				; use palette line #3
00000000                            
00000000                            ; Parametrized control flags: followed by 1-byte argument
00000000 =000000F0                  setw	equ		$F0				; set line width: number of characters before automatic line break
00000000 =000000F4                  setoff	equ		$F4				; set tile offset: lower byte of base pattern, which points to tile index of ASCII character 00
00000000 =000000F8                  setpat	equ		$F8				; set tile pattern: high byte of base pattern, which determines palette flags and $100-tile section id
00000000 =000000FA                  setx	equ		$FA				; set x-position
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            RaiseError &
00000000                            
00000000                            	pea	*(pc)
00000000                            	move.w	sr, -(sp)
00000000                            	__FSTRING_GenerateArgumentsCode \string
00000000                            	jsr		ErrorHandler
00000000                            	__FSTRING_GenerateDecodedString \string
00000000                            	if strlen("\console_program")						; if console program offset is specified ...
00000000                            		dc.b	\opts+_eh_enter_console|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            		even								; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            		jmp	\console_program					; ... an aligned "jmp" instruction that calls console program itself
00000000                            	else
00000000                            		dc.b	\opts+0							; otherwise, just specify \opts for error handler, +0 will generate dc.b 0 ...
00000000                            		even								; ... in case \opts argument is empty or skipped
00000000                            	endc
00000000                            	even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            Console &
00000000                            
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea	4*4(sp), a2
00000000                            		endc
00000000                            		lea	@str\@(pc), a1
00000000                            		jsr	ErrorHandler.__global__console_\0\_formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea	__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            
00000000                            	elseif strcmp("\0","run")
00000000                            		jsr	ErrorHandler.__extern__console_only
00000000                            		jsr	\1
00000000                            		bra.s	*
00000000                            
00000000                            	elseif strcmp("\0","setxy")
00000000                            		move.w	sr, -(sp)
00000000                            		movem.l	d0-d1, -(sp)
00000000                            		move.w	\2, -(sp)
00000000                            		move.w	\1, -(sp)
00000000                            		jsr	ErrorHandler.__global__console_setposasxy_stack
00000000                            		addq.w	#4, sp
00000000                            		movem.l	(sp)+, d0-d1
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	elseif strcmp("\0","breakline")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr	ErrorHandler.__global__console_startnewline
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""Console"""
00000000                            
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __ErrorMessage &
00000000                            		__FSTRING_GenerateArgumentsCode \string
00000000                            		jsr		ErrorHandler
00000000                            		__FSTRING_GenerateDecodedString \string
00000000                            		dc.b	\opts+0
00000000                            		even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateArgumentsCode &
00000000                            
00000000                            	__pos:	set 	instr(\string,'%<')				; token position
00000000                            	__stack:set	0						; size of actual stack
00000000                            	__sp:	set	0						; stack displacement
00000000                            
00000000                            	; Parse string itself
00000000                            	while (__pos)
00000000                            
00000000                            		; Retrive expression in brackets following % char
00000000                                	__endpos:	set	instr(__pos+1,\string,'>')
00000000                                	__midpos:	set	instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__substr:	substr	__pos+1+1,__endpos-1,\string		; .type ea param
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string		; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %(.w d0 hex) )
00000000                            		if "\__type">>8="."
00000000                            			__operand:	substr	__pos+1+1,__midpos-1,\string	; .type ea
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string	; param
00000000                            
00000000                            			if "\__type"=".b"
00000000                            				pushp	"move\__operand\,1(sp)"
00000000                            				pushp	"subq.w	#2, sp"
00000000                            				__stack: = __stack+2
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".w"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".l"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+4
00000000                            
00000000                            			else
00000000                            				fatal 'Unrecognized type in string operand: %<\__substr>'
00000000                            			endc
00000000                            		endc
00000000                            
00000000                            		__pos:	set	instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Generate stack code
00000000                            	rept __stack
00000000                            		popp	__command
00000000                            		\__command
00000000                            	endr
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateDecodedString &
00000000                            
00000000                            	__lpos:	set	1						; start position
00000000                            	__pos:	set 	instr(\string,'%<')				; token position
00000000                            
00000000                            	while (__pos)
00000000                            
00000000                            		; Write part of string before % token
00000000                            		__substr:	substr	__lpos,__pos-1,\string
00000000                            		dc.b	"\__substr"
00000000                            
00000000                            		; Retrive expression in brakets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string		; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %<.w d0 hex> )
00000000                            		if "\__type">>8="."
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string	; param
00000000                            			if strlen("\__param")<1
00000000                            				__param: substr ,,"hex"			; if param is ommited, set it to "hex"
00000000                            			endc
00000000                            			if "\__type"=".b"
00000000                            				dc.b	\__param
00000000                            			elseif "\__type"=".w"
00000000                            				dc.b	\__param|1
00000000                            			else
00000000                            				dc.b	\__param|3
00000000                            			endc
00000000                            
00000000                            		; Expression is an inline constant (e.g. %<endl> )
00000000                            		else
00000000                            			__substr:	substr	__pos+1+1,__endpos-1,\string
00000000                            			dc.b	\__substr
00000000                            		endc
00000000                            
00000000                            		__lpos:	set	__endpos+1
00000000                            		__pos:	set	instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Write part of string before the end
00000000                            	__substr:	substr	__lpos,,\string
00000000                            	dc.b	"\__substr"
00000000                            	dc.b	0
00000000                            	endm
00000000                            	endm
00000000                            
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            	
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  MegaDrive:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2852 2942 4E44 5620 3230+  Date:		dc.b '(R)BNDV 2021.SEP' ; Release date
00000120 5355 5045 5220 4D41 5249+  Title_Local:	dc.b 'SUPER MARIOWORLD                                ' ; Domestic name
00000150 5355 5045 5220 4D41 5249+  Title_Int:	dc.b 'SUPER MARIOWORLD                                ' ; International name
00000180 474D 2042 3139 4544 3438+  Serial:		dc.b 'GM B19ED489-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0                            SRAMSupport:
000001B0 5241 F820                  		dc.b	"RA",$F8,$20
000001B4 0020 0001                  		dc.l $200001		; SRAM start
000001B8 0020 FFFF                  		dc.l $20FFFF		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA                            		obj 0
0000000C EDB0                       		ldir		; loop to fill the stack (entire remaining available Z80 RAM) with 0
0000001A D9                         		exx		; swap bc/de/hl with their shadow registers too
00000020 F3                         		di		; clear iff1 (for interrupt handler)
00000026                            zStartupCodeEndLoc:
00000026                            		objend
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	MartyrSplash	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6 4E75                       		rts	
000003A8                            ; ===========================================================================
000003A8                            
000003A8                            CheckSumError:
000003A8 6100 0000                  		bsr.w	VDPSetupGame
000003AC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003B6 7E3F                       		moveq	#$3F,d7
000003B8                            
000003B8                            CheckSum_Red:
000003B8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003C0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003C4                            
000003C4                            CheckSum_Loop:
000003C4 60FE                       		bra.s	CheckSum_Loop
000003C6                            
000003C6                            ; ===========================================================================
000003C6                            
000003C6                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
000008E6                            		even
000008E6                            
000008E6                            ; ===========================================================================
000008E6                            
000008E6                            loc_B10:				; XREF: Vectors
000008E6 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000008EA 4A38 F62A                  		tst.b	($FFFFF62A).w
000008EE 6700                       		beq.s	loc_B88
000008F0 3039 00C0 0004             		move.w	($C00004).l,d0
000008F6 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000900 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000908 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
0000090E 6700                       		beq.s	loc_B42
00000910 303C 0700                  		move.w	#$700,d0
00000914                            
00000914                            loc_B3E:
00000914 51C8 FFFE                  		dbf	d0,loc_B3E
00000918                            
00000918                            loc_B42:
00000918 1038 F62A                  		move.b	($FFFFF62A).w,d0
0000091C 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000922 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000928 0240 003E                  		andi.w	#$3E,d0
0000092C 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000930 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000934                            
00000934                            loc_B5E:				; XREF: loc_B88
00000934 4EB9 0000 0000             		jsr	sub_71B4C
0000093A                            
0000093A                            loc_B64:				; XREF: loc_D50
0000093A 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
0000093E 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000942 4E73                       		rte	
00000944                            ; ===========================================================================
00000944 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000948 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
0000094C 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000950 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000954 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000958 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
0000095C 0000                       		dc.w loc_E72-off_B6E
0000095E                            ; ===========================================================================
0000095E                            
0000095E                            loc_B88:				; XREF: loc_B10; off_B6E
0000095E 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000964 6700                       		beq.s	loc_B9A
00000966 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
0000096C 6600 FFC6                  		bne.w	loc_B5E
00000970                            
00000970                            loc_B9A:
00000970 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000976 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
0000097A 3039 00C0 0004             		move.w	($C00004).l,d0
00000980 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000986 6700                       		beq.s	loc_BBA
00000988 303C 0700                  		move.w	#$700,d0
0000098C                            
0000098C                            loc_BB6:
0000098C 51C8 FFFE                  		dbf	d0,loc_BB6
00000990                            
00000990                            loc_BBA:
00000990 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000996 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
0000099E                            
0000099E                            loc_BC8:
0000099E 0839 0000 00A1 1100        		btst	#0,($A11100).l
000009A6 66F6                       		bne.s	loc_BC8
000009A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000009AC 6600                       		bne.s	loc_BFE
000009AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000009B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000009BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000009C0 3ABC 977F                  		move.w	#$977F,(a5)
000009C4 3ABC C000                  		move.w	#$C000,(a5)
000009C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000009CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000009D2 6000                       		bra.s	loc_C22
000009D4                            ; ===========================================================================
000009D4                            
000009D4                            loc_BFE:				; XREF: loc_BC8
000009D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000009DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000009E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000009E6 3ABC 977F                  		move.w	#$977F,(a5)
000009EA 3ABC C000                  		move.w	#$C000,(a5)
000009EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000009F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000009F8                            
000009F8                            loc_C22:				; XREF: loc_BC8
000009F8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000009FC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000A04 6000 FF2E                  		bra.w	loc_B5E
00000A08                            ; ===========================================================================
00000A08                            
00000A08                            loc_C32:				; XREF: off_B6E
00000A08 6100 0000                  		bsr.w	sub_106E
00000A0C                            
00000A0C                            loc_C36:				; XREF: off_B6E
00000A0C 4A78 F614                  		tst.w	($FFFFF614).w
00000A10 6700 0000                  		beq.w	locret_C42
00000A14 5378 F614                  		subq.w	#1,($FFFFF614).w
00000A18                            
00000A18                            locret_C42:
00000A18 4E75                       		rts	
00000A1A                            ; ===========================================================================
00000A1A                            
00000A1A                            loc_C44:				; XREF: off_B6E
00000A1A 6100 0000                  		bsr.w	sub_106E
00000A1E 6100 0000                  		bsr.w	sub_6886
00000A22 6100 0000                  		bsr.w	sub_1642
00000A26 4A78 F614                  		tst.w	($FFFFF614).w
00000A2A 6700 0000                  		beq.w	locret_C5C
00000A2E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000A32                            
00000A32                            locret_C5C:
00000A32 4E75                       		rts	
00000A34                            ; ===========================================================================
00000A34                            
00000A34                            loc_C5E:				; XREF: off_B6E
00000A34 6100 0000                  		bsr.w	sub_106E
00000A38 4E75                       		rts	
00000A3A                            ; ===========================================================================
00000A3A                            
00000A3A                            loc_C64:				; XREF: off_B6E
00000A3A                            loc_C6E:				; XREF: off_B6E
00000A3A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000A42                            
00000A42                            loc_C76:
00000A42 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000A4A 66F6                       		bne.s	loc_C76		; if not, branch
00000A4C 6100 0000                  		bsr.w	ReadJoypads
00000A50 4A38 F64E                  		tst.b	($FFFFF64E).w
00000A54 6600                       		bne.s	loc_CB0
00000A56 4BF9 00C0 0004             		lea	($C00004).l,a5
00000A5C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000A62 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000A68 3ABC 977F                  		move.w	#$977F,(a5)
00000A6C 3ABC C000                  		move.w	#$C000,(a5)
00000A70 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000A76 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000A7A 6000                       		bra.s	loc_CD4
00000A7C                            ; ===========================================================================
00000A7C                            
00000A7C                            loc_CB0:				; XREF: loc_C76
00000A7C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000A82 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000A88 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000A8E 3ABC 977F                  		move.w	#$977F,(a5)
00000A92 3ABC C000                  		move.w	#$C000,(a5)
00000A96 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000A9C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000AA0                            
00000AA0                            loc_CD4:				; XREF: loc_C76
00000AA0 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000AA4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000AAA 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000AB0 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000AB6 3ABC 977F                  		move.w	#$977F,(a5)
00000ABA 3ABC 7C00                  		move.w	#$7C00,(a5)
00000ABE 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000AC4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000AC8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ACE 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000AD4 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000ADA 3ABC 977F                  		move.w	#$977F,(a5)
00000ADE 3ABC 7800                  		move.w	#$7800,(a5)
00000AE2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000AE8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000AEC 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000AF2                            
00000AF2                            loc_D50:
00000AF2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000AFA 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000B00 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000B06 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000B0C 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000B12 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000B18 6400                       		bcc.s	Demo_Time
00000B1A 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000B20 588F                       		addq.l	#4,sp
00000B22 6000 FE16                  		bra.w	loc_B64
00000B26                            
00000B26                            ; ---------------------------------------------------------------------------
00000B26                            ; Subroutine to	run a demo for an amount of time
00000B26                            ; ---------------------------------------------------------------------------
00000B26                            
00000B26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000B26                            
00000B26                            
00000B26                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000B26 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000B2A 4EB9 0000 0000             		jsr	AniArt_Load
00000B30 4EB9 0000 0000             		jsr	HudUpdate
00000B36 6100 0000                  		bsr.w	sub_165E
00000B3A 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000B3E 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000B42 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000B46                            
00000B46                            Demo_TimeEnd:
00000B46 4E75                       		rts	
00000B48                            ; End of function Demo_Time
00000B48                            
00000B48                            ; ===========================================================================
00000B48                            
00000B48                            loc_DA6:				; XREF: off_B6E
00000B48 4E75                       		rts
00000B4A                            ; ===========================================================================
00000B4A                            
00000B4A                            loc_E72:				; XREF: off_B6E
00000B4A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000B52                            
00000B52                            loc_E7A:
00000B52 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000B5A 66F6                       		bne.s	loc_E7A		; if not, branch
00000B5C 6100 0000                  		bsr.w	ReadJoypads
00000B60 4A38 F64E                  		tst.b	($FFFFF64E).w
00000B64 6600                       		bne.s	loc_EB4
00000B66 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B6C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B72 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000B78 3ABC 977F                  		move.w	#$977F,(a5)
00000B7C 3ABC C000                  		move.w	#$C000,(a5)
00000B80 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000B86 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000B8A 6000                       		bra.s	loc_ED8
00000B8C                            ; ===========================================================================
00000B8C                            
00000B8C                            loc_EB4:				; XREF: loc_E7A
00000B8C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B92 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B98 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000B9E 3ABC 977F                  		move.w	#$977F,(a5)
00000BA2 3ABC C000                  		move.w	#$C000,(a5)
00000BA6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BAC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BB0                            
00000BB0                            loc_ED8:				; XREF: loc_E7A
00000BB0 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000BB4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BBA 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000BC0 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000BC6                            
00000BC6                            loc_EEE:
00000BC6 3ABC 977F                  		move.w	#$977F,(a5)
00000BCA 3ABC 7C00                  		move.w	#$7C00,(a5)
00000BCE 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000BD4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BD8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BDE 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000BE4 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000BEA 3ABC 977F                  		move.w	#$977F,(a5)
00000BEE 3ABC 7800                  		move.w	#$7800,(a5)
00000BF2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000BF8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BFC 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000C02                            
00000C02                            loc_F54:
00000C02 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000C0A 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000C10 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000C16 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000C1C 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000C22 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000C26 4EB9 0000 0000             		jsr	AniArt_Load
00000C2C 4EB9 0000 0000             		jsr	HudUpdate
00000C32 6100 0000                  		bsr.w	sub_1642
00000C36 4E75                       		rts	
00000C38                            ; ===========================================================================
00000C38                            
00000C38                            loc_F8A:				; XREF: off_B6E
00000C38 6100 0000                  		bsr.w	sub_106E
00000C3C 5238 F628                  		addq.b	#1,($FFFFF628).w
00000C40 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000C46 4E75                       		rts	
00000C48                            ; ===========================================================================
00000C48                            
00000C48                            loc_F9A:				; XREF: off_B6E
00000C48 6100 0000                  		bsr.w	sub_106E
00000C4C 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C50 6000 0000                  		bra.w	sub_1642
00000C54                            ; ===========================================================================
00000C54                            
00000C54                            loc_FA6:				; XREF: off_B6E
00000C54 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000C5C                            
00000C5C                            loc_FAE:
00000C5C 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000C64 66F6                       		bne.s	loc_FAE		; if not, branch
00000C66 6100 0000                  		bsr.w	ReadJoypads
00000C6A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C70 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C76 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C7C 3ABC 977F                  		move.w	#$977F,(a5)
00000C80 3ABC C000                  		move.w	#$C000,(a5)
00000C84 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C8A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C8E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C94 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000C9A 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000CA0 3ABC 977F                  		move.w	#$977F,(a5)
00000CA4 3ABC 7800                  		move.w	#$7800,(a5)
00000CA8 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CAE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CB2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CB8 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000CBE 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000CC4 3ABC 977F                  		move.w	#$977F,(a5)
00000CC8 3ABC 7C00                  		move.w	#$7C00,(a5)
00000CCC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CD2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CD6 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000CDE 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CE4                            
00000CE4                            loc_1060:
00000CE4 4A78 F614                  		tst.w	($FFFFF614).w
00000CE8 6700 0000                  		beq.w	locret_106C
00000CEC 5378 F614                  		subq.w	#1,($FFFFF614).w
00000CF0                            
00000CF0                            locret_106C:
00000CF0 4E75                       		rts	
00000CF2                            
00000CF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000CF2                            
00000CF2                            
00000CF2                            sub_106E:				; XREF: loc_C32; et al
00000CF2 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000CFA                            
00000CFA                            loc_1076:
00000CFA 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000D02 66F6                       		bne.s	loc_1076	; if not, branch
00000D04 6100 0000                  		bsr.w	ReadJoypads
00000D08 4A38 F64E                  		tst.b	($FFFFF64E).w
00000D0C 6600                       		bne.s	loc_10B0
00000D0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D14 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D1A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000D20 3ABC 977F                  		move.w	#$977F,(a5)
00000D24 3ABC C000                  		move.w	#$C000,(a5)
00000D28 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000D2E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D32 6000                       		bra.s	loc_10D4
00000D34                            ; ===========================================================================
00000D34                            
00000D34                            loc_10B0:				; XREF: sub_106E
00000D34 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D3A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D40 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000D46 3ABC 977F                  		move.w	#$977F,(a5)
00000D4A 3ABC C000                  		move.w	#$C000,(a5)
00000D4E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000D54 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D58                            
00000D58                            loc_10D4:				; XREF: sub_106E
00000D58 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D5E 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D64 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D6A 3ABC 977F                  		move.w	#$977F,(a5)
00000D6E 3ABC 7800                  		move.w	#$7800,(a5)
00000D72 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D78 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D7C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D82 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000D88 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000D8E 3ABC 977F                  		move.w	#$977F,(a5)
00000D92 3ABC 7C00                  		move.w	#$7C00,(a5)
00000D96 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D9C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DA0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000DA8 4E75                       		rts	
00000DAA                            ; End of function sub_106E
00000DAA                            
00000DAA                            ; ---------------------------------------------------------------------------
00000DAA                            ; Subroutine to	move pallets from the RAM to CRAM
00000DAA                            ; ---------------------------------------------------------------------------
00000DAA                            
00000DAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000DAA                            
00000DAA                            
00000DAA                            PalToCRAM:
00000DAA 46FC 2700                  		move	#$2700,sr
00000DAE 4A78 F644                  		tst.w	($FFFFF644).w
00000DB2 6700                       		beq.s	locret_119C
00000DB4 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00000DBA 48E7 00C0                  		movem.l	a0-a1,-(sp)
00000DBE 43F9 00C0 0000             		lea	($C00000).l,a1
00000DC4 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00000DC8 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00000DD0 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00000DD2 2298                       		move.l	(a0)+,(a1)
00000DD4 2298                       		move.l	(a0)+,(a1)
00000DD6 2298                       		move.l	(a0)+,(a1)
00000DD8 2298                       		move.l	(a0)+,(a1)
00000DDA 2298                       		move.l	(a0)+,(a1)
00000DDC 2298                       		move.l	(a0)+,(a1)
00000DDE 2298                       		move.l	(a0)+,(a1)
00000DE0 2298                       		move.l	(a0)+,(a1)
00000DE2 2298                       		move.l	(a0)+,(a1)
00000DE4 2298                       		move.l	(a0)+,(a1)
00000DE6 2298                       		move.l	(a0)+,(a1)
00000DE8 2298                       		move.l	(a0)+,(a1)
00000DEA 2298                       		move.l	(a0)+,(a1)
00000DEC 2298                       		move.l	(a0)+,(a1)
00000DEE 2298                       		move.l	(a0)+,(a1)
00000DF0 2298                       		move.l	(a0)+,(a1)
00000DF2 2298                       		move.l	(a0)+,(a1)
00000DF4 2298                       		move.l	(a0)+,(a1)
00000DF6 2298                       		move.l	(a0)+,(a1)
00000DF8 2298                       		move.l	(a0)+,(a1)
00000DFA 2298                       		move.l	(a0)+,(a1)
00000DFC 2298                       		move.l	(a0)+,(a1)
00000DFE 2298                       		move.l	(a0)+,(a1)
00000E00 2298                       		move.l	(a0)+,(a1)
00000E02 2298                       		move.l	(a0)+,(a1)
00000E04 2298                       		move.l	(a0)+,(a1)
00000E06 2298                       		move.l	(a0)+,(a1)
00000E08 2298                       		move.l	(a0)+,(a1)
00000E0A 2298                       		move.l	(a0)+,(a1)
00000E0C 2298                       		move.l	(a0)+,(a1)
00000E0E 2298                       		move.l	(a0)+,(a1)
00000E10 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00000E16 4CDF 0300                  		movem.l	(sp)+,a0-a1
00000E1A 4A38 F64F                  		tst.b	($FFFFF64F).w
00000E1E 6600                       		bne.s	loc_119E
00000E20                            
00000E20                            locret_119C:
00000E20 4E73                       		rte	
00000E22                            ; ===========================================================================
00000E22                            
00000E22                            loc_119E:				; XREF: PalToCRAM
00000E22 4238 F64F                  		clr.b	($FFFFF64F).w
00000E26 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000E2A 6100 FCFA                  		bsr.w	Demo_Time
00000E2E 4EB9 0000 0000             		jsr	sub_71B4C
00000E34 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000E38 4E73                       		rte	
00000E3A                            ; End of function PalToCRAM
00000E3A                            
00000E3A                            ; ---------------------------------------------------------------------------
00000E3A                            ; Subroutine to	initialise joypads
00000E3A                            ; ---------------------------------------------------------------------------
00000E3A                            
00000E3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000E3A                            
00000E3A                            
00000E3A                            JoypadInit:				; XREF: GameClrRAM
00000E3A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E42                            
00000E42                            Joypad_WaitZ80:
00000E42 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00000E4A 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
00000E4C 7040                       		moveq	#$40,d0
00000E4E 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00000E54 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00000E5A 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00000E60 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000E68 4E75                       		rts	
00000E6A                            ; End of function JoypadInit
00000E6A                            
00000E6A                            ; ---------------------------------------------------------------------------
00000E6A                            ; Subroutine to	read joypad input, and send it to the RAM
00000E6A                            ; ---------------------------------------------------------------------------
00000E6A                            
00000E6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000E6A                            
00000E6A                            
00000E6A                            ReadJoypads:
00000E6A 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00000E6E 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00000E74 6100                       		bsr.s	Joypad_Read	; do the first joypad
00000E76 5449                       		addq.w	#2,a1		; do the second	joypad
00000E78                            
00000E78                            Joypad_Read:
00000E78 12BC 0000                  		move.b	#0,(a1)
00000E80 1011                       		move.b	(a1),d0
00000E82 E508                       		lsl.b	#2,d0
00000E84 0200 00C0                  		andi.b	#$C0,d0
00000E88 12BC 0040                  		move.b	#$40,(a1)
00000E90 1211                       		move.b	(a1),d1
00000E92 0201 003F                  		andi.b	#$3F,d1
00000E98 4600                       		not.b	d0
00000E9A 1210                       		move.b	(a0),d1
00000E9C B101                       		eor.b	d0,d1
00000E9E 10C0                       		move.b	d0,(a0)+
00000EA2 10C1                       		move.b	d1,(a0)+
00000EA4 4E75                       		rts	
00000EA6                            ; End of function ReadJoypads
00000EA6                            
00000EA6                            
00000EA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000EA6                            
00000EA6                            
00000EA6                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00000EA6 41F9 00C0 0004             		lea	($C00004).l,a0
00000EAC 43F9 00C0 0000             		lea	($C00000).l,a1
00000EB2 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00000EB8 7E12                       		moveq	#$12,d7
00000EBA                            
00000EBA                            VDP_Loop:
00000EBA 309A                       		move.w	(a2)+,(a0)
00000EBC 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00000EC0                            
00000EC0 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00000EC6 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00000ECA 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00000ED0 7000                       		moveq	#0,d0
00000ED2 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00000EDC 3E3C 003F                  		move.w	#$3F,d7
00000EE0                            
00000EE0                            VDP_ClrCRAM:
00000EE0 3280                       		move.w	d0,(a1)
00000EE2 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00000EE6                            
00000EE6 42B8 F616                  		clr.l	($FFFFF616).w
00000EEA 42B8 F61A                  		clr.l	($FFFFF61A).w
00000EEE 2F01                       		move.l	d1,-(sp)
00000EF0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EF6 3ABC 8F01                  		move.w	#$8F01,(a5)
00000EFA 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00000F00 3ABC 9780                  		move.w	#$9780,(a5)
00000F04 2ABC 4000 0080             		move.l	#$40000080,(a5)
00000F0A 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
00000F12                            
00000F12                            loc_128E:
00000F12 3215                       		move.w	(a5),d1
00000F14 0801 0001                  		btst	#1,d1
00000F18 66F8                       		bne.s	loc_128E
00000F1A                            
00000F1A 3ABC 8F02                  		move.w	#$8F02,(a5)
00000F1E 221F                       		move.l	(sp)+,d1
00000F20 4E75                       		rts	
00000F22                            ; End of function VDPSetupGame
00000F22                            
00000F22                            ; ===========================================================================
00000F22 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
00000F2A 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
00000F32 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
00000F3A 8C00 8D3F 8E00 8F02        		dc.w $8C00, $8D3F, $8E00, $8F02
00000F42 9001 9100 9200             		dc.w $9001, $9100, $9200
00000F48                            
00000F48                            ; ---------------------------------------------------------------------------
00000F48                            ; Subroutine to	clear the screen
00000F48                            ; ---------------------------------------------------------------------------
00000F48                            
00000F48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F48                            
00000F48                            
00000F48                            ClearScreen:
00000F48 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F4E 3ABC 8F01                  		move.w	#$8F01,(a5)
00000F52 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00000F58 3ABC 9780                  		move.w	#$9780,(a5)
00000F5C 2ABC 4000 0083             		move.l	#$40000083,(a5)
00000F62 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00000F6A                            
00000F6A                            loc_12E6:
00000F6A 3215                       		move.w	(a5),d1
00000F6C 0801 0001                  		btst	#1,d1
00000F70 66F8                       		bne.s	loc_12E6
00000F72                            
00000F72 3ABC 8F02                  		move.w	#$8F02,(a5)
00000F76 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F7C 3ABC 8F01                  		move.w	#$8F01,(a5)
00000F80 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00000F86 3ABC 9780                  		move.w	#$9780,(a5)
00000F8A 2ABC 6000 0083             		move.l	#$60000083,(a5)
00000F90 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00000F98                            
00000F98                            loc_1314:
00000F98 3215                       		move.w	(a5),d1
00000F9A 0801 0001                  		btst	#1,d1
00000F9E 66F8                       		bne.s	loc_1314
00000FA0                            
00000FA0 3ABC 8F02                  		move.w	#$8F02,(a5)
00000FA4 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00000FAC 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00000FB4 43F8 F800                  		lea	($FFFFF800).w,a1
00000FB8 7000                       		moveq	#0,d0
00000FBA 323C 00A0                  		move.w	#$A0,d1
00000FBE                            
00000FBE                            loc_133A:
00000FBE 22C0                       		move.l	d0,(a1)+
00000FC0 51C9 FFFC                  		dbf	d1,loc_133A
00000FC4                            
00000FC4 43F8 CC00                  		lea	($FFFFCC00).w,a1
00000FC8 7000                       		moveq	#0,d0
00000FCA 323C 0100                  		move.w	#$100,d1
00000FCE                            
00000FCE                            loc_134A:
00000FCE 22C0                       		move.l	d0,(a1)+
00000FD0 51C9 FFFC                  		dbf	d1,loc_134A
00000FD4 4E75                       		rts	
00000FD6                            ; End of function ClearScreen
00000FD6                            
00000FD6                            ; ---------------------------------------------------------------------------
00000FD6                            ; Subroutine to	load the sound driver
00000FD6                            ; ---------------------------------------------------------------------------
00000FD6                            
00000FD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FD6                            
00000FD6                            
00000FD6                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00000FD8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FE0 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00000FE8 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
00000FEE 43F9 00A0 0000             		lea	($A00000).l,a1
00000FF4 6100 0000                  		bsr.w	KosDec		; decompress
00000FF8 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
00001008 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001010 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001018 4E75                       		rts	
0000101A                            ; End of function SoundDriverLoad
0000101A                            
0000101A                            ; ---------------------------------------------------------------------------
0000101A                            ; Subroutine to	play a sound or	music track
0000101A                            ; ---------------------------------------------------------------------------
0000101A                            
0000101A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000101A                            
0000101A                            
0000101A                            PlaySound:
0000101A 11C0 F00A                  		move.b	d0,($FFFFF00A).w
0000101E 4E75                       		rts	
00001020                            ; End of function PlaySound
00001020                            
00001020                            ; ---------------------------------------------------------------------------
00001020                            ; Subroutine to	play a special sound/music (E0-E4)
00001020                            ;
00001020                            ; E0 - Fade out
00001020                            ; E1 - Sega
00001020                            ; E2 - Speed up
00001020                            ; E3 - Normal speed
00001020                            ; E4 - Stop
00001020                            ; ---------------------------------------------------------------------------
00001020                            
00001020                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001020                            
00001020                            
00001020                            PlaySound_Special:
00001020 11C0 F00B                  		move.b	d0,($FFFFF00B).w
00001024 4E75                       		rts	
00001026                            ; End of function PlaySound_Special
00001026                            
00001026                            ; ===========================================================================
00001026                            
00001026                            ; ---------------------------------------------------------------------------
00001026                            ; Subroutine to	pause the game
00001026                            ; ---------------------------------------------------------------------------
00001026                            
00001026                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001026                            
00001026                            
00001026                            PauseGame:				; XREF: Level_MainLoop; et al
00001028 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
0000102C 6700                       		beq.s	Unpause		; if not, branch
0000102E 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
00001032 6600                       		bne.s	loc_13BE	; if yes, branch
00001034 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0000103A 6700                       		beq.s	Pause_DoNothing	; if not, branch
0000103C                            
0000103C                            loc_13BE:
0000103C 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
00001042 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001048                            
00001048                            loc_13CA:
00001048 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
0000104E 6100 0000                  		bsr.w	DelayProgram
00001052 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
00001056 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001058 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0000105E 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001060 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001068 6000                       		bra.s	loc_1404
0000106A                            ; ===========================================================================
0000106A                            
0000106A                            Pause_ChkBC:				; XREF: PauseGame
0000106A 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001070 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001072 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001078 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000107A                            
0000107A                            Pause_ChkStart:				; XREF: PauseGame
0000107A 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001080 67C6                       		beq.s	loc_13CA	; if not, branch
00001082                            
00001082                            loc_1404:				; XREF: PauseGame
00001082 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001088                            
00001088                            Unpause:				; XREF: PauseGame
00001088 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
0000108E                            
0000108E                            Pause_DoNothing:			; XREF: PauseGame
0000108E 4E75                       		rts	
00001090                            ; ===========================================================================
00001090                            
00001090                            Pause_SlowMo:				; XREF: PauseGame
00001090 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001096 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000109C 4E75                       		rts	
0000109E                            ; End of function PauseGame
0000109E                            
0000109E                            ; ---------------------------------------------------------------------------
0000109E                            ; Subroutine to	display	patterns via the VDP
0000109E                            ; ---------------------------------------------------------------------------
0000109E                            
0000109E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000109E                            
0000109E                            
0000109E                            ShowVDPGraphics:			; XREF: MartyrSplash; TitleScreen; SS_BGLoad
0000109E 4DF9 00C0 0000             		lea	($C00000).l,a6
000010A4 283C 0080 0000             		move.l	#$800000,d4
000010AA                            
000010AA                            loc_142C:
000010AA 2D40 0004                  		move.l	d0,4(a6)
000010AE 3601                       		move.w	d1,d3
000010B0                            
000010B0                            loc_1432:
000010B0 3C99                       		move.w	(a1)+,(a6)
000010B2 51CB FFFC                  		dbf	d3,loc_1432
000010B8 51CA FFF0                  		dbf	d2,loc_142C
000010BC 4E75                       		rts	
000010BE                            ; End of function ShowVDPGraphics
000010BE                            
000010BE                            ; ---------------------------------------------------------------------------
000010BE                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
000010BE                            ; to be issued the next time ProcessDMAQueue is called.
000010BE                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
000010BE                            ; by issuing the commands (this subroutine DOES check for overflow)
000010BE                            ; ---------------------------------------------------------------------------
000010BE                            ; In case you wish to use this queue system outside of the spin dash, this is the
000010BE                            ; registers in which it expects data in:
000010BE                            ; d1.l: Address to data (In 68k address space)
000010BE                            ; d2.w: Destination in VRAM
000010BE                            ; d3.w: Length of data
000010BE                            ; ---------------------------------------------------------------------------
000010BE                            
000010BE                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000010BE                            
000010BE                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
000010BE                            QueueDMATransfer:
000010BE 2278 C8FC                  		movea.l	($FFFFC8FC).w,a1
000010C2 B2FC C8FC                  		cmpa.w	#$C8FC,a1
000010C6 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
000010C8                            
000010C8                            		; piece together some VDP commands and store them for later...
000010C8 303C 9300                  		move.w	#$9300,d0 ; command to specify DMA transfer length & $00FF
000010CC 1003                       		move.b	d3,d0
000010CE 32C0                       		move.w	d0,(a1)+ ; store command
000010D0                            
000010D0 303C 9400                  		move.w	#$9400,d0 ; command to specify DMA transfer length & $FF00
000010D4 E04B                       		lsr.w	#8,d3
000010D6 1003                       		move.b	d3,d0
000010D8 32C0                       		move.w	d0,(a1)+ ; store command
000010DA                            
000010DA 303C 9500                  		move.w	#$9500,d0 ; command to specify source address & $0001FE
000010DE E289                       		lsr.l	#1,d1
000010E0 1001                       		move.b	d1,d0
000010E2 32C0                       		move.w	d0,(a1)+ ; store command
000010E4                            
000010E4 303C 9600                  		move.w	#$9600,d0 ; command to specify source address & $01FE00
000010E8 E089                       		lsr.l	#8,d1
000010EA 1001                       		move.b	d1,d0
000010EC 32C0                       		move.w	d0,(a1)+ ; store command
000010EE                            
000010EE 303C 9700                  		move.w	#$9700,d0 ; command to specify source address & $FE0000
000010F2 E089                       		lsr.l	#8,d1
000010F4 1001                       		move.b	d1,d0
000010F6 32C0                       		move.w	d0,(a1)+ ; store command
000010F8                            
000010F8 0282 0000 FFFF             		andi.l	#$FFFF,d2 ; command to specify destination address and begin DMA
000010FE E58A                       		lsl.l	#2,d2
00001100 E44A                       		lsr.w	#2,d2
00001102 4842                       		swap	d2
00001104 0082 4000 0080             		ori.l	#$40000080,d2 ; set bits to specify VRAM transfer
0000110A 22C2                       		move.l	d2,(a1)+ ; store command
0000110C                            
0000110C 21C9 C8FC                  		move.l	a1,($FFFFC8FC).w ; set the next free slot address
00001110 B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001114 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00001116 32BC 0000                  		move.w	#0,(a1) ; put a stop token at the end of the used part of the buffer
0000111A                            ; return_14AA:
0000111A                            QueueDMATransfer_Done:
0000111A 4E75                       		rts
0000111C                            ; End of function QueueDMATransfer
0000111C                            
0000111C                            
0000111C                            ; ---------------------------------------------------------------------------
0000111C                            ; Subroutine for issuing all VDP commands that were queued
0000111C                            ; (by earlier calls to QueueDMATransfer)
0000111C                            ; Resets the queue when it's done
0000111C                            ; ---------------------------------------------------------------------------
0000111C                            
0000111C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000111C                            
0000111C                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
0000111C                            ProcessDMAQueue:
0000111C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001122 43F8 C800                  		lea	($FFFFC800).w,a1
00001126                            ; loc_14B6:
00001126                            ProcessDMAQueue_Loop:
00001126 3019                       		move.w	(a1)+,d0
00001128 6700                       		beq.s	ProcessDMAQueue_Done ; branch if we reached a stop token
0000112A                            		; issue a set of VDP commands...
0000112A 3A80                       		move.w	d0,(a5)		; transfer length
0000112C 3A99                       		move.w	(a1)+,(a5)	; transfer length
0000112E 3A99                       		move.w	(a1)+,(a5)	; source address
00001130 3A99                       		move.w	(a1)+,(a5)	; source address
00001132 3A99                       		move.w	(a1)+,(a5)	; source address
00001134 3A99                       		move.w	(a1)+,(a5)	; destination
00001136 3A99                       		move.w	(a1)+,(a5)	; destination
00001138 B2FC C8FC                  		cmpa.w	#$C8FC,a1
0000113C 66E8                       		bne.s	ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
0000113E                            ; loc_14CE:
0000113E                            ProcessDMAQueue_Done:
0000113E 31FC 0000 C800             		move.w	#0,($FFFFC800).w
00001144 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
0000114C 4E75                       		rts
0000114E                            ; End of function ProcessDMAQueue
0000114E                            
0000114E                            ; ---------------------------------------------------------------------------
0000114E                            ; Nemesis decompression	algorithm
0000114E                            ; ---------------------------------------------------------------------------
0000114E                            
0000114E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000114E                            
0000114E                            
0000114E                            NemDec:
0000114E 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001152 47F9 0000 0000             		lea	(loc_1502).l,a3
00001158 49F9 00C0 0000             		lea	($C00000).l,a4
0000115E 6000                       		bra.s	loc_145C
00001160                            ; ===========================================================================
00001160 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001164 47F9 0000 0000             		lea	(loc_1518).l,a3
0000116A                            
0000116A                            loc_145C:				; XREF: NemDec
0000116A 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000116E 3418                       		move.w	(a0)+,d2
00001170 E34A                       		lsl.w	#1,d2
00001172 6400                       		bcc.s	loc_146A
00001174 D6FC 000A                  		adda.w	#$A,a3
00001178                            
00001178                            loc_146A:
00001178 E54A                       		lsl.w	#2,d2
0000117A 3A42                       		movea.w	d2,a5
0000117C 7608                       		moveq	#8,d3
0000117E 7400                       		moveq	#0,d2
00001180 7800                       		moveq	#0,d4
00001182 6100 0000                  		bsr.w	NemDec4
00001186 1A18                       		move.b	(a0)+,d5
00001188 E145                       		asl.w	#8,d5
0000118A 1A18                       		move.b	(a0)+,d5
0000118C 3C3C 0010                  		move.w	#$10,d6
00001190 6100                       		bsr.s	NemDec2
00001192 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
00001196 4E75                       		rts	
00001198                            ; End of function NemDec
00001198                            
00001198                            
00001198                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001198                            
00001198                            
00001198                            NemDec2:				; XREF: NemDec
00001198 3E06                       		move.w	d6,d7
0000119A 5147                       		subq.w	#8,d7
0000119C 3205                       		move.w	d5,d1
0000119E EE69                       		lsr.w	d7,d1
000011A0 0C01 00FC                  		cmpi.b	#-4,d1
000011A4 6400                       		bcc.s	loc_14D6
000011A6 0241 00FF                  		andi.w	#$FF,d1
000011AC 1031 1000                  		move.b	(a1,d1.w),d0
000011B0 4880                       		ext.w	d0
000011B4 0C46 0009                  		cmpi.w	#9,d6
000011B8 6400                       		bcc.s	loc_14B2
000011BA 5046                       		addq.w	#8,d6
000011BC E145                       		asl.w	#8,d5
000011BE 1A18                       		move.b	(a0)+,d5
000011C0                            
000011C0                            loc_14B2:
000011C0 1231 1001                  		move.b	1(a1,d1.w),d1
000011C4 3001                       		move.w	d1,d0
000011C6 0241 000F                  		andi.w	#$F,d1
000011CA 0240 00F0                  		andi.w	#$F0,d0
000011CE                            
000011CE                            loc_14C0:				; XREF: NemDec3
000011CE E848                       		lsr.w	#4,d0
000011D0                            
000011D0                            loc_14C2:				; XREF: NemDec3
000011D0 E98C                       		lsl.l	#4,d4
000011D4 5343                       		subq.w	#1,d3
000011D6 6600                       		bne.s	loc_14D0
000011D8 4ED3                       		jmp	(a3)
000011DA                            ; End of function NemDec2
000011DA                            
000011DA                            
000011DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011DA                            
000011DA                            
000011DA                            NemDec3:				; XREF: loc_1502
000011DA 7800                       		moveq	#0,d4
000011DC 7608                       		moveq	#8,d3
000011DE                            
000011DE                            loc_14D0:				; XREF: NemDec2
000011DE 51C8 FFF0                  		dbf	d0,loc_14C2
000011E2 60B4                       		bra.s	NemDec2
000011E4                            ; ===========================================================================
000011E4                            
000011E4                            loc_14D6:				; XREF: NemDec2
000011E4 5D46                       		subq.w	#6,d6
000011E6 0C46 0009                  		cmpi.w	#9,d6
000011EA 6400                       		bcc.s	loc_14E4
000011EC 5046                       		addq.w	#8,d6
000011EE E145                       		asl.w	#8,d5
000011F0 1A18                       		move.b	(a0)+,d5
000011F2                            
000011F2                            loc_14E4:				; XREF: NemDec3
000011F2 5F46                       		subq.w	#7,d6
000011F4 3205                       		move.w	d5,d1
000011F6 EC69                       		lsr.w	d6,d1
000011F8 3001                       		move.w	d1,d0
000011FA 0241 000F                  		andi.w	#$F,d1
000011FE 0240 0070                  		andi.w	#$70,d0
00001202 0C46 0009                  		cmpi.w	#9,d6
00001206 64C6                       		bcc.s	loc_14C0
00001208 5046                       		addq.w	#8,d6
0000120A E145                       		asl.w	#8,d5
0000120C 1A18                       		move.b	(a0)+,d5
0000120E 60BE                       		bra.s	loc_14C0
00001210                            ; End of function NemDec3
00001210                            
00001210                            ; ===========================================================================
00001210                            
00001210                            loc_1502:				; XREF: NemDec
00001210 2884                       		move.l	d4,(a4)
00001212 534D                       		subq.w	#1,a5
00001214 380D                       		move.w	a5,d4
00001216 66C2                       		bne.s	NemDec3
00001218 4E75                       		rts	
0000121A                            ; ===========================================================================
0000121A B982                       		eor.l	d4,d2
0000121C 2882                       		move.l	d2,(a4)
0000121E 534D                       		subq.w	#1,a5
00001220 380D                       		move.w	a5,d4
00001222 66B6                       		bne.s	NemDec3
00001224 4E75                       		rts	
00001226                            ; ===========================================================================
00001226                            
00001226                            loc_1518:				; XREF: NemDec
00001226 28C4                       		move.l	d4,(a4)+
00001228 534D                       		subq.w	#1,a5
0000122A 380D                       		move.w	a5,d4
0000122C 66AC                       		bne.s	NemDec3
0000122E 4E75                       		rts	
00001230                            ; ===========================================================================
00001230 B982                       		eor.l	d4,d2
00001232 28C2                       		move.l	d2,(a4)+
00001234 534D                       		subq.w	#1,a5
00001236 380D                       		move.w	a5,d4
00001238 66A0                       		bne.s	NemDec3
0000123A 4E75                       		rts	
0000123C                            
0000123C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000123C                            
0000123C                            
0000123C                            NemDec4:				; XREF: NemDec
0000123C 1018                       		move.b	(a0)+,d0
0000123E                            
0000123E                            loc_1530:
0000123E 0C00 00FF                  		cmpi.b	#-1,d0
00001242 6600                       		bne.s	loc_1538
00001244 4E75                       		rts	
00001246                            ; ===========================================================================
00001246                            
00001246                            loc_1538:				; XREF: NemDec4
00001246 3E00                       		move.w	d0,d7
00001248                            
00001248                            loc_153A:
00001248 1018                       		move.b	(a0)+,d0
0000124A 0C00 0080                  		cmpi.b	#$80,d0
0000124E 64EE                       		bcc.s	loc_1530
00001250 1200                       		move.b	d0,d1
00001252 0247 000F                  		andi.w	#$F,d7
00001256 0241 0070                  		andi.w	#$70,d1
0000125C 0240 000F                  		andi.w	#$F,d0
00001260 1200                       		move.b	d0,d1
00001262 E149                       		lsl.w	#8,d1
00001266 7208                       		moveq	#8,d1
0000126A 6600                       		bne.s	loc_1568
0000126C 1018                       		move.b	(a0)+,d0
00001270 3387 0000                  		move.w	d7,(a1,d0.w)
00001274 60D2                       		bra.s	loc_153A
00001276                            ; ===========================================================================
00001276                            
00001276                            loc_1568:				; XREF: NemDec4
00001276 1018                       		move.b	(a0)+,d0
00001278 E368                       		lsl.w	d1,d0
0000127C 7A01                       		moveq	#1,d5
0000127E E36D                       		lsl.w	d1,d5
00001280 5345                       		subq.w	#1,d5
00001282                            
00001282                            loc_1574:
00001282 3387 0000                  		move.w	d7,(a1,d0.w)
00001286 5440                       		addq.w	#2,d0
00001288 51CD FFF8                  		dbf	d5,loc_1574
0000128C 60BA                       		bra.s	loc_153A
0000128E                            ; End of function NemDec4
0000128E                            
0000128E                            ; ---------------------------------------------------------------------------
0000128E                            ; Subroutine to	load pattern load cues
0000128E                            ; ---------------------------------------------------------------------------
0000128E                            
0000128E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000128E                            
0000128E                            
0000128E                            LoadPLC:
0000128E 48E7 0060                  		movem.l	a1-a2,-(sp)
00001292 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000129A 3031 0000                  		move.w	(a1,d0.w),d0
0000129E 43F1 0000                  		lea	(a1,d0.w),a1
000012A2 45F8 F680                  		lea	($FFFFF680).w,a2
000012A6                            
000012A6                            loc_1598:
000012A6 4A92                       		tst.l	(a2)
000012A8 6700                       		beq.s	loc_15A0
000012AA 5C4A                       		addq.w	#6,a2
000012AC 60F8                       		bra.s	loc_1598
000012AE                            ; ===========================================================================
000012AE                            
000012AE                            loc_15A0:				; XREF: LoadPLC
000012AE 3019                       		move.w	(a1)+,d0
000012B0 6B00                       		bmi.s	loc_15AC
000012B2                            
000012B2                            loc_15A4:
000012B2 24D9                       		move.l	(a1)+,(a2)+
000012B4 34D9                       		move.w	(a1)+,(a2)+
000012B6 51C8 FFFA                  		dbf	d0,loc_15A4
000012BA                            
000012BA                            loc_15AC:
000012BA 4CDF 0600                  		movem.l	(sp)+,a1-a2
000012BE 4E75                       		rts	
000012C0                            ; End of function LoadPLC
000012C0                            
000012C0                            
000012C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012C0                            
000012C0                            
000012C0                            LoadPLC2:
000012C0 48E7 0060                  		movem.l	a1-a2,-(sp)
000012C4 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000012CC 3031 0000                  		move.w	(a1,d0.w),d0
000012D0 43F1 0000                  		lea	(a1,d0.w),a1
000012D4 6100                       		bsr.s	ClearPLC
000012D6 45F8 F680                  		lea	($FFFFF680).w,a2
000012DA 3019                       		move.w	(a1)+,d0
000012DC 6B00                       		bmi.s	loc_15D8
000012DE                            
000012DE                            loc_15D0:
000012DE 24D9                       		move.l	(a1)+,(a2)+
000012E0 34D9                       		move.w	(a1)+,(a2)+
000012E2 51C8 FFFA                  		dbf	d0,loc_15D0
000012E6                            
000012E6                            loc_15D8:
000012E6 4CDF 0600                  		movem.l	(sp)+,a1-a2
000012EA 4E75                       		rts	
000012EC                            ; End of function LoadPLC2
000012EC                            
000012EC                            ; ---------------------------------------------------------------------------
000012EC                            ; Subroutine to	clear the pattern load cues
000012EC                            ; ---------------------------------------------------------------------------
000012EC                            
000012EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012EC                            
000012EC                            
000012EC                            ClearPLC:				; XREF: LoadPLC2
000012EC 45F8 F680                  		lea	($FFFFF680).w,a2
000012F0 701F                       		moveq	#$1F,d0
000012F2                            
000012F2                            ClearPLC_Loop:
000012F2 429A                       		clr.l	(a2)+
000012F4 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000012F8 4E75                       		rts	
000012FA                            ; End of function ClearPLC
000012FA                            
000012FA                            ; ---------------------------------------------------------------------------
000012FA                            ; Subroutine to	use graphics listed in a pattern load cue
000012FA                            ; ---------------------------------------------------------------------------
000012FA                            
000012FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012FA                            
000012FA                            
000012FA                            RunPLC_RAM:				; XREF: Pal_FadeTo
000012FA 4AB8 F680                  		tst.l	($FFFFF680).w
000012FE 6700                       		beq.s	locret_1640
00001300 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001304 6600                       		bne.s	locret_1640
00001306 2078 F680                  		movea.l	($FFFFF680).w,a0
0000130A 47F9 0000 1210             		lea	(loc_1502).l,a3
00001310 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001314 3418                       		move.w	(a0)+,d2
00001316 6A00                       		bpl.s	loc_160E
00001318 D6FC 000A                  		adda.w	#$A,a3
0000131C                            
0000131C                            loc_160E:
0000131C 0242 7FFF                  		andi.w	#$7FFF,d2
00001320 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001324 6100 FF16                  		bsr.w	NemDec4
00001328 1A18                       		move.b	(a0)+,d5
0000132A E145                       		asl.w	#8,d5
0000132C 1A18                       		move.b	(a0)+,d5
0000132E 7C10                       		moveq	#$10,d6
00001330 7000                       		moveq	#0,d0
00001332 21C8 F680                  		move.l	a0,($FFFFF680).w
00001336 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000133A 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000133E 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001342 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001346 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000134A 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000134E                            
0000134E                            locret_1640:
0000134E 4E75                       		rts	
00001350                            ; End of function RunPLC_RAM
00001350                            
00001350                            
00001350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001350                            
00001350                            
00001350                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001350 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001354 6700 0000                  		beq.w	locret_16DA
00001358 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000135E 7000                       		moveq	#0,d0
00001360 3038 F684                  		move.w	($FFFFF684).w,d0
00001364 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000136A 6000                       		bra.s	loc_1676
0000136C                            ; End of function sub_1642
0000136C                            
0000136C                            
0000136C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000136C                            
0000136C                            
0000136C                            sub_165E:				; XREF: Demo_Time
0000136C 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001370 6700                       		beq.s	locret_16DA
00001372 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001378 7000                       		moveq	#0,d0
0000137A 3038 F684                  		move.w	($FFFFF684).w,d0
0000137E 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001384                            
00001384                            loc_1676:				; XREF: sub_1642
00001384 49F9 00C0 0004             		lea	($C00004).l,a4
0000138A E588                       		lsl.l	#2,d0
0000138C E448                       		lsr.w	#2,d0
0000138E 0040 4000                  		ori.w	#$4000,d0
00001392 4840                       		swap	d0
00001394 2880                       		move.l	d0,(a4)
00001396 594C                       		subq.w	#4,a4
00001398 2078 F680                  		movea.l	($FFFFF680).w,a0
0000139C 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000013A0 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000013A4 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000013A8 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000013AC 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000013B0 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000013B4 43F8 AA00                  		lea	($FFFFAA00).w,a1
000013B8                            
000013B8                            loc_16AA:				; XREF: sub_165E
000013B8 3A7C 0008                  		movea.w	#8,a5
000013BC 6100 FE1C                  		bsr.w	NemDec3
000013C0 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000013C4 6700                       		beq.s	loc_16DC
000013C6 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000013CA 66EC                       		bne.s	loc_16AA
000013CC 21C8 F680                  		move.l	a0,($FFFFF680).w
000013D0 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000013D4 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000013D8 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000013DC 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000013E0 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000013E4 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000013E8                            
000013E8                            locret_16DA:				; XREF: sub_1642
000013E8 4E75                       		rts	
000013EA                            ; ===========================================================================
000013EA                            
000013EA                            loc_16DC:				; XREF: sub_165E
000013EA 41F8 F680                  		lea	($FFFFF680).w,a0
000013EE 7015                       		moveq	#$15,d0
000013F0                            
000013F0                            loc_16E2:				; XREF: sub_165E
000013F0 20E8 0006                  		move.l	6(a0),(a0)+
000013F4 51C8 FFFA                  		dbf	d0,loc_16E2
000013F8 4E75                       		rts	
000013FA                            ; End of function sub_165E
000013FA                            
000013FA                            ; ---------------------------------------------------------------------------
000013FA                            ; Subroutine to	execute	the pattern load cue
000013FA                            ; ---------------------------------------------------------------------------
000013FA                            
000013FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013FA                            
000013FA                            
000013FA                            RunPLC_ROM:
000013FA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001402 3031 0000                  		move.w	(a1,d0.w),d0
00001406 43F1 0000                  		lea	(a1,d0.w),a1
0000140A 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
0000140C                            
0000140C                            RunPLC_Loop:
0000140C 2059                       		movea.l	(a1)+,a0	; get art pointer
0000140E 7000                       		moveq	#0,d0
00001410 3019                       		move.w	(a1)+,d0	; get VRAM address
00001412 E588                       		lsl.l	#2,d0		; divide address by $20
00001414 E448                       		lsr.w	#2,d0
00001416 0040 4000                  		ori.w	#$4000,d0
0000141A 4840                       		swap	d0
0000141C 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001422 6100 FD2A                  		bsr.w	NemDec		; decompress
00001426 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000142A 4E75                       		rts	
0000142C                            ; End of function RunPLC_ROM
0000142C                            
0000142C                            ; ---------------------------------------------------------------------------
0000142C                            ; Enigma decompression algorithm
0000142C                            ; ---------------------------------------------------------------------------
0000142C                            
0000142C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000142C                            
0000142C                            
0000142C                            EniDec:
0000142C 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001430 3640                       		movea.w	d0,a3
00001432 1018                       		move.b	(a0)+,d0
00001434 4880                       		ext.w	d0
00001436 3A40                       		movea.w	d0,a5
00001438 1818                       		move.b	(a0)+,d4
0000143A E70C                       		lsl.b	#3,d4
0000143C 3458                       		movea.w	(a0)+,a2
0000143E D4CB                       		adda.w	a3,a2
00001440 3858                       		movea.w	(a0)+,a4
00001442 D8CB                       		adda.w	a3,a4
00001444 1A18                       		move.b	(a0)+,d5
00001446 E145                       		asl.w	#8,d5
00001448 1A18                       		move.b	(a0)+,d5
0000144A 7C10                       		moveq	#$10,d6
0000144C                            
0000144C                            loc_173E:				; XREF: loc_1768
0000144C 7007                       		moveq	#7,d0
0000144E 3E06                       		move.w	d6,d7
00001452 3205                       		move.w	d5,d1
00001454 EE69                       		lsr.w	d7,d1
00001456 0241 007F                  		andi.w	#$7F,d1
0000145A 3401                       		move.w	d1,d2
0000145C 0C41 0040                  		cmpi.w	#$40,d1
00001460 6400                       		bcc.s	loc_1758
00001462 7006                       		moveq	#6,d0
00001464 E24A                       		lsr.w	#1,d2
00001466                            
00001466                            loc_1758:
00001466 6100 0000                  		bsr.w	sub_188C
0000146A 0242 000F                  		andi.w	#$F,d2
0000146E E849                       		lsr.w	#4,d1
00001472 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001476                            ; End of function EniDec
00001476                            
00001476                            ; ===========================================================================
00001476                            
00001476                            loc_1768:				; XREF: loc_17B4
00001476 32CA                       		move.w	a2,(a1)+
00001478 524A                       		addq.w	#1,a2
0000147A 51CA FFFA                  		dbf	d2,loc_1768
0000147E 60CC                       		bra.s	loc_173E
00001480                            ; ===========================================================================
00001480                            
00001480                            loc_1772:				; XREF: loc_17B4
00001480 32CC                       		move.w	a4,(a1)+
00001482 51CA FFFC                  		dbf	d2,loc_1772
00001486 60C4                       		bra.s	loc_173E
00001488                            ; ===========================================================================
00001488                            
00001488                            loc_177A:				; XREF: loc_17B4
00001488 6100 0000                  		bsr.w	loc_17DC
0000148C                            
0000148C                            loc_177E:
0000148C 32C1                       		move.w	d1,(a1)+
0000148E 51CA FFFC                  		dbf	d2,loc_177E
00001492 60B8                       		bra.s	loc_173E
00001494                            ; ===========================================================================
00001494                            
00001494                            loc_1786:				; XREF: loc_17B4
00001494 6100 0000                  		bsr.w	loc_17DC
00001498                            
00001498                            loc_178A:
00001498 32C1                       		move.w	d1,(a1)+
0000149A 5241                       		addq.w	#1,d1
0000149C 51CA FFFA                  		dbf	d2,loc_178A
000014A0 60AA                       		bra.s	loc_173E
000014A2                            ; ===========================================================================
000014A2                            
000014A2                            loc_1794:				; XREF: loc_17B4
000014A2 6100 0000                  		bsr.w	loc_17DC
000014A6                            
000014A6                            loc_1798:
000014A6 32C1                       		move.w	d1,(a1)+
000014A8 5341                       		subq.w	#1,d1
000014AA 51CA FFFA                  		dbf	d2,loc_1798
000014AE 609C                       		bra.s	loc_173E
000014B0                            ; ===========================================================================
000014B0                            
000014B0                            loc_17A2:				; XREF: loc_17B4
000014B0 0C42 000F                  		cmpi.w	#$F,d2
000014B4 6700                       		beq.s	loc_17C4
000014B6                            
000014B6                            loc_17A8:
000014B6 6100 0000                  		bsr.w	loc_17DC
000014BA 32C1                       		move.w	d1,(a1)+
000014BC 51CA FFF8                  		dbf	d2,loc_17A8
000014C0 608A                       		bra.s	loc_173E
000014C2                            ; ===========================================================================
000014C2                            
000014C2                            loc_17B4:				; XREF: EniDec
000014C2 60B2                       		bra.s	loc_1768
000014C4                            ; ===========================================================================
000014C4 60B0                       		bra.s	loc_1768
000014C6                            ; ===========================================================================
000014C6 60B8                       		bra.s	loc_1772
000014C8                            ; ===========================================================================
000014C8 60B6                       		bra.s	loc_1772
000014CA                            ; ===========================================================================
000014CA 60BC                       		bra.s	loc_177A
000014CC                            ; ===========================================================================
000014CC 60C6                       		bra.s	loc_1786
000014CE                            ; ===========================================================================
000014CE 60D2                       		bra.s	loc_1794
000014D0                            ; ===========================================================================
000014D0 60DE                       		bra.s	loc_17A2
000014D2                            ; ===========================================================================
000014D2                            
000014D2                            loc_17C4:				; XREF: loc_17A2
000014D2 5348                       		subq.w	#1,a0
000014D4 0C46 0010                  		cmpi.w	#$10,d6
000014D8 6600                       		bne.s	loc_17CE
000014DA 5348                       		subq.w	#1,a0
000014DC                            
000014DC                            loc_17CE:
000014DC 3008                       		move.w	a0,d0
000014DE E248                       		lsr.w	#1,d0
000014E0 6400                       		bcc.s	loc_17D6
000014E2 5248                       		addq.w	#1,a0
000014E4                            
000014E4                            loc_17D6:
000014E4 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000014E8 4E75                       		rts	
000014EA                            ; ===========================================================================
000014EA                            
000014EA                            loc_17DC:				; XREF: loc_17A2
000014EA 360B                       		move.w	a3,d3
000014EC 1204                       		move.b	d4,d1
000014F0 6400                       		bcc.s	loc_17EE
000014F2 5346                       		subq.w	#1,d6
000014F4 0D05                       		btst	d6,d5
000014F6 6700                       		beq.s	loc_17EE
000014F8 0043 8000                  		ori.w	#-$8000,d3
000014FC                            
000014FC                            loc_17EE:
000014FE 6400                       		bcc.s	loc_17FC
00001500 5346                       		subq.w	#1,d6
00001502 0D05                       		btst	d6,d5
00001504 6700                       		beq.s	loc_17FC
00001506 0643 4000                  		addi.w	#$4000,d3
0000150A                            
0000150A                            loc_17FC:
0000150C 6400                       		bcc.s	loc_180A
0000150E 5346                       		subq.w	#1,d6
00001510 0D05                       		btst	d6,d5
00001512 6700                       		beq.s	loc_180A
00001514 0643 2000                  		addi.w	#$2000,d3
00001518                            
00001518                            loc_180A:
0000151A 6400                       		bcc.s	loc_1818
0000151C 5346                       		subq.w	#1,d6
0000151E 0D05                       		btst	d6,d5
00001520 6700                       		beq.s	loc_1818
00001522 0043 1000                  		ori.w	#$1000,d3
00001526                            
00001526                            loc_1818:
00001528 6400                       		bcc.s	loc_1826
0000152A 5346                       		subq.w	#1,d6
0000152C 0D05                       		btst	d6,d5
0000152E 6700                       		beq.s	loc_1826
00001530 0043 0800                  		ori.w	#$800,d3
00001534                            
00001534                            loc_1826:
00001534 3205                       		move.w	d5,d1
00001536 3E06                       		move.w	d6,d7
0000153A 6400                       		bcc.s	loc_1856
0000153C 3C07                       		move.w	d7,d6
0000153E 0646 0010                  		addi.w	#$10,d6
00001542 4447                       		neg.w	d7
00001544 EF69                       		lsl.w	d7,d1
00001546 1A10                       		move.b	(a0),d5
00001548 EF3D                       		rol.b	d7,d5
00001552                            
00001552                            loc_1844:				; XREF: loc_1868
00001552 300D                       		move.w	a5,d0
0000155C 1A18                       		move.b	(a0)+,d5
0000155E E14D                       		lsl.w	#8,d5
00001560 1A18                       		move.b	(a0)+,d5
00001562 4E75                       		rts	
00001564                            ; ===========================================================================
00001564                            
00001564                            loc_1856:				; XREF: loc_1826
00001564 6700                       		beq.s	loc_1868
00001566 EE69                       		lsr.w	d7,d1
00001568 300D                       		move.w	a5,d0
00001572 300D                       		move.w	a5,d0
00001574 6000                       		bra.s	sub_188C
00001576                            ; ===========================================================================
00001576                            
00001576                            loc_1868:				; XREF: loc_1856
00001576 7C10                       		moveq	#$10,d6
00001578                            
00001578                            loc_186A:
00001578 60D8                       		bra.s	loc_1844
0000157A                            ; ===========================================================================
0000157A 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001590 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
0000159A                            
0000159A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000159A                            
0000159A                            
0000159A                            sub_188C:				; XREF: EniDec
0000159C 0C46 0009                  		cmpi.w	#9,d6
000015A0 6400                       		bcc.s	locret_189A
000015A2 5046                       		addq.w	#8,d6
000015A4 E145                       		asl.w	#8,d5
000015A6 1A18                       		move.b	(a0)+,d5
000015A8                            
000015A8                            locret_189A:
000015A8 4E75                       		rts	
000015AA                            ; End of function sub_188C
000015AA                            
000015AA                            ; ---------------------------------------------------------------------------
000015AA                            ; Kosinski decompression algorithm
000015AA                            ; ---------------------------------------------------------------------------
000015AA                            
000015AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015AA                            
000015AA                            
000015AA                            KosDec:
000015AA                            
000015AA =FFFFFFFE                  var_2		= -2
000015AA =FFFFFFFF                  var_1		= -1
000015AA                            
000015AA 558F                       		subq.l	#2,sp
000015AC 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000015B0 1E98                       		move.b	(a0)+,(sp)
000015B2 3A17                       		move.w	(sp),d5
000015B4 780F                       		moveq	#$F,d4
000015B6                            
000015B6                            loc_18A8:
000015B6 E24D                       		lsr.w	#1,d5
000015B8 40C6                       		move	sr,d6
000015BA 51CC 0000                  		dbf	d4,loc_18BA
000015BE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000015C2 1E98                       		move.b	(a0)+,(sp)
000015C4 3A17                       		move.w	(sp),d5
000015C6 780F                       		moveq	#$F,d4
000015C8                            
000015C8                            loc_18BA:
000015C8 44C6                       		move	d6,ccr
000015CA 6400                       		bcc.s	loc_18C2
000015CC 12D8                       		move.b	(a0)+,(a1)+
000015CE 60E6                       		bra.s	loc_18A8
000015D0                            ; ===========================================================================
000015D0                            
000015D0                            loc_18C2:				; XREF: KosDec
000015D0 7600                       		moveq	#0,d3
000015D2 E24D                       		lsr.w	#1,d5
000015D4 40C6                       		move	sr,d6
000015D6 51CC 0000                  		dbf	d4,loc_18D6
000015DA 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000015DE 1E98                       		move.b	(a0)+,(sp)
000015E0 3A17                       		move.w	(sp),d5
000015E2 780F                       		moveq	#$F,d4
000015E4                            
000015E4                            loc_18D6:
000015E4 44C6                       		move	d6,ccr
000015E6 6500                       		bcs.s	loc_1906
000015E8 E24D                       		lsr.w	#1,d5
000015EA 51CC 0000                  		dbf	d4,loc_18EA
000015EE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000015F2 1E98                       		move.b	(a0)+,(sp)
000015F4 3A17                       		move.w	(sp),d5
000015F6 780F                       		moveq	#$F,d4
000015F8                            
000015F8                            loc_18EA:
000015F8 E353                       		roxl.w	#1,d3
000015FA E24D                       		lsr.w	#1,d5
000015FC 51CC 0000                  		dbf	d4,loc_18FC
00001600 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001604 1E98                       		move.b	(a0)+,(sp)
00001606 3A17                       		move.w	(sp),d5
00001608 780F                       		moveq	#$F,d4
0000160A                            
0000160A                            loc_18FC:
0000160A E353                       		roxl.w	#1,d3
0000160C 5243                       		addq.w	#1,d3
0000160E 74FF                       		moveq	#-1,d2
00001610 1418                       		move.b	(a0)+,d2
00001612 6000                       		bra.s	loc_191C
00001614                            ; ===========================================================================
00001614                            
00001614                            loc_1906:				; XREF: loc_18C2
00001614 1018                       		move.b	(a0)+,d0
00001616 1218                       		move.b	(a0)+,d1
00001618 74FF                       		moveq	#-1,d2
0000161A 1401                       		move.b	d1,d2
0000161C EB4A                       		lsl.w	#5,d2
0000161E 1400                       		move.b	d0,d2
00001620 0241 0007                  		andi.w	#7,d1
00001624 6700                       		beq.s	loc_1928
00001626 1601                       		move.b	d1,d3
00001628 5243                       		addq.w	#1,d3
0000162A                            
0000162A                            loc_191C:
0000162A 1031 2000                  		move.b	(a1,d2.w),d0
0000162E 12C0                       		move.b	d0,(a1)+
00001630 51CB FFF8                  		dbf	d3,loc_191C
00001634 6080                       		bra.s	loc_18A8
00001636                            ; ===========================================================================
00001636                            
00001636                            loc_1928:				; XREF: loc_1906
00001636 1218                       		move.b	(a0)+,d1
00001638 6700                       		beq.s	loc_1938
0000163A 0C01 0001                  		cmpi.b	#1,d1
0000163E 6700 FF76                  		beq.w	loc_18A8
00001642 1601                       		move.b	d1,d3
00001644 60E4                       		bra.s	loc_191C
00001646                            ; ===========================================================================
00001646                            
00001646                            loc_1938:				; XREF: loc_1928
00001646 548F                       		addq.l	#2,sp
00001648 4E75                       		rts	
0000164A                            ; End of function KosDec
0000164A                            
0000164A                            ; ---------------------------------------------------------------------------
0000164A                            ; Pallet cycling routine loading subroutine
0000164A                            ; ---------------------------------------------------------------------------
0000164A                            
0000164A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000164A                            
0000164A                            
0000164A                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
0000164A 7400                       		moveq	#0,d2
0000164C 7000                       		moveq	#0,d0
0000164E 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001654 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001658 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
0000165C                            ; End of function PalCycle_Load
0000165C                            
0000165C                            ; ===========================================================================
0000165C                            ; ---------------------------------------------------------------------------
0000165C                            ; Pallet cycling routines
0000165C                            ; ---------------------------------------------------------------------------
0000165C 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
0000165E 0000                       		dc.w PalCycle_LZ-PalCycle
00001660 0000                       		dc.w PalCycle_MZ-PalCycle
00001662 0000                       		dc.w PalCycle_SLZ-PalCycle
00001664 0000                       		dc.w PalCycle_SYZ-PalCycle
00001666 0000                       		dc.w PalCycle_SBZ-PalCycle
00001668 0000                       		dc.w PalCycle_GHZ-PalCycle
0000166A                            ; ===========================================================================
0000166A                            
0000166A                            PalCycle_GHZ:				; XREF: PalCycle
0000166A 4E75                       		rts
0000166C                            ; End of function PalCycle_Title
0000166C                            
0000166C                            
0000166C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000166C                            
0000166C                            
0000166C                            PalCycle_LZ:				; XREF: PalCycle
0000166C 5378 F634                  		subq.w	#1,($FFFFF634).w
00001670 6A00                       		bpl.s	loc_19D8
00001672 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001678 3038 F632                  		move.w	($FFFFF632).w,d0
0000167C 5278 F632                  		addq.w	#1,($FFFFF632).w
00001680 0240 0003                  		andi.w	#3,d0
00001684 E748                       		lsl.w	#3,d0
00001686 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
0000168C 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001692 6600                       		bne.s	loc_19C0
00001694 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
0000169A                            
0000169A                            loc_19C0:
0000169A 43F8 FB56                  		lea	($FFFFFB56).w,a1
0000169E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000016A2 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000016A6 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
000016AA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000016AE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000016B2                            
000016B2                            loc_19D8:
000016B2 3038 FE04                  		move.w	($FFFFFE04).w,d0
000016B6 0240 0007                  		andi.w	#7,d0
000016BA 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
000016BE 6700                       		beq.s	locret_1A3A
000016C0 7201                       		moveq	#1,d1
000016C2 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000016C6 6700                       		beq.s	loc_19F0
000016C8 4441                       		neg.w	d1
000016CA                            
000016CA                            loc_19F0:
000016CA 3038 F650                  		move.w	($FFFFF650).w,d0
000016CE 0240 0003                  		andi.w	#3,d0
000016D4 0C40 0003                  		cmpi.w	#3,d0
000016D8 6500                       		bcs.s	loc_1A0A
000016DA 3200                       		move.w	d0,d1
000016DC 7000                       		moveq	#0,d0
000016DE 4A41                       		tst.w	d1
000016E0 6A00                       		bpl.s	loc_1A0A
000016E2 7002                       		moveq	#2,d0
000016E4                            
000016E4                            loc_1A0A:
000016E4 31C0 F650                  		move.w	d0,($FFFFF650).w
000016EA 3200                       		move.w	d0,d1
000016F0 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
000016F6 43F8 FB76                  		lea	($FFFFFB76).w,a1
000016FA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000016FE 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001702 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001708 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
0000170C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001710 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001714                            
00001714                            locret_1A3A:
00001714 4E75                       		rts	
00001716                            ; End of function PalCycle_LZ
00001716                            
00001716                            ; ===========================================================================
00001716 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
0000171E                            ; ===========================================================================
0000171E                            
0000171E                            PalCycle_MZ:				; XREF: PalCycle
0000171E 4E75                       		rts	
00001720                            
00001720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001720                            
00001720                            
00001720                            PalCycle_SLZ:				; XREF: PalCycle
00001720 5378 F634                  		subq.w	#1,($FFFFF634).w
00001724 6A00                       		bpl.s	locret_1A80
00001726 31FC 0007 F634             		move.w	#7,($FFFFF634).w
0000172C 3038 F632                  		move.w	($FFFFF632).w,d0
00001730 5240                       		addq.w	#1,d0
00001732 0C40 0006                  		cmpi.w	#6,d0
00001736 6500                       		bcs.s	loc_1A60
00001738 7000                       		moveq	#0,d0
0000173A                            
0000173A                            loc_1A60:
0000173A 31C0 F632                  		move.w	d0,($FFFFF632).w
0000173E 3200                       		move.w	d0,d1
00001746 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
0000174C 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001750 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001754 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
0000175A                            
0000175A                            locret_1A80:
0000175A 4E75                       		rts	
0000175C                            ; End of function PalCycle_SLZ
0000175C                            
0000175C                            
0000175C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000175C                            
0000175C                            
0000175C                            PalCycle_SYZ:				; XREF: PalCycle
0000175C 5378 F634                  		subq.w	#1,($FFFFF634).w
00001760 6A00                       		bpl.s	locret_1AC6
00001762 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001768 3038 F632                  		move.w	($FFFFF632).w,d0
0000176C 5278 F632                  		addq.w	#1,($FFFFF632).w
00001770 0240 0003                  		andi.w	#3,d0
00001774 E548                       		lsl.w	#2,d0
00001776 3200                       		move.w	d0,d1
0000177A 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001780 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001784 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001788 22B0 0004                  		move.l	4(a0,d0.w),(a1)
0000178C 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001792 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001796 32B0 1000                  		move.w	(a0,d1.w),(a1)
0000179A 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
000017A0                            
000017A0                            locret_1AC6:
000017A0 4E75                       		rts	
000017A2                            ; End of function PalCycle_SYZ
000017A2                            
000017A2                            
000017A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A2                            
000017A2                            
000017A2                            PalCycle_SBZ:				; XREF: PalCycle
000017A2 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
000017A8 4A38 FE11                  		tst.b	($FFFFFE11).w
000017AC 6700                       		beq.s	loc_1ADA
000017AE 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
000017B4                            
000017B4                            loc_1ADA:
000017B4 43F8 F650                  		lea	($FFFFF650).w,a1
000017B8 321A                       		move.w	(a2)+,d1
000017BA                            
000017BA                            loc_1AE0:
000017BA 5311                       		subq.b	#1,(a1)
000017BC 6B00                       		bmi.s	loc_1AEA
000017BE 5489                       		addq.l	#2,a1
000017C0 5C8A                       		addq.l	#6,a2
000017C2 6000                       		bra.s	loc_1B06
000017C4                            ; ===========================================================================
000017C4                            
000017C4                            loc_1AEA:				; XREF: PalCycle_SBZ
000017C4 12DA                       		move.b	(a2)+,(a1)+
000017C6 1011                       		move.b	(a1),d0
000017C8 5200                       		addq.b	#1,d0
000017CA B01A                       		cmp.b	(a2)+,d0
000017CC 6500                       		bcs.s	loc_1AF6
000017CE 7000                       		moveq	#0,d0
000017D0                            
000017D0                            loc_1AF6:
000017D0 12C0                       		move.b	d0,(a1)+
000017D2 0240 000F                  		andi.w	#$F,d0
000017D8 305A                       		movea.w	(a2)+,a0
000017DA 365A                       		movea.w	(a2)+,a3
000017DC 36B0 0000                  		move.w	(a0,d0.w),(a3)
000017E0                            
000017E0                            loc_1B06:				; XREF: PalCycle_SBZ
000017E0 51C9 FFD8                  		dbf	d1,loc_1AE0
000017E4 5378 F634                  		subq.w	#1,($FFFFF634).w
000017E8 6A00                       		bpl.s	locret_1B64
000017EA 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
000017F0 31FC 0001 F634             		move.w	#1,($FFFFF634).w
000017F6 4A38 FE11                  		tst.b	($FFFFFE11).w
000017FA 6700                       		beq.s	loc_1B2E
000017FC 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001802 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001808                            
00001808                            loc_1B2E:
00001808 72FF                       		moveq	#-1,d1
0000180A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0000180E 6700                       		beq.s	loc_1B38
00001810 4441                       		neg.w	d1
00001812                            
00001812                            loc_1B38:
00001812 3038 F632                  		move.w	($FFFFF632).w,d0
00001816 0240 0003                  		andi.w	#3,d0
0000181C 0C40 0003                  		cmpi.w	#3,d0
00001820 6500                       		bcs.s	loc_1B52
00001822 3200                       		move.w	d0,d1
00001824 7000                       		moveq	#0,d0
00001826 4A41                       		tst.w	d1
00001828 6A00                       		bpl.s	loc_1B52
0000182A 7002                       		moveq	#2,d0
0000182C                            
0000182C                            loc_1B52:
0000182C 31C0 F632                  		move.w	d0,($FFFFF632).w
00001832 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001836 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000183A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
0000183E                            
0000183E                            locret_1B64:
0000183E 4E75                       		rts	
00001840                            ; End of function PalCycle_SBZ
00001840                            
00001840                            ; ===========================================================================
00001840                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001860                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001880                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
000018A0                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
000018B2                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
000018C4                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
0000192C                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001950                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001970                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001980                            
00001980                            Pal_SBZCycList:
00001980                            	include "_inc\SBZ pallet script 1.asm"
00001980                            ; ---------------------------------------------------------------------------
00001980                            ; Scrap Brain Zone 1 pallet cycling script
00001980                            ; ---------------------------------------------------------------------------
00001980 0008                       	dc.w 8			; number of entries - 1
00001982 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001984 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001986 FB50                       	dc.w $FB50		; RAM address
00001988 0D08                       	dc.b $D, 8
0000198A 0000                       	dc.w Pal_SBZCyc2
0000198C FB52                       	dc.w $FB52
0000198E 0E08                       	dc.b $E, 8
00001990 0000                       	dc.w Pal_SBZCyc3
00001992 FB6E                       	dc.w $FB6E
00001994 0B08                       	dc.b $B, 8
00001996 0000                       	dc.w Pal_SBZCyc5
00001998 FB70                       	dc.w $FB70
0000199A 0708                       	dc.b 7,	8
0000199C 0000                       	dc.w Pal_SBZCyc6
0000199E FB72                       	dc.w $FB72
000019A0 1C10                       	dc.b $1C, $10
000019A2 0000                       	dc.w Pal_SBZCyc7
000019A4 FB7E                       	dc.w $FB7E
000019A6 0303                       	dc.b 3,	3
000019A8 0000                       	dc.w Pal_SBZCyc8
000019AA FB78                       	dc.w $FB78
000019AC 0303                       	dc.b 3,	3
000019AE 0000                       	dc.w Pal_SBZCyc8+2
000019B0 FB7A                       	dc.w $FB7A
000019B2 0303                       	dc.b 3,	3
000019B4 0000                       	dc.w Pal_SBZCyc8+4
000019B6 FB7C                       	dc.w $FB7C
000019B8                            	even
000019B8                            	even
000019B8                            
000019B8                            Pal_SBZCycList2:
000019B8                            	include "_inc\SBZ pallet script 2.asm"
000019B8                            ; ---------------------------------------------------------------------------
000019B8                            ; Scrap Brain Zone 2 pallet cycling script
000019B8                            ; ---------------------------------------------------------------------------
000019B8 0006                       	dc.w 6
000019BA 0708                       	dc.b 7,	8
000019BC 0000                       	dc.w Pal_SBZCyc1
000019BE FB50                       	dc.w $FB50
000019C0 0D08                       	dc.b $D, 8
000019C2 0000                       	dc.w Pal_SBZCyc2
000019C4 FB52                       	dc.w $FB52
000019C6 0908                       	dc.b 9,	8
000019C8 0000                       	dc.w Pal_SBZCyc9
000019CA FB70                       	dc.w $FB70
000019CC 0708                       	dc.b 7,	8
000019CE 0000                       	dc.w Pal_SBZCyc6
000019D0 FB72                       	dc.w $FB72
000019D2 0303                       	dc.b 3,	3
000019D4 0000                       	dc.w Pal_SBZCyc8
000019D6 FB78                       	dc.w $FB78
000019D8 0303                       	dc.b 3,	3
000019DA 0000                       	dc.w Pal_SBZCyc8+2
000019DC FB7A                       	dc.w $FB7A
000019DE 0303                       	dc.b 3,	3
000019E0 0000                       	dc.w Pal_SBZCyc8+4
000019E2 FB7C                       	dc.w $FB7C
000019E4                            	even
000019E4                            	even
000019E4                            
000019E4                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
000019F4                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001A04                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001A14                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001A20                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001A30                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001A40                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001A60                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001A6A                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001A7A                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001A86                            ; ---------------------------------------------------------------------------
00001A86                            ; Subroutine to	fade out and fade in
00001A86                            ; ---------------------------------------------------------------------------
00001A86                            
00001A86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A86                            
00001A86                            
00001A86                            Pal_FadeTo:
00001A86 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001A8C                            
00001A8C                            Pal_FadeTo2:
00001A8C 7000                       		moveq	#0,d0
00001A8E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001A92 1038 F626                  		move.b	($FFFFF626).w,d0
00001A96 D0C0                       		adda.w	d0,a0
00001A98 7200                       		moveq	#0,d1
00001A9A 1038 F627                  		move.b	($FFFFF627).w,d0
00001A9E                            
00001A9E                            Pal_ToBlack:
00001A9E 30C1                       		move.w	d1,(a0)+
00001AA0 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001AA4 780E                       		moveq	#$0E,d4					; MJ: prepare maximum colour check
00001AA6 7C00                       		moveq	#$00,d6					; MJ: clear d6
00001AA8                            
00001AA8                            loc_1DCE:
00001AA8 6100 F850                  		bsr.w	RunPLC_RAM
00001AAC 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001AB2 6100 0000                  		bsr.w	DelayProgram
00001AB6 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
00001ABA 67EC                       		beq	loc_1DCE				; MJ: if null, delay a frame
00001ABC 6100                       		bsr.s	Pal_FadeIn
00001ABE 5504                       		subq.b	#$02,d4					; MJ: decrease colour check
00001AC0 66E6                       		bne	loc_1DCE				; MJ: if it has not reached null, branch
00001AC2 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w			; MJ: wait for V-blank again (so colours transfer)
00001AC8 6000 0000                  		bra	DelayProgram				; MJ: ''
00001ACC                            
00001ACC                            ; End of function Pal_FadeTo
00001ACC                            
00001ACC                            ; ---------------------------------------------------------------------------
00001ACC                            ; Pallet fade-in subroutine
00001ACC                            ; ---------------------------------------------------------------------------
00001ACC                            
00001ACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ACC                            
00001ACC                            
00001ACC                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001ACC 7000                       		moveq	#0,d0
00001ACE 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001AD2 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001AD6 1038 F626                  		move.b	($FFFFF626).w,d0
00001ADA D0C0                       		adda.w	d0,a0
00001ADC D2C0                       		adda.w	d0,a1
00001ADE 1038 F627                  		move.b	($FFFFF627).w,d0
00001AE2                            
00001AE2                            loc_1DFA:
00001AE2 6100                       		bsr.s	Pal_AddColor
00001AE4 51C8 FFFC                  		dbf	d0,loc_1DFA
00001AE8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001AEE 6600                       		bne.s	locret_1E24
00001AF0 7000                       		moveq	#0,d0
00001AF2 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001AF6 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001AFA 1038 F626                  		move.b	($FFFFF626).w,d0
00001AFE D0C0                       		adda.w	d0,a0
00001B00 D2C0                       		adda.w	d0,a1
00001B02 1038 F627                  		move.b	($FFFFF627).w,d0
00001B06                            
00001B06                            loc_1E1E:
00001B06 6100                       		bsr.s	Pal_AddColor
00001B08 51C8 FFFC                  		dbf	d0,loc_1E1E
00001B0C                            
00001B0C                            locret_1E24:
00001B0C 4E75                       		rts	
00001B0E                            ; End of function Pal_FadeIn
00001B0E                            
00001B0E                            
00001B0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B0E                            
00001B0E                            
00001B0E                            Pal_AddColor:				; XREF: Pal_FadeIn
00001B0E 1A11                       		move.b	(a1),d5					; MJ: load blue
00001B10 3219                       		move.w	(a1)+,d1				; MJ: load green and red
00001B12 1401                       		move.b	d1,d2					; MJ: load red
00001B14 E809                       		lsr.b	#$04,d1					; MJ: get only green
00001B16 0202 000E                  		andi.b	#$0E,d2					; MJ: get only red
00001B1A 3610                       		move.w	(a0),d3					; MJ: load current colour in buffer
00001B1C B805                       		cmp.b	d5,d4					; MJ: is it time for blue to fade?
00001B1E 6200 0000                  		bhi	FCI_NoBlue				; MJ: if not, branch
00001B22 0643 0200                  		addi.w	#$0200,d3				; MJ: increase blue
00001B26                            
00001B26                            FCI_NoBlue:
00001B26 B801                       		cmp.b	d1,d4					; MJ: is it time for green to fade?
00001B28 6200 0000                  		bhi	FCI_NoGreen				; MJ: if not, branch
00001B2C 0603 0020                  		addi.b	#$20,d3					; MJ: increase green
00001B30                            
00001B30                            FCI_NoGreen:
00001B30 B802                       		cmp.b	d2,d4					; MJ: is it time for red to fade?
00001B32 6200 0000                  		bhi	FCI_NoRed				; MJ: if not, branch
00001B36 5403                       		addq.b	#$02,d3					; MJ: increase red
00001B38                            
00001B38                            FCI_NoRed:
00001B38 30C3                       		move.w	d3,(a0)+				; MJ: save colour
00001B3A 4E75                       		rts						; MJ: return
00001B3C                            
00001B3C                            ; End of function Pal_AddColor
00001B3C                            
00001B3C                            
00001B3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B3C                            
00001B3C                            
00001B3C                            Pal_FadeFrom:
00001B3C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001B42 7807                       		moveq	#$07,d4					; MJ: set repeat times
00001B44 7C00                       		moveq	#$00,d6					; MJ: clear d6
00001B46                            
00001B46                            loc_1E5C:
00001B46 6100 F7B2                  		bsr.w	RunPLC_RAM
00001B4A 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001B50 6100 0000                  		bsr.w	DelayProgram
00001B54 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
00001B58 67EC                       		beq	loc_1E5C				; MJ: if null, delay a frame
00001B5A 6100                       		bsr.s	Pal_FadeOut
00001B5C 51CC FFE8                  		dbf	d4,loc_1E5C
00001B60 4E75                       		rts	
00001B62                            ; End of function Pal_FadeFrom
00001B62                            
00001B62                            ; ---------------------------------------------------------------------------
00001B62                            ; Pallet fade-out subroutine
00001B62                            ; ---------------------------------------------------------------------------
00001B62                            
00001B62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B62                            
00001B62                            
00001B62                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001B62 7000                       		moveq	#0,d0
00001B64 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001B68 1038 F626                  		move.b	($FFFFF626).w,d0
00001B6C D0C0                       		adda.w	d0,a0
00001B6E 1038 F627                  		move.b	($FFFFF627).w,d0
00001B72                            
00001B72                            loc_1E82:
00001B72 6100                       		bsr.s	Pal_DecColor
00001B74 51C8 FFFC                  		dbf	d0,loc_1E82
00001B78                            
00001B78 7000                       		moveq	#0,d0
00001B7A 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001B7E 1038 F626                  		move.b	($FFFFF626).w,d0
00001B82 D0C0                       		adda.w	d0,a0
00001B84 1038 F627                  		move.b	($FFFFF627).w,d0
00001B88                            
00001B88                            loc_1E98:
00001B88 6100                       		bsr.s	Pal_DecColor
00001B8A 51C8 FFFC                  		dbf	d0,loc_1E98
00001B8E 4E75                       		rts	
00001B90                            ; End of function Pal_FadeOut
00001B90                            
00001B90                            
00001B90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B90                            
00001B90                            
00001B90                            Pal_DecColor:				; XREF: Pal_FadeOut
00001B90 3A10                       		move.w	(a0),d5					; MJ: load colour
00001B92 3205                       		move.w	d5,d1					; MJ: copy to d1
00001B94 1401                       		move.b	d1,d2					; MJ: load green and red
00001B96 1601                       		move.b	d1,d3					; MJ: load red
00001B98 0241 0E00                  		andi.w	#$0E00,d1				; MJ: get only blue
00001B9C 6700 0000                  		beq	FCO_NoBlue				; MJ: if blue is finished, branch
00001BA0 0445 0200                  		subi.w	#$0200,d5				; MJ: decrease blue
00001BA4                            
00001BA4                            FCO_NoBlue:
00001BA4 0242 00E0                  		andi.w	#$00E0,d2				; MJ: get only green (needs to be word)
00001BA8 6700 0000                  		beq	FCO_NoGreen				; MJ: if green is finished, branch
00001BAC 0405 0020                  		subi.b	#$20,d5					; MJ: decrease green
00001BB0                            
00001BB0                            FCO_NoGreen:
00001BB0 0203 000E                  		andi.b	#$0E,d3					; MJ: get only red
00001BB4 6700 0000                  		beq	FCO_NoRed				; MJ: if red is finished, branch
00001BB8 5505                       		subq.b	#$02,d5					; MJ: decrease red
00001BBA                            
00001BBA                            FCO_NoRed:
00001BBA 30C5                       		move.w	d5,(a0)+				; MJ: save new colour
00001BBC 4E75                       		rts						; MJ: return
00001BBE                            
00001BBE                            ; End of function Pal_DecColor
00001BBE                            
00001BBE                            ; ---------------------------------------------------------------------------
00001BBE                            ; Subroutine to	fill the pallet	with white (special stage)
00001BBE                            ; ---------------------------------------------------------------------------
00001BBE                            
00001BBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BBE                            
00001BBE                            
00001BBE                            Pal_MakeWhite:				; XREF: SpecialStage
00001BBE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001BC4 7000                       		moveq	#0,d0
00001BC6 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001BCA 1038 F626                  		move.b	($FFFFF626).w,d0
00001BCE D0C0                       		adda.w	d0,a0
00001BD0 323C 0EEE                  		move.w	#$EEE,d1
00001BD4 1038 F627                  		move.b	($FFFFF627).w,d0
00001BD8                            
00001BD8                            PalWhite_Loop:
00001BD8 30C1                       		move.w	d1,(a0)+
00001BDA 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001BDE 383C 0015                  		move.w	#$15,d4
00001BE2                            
00001BE2                            loc_1EF4:
00001BE2 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001BE8 6100 0000                  		bsr.w	DelayProgram
00001BEC 6100                       		bsr.s	Pal_WhiteToBlack
00001BEE 6100 F70A                  		bsr.w	RunPLC_RAM
00001BF2 51CC FFEE                  		dbf	d4,loc_1EF4
00001BF6 4E75                       		rts	
00001BF8                            ; End of function Pal_MakeWhite
00001BF8                            
00001BF8                            
00001BF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BF8                            
00001BF8                            
00001BF8                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001BF8 7000                       		moveq	#0,d0
00001BFA 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001BFE 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001C02 1038 F626                  		move.b	($FFFFF626).w,d0
00001C06 D0C0                       		adda.w	d0,a0
00001C08 D2C0                       		adda.w	d0,a1
00001C0A 1038 F627                  		move.b	($FFFFF627).w,d0
00001C0E                            
00001C0E                            loc_1F20:
00001C0E 6100                       		bsr.s	Pal_DecColor2
00001C10 51C8 FFFC                  		dbf	d0,loc_1F20
00001C14                            
00001C14 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001C1A 6600                       		bne.s	locret_1F4A
00001C1C 7000                       		moveq	#0,d0
00001C1E 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001C22 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001C26 1038 F626                  		move.b	($FFFFF626).w,d0
00001C2A D0C0                       		adda.w	d0,a0
00001C2C D2C0                       		adda.w	d0,a1
00001C2E 1038 F627                  		move.b	($FFFFF627).w,d0
00001C32                            
00001C32                            loc_1F44:
00001C32 6100                       		bsr.s	Pal_DecColor2
00001C34 51C8 FFFC                  		dbf	d0,loc_1F44
00001C38                            
00001C38                            locret_1F4A:
00001C38 4E75                       		rts	
00001C3A                            ; End of function Pal_WhiteToBlack
00001C3A                            
00001C3A                            
00001C3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C3A                            
00001C3A                            
00001C3A                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001C3A 3419                       		move.w	(a1)+,d2
00001C3C 3610                       		move.w	(a0),d3
00001C3E B642                       		cmp.w	d2,d3
00001C40 6700                       		beq.s	loc_1F78
00001C42 3203                       		move.w	d3,d1
00001C44 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001C48 6500                       		bcs.s	loc_1F64
00001C4A B242                       		cmp.w	d2,d1
00001C4C 6500                       		bcs.s	loc_1F64
00001C4E 30C1                       		move.w	d1,(a0)+
00001C50 4E75                       		rts	
00001C52                            ; ===========================================================================
00001C52                            
00001C52                            loc_1F64:				; XREF: Pal_DecColor2
00001C52 3203                       		move.w	d3,d1
00001C54 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001C58 6500                       		bcs.s	loc_1F74
00001C5A B242                       		cmp.w	d2,d1
00001C5C 6500                       		bcs.s	loc_1F74
00001C5E 30C1                       		move.w	d1,(a0)+
00001C60 4E75                       		rts	
00001C62                            ; ===========================================================================
00001C62                            
00001C62                            loc_1F74:				; XREF: loc_1F64
00001C62 5558                       		subq.w	#2,(a0)+	; decrease red value
00001C64 4E75                       		rts	
00001C66                            ; ===========================================================================
00001C66                            
00001C66                            loc_1F78:				; XREF: Pal_DecColor2
00001C66 5448                       		addq.w	#2,a0
00001C68 4E75                       		rts	
00001C6A                            ; End of function Pal_DecColor2
00001C6A                            
00001C6A                            ; ---------------------------------------------------------------------------
00001C6A                            ; Subroutine to	make a white flash when	you enter a special stage
00001C6A                            ; ---------------------------------------------------------------------------
00001C6A                            
00001C6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6A                            
00001C6A                            
00001C6A                            Pal_MakeFlash:				; XREF: SpecialStage
00001C6A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001C70 383C 0015                  		move.w	#$15,d4
00001C74                            
00001C74                            loc_1F86:
00001C74 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001C7A 6100 0000                  		bsr.w	DelayProgram
00001C7E 6100                       		bsr.s	Pal_ToWhite
00001C80 6100 F678                  		bsr.w	RunPLC_RAM
00001C84 51CC FFEE                  		dbf	d4,loc_1F86
00001C88 4E75                       		rts	
00001C8A                            ; End of function Pal_MakeFlash
00001C8A                            
00001C8A                            
00001C8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C8A                            
00001C8A                            
00001C8A                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001C8A 7000                       		moveq	#0,d0
00001C8C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001C90 1038 F626                  		move.b	($FFFFF626).w,d0
00001C94 D0C0                       		adda.w	d0,a0
00001C96 1038 F627                  		move.b	($FFFFF627).w,d0
00001C9A                            
00001C9A                            loc_1FAC:
00001C9A 6100                       		bsr.s	Pal_AddColor2
00001C9C 51C8 FFFC                  		dbf	d0,loc_1FAC
00001CA0 7000                       		moveq	#0,d0
00001CA2 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001CA6 1038 F626                  		move.b	($FFFFF626).w,d0
00001CAA D0C0                       		adda.w	d0,a0
00001CAC 1038 F627                  		move.b	($FFFFF627).w,d0
00001CB0                            
00001CB0                            loc_1FC2:
00001CB0 6100                       		bsr.s	Pal_AddColor2
00001CB2 51C8 FFFC                  		dbf	d0,loc_1FC2
00001CB6 4E75                       		rts	
00001CB8                            ; End of function Pal_ToWhite
00001CB8                            
00001CB8                            
00001CB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CB8                            
00001CB8                            
00001CB8                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001CB8 3410                       		move.w	(a0),d2
00001CBA 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001CBE 6700                       		beq.s	loc_2006
00001CC0 3202                       		move.w	d2,d1
00001CC2 0241 000E                  		andi.w	#$E,d1
00001CC6 0C41 000E                  		cmpi.w	#$E,d1
00001CCA 6700                       		beq.s	loc_1FE2
00001CCC 5458                       		addq.w	#2,(a0)+	; increase red value
00001CCE 4E75                       		rts	
00001CD0                            ; ===========================================================================
00001CD0                            
00001CD0                            loc_1FE2:				; XREF: Pal_AddColor2
00001CD0 3202                       		move.w	d2,d1
00001CD2 0241 00E0                  		andi.w	#$E0,d1
00001CD6 0C41 00E0                  		cmpi.w	#$E0,d1
00001CDA 6700                       		beq.s	loc_1FF4
00001CDC 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00001CE0 4E75                       		rts	
00001CE2                            ; ===========================================================================
00001CE2                            
00001CE2                            loc_1FF4:				; XREF: loc_1FE2
00001CE2 3202                       		move.w	d2,d1
00001CE4 0241 0E00                  		andi.w	#$E00,d1
00001CE8 0C41 0E00                  		cmpi.w	#$E00,d1
00001CEC 6700                       		beq.s	loc_2006
00001CEE 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00001CF2 4E75                       		rts	
00001CF4                            ; ===========================================================================
00001CF4                            
00001CF4                            loc_2006:				; XREF: Pal_AddColor2
00001CF4 5448                       		addq.w	#2,a0
00001CF6 4E75                       		rts	
00001CF8                            ; End of function Pal_AddColor2
00001CF8                            
00001CF8                            ; ---------------------------------------------------------------------------
00001CF8                            ; Subroutines to load pallets
00001CF8                            ; ---------------------------------------------------------------------------
00001CF8                            
00001CF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CF8                            
00001CF8                            
00001CF8                            PalLoad1:
00001CF8 43F9 0000 0000             		lea	(PalPointers).l,a1
00001CFE E748                       		lsl.w	#3,d0
00001D00 D2C0                       		adda.w	d0,a1
00001D02 2459                       		movea.l	(a1)+,a2
00001D04 3659                       		movea.w	(a1)+,a3
00001D06 D6FC 0080                  		adda.w	#$80,a3
00001D0A 3E19                       		move.w	(a1)+,d7
00001D0C                            
00001D0C                            loc_2110:
00001D0C 26DA                       		move.l	(a2)+,(a3)+
00001D0E 51CF FFFC                  		dbf	d7,loc_2110
00001D12 4E75                       		rts	
00001D14                            ; End of function PalLoad1
00001D14                            
00001D14                            
00001D14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D14                            
00001D14                            
00001D14                            PalLoad2:
00001D14 43F9 0000 0000             		lea	(PalPointers).l,a1
00001D1A E748                       		lsl.w	#3,d0
00001D1C D2C0                       		adda.w	d0,a1
00001D1E 2459                       		movea.l	(a1)+,a2
00001D20 3659                       		movea.w	(a1)+,a3
00001D22 3E19                       		move.w	(a1)+,d7
00001D24                            
00001D24                            loc_2128:
00001D24 26DA                       		move.l	(a2)+,(a3)+
00001D26 51CF FFFC                  		dbf	d7,loc_2128
00001D2A 4E75                       		rts	
00001D2C                            ; End of function PalLoad2
00001D2C                            
00001D2C                            ; ---------------------------------------------------------------------------
00001D2C                            ; Underwater pallet loading subroutine
00001D2C                            ; ---------------------------------------------------------------------------
00001D2C                            
00001D2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D2C                            
00001D2C                            
00001D2C                            PalLoad3_Water:
00001D2C 43F9 0000 0000             		lea	(PalPointers).l,a1
00001D32 E748                       		lsl.w	#3,d0
00001D34 D2C0                       		adda.w	d0,a1
00001D36 2459                       		movea.l	(a1)+,a2
00001D38 3659                       		movea.w	(a1)+,a3
00001D3A 96FC 0080                  		suba.w	#$80,a3
00001D3E 3E19                       		move.w	(a1)+,d7
00001D40                            
00001D40                            loc_2144:
00001D40 26DA                       		move.l	(a2)+,(a3)+
00001D42 51CF FFFC                  		dbf	d7,loc_2144
00001D46 4E75                       		rts	
00001D48                            ; End of function PalLoad3_Water
00001D48                            
00001D48                            
00001D48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D48                            
00001D48                            
00001D48                            PalLoad4_Water:
00001D48 43F9 0000 0000             		lea	(PalPointers).l,a1
00001D4E E748                       		lsl.w	#3,d0
00001D50 D2C0                       		adda.w	d0,a1
00001D52 2459                       		movea.l	(a1)+,a2
00001D54 3659                       		movea.w	(a1)+,a3
00001D56 96FC 0100                  		suba.w	#$100,a3
00001D5A 3E19                       		move.w	(a1)+,d7
00001D5C                            
00001D5C                            loc_2160:
00001D5C 26DA                       		move.l	(a2)+,(a3)+
00001D5E 51CF FFFC                  		dbf	d7,loc_2160
00001D62 4E75                       		rts	
00001D64                            ; End of function PalLoad4_Water
00001D64                            
00001D64                            ; ===========================================================================
00001D64                            ; ---------------------------------------------------------------------------
00001D64                            ; Pallet pointers
00001D64                            ; ---------------------------------------------------------------------------
00001D64                            PalPointers:
00001D64                            	include "_inc\Pallet pointers.asm"
00001D64                            ; ---------------------------------------------------------------------------
00001D64                            ; Pallet pointers
00001D64                            ; ---------------------------------------------------------------------------
00001D64 0000 0000                  	dc.l MartyrPal		; pallet address
00001D68 FB00                       	dc.w $FB00		; RAM address
00001D6A 0007                       	dc.w 7		; (pallet length / 2) - 1
00001D6C 0000 0000                  	dc.l Pal_Title
00001D70 FB00                       	dc.w $FB00
00001D72 001F                       	dc.w $1F
00001D74 0000 0000                  	dc.l Pal_LevelSel
00001D78 FB00                       	dc.w $FB00
00001D7A 001F                       	dc.w $1F
00001D7C 0000 0000                  	dc.l Pal_Sonic
00001D80 FB00                       	dc.w $FB00
00001D82 0007                       	dc.w 7
00001D84 0000 0000                  	dc.l Pal_GHZ
00001D88 FB20                       	dc.w $FB20
00001D8A 0017                       	dc.w $17
00001D8C 0000 0000                  	dc.l Pal_LZ
00001D90 FB20                       	dc.w $FB20
00001D92 0017                       	dc.w $17
00001D94 0000 0000                  	dc.l Pal_MZ
00001D98 FB20                       	dc.w $FB20
00001D9A 0017                       	dc.w $17
00001D9C 0000 0000                  	dc.l Pal_SLZ
00001DA0 FB20                       	dc.w $FB20
00001DA2 0017                       	dc.w $17
00001DA4 0000 0000                  	dc.l Pal_SYZ
00001DA8 FB20                       	dc.w $FB20
00001DAA 0017                       	dc.w $17
00001DAC 0000 0000                  	dc.l Pal_SBZ1
00001DB0 FB20                       	dc.w $FB20
00001DB2 0017                       	dc.w $17
00001DB4 0000 0000                  	dc.l Pal_Special
00001DB8 FB00                       	dc.w $FB00
00001DBA 001F                       	dc.w $1F
00001DBC 0000 0000                  	dc.l Pal_LZWater
00001DC0 FB00                       	dc.w $FB00
00001DC2 001F                       	dc.w $1F
00001DC4 0000 0000                  	dc.l Pal_SBZ3
00001DC8 FB20                       	dc.w $FB20
00001DCA 0017                       	dc.w $17
00001DCC 0000 0000                  	dc.l Pal_SBZ3Water
00001DD0 FB00                       	dc.w $FB00
00001DD2 001F                       	dc.w $1F
00001DD4 0000 0000                  	dc.l Pal_SBZ2
00001DD8 FB20                       	dc.w $FB20
00001DDA 0017                       	dc.w $17
00001DDC 0000 0000                  	dc.l Pal_LZSonWater
00001DE0 FB00                       	dc.w $FB00
00001DE2 0007                       	dc.w 7
00001DE4 0000 0000                  	dc.l Pal_SBZ3SonWat
00001DE8 FB00                       	dc.w $FB00
00001DEA 0007                       	dc.w 7
00001DEC 0000 0000                  	dc.l Pal_SpeResult
00001DF0 FB00                       	dc.w $FB00
00001DF2 001F                       	dc.w $1F
00001DF4 0000 0000                  	dc.l Pal_SpeContinue
00001DF8 FB00                       	dc.w $FB00
00001DFA 000F                       	dc.w $F
00001DFC 0000 0000                  	dc.l Pal_Ending
00001E00 FB00                       	dc.w $FB00
00001E02 001F                       	dc.w $1F
00001E02 001F                       	dc.w $1F
00001E04                            
00001E04                            ; ---------------------------------------------------------------------------
00001E04                            ; Pallet data
00001E04                            ; ---------------------------------------------------------------------------
00001E04                            Pal_Title:	incbin	pallet\title.bin
00001E84                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00001F04                            Pal_Sonic:	incbin	pallet\sonic.bin
00001F24                            Pal_GHZ:	incbin	pallet\ghz.bin
00001F84                            Pal_LZ:		incbin	pallet\lz.bin
00001FE4                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002064                            Pal_MZ:		incbin	pallet\mz.bin
000020C4                            Pal_SLZ:	incbin	pallet\slz.bin
00002124                            Pal_SYZ:	incbin	pallet\syz.bin
00002184                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
000021E4                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
00002244                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
000022C4                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
00002324                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
000023A4                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
000023C4                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
000023E4                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002464                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
000024A4                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002524                            
00002524                            ; ---------------------------------------------------------------------------
00002524                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002524                            ; ---------------------------------------------------------------------------
00002524                            
00002524                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002524                            
00002524                            
00002524                            DelayProgram:				; XREF: PauseGame
00002524 46FC 2300                  		move	#$2300,sr
00002528                            
00002528                            loc_29AC:
00002528 4A38 F62A                  		tst.b	($FFFFF62A).w
0000252C 66FA                       		bne.s	loc_29AC
0000252E 4E75                       		rts	
00002530                            ; End of function DelayProgram
00002530                            
00002530                            ; ---------------------------------------------------------------------------
00002530                            ; Subroutine to	generate a pseudo-random number	in d0
00002530                            ; ---------------------------------------------------------------------------
00002530                            
00002530                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002530                            
00002530                            
00002530                            RandomNumber:
00002530 2238 F636                  		move.l	($FFFFF636).w,d1
00002534 6600                       		bne.s	loc_29C0
00002536 223C 2A6D 365A             		move.l	#$2A6D365A,d1
0000253C                            
0000253C                            loc_29C0:
0000253C 2001                       		move.l	d1,d0
0000253E E581                       		asl.l	#2,d1
00002542 E781                       		asl.l	#3,d1
00002546 3001                       		move.w	d1,d0
00002548 4841                       		swap	d1
0000254C 3200                       		move.w	d0,d1
0000254E 4841                       		swap	d1
00002550 21C1 F636                  		move.l	d1,($FFFFF636).w
00002554 4E75                       		rts	
00002556                            ; End of function RandomNumber
00002556                            
00002556                            
00002556                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002556                            
00002556                            
00002556                            CalcSine:				; XREF: SS_BGAnimate; et al
00002556 0240 00FF                  		andi.w	#$FF,d0
0000255C 0640 0080                  		addi.w	#$80,d0
00002560 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002564 0440 0080                  		subi.w	#$80,d0
00002568 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
0000256C 4E75                       		rts	
0000256E                            ; End of function CalcSine
0000256E                            
0000256E                            ; ===========================================================================
0000256E                            
0000256E                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
000027EE                            
000027EE                            ; ===========================================================================
000027EE 48E7 6000                  		movem.l	d1-d2,-(sp)
000027F2 3200                       		move.w	d0,d1
000027F4 4841                       		swap	d1
000027F6 7000                       		moveq	#0,d0
000027F8 3200                       		move.w	d0,d1
000027FA 7407                       		moveq	#7,d2
000027FC                            
000027FC                            loc_2C80:
000027FC E599                       		rol.l	#2,d1
00002800 5240                       		addq.w	#1,d0
00002804 6400                       		bcc.s	loc_2C9A
00002808 5340                       		subq.w	#1,d0
0000280A 51CA FFF0                  		dbf	d2,loc_2C80
0000280E E248                       		lsr.w	#1,d0
00002810 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002814 4E75                       		rts	
00002816                            ; ===========================================================================
00002816                            
00002816                            loc_2C9A:
00002816 5240                       		addq.w	#1,d0
00002818 51CA FFE2                  		dbf	d2,loc_2C80
0000281C E248                       		lsr.w	#1,d0
0000281E 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002822 4E75                       		rts	
00002824                            
00002824                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002824                            
00002824                            
00002824                            CalcAngle:
00002824 48E7 1800                  		movem.l	d3-d4,-(sp)
00002828 7600                       		moveq	#0,d3
0000282A 7800                       		moveq	#0,d4
0000282C 3601                       		move.w	d1,d3
0000282E 3802                       		move.w	d2,d4
00002832 6700                       		beq.s	loc_2D04
00002834 3802                       		move.w	d2,d4
00002836 4A43                       		tst.w	d3
00002838 6A00 0000                  		bpl.w	loc_2CC2
0000283C 4443                       		neg.w	d3
0000283E                            
0000283E                            loc_2CC2:
0000283E 4A44                       		tst.w	d4
00002840 6A00 0000                  		bpl.w	loc_2CCA
00002844 4444                       		neg.w	d4
00002846                            
00002846                            loc_2CCA:
00002846 B843                       		cmp.w	d3,d4
00002848 6400 0000                  		bcc.w	loc_2CDC
0000284C E18C                       		lsl.l	#8,d4
0000284E 88C3                       		divu.w	d3,d4
00002850 7000                       		moveq	#0,d0
00002852 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002856 6000                       		bra.s	loc_2CE6
00002858                            ; ===========================================================================
00002858                            
00002858                            loc_2CDC:				; XREF: CalcAngle
00002858 E18B                       		lsl.l	#8,d3
0000285A 86C4                       		divu.w	d4,d3
0000285C 7040                       		moveq	#$40,d0
00002862                            
00002862                            loc_2CE6:
00002862 4A41                       		tst.w	d1
00002864 6A00 0000                  		bpl.w	loc_2CF2
00002868 4440                       		neg.w	d0
0000286A 0640 0080                  		addi.w	#$80,d0
0000286E                            
0000286E                            loc_2CF2:
0000286E 4A42                       		tst.w	d2
00002870 6A00 0000                  		bpl.w	loc_2CFE
00002874 4440                       		neg.w	d0
00002876 0640 0100                  		addi.w	#$100,d0
0000287A                            
0000287A                            loc_2CFE:
0000287A 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000287E 4E75                       		rts	
00002880                            ; ===========================================================================
00002880                            
00002880                            loc_2D04:				; XREF: CalcAngle
00002880 303C 0040                  		move.w	#$40,d0
00002884 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002888 4E75                       		rts	
0000288A                            ; End of function CalcAngle
0000288A                            
0000288A                            ; ===========================================================================
0000288A                            
0000288A                            Angle_Data:	incbin	misc\angles.bin
0000298C                            
0000298C                            ; ===========================================================================
0000298C                            
0000298C                            		include	"MartyrSplash/code.asm"
0000298C                            ; ---------------------------------------------------------------------------
0000298C                            ; Martyr Splash Screen
0000298C                            ; Graphics and screen setup - BunniDev
0000298C                            ; Wave effect - Rivet
0000298C                            ; ---------------------------------------------------------------------------
0000298C                            
0000298C                            MartyrSplash:
0000298C 103C 00E4                  		move.b	#$E4,d0
00002990 6100 E68E                  		bsr.w	PlaySound_Special	; Stop the music
00002994 6100 E956                  		bsr.w	ClearPLC
00002998 4DF9 00C0 0004             		lea	($C00004).l,a6
0000299E 3CBC 8004                  		move.w	#$8004,(a6)	; 8 color mode
000029A2 3CBC 8230                  		move.w	#$8230,(a6)	; Foreground nametable address
000029A6 3CBC 8407                  		move.w	#$8407,(a6)	; Background nametable address
000029AA 3CBC 8700                  		move.w	#$8700,(a6)	; Set background color to palette entry 0
000029AE 3CBC 8B03                  		move.w	#$8B00|%00000011,(a6)		;Setting HScroll to be every line
000029B2 3CBC 8C81                  		move.w #$8C00|%10000001,(a6)	; Force resolution to 320x224
000029B6 4238 F64E                  		clr.b	($FFFFF64E).w
000029BA 46FC 2700                  		move	#$2700,sr	; Disable interrupts
000029BE 3038 F60C                  		move.w	($FFFFF60C).w,d0
000029C2 0200 00BF                  		andi.b	#$BF,d0
000029C6 33C0 00C0 0004             		move.w	d0,($C00004).l
000029CC 6100 E57A                  		bsr.w	ClearScreen
000029D0                            	
000029D0                            		; Load the splash screen's tiles
000029D0 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000029DA 41F9 0000 0000             		lea	(MartyrTiles).l,a0
000029E0 6100 E76C                  		bsr.w	NemDec
000029E4 43F9 00FF 0000             		lea	($FF0000).l,a1
000029EA                            
000029EA                            		; Load the background's mappings
000029EA 41F9 0000 0000             		lea	(MartyrBGMap).l,a0
000029F0 303C 0000                  		move.w	#0,d0
000029F4 6100 EA36                  		bsr.w	EniDec
000029F8 43F9 00FF 0000             		lea	($FF0000).l,a1
000029FE 203C 5FFC 0003             		move.l	#$5FFC0003,d0	; Write to the background
00002A04 722B                       		moveq	#44-1,d1	; Width
00002A06 741B                       		moveq	#28-1,d2	; Height
00002A08 6100 E694                  		bsr.w	ShowVDPGraphics
00002A0C                            
00002A0C                            		; Load the foreground's mappings
00002A0C 41F9 0000 0000             		lea	(MartyrFGMap).l,a0
00002A12 303C 0000                  		move.w	#0,d0
00002A16 43F9 00FF 0000             		lea	($FF0000).l,a1
00002A1C 6100 EA0E                  		bsr.w	EniDec
00002A20 203C 4000 0003             		move.l	#$40000003,d0	; Write to the foreground
00002A26 7227                       		moveq	#40-1,d1	; Width
00002A28 741B                       		moveq	#28-1,d2	; Height
00002A2A 6100 E672                  		bsr.w	ShowVDPGraphics
00002A2E                            
00002A2E                            		; Load the palette
00002A2E 7000                       		moveq	#0,d0
00002A30 6100 F2E2                  		bsr.w	PalLoad2
00002A34                            
00002A34 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002A38 0000 0040                  		ori.b	#$40,d0
00002A3C 33C0 00C0 0004             		move.w	d0,($C00004).l
00002A42 31FC 0258 F614             		move.w	#60*10,($FFFFF614).w
00002A48 31FC 0000 F5C0             		move.w	#0, ($FFFFF5C0).w			;Zero out Counter just in case
00002A4E                            
00002A4E                            MartyrLoop:
00002A4E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00002A54 6100 FACE                  		bsr.w	DelayProgram
00002A58                            
00002A58                            MartyrBGDeform:
00002A58 43F8 CC00                  		lea ($FFFFCC00),a1
00002A5C 7000                       		moveq   #0, d0
00002A5E 7600                       		moveq	#0, d3						;Avoid using d1 (Calcsine modifies it)
00002A60 343C 00DF                  		move.w  #224-1, d2					;Line count to decrease (-1 for dbf)
00002A64 3038 F5C0                  		move.w  ($FFFFF5C0).w, d0			;Get counter
00002A68 3600                       		move.w	d0, d3						;d0 will be changed, save counter
00002A6A                            
00002A6A                            	@loop:
00002A6A 7000                       		moveq	#0, d0
00002A6C 3003                       		move.w	d3, d0						;For Calcsine
00002A6E 6100 FAE6                  		bsr.w   CalcSine
00002A72 E648                       		lsr.w	#3, d0						;Make the wave smaller
00002A74 4443                       		neg.w	d3							;Flip per-line counter
00002A76 6B00 0000                  		bmi		@OddFrame					;Only add 1 to it on an even frame
00002A7A 5A43                       		addq	#5, d3						;Next line will be at a different pos (Change for wavy-ness)
00002A7C                            	@OddFrame:
00002A7C 22C0                       		move.l	d0, (a1)+					;Upload to HScroll in RAM (B Plane in bottom word)
00002A7E 51CA FFEA                  		dbf 	d2, @loop
00002A82 5478 F5C0                  		addq	#2,($FFFFF5C0).w			;Incrementing Speed (Change to adjust speed)
00002A86                            		
00002A86 4A78 F614                  		tst.w	($FFFFF614).w	; Check if the timer is up
00002A8A 67C2                       		beq.s	MartyrLoop	; If so, go to the title screen
00002A8C 0238 0080 F605             		andi.b	#$80,($FFFFF605).w	; Check if start was pressed
00002A92 67BA                       		beq.s	MartyrLoop	; If not, continue looping until either start or the timer is up
00002A94                            
00002A94                            MartyrEnd:
00002A94 11FC 0004 F600             		move.b	#4,($FFFFF600).w	; Go to the title screen
00002A9A 4E75                       		rts	
00002A9C                            
00002A9C                            ; ===========================================================================
00002A9C                            ; ===========================================================================
00002A9C                            
00002A9C                            ; ---------------------------------------------------------------------------
00002A9C                            ; Title	screen
00002A9C                            ; ---------------------------------------------------------------------------
00002A9C                            
00002A9C                            TitleScreen:				; XREF: GameModeArray
00002A9C 103C 00E4                  		move.b	#$E4,d0
00002AA0 6100 E57E                  		bsr.w	PlaySound_Special ; stop music
00002AA4 6100 E846                  		bsr.w	ClearPLC
00002AA8 6100 F092                  		bsr.w	Pal_FadeFrom
00002AAC 46FC 2700                  		move	#$2700,sr
00002AB0 6100 E524                  		bsr.w	SoundDriverLoad
00002AB4 4DF9 00C0 0004             		lea	($C00004).l,a6
00002ABA 3CBC 8004                  		move.w	#$8004,(a6)
00002ABE 3CBC 8230                  		move.w	#$8230,(a6)
00002AC2 3CBC 8407                  		move.w	#$8407,(a6)
00002AC6 3CBC 9001                  		move.w	#$9001,(a6)
00002ACA 3CBC 9200                  		move.w	#$9200,(a6)
00002ACE 3CBC 8B03                  		move.w	#$8B03,(a6)
00002AD2 3CBC 8720                  		move.w	#$8720,(a6)
00002AD6 3CBC 8C00                  		move.w #$8C00|0,(a6)
00002ADA 4238 F64E                  		clr.b	($FFFFF64E).w
00002ADE 6100 E468                  		bsr.w	ClearScreen
00002AE2 43F8 D000                  		lea	($FFFFD000).w,a1
00002AE6 7000                       		moveq	#0,d0
00002AE8 323C 07FF                  		move.w	#$7FF,d1
00002AEC                            
00002AEC                            Title_ClrObjRam:
00002AEC 22C0                       		move.l	d0,(a1)+
00002AEE 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00002AF2 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00002AFC 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00002B02 6100 E64A                  		bsr.w	NemDec
00002B06 43F9 00FF 0000             		lea	($FF0000).l,a1
00002B0C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002B10 7000                       		moveq	#0,d0
00002B12 323C 001F                  		move.w	#$1F,d1
00002B16                            
00002B16                            Title_ClrPallet:
00002B16 22C0                       		move.l	d0,(a1)+
00002B18 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00002B1C 7003                       		moveq	#3,d0		; load Sonic's pallet
00002B1E 6100 F1D8                  		bsr.w	PalLoad1
00002B22 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00002B28 4EB9 0000 0000             		jsr	ObjectsLoad
00002B2E 4EB9 0000 0000             		jsr	BuildSprites
00002B34 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00002B38 6100 E4E6                  		bsr.w	PlaySound_Special
00002B3C 6100 EF48                  		bsr.w	Pal_FadeTo
00002B40 46FC 2700                  		move	#$2700,sr
00002B44 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00002B4E 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00002B54 6100 E5F8                  		bsr.w	NemDec
00002B58 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00002B62 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00002B68 6100 E5E4                  		bsr.w	NemDec
00002B6C 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00002B76 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00002B7C 6100 E5D0                  		bsr.w	NemDec
00002B80 4DF9 00C0 0000             		lea	($C00000).l,a6
00002B86 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00002B8E 4BF9 0000 03C6             		lea	(Art_Text).l,a5
00002B94 323C 028F                  		move.w	#$28F,d1
00002B98                            
00002B98                            Title_LoadText:
00002B98 3C9D                       		move.w	(a5)+,(a6)
00002B9A 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00002B9E                            
00002B9E 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00002BA4 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00002BAA 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00002BB0 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00002BB6 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00002BBC 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00002BC2 6100 EF78                  		bsr.w	Pal_FadeFrom
00002BC6 46FC 2700                  		move	#$2700,sr
00002BCA 6100 E37C                  		bsr.w	ClearScreen
00002BCE 43F9 00FF 0000             		lea	($FF0000).l,a1
00002BD4 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00002BDA 303C 0000                  		move.w	#0,d0
00002BDE 6100 E84C                  		bsr.w	EniDec
00002BE2 43F9 00FF 0000             		lea	($FF0000).l,a1
00002BE8 203C 4206 0003             		move.l	#$42060003,d0
00002BEE 7221                       		moveq	#$21,d1
00002BF0 7415                       		moveq	#$15,d2
00002BF2 6100 E4AA                  		bsr.w	ShowVDPGraphics
00002BF6 7001                       		moveq	#1,d0		; load title screen pallet
00002BF8 6100 F0FE                  		bsr.w	PalLoad1
00002BFC 103C 008A                  		move.b	#$8A,d0		; play title screen music
00002C00 6100 E41E                  		bsr.w	PlaySound_Special
00002C04 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00002C0A 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00002C10 43F8 D080                  		lea	($FFFFD080).w,a1
00002C14 7000                       		moveq	#0,d0
00002C16 323C 0007                  		move.w	#7,d1
00002C1A                            
00002C1A                            Title_ClrObjRam2:
00002C1A 22C0                       		move.l	d0,(a1)+
00002C1C 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00002C20                            
00002C20 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00002C26 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00002C2C 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00002C32 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00002C38 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00002C3E 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00002C44 4EB9 0000 0000             		jsr	ObjectsLoad
00002C4A 6100 0000                  		bsr.w	DeformBgLayer
00002C4E 4EB9 0000 0000             		jsr	BuildSprites
00002C54 7000                       		moveq	#0,d0
00002C56 6100 E668                  		bsr.w	LoadPLC2
00002C5A 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00002C60 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00002C66 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002C6A 0000 0040                  		ori.b	#$40,d0
00002C6E 33C0 00C0 0004             		move.w	d0,($C00004).l
00002C74 6100 EE10                  		bsr.w	Pal_FadeTo
00002C78                            
00002C78                            loc_317C:
00002C78 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00002C7E 6100 F8A4                  		bsr.w	DelayProgram
00002C82 4EB9 0000 0000             		jsr	ObjectsLoad
00002C88 6100 0000                  		bsr.w	DeformBgLayer
00002C8C 4EB9 0000 0000             		jsr	BuildSprites
00002C92 6100 E666                  		bsr.w	RunPLC_RAM
00002C96 3038 D008                  		move.w	($FFFFD008).w,d0
00002C9A 5440                       		addq.w	#2,d0
00002C9C 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00002CA0 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00002CA4 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00002CA6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00002CAC 4E75                       		rts	
00002CAE                            ; ===========================================================================
00002CAE                            
00002CAE                            Title_ChkRegion:
00002CAE 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00002CB2 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00002CB4 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00002CBA 6000                       		bra.s	Title_EnterCheat
00002CBC                            ; ===========================================================================
00002CBC                            
00002CBC                            Title_RegionJ:				; XREF: Title_ChkRegion
00002CBC 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00002CC2                            
00002CC2                            Title_EnterCheat:			; XREF: Title_ChkRegion
00002CC2 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00002CC6 D0C0                       		adda.w	d0,a0
00002CC8 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00002CCC 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00002CD0 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00002CD2 6600                       		bne.s	loc_3210	; if not, branch
00002CD4 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00002CD8 4A00                       		tst.b	d0
00002CDA 6600                       		bne.s	Title_CountC
00002CDC 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00002CE0 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00002CE4 E249                       		lsr.w	#1,d1
00002CE6 0241 0003                  		andi.w	#3,d1
00002CEA 6700                       		beq.s	Title_PlayRing
00002CEC 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00002CF0 6A00                       		bpl.s	Title_PlayRing
00002CF2 7201                       		moveq	#1,d1
00002CF4 1181 1001                  		move.b	d1,1(a0,d1.w)
00002CF8                            
00002CF8                            Title_PlayRing:
00002CF8 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00002CFE 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00002D02 6100 E31C                  		bsr.w	PlaySound_Special
00002D06 6000                       		bra.s	Title_CountC
00002D08                            ; ===========================================================================
00002D08                            
00002D08                            loc_3210:				; XREF: Title_EnterCheat
00002D08 4A00                       		tst.b	d0
00002D0A 6700                       		beq.s	Title_CountC
00002D0C 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00002D12 6700                       		beq.s	Title_CountC
00002D14 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00002D1A                            
00002D1A                            Title_CountC:
00002D1A 1038 F605                  		move.b	($FFFFF605).w,d0
00002D1E 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00002D22 6700                       		beq.s	loc_3230	; if not, branch
00002D24 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00002D28                            
00002D28                            loc_3230:
00002D28 4A78 F614                  		tst.w	($FFFFF614).w
00002D2C 6700 0000                  		beq.w	Demo
00002D30 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00002D36 6700 FF40                  		beq.w	loc_317C	; if not, branch
00002D3A                            
00002D3A                            Title_ChkLevSel:
00002D3A 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00002D3E 6700 0000                  		beq.w	PlayLevel	; if not, play level
00002D42 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00002D48 6700 0000                  		beq.w	PlayLevel	; if not, play level
00002D4C 7002                       		moveq	#2,d0
00002D4E 6100 EFC4                  		bsr.w	PalLoad2	; load level select pallet
00002D52 43F8 CC00                  		lea	($FFFFCC00).w,a1
00002D56 7000                       		moveq	#0,d0
00002D58 323C 00DF                  		move.w	#$DF,d1
00002D5C                            
00002D5C                            Title_ClrScroll:
00002D5C 22C0                       		move.l	d0,(a1)+
00002D5E 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00002D62                            
00002D62 21C0 F616                  		move.l	d0,($FFFFF616).w
00002D66 46FC 2700                  		move	#$2700,sr
00002D6A 4DF9 00C0 0000             		lea	($C00000).l,a6
00002D70 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00002D7A 323C 03FF                  		move.w	#$3FF,d1
00002D7E                            
00002D7E                            Title_ClrVram:
00002D7E 2C80                       		move.l	d0,(a6)
00002D80 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00002D84                            
00002D84 6100 0000                  		bsr.w	LevSelTextLoad
00002D88                            
00002D88                            ; ---------------------------------------------------------------------------
00002D88                            ; Level	Select
00002D88                            ; ---------------------------------------------------------------------------
00002D88                            
00002D88                            LevelSelect:
00002D88 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00002D8E 6100 F794                  		bsr.w	DelayProgram
00002D92 6100 0000                  		bsr.w	LevSelControls
00002D96 6100 E562                  		bsr.w	RunPLC_RAM
00002D9A 4AB8 F680                  		tst.l	($FFFFF680).w
00002D9E 66E8                       		bne.s	LevelSelect
00002DA0 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00002DA6 67E0                       		beq.s	LevelSelect	; if not, branch
00002DA8 3038 FF82                  		move.w	($FFFFFF82).w,d0
00002DAC 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00002DB0 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00002DB2 3038 FF84                  		move.w	($FFFFFF84).w,d0
00002DB6 0640 0080                  		addi.w	#$80,d0
00002DBA 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
00002DBE 6700                       		beq.s	LevSel_NoCheat	; if not, branch
00002DC0 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00002DC4 6700                       		beq.s	LevSel_Ending	; if yes, branch
00002DC6 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00002DCA 6700                       		beq.s	LevSel_Credits	; if yes, branch
00002DCC                            
00002DCC                            LevSel_NoCheat:
00002DCC 0C40 0094                  		cmpi.w	#$94,d0		; is sound $80-$94 being played?
00002DD0 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
00002DD2 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
00002DD6 65B0                       		bcs.s	LevelSelect	; if yes, branch
00002DD8                            
00002DD8                            LevSel_PlaySnd:
00002DD8 6100 E246                  		bsr.w	PlaySound_Special
00002DDC 60AA                       		bra.s	LevelSelect
00002DDE                            ; ===========================================================================
00002DDE                            
00002DDE                            LevSel_Ending:				; XREF: LevelSelect
00002DDE 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00002DE4 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00002DEA 4E75                       		rts	
00002DEC                            ; ===========================================================================
00002DEC                            
00002DEC                            LevSel_Credits:				; XREF: LevelSelect
00002DEC 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00002DF2 103C 0091                  		move.b	#$91,d0
00002DF6 6100 E228                  		bsr.w	PlaySound_Special ; play credits music
00002DFA 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00002E00 4E75                       		rts	
00002E02                            ; ===========================================================================
00002E02                            
00002E02                            LevSel_Level_SS:			; XREF: LevelSelect
00002E04 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00002E08 6B00 FF7E                  		bmi.w	LevelSelect
00002E0C 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00002E10 6600                       		bne.s	LevSel_Level	; if not, branch
00002E12 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00002E18 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00002E1C 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00002E22 7000                       		moveq	#0,d0
00002E24 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00002E28 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00002E2C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00002E30 4E75                       		rts	
00002E32                            ; ===========================================================================
00002E32                            
00002E32                            LevSel_Level:				; XREF: LevSel_Level_SS
00002E32 0240 3FFF                  		andi.w	#$3FFF,d0
00002E36 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00002E3A                            
00002E3A                            PlayLevel:				; XREF: ROM:00003246j ...
00002E3A 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00002E40 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00002E46 7000                       		moveq	#0,d0
00002E48 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00002E4C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00002E50 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00002E54 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00002E58 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00002E5C 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00002E60 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00002E64 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00002E68 103C 00E0                  		move.b	#$E0,d0
00002E6C 6100 E1B2                  		bsr.w	PlaySound_Special ; fade out music
00002E70 4E75                       		rts	
00002E72                            ; ===========================================================================
00002E72                            ; ---------------------------------------------------------------------------
00002E72                            ; Level	select - level pointers
00002E72                            ; ---------------------------------------------------------------------------
00002E72                            LSelectPointers:
00002E72                            		incbin	misc\ls_point.bin
00002E9C                            		even
00002E9C                            ; ---------------------------------------------------------------------------
00002E9C                            ; Level	select codes
00002E9C                            ; ---------------------------------------------------------------------------
00002E9C                            LevelSelectCode_J:
00002E9C                            		incbin	misc\ls_jcode.bin
00002EA2                            		even
00002EA2                            
00002EA2                            LevelSelectCode_US:
00002EA2                            		incbin	misc\ls_ucode.bin
00002EA8                            		even
00002EA8                            ; ===========================================================================
00002EA8                            
00002EA8                            ; ---------------------------------------------------------------------------
00002EA8                            ; Demo mode
00002EA8                            ; ---------------------------------------------------------------------------
00002EA8                            
00002EA8                            Demo:					; XREF: TitleScreen
00002EA8 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00002EAE                            
00002EAE                            loc_33B6:				; XREF: loc_33E4
00002EAE 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00002EB4 6100 F66E                  		bsr.w	DelayProgram
00002EB8 6100 0000                  		bsr.w	DeformBgLayer
00002EBC 6100 E78C                  		bsr.w	PalCycle_Load
00002EC0 6100 E438                  		bsr.w	RunPLC_RAM
00002EC4 3038 D008                  		move.w	($FFFFD008).w,d0
00002EC8 5440                       		addq.w	#2,d0
00002ECA 31C0 D008                  		move.w	d0,($FFFFD008).w
00002ECE 0C40 1C00                  		cmpi.w	#$1C00,d0
00002ED2 6500                       		bcs.s	loc_33E4
00002ED4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00002EDA 4E75                       		rts	
00002EDC                            ; ===========================================================================
00002EDC                            
00002EDC                            loc_33E4:				; XREF: Demo
00002EDC 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00002EE2 6600 FE56                  		bne.w	Title_ChkLevSel	; if yes, branch
00002EE6 4A78 F614                  		tst.w	($FFFFF614).w
00002EEA 6600 FFC2                  		bne.w	loc_33B6
00002EEE 103C 00E0                  		move.b	#$E0,d0
00002EF2 6100 E12C                  		bsr.w	PlaySound_Special ; fade out music
00002EF6 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00002EFA 0240 0007                  		andi.w	#7,d0
00002F00 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00002F04 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00002F08 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00002F0C 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00002F12 6500                       		bcs.s	loc_3422	; if yes, branch
00002F14 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00002F1A                            
00002F1A                            loc_3422:
00002F1A 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00002F20 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00002F26 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00002F2A 6600                       		bne.s	Demo_Level	; if not, branch
00002F2C 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00002F32 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00002F36 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00002F3A                            
00002F3A                            Demo_Level:
00002F3A 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00002F40 7000                       		moveq	#0,d0
00002F42 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00002F46 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00002F4A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00002F4E 4E75                       		rts	
00002F50                            ; ===========================================================================
00002F50                            ; ---------------------------------------------------------------------------
00002F50                            ; Levels used in demos
00002F50                            ; ---------------------------------------------------------------------------
00002F50                            Demo_Levels:	incbin	misc\dm_ord1.bin
00002F58                            		even
00002F58                            
00002F58                            ; ---------------------------------------------------------------------------
00002F58                            ; Subroutine to	change what you're selecting in the level select
00002F58                            ; ---------------------------------------------------------------------------
00002F58                            
00002F58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002F58                            
00002F58                            
00002F58                            LevSelControls:				; XREF: LevelSelect
00002F58 1238 F605                  		move.b	($FFFFF605).w,d1
00002F5C 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00002F60 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00002F62 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00002F66 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00002F68                            
00002F68                            LevSel_UpDown:
00002F68 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00002F6E 1238 F604                  		move.b	($FFFFF604).w,d1
00002F72 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00002F76 6700                       		beq.s	LevSel_SndTest	; if not, branch
00002F78 3038 FF82                  		move.w	($FFFFFF82).w,d0
00002F7C 0801 0000                  		btst	#0,d1		; is up	pressed?
00002F80 6700                       		beq.s	LevSel_Down	; if not, branch
00002F82 5340                       		subq.w	#1,d0		; move up 1 selection
00002F84 6400                       		bcc.s	LevSel_Down
00002F86 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00002F88                            
00002F88                            LevSel_Down:
00002F88 0801 0001                  		btst	#1,d1		; is down pressed?
00002F8C 6700                       		beq.s	LevSel_Refresh	; if not, branch
00002F8E 5240                       		addq.w	#1,d0		; move down 1 selection
00002F90 0C40 0015                  		cmpi.w	#$15,d0
00002F94 6500                       		bcs.s	LevSel_Refresh
00002F96 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00002F98                            
00002F98                            LevSel_Refresh:
00002F98 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
00002F9C 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00002FA0 4E75                       		rts	
00002FA2                            ; ===========================================================================
00002FA2                            
00002FA2                            LevSel_SndTest:				; XREF: LevSelControls
00002FA2 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00002FA8 6600                       		bne.s	LevSel_NoMove	; if not, branch
00002FAA 1238 F605                  		move.b	($FFFFF605).w,d1
00002FAE 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00002FB2 6700                       		beq.s	LevSel_NoMove	; if not, branch
00002FB4 3038 FF84                  		move.w	($FFFFFF84).w,d0
00002FB8 0801 0002                  		btst	#2,d1		; is left pressed?
00002FBC 6700                       		beq.s	LevSel_Right	; if not, branch
00002FBE 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00002FC0 6400                       		bcc.s	LevSel_Right
00002FC2 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00002FC4                            
00002FC4                            LevSel_Right:
00002FC4 0801 0003                  		btst	#3,d1		; is right pressed?
00002FC8 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00002FCA 5240                       		addq.w	#1,d0		; add 1	to sound test
00002FCC 0C40 0050                  		cmpi.w	#$50,d0
00002FD0 6500                       		bcs.s	LevSel_Refresh2
00002FD2 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00002FD4                            
00002FD4                            LevSel_Refresh2:
00002FD4 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00002FD8 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00002FDC                            
00002FDC                            LevSel_NoMove:
00002FDC 4E75                       		rts	
00002FDE                            ; End of function LevSelControls
00002FDE                            
00002FDE                            ; ---------------------------------------------------------------------------
00002FDE                            ; Subroutine to load level select text
00002FDE                            ; ---------------------------------------------------------------------------
00002FDE                            
00002FDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002FDE                            
00002FDE                            
00002FDE                            LevSelTextLoad:				; XREF: TitleScreen
00002FDE 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00002FE4 4DF9 00C0 0000             		lea	($C00000).l,a6
00002FEA 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
00002FF0 363C E680                  		move.w	#$E680,d3	; VRAM setting
00002FF4 7214                       		moveq	#$14,d1		; number of lines of text
00002FF6                            
00002FF6                            loc_34FE:				; XREF: LevSelTextLoad+26j
00002FF6 2D44 0004                  		move.l	d4,4(a6)
00002FFA 6100 0000                  		bsr.w	LevSel_ChgLine
00002FFE 0684 0080 0000             		addi.l	#$800000,d4
00003004 51C9 FFF0                  		dbf	d1,loc_34FE
00003008 7000                       		moveq	#0,d0
0000300A 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000300E 3200                       		move.w	d0,d1
00003010 283C 6210 0003             		move.l	#$62100003,d4
00003016 EF48                       		lsl.w	#7,d0
00003018 4840                       		swap	d0
0000301C 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003022 E749                       		lsl.w	#3,d1
00003024 3001                       		move.w	d1,d0
0000302A D2C1                       		adda.w	d1,a1
0000302C 363C C680                  		move.w	#$C680,d3
00003030 2D44 0004                  		move.l	d4,4(a6)
00003034 6100 0000                  		bsr.w	LevSel_ChgLine
00003038 363C E680                  		move.w	#$E680,d3
0000303C 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003042 6600                       		bne.s	loc_3550
00003044 363C C680                  		move.w	#$C680,d3
00003048                            
00003048                            loc_3550:
00003048 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00003052 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003056 0640 0080                  		addi.w	#$80,d0
0000305A 1400                       		move.b	d0,d2
0000305C E808                       		lsr.b	#4,d0
0000305E 6100 0000                  		bsr.w	LevSel_ChgSnd
00003062 1002                       		move.b	d2,d0
00003064 6100 0000                  		bsr.w	LevSel_ChgSnd
00003068 4E75                       		rts	
0000306A                            ; End of function LevSelTextLoad
0000306A                            
0000306A                            
0000306A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000306A                            
0000306A                            
0000306A                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
0000306A 0240 000F                  		andi.w	#$F,d0
0000306E 0C00 000A                  		cmpi.b	#$A,d0
00003072 6500                       		bcs.s	loc_3580
00003074 5E00                       		addi.b	#7,d0
00003076                            
00003076                            loc_3580:
00003078 3C80                       		move.w	d0,(a6)
0000307A 4E75                       		rts	
0000307C                            ; End of function LevSel_ChgSnd
0000307C                            
0000307C                            
0000307C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000307C                            
0000307C                            
0000307C                            LevSel_ChgLine:				; XREF: LevSelTextLoad
0000307C 7417                       		moveq	#$17,d2		; number of characters per line
0000307E                            
0000307E                            loc_3588:
0000307E 7000                       		moveq	#0,d0
00003080 1019                       		move.b	(a1)+,d0
00003082 6A00                       		bpl.s	loc_3598
00003084 3CBC 0000                  		move.w	#0,(a6)
00003088 51CA FFF4                  		dbf	d2,loc_3588
0000308C 4E75                       		rts	
0000308E                            ; ===========================================================================
0000308E                            
0000308E                            loc_3598:				; XREF: LevSel_ChgLine
00003090 3C80                       		move.w	d0,(a6)
00003092 51CA FFEA                  		dbf	d2,loc_3588
00003096 4E75                       		rts	
00003098                            ; End of function LevSel_ChgLine
00003098                            
00003098                            ; ===========================================================================
00003098                            ; ---------------------------------------------------------------------------
00003098                            ; Level	select menu text
00003098                            ; ---------------------------------------------------------------------------
00003098                            LevelMenuText:	incbin	misc\menutext.bin
00003290                            		even
00003290                            ; ---------------------------------------------------------------------------
00003290                            ; Music	playlist
00003290                            ; ---------------------------------------------------------------------------
00003290                            MusicList:	incbin	misc\muslist1.bin
00003298                            		even
00003298                            ; ===========================================================================
00003298                            
00003298                            ; ---------------------------------------------------------------------------
00003298                            ; Level
00003298                            ; ---------------------------------------------------------------------------
00003298                            
00003298                            Level:					; XREF: GameModeArray
00003298 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
0000329E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000032A2 6B00                       		bmi.s	loc_37B6
000032A4 103C 00E0                  		move.b	#$E0,d0
000032A8 6100 DD76                  		bsr.w	PlaySound_Special ; fade out music
000032AC                            
000032AC                            loc_37B6:
000032AC 6100 E03E                  		bsr.w	ClearPLC
000032B0 6100 E88A                  		bsr.w	Pal_FadeFrom
000032B4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000032B8 6B00                       		bmi.s	Level_ClrRam
000032BA 46FC 2700                  		move	#$2700,sr
000032BE 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000032C8 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000032CE 6100 DE7E                  		bsr.w	NemDec
000032D2 46FC 2300                  		move	#$2300,sr
000032D6 7000                       		moveq	#0,d0
000032D8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000032DC E948                       		lsl.w	#4,d0
000032DE 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000032E4 45F2 0000                  		lea	(a2,d0.w),a2
000032E8 7000                       		moveq	#0,d0
000032EA 1012                       		move.b	(a2),d0
000032EC 6700                       		beq.s	loc_37FC
000032EE 6100 DF9E                  		bsr.w	LoadPLC		; load level patterns
000032F2                            
000032F2                            loc_37FC:
000032F2 7001                       		moveq	#1,d0
000032F4 6100 DF98                  		bsr.w	LoadPLC		; load standard	patterns
000032F8                            
000032F8                            Level_ClrRam:
000032F8 43F8 D000                  		lea	($FFFFD000).w,a1
000032FC 7000                       		moveq	#0,d0
000032FE 323C 07FF                  		move.w	#$7FF,d1
00003302                            
00003302                            Level_ClrObjRam:
00003302 22C0                       		move.l	d0,(a1)+
00003304 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003308                            
00003308 43F8 F628                  		lea	($FFFFF628).w,a1
0000330C 7000                       		moveq	#0,d0
0000330E 323C 0015                  		move.w	#$15,d1
00003312                            
00003312                            Level_ClrVars:
00003312 22C0                       		move.l	d0,(a1)+
00003314 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003318                            
00003318 43F8 F700                  		lea	($FFFFF700).w,a1
0000331C 7000                       		moveq	#0,d0
0000331E 323C 003F                  		move.w	#$3F,d1
00003322                            
00003322                            Level_ClrVars2:
00003322 22C0                       		move.l	d0,(a1)+
00003324 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003328                            
00003328 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000332C 7000                       		moveq	#0,d0
0000332E 323C 0047                  		move.w	#$47,d1
00003332                            
00003332                            Level_ClrVars3:
00003332 22C0                       		move.l	d0,(a1)+
00003334 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003338                            
00003338 46FC 2700                  		move	#$2700,sr
0000333C 6100 DC0A                  		bsr.w	ClearScreen
00003340 4DF9 00C0 0004             		lea	($C00004).l,a6
00003346 3CBC 8B03                  		move.w	#$8B03,(a6)
0000334A 3CBC 8230                  		move.w	#$8230,(a6)
0000334E 3CBC 8407                  		move.w	#$8407,(a6)
00003352 3CBC 857C                  		move.w	#$857C,(a6)
00003356 3CBC 9001                  		move.w	#$9001,(a6)
0000335A 3CBC 8004                  		move.w	#$8004,(a6)
0000335E 3CBC 8720                  		move.w	#$8720,(a6)
00003362 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003368 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000336C 4278 C800                  		clr.w	($FFFFC800).w
00003370 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
00003378 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000337E 6600                       		bne.s	Level_LoadPal	; if not, branch
00003380 3CBC 8014                  		move.w	#$8014,(a6)
00003384 7000                       		moveq	#0,d0
00003386 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000338C 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003392 3031 0000                  		move.w	(a1,d0.w),d0
00003396 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
0000339A 31C0 F648                  		move.w	d0,($FFFFF648).w
0000339E 31C0 F64A                  		move.w	d0,($FFFFF64A).w
000033A2 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
000033A6 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
000033AA 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
000033B0                            
000033B0                            Level_LoadPal:
000033B0 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000033B6 46FC 2300                  		move	#$2300,sr
000033BA 7003                       		moveq	#3,d0
000033BC 6100 E956                  		bsr.w	PalLoad2	; load Sonic's pallet line
000033C0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000033C6 6600                       		bne.s	Level_GetBgm	; if not, branch
000033C8 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
000033CA 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
000033D0 6600                       		bne.s	Level_WaterPal	; if not, branch
000033D2 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
000033D4                            
000033D4                            Level_WaterPal:
000033D4 6100 E956                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000033D8 4A38 FE30                  		tst.b	($FFFFFE30).w
000033DC 6700                       		beq.s	Level_GetBgm
000033DE 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000033E4                            
000033E4                            Level_GetBgm:
000033E4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000033E8 6B00                       		bmi.s	loc_3946
000033EA 7000                       		moveq	#0,d0
000033EC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000033F0 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
000033F6 6600                       		bne.s	Level_BgmNotLZ4	; if not, branch
000033F8 7005                       		moveq	#5,d0		; move 5 to d0
000033FA                            
000033FA                            Level_BgmNotLZ4:
000033FA 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00003400 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003402 7006                       		moveq	#6,d0		; move 6 to d0
00003404                            
00003404                            Level_PlayBgm:
00003404 43F9 0000 3290             		lea	(MusicList).l,a1 ; load	music playlist
0000340A 1031 0000                  		move.b	(a1,d0.w),d0	; add d0 to a1
0000340E 6100 DC0A                  		bsr.w	PlaySound	; play music
00003412 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003418                            
00003418                            Level_TtlCard:
00003418 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000341E 6100 F104                  		bsr.w	DelayProgram
00003422 4EB9 0000 0000             		jsr	ObjectsLoad
00003428 4EB9 0000 0000             		jsr	BuildSprites
0000342E 6100 DECA                  		bsr.w	RunPLC_RAM
00003432 3038 D108                  		move.w	($FFFFD108).w,d0
00003436 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
0000343A 66DC                       		bne.s	Level_TtlCard	; if not, branch
0000343C 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003440 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003442 4EB9 0000 0000             		jsr	Hud_Base
00003448 4278 C800                  		clr.w	($FFFFC800).w
0000344C 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
00003454                            		
00003454                            loc_3946:
00003454 7003                       		moveq	#3,d0
00003456 6100 E8A0                  		bsr.w	PalLoad1	; load Sonic's pallet line
0000345A 6100 0000                  		bsr.w	LevelSizeLoad
0000345E 6100 0000                  		bsr.w	DeformBgLayer
00003462 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003468 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
0000346C 6100 0000                  		bsr.w	LoadTilesFromStart
00003470 6100 0000                  		bsr.w	ColIndexLoad
00003474 6100 0000                  		bsr.w	LZWaterEffects
00003478 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000347E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003482 6B00                       		bmi.s	Level_ChkDebug
00003484 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000348A                            
0000348A                            Level_ChkDebug:
0000348A 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
0000348E 6700                       		beq.s	Level_ChkWater	; if not, branch
00003490 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003496 6700                       		beq.s	Level_ChkWater	; if not, branch
00003498 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000349E                            
0000349E                            Level_ChkWater:
0000349E 31FC 0000 F602             		move.w	#0,($FFFFF602).w
000034A4 31FC 0000 F604             		move.w	#0,($FFFFF604).w
000034AA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000034B0 6600                       		bne.s	Level_ChkSH	; if not, branch
000034B2 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
000034B8 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
000034BE 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
000034C4 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
000034CA                            
000034CA                            Level_ChkSH:
000034CA 0C38 0002 FE10             		cmp.b	#2,($FFFFFE10).w
000034D0 6600                       		bne.s	Level_DisableSH
000034D2 33FC 8C08 00C0 0004        		move.w #$8C00|%00001000,($C00004).l ; Enable S/H
000034DA 6000                       		bra.s	Level_LoadObj
000034DC                            
000034DC                            Level_DisableSH:
000034DC 33FC 8C00 00C0 0004        		move.w #$8C00,($C00004).l ; Disable S/H
000034E4                            
000034E4                            Level_LoadObj:
000034E4 4EB9 0000 0000             		jsr	ObjPosLoad
000034EA 4EB9 0000 0000             		jsr	ObjectsLoad
000034F0 4EB9 0000 0000             		jsr	BuildSprites
000034F6 7000                       		moveq	#0,d0
000034F8 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
000034FC 6600                       		bne.s	loc_39E8	; if yes, branch
000034FE 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003502 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003506 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
0000350A                            
0000350A                            loc_39E8:
0000350A 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
0000350E 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003512 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003516 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
0000351A 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000351E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003522 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003526 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000352A 6100 0000                  		bsr.w	OscillateNumInit
0000352E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003534 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
0000353A 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003540 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003546 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
0000354C 7000                       		moveq	#0,d0
0000354E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003552 E548                       		lsl.w	#2,d0
00003554 2271 0000                  		movea.l	(a1,d0.w),a1
00003558                            
00003558                            Level_Demo:
00003558 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
0000355E 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003562 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003568 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000356C 6A00                       		bpl.s	Level_ChkWaterPal
0000356E 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003574 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
0000357A 6600                       		bne.s	Level_ChkWaterPal
0000357C 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003582                            
00003582                            Level_ChkWaterPal:
00003582 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003588 6600                       		bne.s	Level_Delay	; if not, branch
0000358A 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
0000358C 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003592 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003594 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003596                            
00003596                            Level_WaterPal2:
00003596 6100 E7B0                  		bsr.w	PalLoad4_Water
0000359A                            
0000359A                            Level_Delay:
0000359A 323C 0003                  		move.w	#3,d1
0000359E                            
0000359E                            Level_DelayLoop:
0000359E 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000035A4 6100 EF7E                  		bsr.w	DelayProgram
000035A8 51C9 FFF4                  		dbf	d1,Level_DelayLoop
000035AC                            
000035AC 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000035B2 6100 E4D8                  		bsr.w	Pal_FadeTo2
000035B6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000035BA 6B00                       		bmi.s	Level_ClrCardArt
000035BC 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
000035C0 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
000035C4 5838 D124                  		addq.b	#4,($FFFFD124).w
000035C8 5838 D164                  		addq.b	#4,($FFFFD164).w
000035CC 6000                       		bra.s	Level_StartGame
000035CE                            ; ===========================================================================
000035CE                            
000035CE                            Level_ClrCardArt:
000035CE 7002                       		moveq	#2,d0
000035D0 4EB9 0000 128E             		jsr	(LoadPLC).l	; load explosion patterns
000035D6 7000                       		moveq	#0,d0
000035D8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000035DC 0640 0015                  		addi.w	#$15,d0
000035E0 4EB9 0000 128E             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
000035E6                            
000035E6                            Level_StartGame:
000035E6 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
000035EC                            
000035EC                            ; ---------------------------------------------------------------------------
000035EC                            ; Main level loop (when	all title card and loading sequences are finished)
000035EC                            ; ---------------------------------------------------------------------------
000035EC                            
000035EC                            Level_MainLoop:
000035EC 6100 DA38                  		bsr.w	PauseGame
000035F0 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000035F6 6100 EF2C                  		bsr.w	DelayProgram
000035FA 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
000035FE 6100 0000                  		bsr.w	MoveSonicInDemo
00003602 6100 0000                  		bsr.w	LZWaterEffects
00003606 4EB9 0000 0000             		jsr	ObjectsLoad
0000360C 4A78 FE08                  		tst.w	($FFFFFE08).w
00003610 6600                       		bne.s	loc_3B10
00003612 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003618 6400                       		bcc.s	loc_3B14
0000361A                            
0000361A                            loc_3B10:
0000361A 6100 0000                  		bsr.w	DeformBgLayer
0000361E                            
0000361E                            loc_3B14:
0000361E 4EB9 0000 0000             		jsr	BuildSprites
00003624 4EB9 0000 0000             		jsr	ObjPosLoad
0000362A 6100 E01E                  		bsr.w	PalCycle_Load
0000362E 6100 DCCA                  		bsr.w	RunPLC_RAM
00003632 6100 0000                  		bsr.w	OscillateNumDo
00003636 6100 0000                  		bsr.w	ChangeRingFrame
0000363A 6100 0000                  		bsr.w	SignpostArtLoad
0000363E 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003644 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003646 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
0000364A 6600 FC4C                  		bne.w	Level		; if yes, branch
0000364E 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003654 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003658 4E75                       		rts	
0000365A                            ; ===========================================================================
0000365A                            
0000365A                            Level_ChkDemo:				; XREF: Level_MainLoop
0000365A 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000365E 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003660 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003664 6700                       		beq.s	Level_EndDemo	; if not, branch
00003666 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000366C 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003670 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003676 4E75                       		rts	
00003678                            ; ===========================================================================
00003678                            
00003678                            Level_EndDemo:				; XREF: Level_ChkDemo
00003678 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
0000367E 6600                       		bne.s	loc_3B88	; if not, branch
00003680 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003686 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000368A 6A00                       		bpl.s	loc_3B88	; if yes, branch
0000368C 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003692                            
00003692                            loc_3B88:
00003692 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003698 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000369E 4278 F794                  		clr.w	($FFFFF794).w
000036A2                            
000036A2                            loc_3B98:
000036A2 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000036A8 6100 EE7A                  		bsr.w	DelayProgram
000036AC 6100 0000                  		bsr.w	MoveSonicInDemo
000036B0 4EB9 0000 0000             		jsr	ObjectsLoad
000036B6 4EB9 0000 0000             		jsr	BuildSprites
000036BC 4EB9 0000 0000             		jsr	ObjPosLoad
000036C2 5378 F794                  		subq.w	#1,($FFFFF794).w
000036C6 6A00                       		bpl.s	loc_3BC8
000036C8 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000036CE 6100 E492                  		bsr.w	Pal_FadeOut
000036D2                            
000036D2                            loc_3BC8:
000036D2 4A78 F614                  		tst.w	($FFFFF614).w
000036D6 66CA                       		bne.s	loc_3B98
000036D8 4E75                       		rts	
000036DA                            ; ===========================================================================
000036DA                            ; ---------------------------------------------------------------------------
000036DA                            ; Subroutine to	do special water effects in Labyrinth Zone
000036DA                            ; ---------------------------------------------------------------------------
000036DA                            
000036DA                            LZWaterEffects:				; XREF: Level
000036DA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000036E0 6600                       		bne.s	locret_3C28	; if not, branch
000036E2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000036E8 6400                       		bcc.s	LZMoveWater
000036EA 6100 0000                  		bsr.w	LZWindTunnels
000036EE 6100 0000                  		bsr.w	LZWaterSlides
000036F2 6100 0000                  		bsr.w	LZDynamicWater
000036F6                            
000036F6                            LZMoveWater:
000036F6 4238 F64E                  		clr.b	($FFFFF64E).w
000036FA 7000                       		moveq	#0,d0
000036FC 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003700 E248                       		lsr.w	#1,d0
00003706 31C0 F646                  		move.w	d0,($FFFFF646).w
0000370A 3038 F646                  		move.w	($FFFFF646).w,d0
00003712 6400                       		bcc.s	loc_3C1A
00003714 4A40                       		tst.w	d0
00003716 6A00                       		bpl.s	loc_3C1A
00003718 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
0000371E 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003724                            
00003724                            loc_3C1A:
00003724 0C40 00DF                  		cmpi.w	#$DF,d0
00003728 6500                       		bcs.s	loc_3C24
0000372A 303C 00DF                  		move.w	#$DF,d0
0000372E                            
0000372E                            loc_3C24:
0000372E 11C0 F625                  		move.b	d0,($FFFFF625).w
00003732                            
00003732                            locret_3C28:
00003732 4E75                       		rts	
00003734                            ; ===========================================================================
00003734                            ; ---------------------------------------------------------------------------
00003734                            ; Labyrinth default water heights
00003734                            ; ---------------------------------------------------------------------------
00003734                            WaterHeight:	incbin	misc\lz_heigh.bin
0000373C                            		even
0000373C                            ; ===========================================================================
0000373C                            
0000373C                            ; ---------------------------------------------------------------------------
0000373C                            ; Labyrinth dynamic water routines
0000373C                            ; ---------------------------------------------------------------------------
0000373C                            
0000373C                            LZDynamicWater:				; XREF: LZWaterEffects
0000373C 7000                       		moveq	#0,d0
0000373E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003744 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003748 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
0000374C 7200                       		moveq	#0,d1
0000374E 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003752 3038 F64A                  		move.w	($FFFFF64A).w,d0
0000375A 6700                       		beq.s	locret_3C5A
0000375C 6400                       		bcc.s	loc_3C56
0000375E 4441                       		neg.w	d1
00003760                            
00003760                            loc_3C56:
00003764                            
00003764                            locret_3C5A:
00003764 4E75                       		rts	
00003766                            ; ===========================================================================
00003766 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003768 0000                       		dc.w DynWater_LZ2-DynWater_Index
0000376A 0000                       		dc.w DynWater_LZ3-DynWater_Index
0000376C 0000                       		dc.w DynWater_SBZ3-DynWater_Index
0000376E                            ; ===========================================================================
0000376E                            
0000376E                            DynWater_LZ1:				; XREF: DynWater_Index
0000376E 3038 F700                  		move.w	($FFFFF700).w,d0
00003772 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003776 6600                       		bne.s	loc_3CD0
00003778 323C 00B8                  		move.w	#$B8,d1
0000377C 0C40 0600                  		cmpi.w	#$600,d0
00003780 6500                       		bcs.s	loc_3CB4
00003782 323C 0108                  		move.w	#$108,d1
00003786 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
0000378C 6500                       		bcs.s	loc_3CBA
0000378E 0C40 0C00                  		cmpi.w	#$C00,d0
00003792 6500                       		bcs.s	loc_3CB4
00003794 323C 0318                  		move.w	#$318,d1
00003798 0C40 1080                  		cmpi.w	#$1080,d0
0000379C 6500                       		bcs.s	loc_3CB4
0000379E 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
000037A4 323C 05C8                  		move.w	#$5C8,d1
000037A8 0C40 1380                  		cmpi.w	#$1380,d0
000037AC 6500                       		bcs.s	loc_3CB4
000037AE 323C 03A8                  		move.w	#$3A8,d1
000037B2 B278 F648                  		cmp.w	($FFFFF648).w,d1
000037B6 6600                       		bne.s	loc_3CB4
000037B8 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000037BE                            
000037BE                            loc_3CB4:
000037BE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000037C2 4E75                       		rts	
000037C4                            ; ===========================================================================
000037C4                            
000037C4                            loc_3CBA:				; XREF: DynWater_LZ1
000037C4 0C40 0C80                  		cmpi.w	#$C80,d0
000037C8 65F4                       		bcs.s	loc_3CB4
000037CA 323C 00E8                  		move.w	#$E8,d1
000037CE 0C40 1500                  		cmpi.w	#$1500,d0
000037D2 65EA                       		bcs.s	loc_3CB4
000037D4 323C 0108                  		move.w	#$108,d1
000037D8 60E4                       		bra.s	loc_3CB4
000037DA                            ; ===========================================================================
000037DA                            
000037DA                            loc_3CD0:				; XREF: DynWater_LZ1
000037DA 5302                       		subq.b	#1,d2
000037DC 6600                       		bne.s	locret_3CF4
000037DE 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
000037E4 6400                       		bcc.s	locret_3CF4
000037E6 323C 03A8                  		move.w	#$3A8,d1
000037EA 0C40 1300                  		cmpi.w	#$1300,d0
000037EE 6500                       		bcs.s	loc_3CF0
000037F0 323C 0108                  		move.w	#$108,d1
000037F4 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000037FA                            
000037FA                            loc_3CF0:
000037FA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000037FE                            
000037FE                            locret_3CF4:
000037FE 4E75                       		rts	
00003800                            ; ===========================================================================
00003800                            
00003800                            DynWater_LZ2:				; XREF: DynWater_Index
00003800 3038 F700                  		move.w	($FFFFF700).w,d0
00003804 323C 0328                  		move.w	#$328,d1
00003808 0C40 0500                  		cmpi.w	#$500,d0
0000380C 6500                       		bcs.s	loc_3D12
0000380E 323C 03C8                  		move.w	#$3C8,d1
00003812 0C40 0B00                  		cmpi.w	#$B00,d0
00003816 6500                       		bcs.s	loc_3D12
00003818 323C 0428                  		move.w	#$428,d1
0000381C                            
0000381C                            loc_3D12:
0000381C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003820 4E75                       		rts	
00003822                            ; ===========================================================================
00003822                            
00003822                            DynWater_LZ3:				; XREF: DynWater_Index
00003822 3038 F700                  		move.w	($FFFFF700).w,d0
00003826 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000382A 6600                       		bne.s	loc_3D5E
0000382C 323C 0900                  		move.w	#$900,d1
00003830 0C40 0600                  		cmpi.w	#$600,d0
00003834 6500                       		bcs.s	loc_3D54
00003836 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
0000383C 6500                       		bcs.s	loc_3D54
0000383E 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003844 6400                       		bcc.s	loc_3D54
00003846 323C 04C8                  		move.w	#$4C8,d1
0000384A 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00003850 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003856 303C 00B7                  		move.w	#$B7,d0
0000385A 6100 D7C4                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
0000385E                            
0000385E                            loc_3D54:
0000385E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003862 31C1 F648                  		move.w	d1,($FFFFF648).w
00003866 4E75                       		rts	
00003868                            ; ===========================================================================
00003868                            
00003868                            loc_3D5E:				; XREF: DynWater_LZ3
00003868 5302                       		subq.b	#1,d2
0000386A 6600                       		bne.s	loc_3DA8
0000386C 323C 04C8                  		move.w	#$4C8,d1
00003870 0C40 0770                  		cmpi.w	#$770,d0
00003874 6500                       		bcs.s	loc_3DA2
00003876 323C 0308                  		move.w	#$308,d1
0000387A 0C40 1400                  		cmpi.w	#$1400,d0
0000387E 6500                       		bcs.s	loc_3DA2
00003880 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00003886 6700                       		beq.s	loc_3D8E
00003888 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000388E 6400                       		bcc.s	loc_3D8E
00003890 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00003896 6400                       		bcc.s	loc_3DA2
00003898                            
00003898                            loc_3D8E:
00003898 323C 0508                  		move.w	#$508,d1
0000389C 31C1 F648                  		move.w	d1,($FFFFF648).w
000038A0 0C40 1770                  		cmpi.w	#$1770,d0
000038A4 6500                       		bcs.s	loc_3DA2
000038A6 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000038AC                            
000038AC                            loc_3DA2:
000038AC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000038B0 4E75                       		rts	
000038B2                            ; ===========================================================================
000038B2                            
000038B2                            loc_3DA8:
000038B2 5302                       		subq.b	#1,d2
000038B4 6600                       		bne.s	loc_3DD2
000038B6 323C 0508                  		move.w	#$508,d1
000038BA 0C40 1860                  		cmpi.w	#$1860,d0
000038BE 6500                       		bcs.s	loc_3DCC
000038C0 323C 0188                  		move.w	#$188,d1
000038C4 0C40 1AF0                  		cmpi.w	#$1AF0,d0
000038C8 6400                       		bcc.s	loc_3DC6
000038CA B278 F648                  		cmp.w	($FFFFF648).w,d1
000038CE 6600                       		bne.s	loc_3DCC
000038D0                            
000038D0                            loc_3DC6:
000038D0 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
000038D6                            
000038D6                            loc_3DCC:
000038D6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000038DA 4E75                       		rts	
000038DC                            ; ===========================================================================
000038DC                            
000038DC                            loc_3DD2:
000038DC 5302                       		subq.b	#1,d2
000038DE 6600                       		bne.s	loc_3E0E
000038E0 323C 0188                  		move.w	#$188,d1
000038E4 0C40 1AF0                  		cmpi.w	#$1AF0,d0
000038E8 6500                       		bcs.s	loc_3E04
000038EA 323C 0900                  		move.w	#$900,d1
000038EE 0C40 1BC0                  		cmpi.w	#$1BC0,d0
000038F2 6500                       		bcs.s	loc_3E04
000038F4 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
000038FA 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00003900 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00003906 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000390C 4E75                       		rts	
0000390E                            ; ===========================================================================
0000390E                            
0000390E                            loc_3E04:
0000390E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003912 31C1 F648                  		move.w	d1,($FFFFF648).w
00003916 4E75                       		rts	
00003918                            ; ===========================================================================
00003918                            
00003918                            loc_3E0E:
00003918 0C40 1E00                  		cmpi.w	#$1E00,d0
0000391C 6500                       		bcs.s	locret_3E1A
0000391E 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00003924                            
00003924                            locret_3E1A:
00003924 4E75                       		rts	
00003926                            ; ===========================================================================
00003926                            
00003926                            DynWater_SBZ3:				; XREF: DynWater_Index
00003926 323C 0228                  		move.w	#$228,d1
0000392A 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00003930 6500                       		bcs.s	loc_3E2C
00003932 323C 04C8                  		move.w	#$4C8,d1
00003936                            
00003936                            loc_3E2C:
00003936 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000393A 4E75                       		rts
0000393C                            
0000393C                            ; ---------------------------------------------------------------------------
0000393C                            ; Labyrinth Zone "wind tunnels"	subroutine
0000393C                            ; ---------------------------------------------------------------------------
0000393C                            
0000393C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000393C                            
0000393C                            
0000393C                            LZWindTunnels:				; XREF: LZWaterEffects
0000393C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00003940 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00003944 45F9 0000 0000             		lea	(LZWind_Data).l,a2
0000394A 7000                       		moveq	#0,d0
0000394C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003950 E748                       		lsl.w	#3,d0
00003952 D4C0                       		adda.w	d0,a2
00003954 7200                       		moveq	#0,d1
00003956 4A38 FE11                  		tst.b	($FFFFFE11).w
0000395A 6600                       		bne.s	loc_3E56
0000395C 7201                       		moveq	#1,d1
0000395E 514A                       		subq.w	#8,a2
00003960                            
00003960                            loc_3E56:
00003960 43F8 D000                  		lea	($FFFFD000).w,a1
00003964                            
00003964                            LZWind_Loop:
00003964 3029 0008                  		move.w	8(a1),d0
00003968 B052                       		cmp.w	(a2),d0
0000396A 6500 0000                  		bcs.w	loc_3EF4
0000396E B06A 0004                  		cmp.w	4(a2),d0
00003972 6400 0000                  		bcc.w	loc_3EF4
00003976 3429 000C                  		move.w	$C(a1),d2
0000397A B46A 0002                  		cmp.w	2(a2),d2
0000397E 6500                       		bcs.s	loc_3EF4
00003980 B46A 0006                  		cmp.w	6(a2),d2
00003984 6400                       		bcc.s	loc_3EF4
00003986 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000398A 0200 003F                  		andi.b	#$3F,d0
0000398E 6600                       		bne.s	loc_3E90
00003990 303C 00D0                  		move.w	#$D0,d0
00003994 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play rushing water sound
0000399A                            
0000399A                            loc_3E90:
0000399A 4A38 F7C9                  		tst.b	($FFFFF7C9).w
0000399E 6600 0000                  		bne.w	locret_3F0A
000039A2 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000039A8 6400                       		bcc.s	loc_3F06
000039AA 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000039B0 0440 0080                  		subi.w	#$80,d0
000039B4 B052                       		cmp.w	(a2),d0
000039B6 6400                       		bcc.s	LZWind_Move
000039B8 7002                       		moveq	#2,d0
000039BA 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
000039C0 6600                       		bne.s	loc_3EBA
000039C2 4440                       		neg.w	d0
000039C4                            
000039C4                            loc_3EBA:
000039C8                            
000039C8                            LZWind_Move:
000039C8 5869 0008                  		addq.w	#4,8(a1)
000039CC 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
000039D2 337C 0000 0012             		move.w	#0,$12(a1)
000039D8 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
000039DE 08E9 0001 0022             		bset	#1,$22(a1)
000039E4 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
000039EA 6700                       		beq.s	LZWind_MoveDown	; if not, branch
000039EC 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000039F0                            
000039F0                            LZWind_MoveDown:
000039F0 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000039F6 6700                       		beq.s	locret_3EF2	; if not, branch
000039F8 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000039FC                            
000039FC                            locret_3EF2:
000039FC 4E75                       		rts	
000039FE                            ; ===========================================================================
000039FE                            
000039FE                            loc_3EF4:				; XREF: LZWindTunnels
000039FE 504A                       		addq.w	#8,a2
00003A00 51C9 FF62                  		dbf	d1,LZWind_Loop
00003A04 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00003A08 6700                       		beq.s	locret_3F0A
00003A0A 137C 0000 001C             		move.b	#0,$1C(a1)
00003A10                            
00003A10                            loc_3F06:
00003A10 4238 F7C7                  		clr.b	($FFFFF7C7).w
00003A14                            
00003A14                            locret_3F0A:
00003A14 4E75                       		rts	
00003A16                            ; End of function LZWindTunnels
00003A16                            
00003A16                            ; ===========================================================================
00003A16 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00003A1E 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00003A30 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00003A3E                            					; XREF: LZWindTunnels
00003A3E                            		even
00003A3E                            
00003A3E                            ; ---------------------------------------------------------------------------
00003A3E                            ; Labyrinth Zone water slide subroutine
00003A3E                            ; ---------------------------------------------------------------------------
00003A3E                            
00003A3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A3E                            
00003A3E                            
00003A3E                            LZWaterSlides:				; XREF: LZWaterEffects
00003A3E 43F8 D000                  		lea	($FFFFD000).w,a1
00003A42 0829 0001 0022             		btst	#1,$22(a1)
00003A48 6600                       		bne.s	loc_3F6A
00003A4A 3029 000C                  		move.w	$C(a1),d0
00003A4E E248                       		lsr.w	#1,d0
00003A50 0240 0380                  		andi.w	#$380,d0
00003A54 1229 0008                  		move.b	8(a1),d1
00003A58 0241 007F                  		andi.w	#$7F,d1
00003A5E 45F8 A400                  		lea	($FFFFA400).w,a2
00003A62 1032 0000                  		move.b	(a2,d0.w),d0
00003A66 45FA 0000                  		lea	byte_3FCF(pc),a2
00003A6A 7206                       		moveq	#6,d1
00003A6C                            
00003A6C                            loc_3F62:
00003A6C B022                       		cmp.b	-(a2),d0
00003A6E 57C9 FFFC                  		dbeq	d1,loc_3F62
00003A72 6700                       		beq.s	LZSlide_Move
00003A74                            
00003A74                            loc_3F6A:
00003A74 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00003A78 6700                       		beq.s	locret_3F7A
00003A7A 337C 0005 003E             		move.w	#5,$3E(a1)
00003A80 4238 F7CA                  		clr.b	($FFFFF7CA).w
00003A84                            
00003A84                            locret_3F7A:
00003A84 4E75                       		rts	
00003A86                            ; ===========================================================================
00003A86                            
00003A86                            LZSlide_Move:				; XREF: LZWaterSlides
00003A86 0C41 0003                  		cmpi.w	#3,d1
00003A8A 6400                       		bcc.s	loc_3F84
00003A8E                            
00003A8E                            loc_3F84:
00003A8E 08A9 0000 0022             		bclr	#0,$22(a1)
00003A94 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00003A98 1340 0014                  		move.b	d0,$14(a1)
00003A9C 6A00                       		bpl.s	loc_3F9A
00003A9E 08E9 0000 0022             		bset	#0,$22(a1)
00003AA4                            
00003AA4                            loc_3F9A:
00003AA4 4229 0015                  		clr.b	$15(a1)
00003AA8 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00003AAE 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00003AB4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003AB8 0200 001F                  		andi.b	#$1F,d0
00003ABC 6600                       		bne.s	locret_3FBE
00003ABE 303C 00D0                  		move.w	#$D0,d0
00003AC2 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play water sound
00003AC8                            
00003AC8                            locret_3FBE:
00003AC8 4E75                       		rts	
00003ACA                            ; End of function LZWaterSlides
00003ACA                            
00003ACA                            ; ===========================================================================
00003ACA 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00003AD9 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00003ADA                            		even
00003ADA                            
00003ADA                            ; ---------------------------------------------------------------------------
00003ADA                            ; Subroutine to	move Sonic in demo mode
00003ADA                            ; ---------------------------------------------------------------------------
00003ADA                            
00003ADA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003ADA                            
00003ADA                            
00003ADA                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00003ADA 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003ADE 6600                       		bne.s	MoveDemo_On	; if yes, branch
00003AE0 4E75                       		rts	
00003AE2                            ; ===========================================================================
00003AE2                            
00003AE2                            MoveDemo_On:				; XREF: MoveSonicInDemo
00003AE2 4A38 F604                  		tst.b	($FFFFF604).w
00003AE6 6A00                       		bpl.s	loc_4022
00003AE8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AEC 6B00                       		bmi.s	loc_4022
00003AEE 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00003AF4                            
00003AF4                            loc_4022:
00003AF4 43F9 0000 0000             		lea	(Demo_Index).l,a1
00003AFA 7000                       		moveq	#0,d0
00003AFC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003B00 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00003B06 6600                       		bne.s	loc_4038
00003B08 7006                       		moveq	#6,d0
00003B0A                            
00003B0A                            loc_4038:
00003B0A E548                       		lsl.w	#2,d0
00003B0C 2271 0000                  		movea.l	(a1,d0.w),a1
00003B10 3038 F790                  		move.w	($FFFFF790).w,d0
00003B14 D2C0                       		adda.w	d0,a1
00003B16 1011                       		move.b	(a1),d0
00003B18 41F8 F604                  		lea	($FFFFF604).w,a0
00003B1C 1200                       		move.b	d0,d1
00003B1E 1410                       		move.b	(a0),d2
00003B20 B500                       		eor.b	d2,d0
00003B22 10C1                       		move.b	d1,(a0)+
00003B26 10C0                       		move.b	d0,(a0)+
00003B28 5338 F792                  		subq.b	#1,($FFFFF792).w
00003B2C 6400                       		bcc.s	locret_407E
00003B2E 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00003B34 5478 F790                  		addq.w	#2,($FFFFF790).w
00003B38                            
00003B38                            locret_407E:
00003B38 4E75                       		rts	
00003B3A                            ; End of function MoveSonicInDemo
00003B3A                            
00003B3A                            ; ===========================================================================
00003B3A                            ; ---------------------------------------------------------------------------
00003B3A                            ; Demo sequence	pointers
00003B3A                            ; ---------------------------------------------------------------------------
00003B3A                            Demo_Index:
00003B3A                            	include "_inc\Demo pointers for intro.asm"
00003B3A                            ; ---------------------------------------------------------------------------
00003B3A                            ; Demo sequence	pointers
00003B3A                            ; ---------------------------------------------------------------------------
00003B3A 0000 0000                  	dc.l Demo_GHZ
00003B3E 0000 0000                  	dc.l Demo_GHZ
00003B42 0000 0000                  	dc.l Demo_MZ
00003B46 0000 0000                  	dc.l Demo_MZ
00003B4A 0000 0000                  	dc.l Demo_SYZ
00003B4E 0000 0000                  	dc.l Demo_SYZ
00003B52 0000 0000                  	dc.l Demo_SS
00003B56 0000 0000                  	dc.l Demo_SS
00003B56 0000 0000                  	dc.l Demo_SS
00003B5A                            
00003B5A 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00003B6A 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00003B7A 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00003B8A                            		even
00003B8A                            
00003B8A                            ; ---------------------------------------------------------------------------
00003B8A                            ; Collision index loading subroutine
00003B8A                            ; ---------------------------------------------------------------------------
00003B8A                            
00003B8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003B8A                            
00003B8A                            
00003B8A                            ColIndexLoad:				; XREF: Level
00003B8A 7000                       		moveq	#0,d0
00003B8C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003B90 E548                       		lsl.w	#2,d0
00003B92 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00003B98 4E75                       		rts	
00003B9A                            ; End of function ColIndexLoad
00003B9A                            
00003B9A                            ; ===========================================================================
00003B9A                            ; ---------------------------------------------------------------------------
00003B9A                            ; Collision index pointers
00003B9A                            ; ---------------------------------------------------------------------------
00003B9A                            ColPointers:
00003B9A                            	include "_inc\Collision index pointers.asm"
00003B9A                            ; ---------------------------------------------------------------------------
00003B9A                            ; Collision index pointers
00003B9A                            ; ---------------------------------------------------------------------------
00003B9A 0000 0000                  	dc.l Col_GHZ
00003B9E 0000 0000                  	dc.l Col_LZ
00003BA2 0000 0000                  	dc.l Col_MZ
00003BA6 0000 0000                  	dc.l Col_SLZ
00003BAA 0000 0000                  	dc.l Col_SYZ
00003BAE 0000 0000                  	dc.l Col_SBZ
00003BAE 0000 0000                  	dc.l Col_SBZ
00003BB2                            
00003BB2                            ; ---------------------------------------------------------------------------
00003BB2                            ; Oscillating number subroutine
00003BB2                            ; ---------------------------------------------------------------------------
00003BB2                            
00003BB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003BB2                            
00003BB2                            
00003BB2                            OscillateNumInit:			; XREF: Level
00003BB2 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00003BB6 45F9 0000 0000             		lea	(Osc_Data).l,a2
00003BBC 7220                       		moveq	#$20,d1
00003BBE                            
00003BBE                            Osc_Loop:
00003BBE 32DA                       		move.w	(a2)+,(a1)+
00003BC0 51C9 FFFC                  		dbf	d1,Osc_Loop
00003BC4 4E75                       		rts	
00003BC6                            ; End of function OscillateNumInit
00003BC6                            
00003BC6                            ; ===========================================================================
00003BC6 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00003BCA 0000 0080                  		dc.w 0,	$80
00003BCE 0000 0080                  		dc.w 0,	$80
00003BD2 0000 0080                  		dc.w 0,	$80
00003BD6 0000 0080                  		dc.w 0,	$80
00003BDA 0000 0080                  		dc.w 0,	$80
00003BDE 0000 0080                  		dc.w 0,	$80
00003BE2 0000 0080                  		dc.w 0,	$80
00003BE6 0000 0080                  		dc.w 0,	$80
00003BEA 0000 50F0                  		dc.w 0,	$50F0
00003BEE 011E 2080                  		dc.w $11E, $2080
00003BF2 00B4 3080                  		dc.w $B4, $3080
00003BF6 010E 5080                  		dc.w $10E, $5080
00003BFA 01C2 7080                  		dc.w $1C2, $7080
00003BFE 0276 0080                  		dc.w $276, $80
00003C02 0000 0080                  		dc.w 0,	$80
00003C06 0000                       		dc.w 0
00003C08                            		even
00003C08                            
00003C08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003C08                            
00003C08                            
00003C08                            OscillateNumDo:				; XREF: Level
00003C08 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003C0E 6400                       		bcc.s	locret_41C4
00003C10 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00003C14 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00003C1A 3619                       		move.w	(a1)+,d3
00003C1C 720F                       		moveq	#$F,d1
00003C1E                            
00003C1E                            loc_4184:
00003C1E 341A                       		move.w	(a2)+,d2
00003C20 381A                       		move.w	(a2)+,d4
00003C22 0303                       		btst	d1,d3
00003C24 6600                       		bne.s	loc_41A4
00003C26 3029 0002                  		move.w	2(a1),d0
00003C2C 3340 0002                  		move.w	d0,2(a1)
00003C32 B811                       		cmp.b	0(a1),d4
00003C34 6200                       		bhi.s	loc_41BA
00003C36 03C3                       		bset	d1,d3
00003C38 6000                       		bra.s	loc_41BA
00003C3A                            ; ===========================================================================
00003C3A                            
00003C3A                            loc_41A4:				; XREF: OscillateNumDo
00003C3A 3029 0002                  		move.w	2(a1),d0
00003C40 3340 0002                  		move.w	d0,2(a1)
00003C46 B811                       		cmp.b	0(a1),d4
00003C48 6300                       		bls.s	loc_41BA
00003C4A 0383                       		bclr	d1,d3
00003C4C                            
00003C4C                            loc_41BA:
00003C4C 5849                       		addq.w	#4,a1
00003C4E 51C9 FFCE                  		dbf	d1,loc_4184
00003C52 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00003C56                            
00003C56                            locret_41C4:
00003C56 4E75                       		rts	
00003C58                            ; End of function OscillateNumDo
00003C58                            
00003C58                            ; ===========================================================================
00003C58 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00003C5C 0002 0018                  		dc.w 2,	$18
00003C60 0002 0020                  		dc.w 2,	$20
00003C64 0002 0030                  		dc.w 2,	$30
00003C68 0004 0020                  		dc.w 4,	$20
00003C6C 0008 0008                  		dc.w 8,	8
00003C70 0008 0040                  		dc.w 8,	$40
00003C74 0004 0040                  		dc.w 4,	$40
00003C78 0002 0050                  		dc.w 2,	$50
00003C7C 0002 0050                  		dc.w 2,	$50
00003C80 0002 0020                  		dc.w 2,	$20
00003C84 0003 0030                  		dc.w 3,	$30
00003C88 0005 0050                  		dc.w 5,	$50
00003C8C 0007 0070                  		dc.w 7,	$70
00003C90 0002 0010                  		dc.w 2,	$10
00003C94 0002 0010                  		dc.w 2,	$10
00003C98                            		even
00003C98                            
00003C98                            ; ---------------------------------------------------------------------------
00003C98                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00003C98                            ; ---------------------------------------------------------------------------
00003C98                            
00003C98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003C98                            
00003C98                            
00003C98                            ChangeRingFrame:			; XREF: Level
00003C98 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00003C9C 6A00                       		bpl.s	loc_421C
00003C9E 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00003CA4 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00003CA8 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00003CAE                            
00003CAE                            loc_421C:
00003CAE 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00003CB2 6A00                       		bpl.s	loc_4232
00003CB4 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00003CBA 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00003CBE 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00003CC4                            
00003CC4                            loc_4232:
00003CC4 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00003CC8 6A00                       		bpl.s	loc_4250
00003CCA 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00003CD0 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00003CD4 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00003CDA 6500                       		bcs.s	loc_4250
00003CDC 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00003CE2                            
00003CE2                            loc_4250:
00003CE2 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00003CE6 6700                       		beq.s	locret_4272
00003CE8 7000                       		moveq	#0,d0
00003CEA 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00003CF2 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00003CF6 EF58                       		rol.w	#7,d0
00003CF8 0240 0003                  		andi.w	#3,d0
00003CFC 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00003D00 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00003D04                            
00003D04                            locret_4272:
00003D04 4E75                       		rts	
00003D06                            ; End of function ChangeRingFrame
00003D06                            
00003D06                            ; ---------------------------------------------------------------------------
00003D06                            ; End-of-act signpost pattern loading subroutine
00003D06                            ; ---------------------------------------------------------------------------
00003D06                            
00003D06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003D06                            
00003D06                            
00003D06                            SignpostArtLoad:			; XREF: Level
00003D06 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00003D0A 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00003D0E 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00003D14 6700                       		beq.s	Signpost_Exit	; if yes, branch
00003D16 3038 F700                  		move.w	($FFFFF700).w,d0
00003D1A 3238 F72A                  		move.w	($FFFFF72A).w,d1
00003D1E 0441 0100                  		subi.w	#$100,d1
00003D22 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00003D24 6D00                       		blt.s	Signpost_Exit	; if not, branch
00003D26 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00003D2A 6700                       		beq.s	Signpost_Exit
00003D2C B278 F728                  		cmp.w	($FFFFF728).w,d1
00003D30 6700                       		beq.s	Signpost_Exit
00003D32 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00003D36 7012                       		moveq	#$12,d0
00003D38 6000 D586                  		bra.w	LoadPLC2	; load signpost	patterns
00003D3C                            ; ===========================================================================
00003D3C                            
00003D3C                            Signpost_Exit:
00003D3C 4E75                       		rts	
00003D3E                            ; End of function SignpostArtLoad
00003D3E                            
00003D3E                            ; ===========================================================================
00003D3E                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00003DBE                            Demo_MZ:	incbin	demodata\i_mz.bin
00003EEE                            Demo_SYZ:	incbin	demodata\i_syz.bin
00003F6E                            Demo_SS:	incbin	demodata\i_ss.bin
0000406E                            ; ===========================================================================
0000406E                            
0000406E                            ; ---------------------------------------------------------------------------
0000406E                            ; Subroutine to	load level boundaries and start	locations
0000406E                            ; ---------------------------------------------------------------------------
0000406E                            
0000406E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000406E                            
0000406E                            
0000406E                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
0000406E 7000                       		moveq	#0,d0
00004070 11C0 F740                  		move.b	d0,($FFFFF740).w
00004074 11C0 F741                  		move.b	d0,($FFFFF741).w
00004078 11C0 F746                  		move.b	d0,($FFFFF746).w
0000407C 11C0 F748                  		move.b	d0,($FFFFF748).w
00004080 11C0 F742                  		move.b	d0,($FFFFF742).w
00004084 3038 FE10                  		move.w	($FFFFFE10).w,d0
00004088 ED08                       		lsl.b	#6,d0
0000408A E848                       		lsr.w	#4,d0
0000408C 3200                       		move.w	d0,d1
00004092 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00004096 3018                       		move.w	(a0)+,d0
00004098 31C0 F730                  		move.w	d0,($FFFFF730).w
0000409C 2018                       		move.l	(a0)+,d0
0000409E 21C0 F728                  		move.l	d0,($FFFFF728).w
000040A2 21C0 F720                  		move.l	d0,($FFFFF720).w
000040A6 2018                       		move.l	(a0)+,d0
000040A8 21C0 F72C                  		move.l	d0,($FFFFF72C).w
000040AC 21C0 F724                  		move.l	d0,($FFFFF724).w
000040B0 3038 F728                  		move.w	($FFFFF728).w,d0
000040B4 0640 0240                  		addi.w	#$240,d0
000040B8 31C0 F732                  		move.w	d0,($FFFFF732).w
000040BC 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
000040C2 3018                       		move.w	(a0)+,d0
000040C4 31C0 F73E                  		move.w	d0,($FFFFF73E).w
000040C8 6000 0000                  		bra.w	LevSz_ChkLamp
000040CC                            ; ===========================================================================
000040CC                            ; ---------------------------------------------------------------------------
000040CC                            ; Level size array and ending start location array
000040CC                            ; ---------------------------------------------------------------------------
000040CC                            LevelSizeArray:
000040CC                                    ; GHZ
000040CC 0004 0000 1300 0000 0120+          dc.w $0004, $0000, $1300, $0000, $0120, $0060 ; Act 1
000040D8 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
000040E4 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
000040F0 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
000040FC                                    ; LZ
000040FC 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
00004108 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
00004114 0004 0000 202F FF00 0800+          dc.w $0004, $0000, $202F, $FF00, $0800, $0060 ; Act 3
00004120 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
0000412C                                    ; MZ
0000412C 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
00004138 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
00004144 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
00004150 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
0000415C                                    ; SLZ
0000415C 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
00004168 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
00004174 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
00004180 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
0000418C                                    ; SYZ
0000418C 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
00004198 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
000041A4 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
000041B0 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
000041BC                                    ; SBZ
000041BC 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
000041C8 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
000041D4 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
000041E0 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
000041EC                                    ; Ending
000041EC 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
000041F8 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
00004204 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
00004210 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
0000421C                                    even
0000421C                            
0000421C                            EndingStLocArray:
0000421C                            		incbin	misc\sloc_end.bin
0000423C                            		even
0000423C                            
0000423C                            ; ===========================================================================
0000423C                            
0000423C                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
0000423C 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00004240 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00004242 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00004248 3238 D008                  		move.w	($FFFFD008).w,d1
0000424C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00004250 6000                       		bra.s	loc_60D0
00004252                            ; ===========================================================================
00004252                            
00004252                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00004252 3038 FE10                  		move.w	($FFFFFE10).w,d0
00004256 ED08                       		lsl.b	#6,d0
00004258 E848                       		lsr.w	#4,d0
0000425A 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
0000425E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004262 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00004264 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004268 5340                       		subq.w	#1,d0
0000426A E548                       		lsl.w	#2,d0
0000426C 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00004270                            
00004270                            LevSz_SonicPos:
00004270 7200                       		moveq	#0,d1
00004272 3219                       		move.w	(a1)+,d1
00004274 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00004278 7000                       		moveq	#0,d0
0000427A 3011                       		move.w	(a1),d0
0000427C 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00004280                            
00004280                            loc_60D0:				; XREF: LevSz_ChkLamp
00004280 0441 00A0                  		subi.w	#$A0,d1
00004284 6400                       		bcc.s	loc_60D8
00004286 7200                       		moveq	#0,d1
00004288                            
00004288                            loc_60D8:
00004288 3438 F72A                  		move.w	($FFFFF72A).w,d2
0000428C B242                       		cmp.w	d2,d1
0000428E 6500                       		bcs.s	loc_60E2
00004290 3202                       		move.w	d2,d1
00004292                            
00004292                            loc_60E2:
00004292 31C1 F700                  		move.w	d1,($FFFFF700).w
00004296 0440 0060                  		subi.w	#$60,d0
0000429A 6400                       		bcc.s	loc_60EE
0000429C 7000                       		moveq	#0,d0
0000429E                            
0000429E                            loc_60EE:
0000429E B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000042A2 6D00                       		blt.s	loc_60F8
000042A4 3038 F72E                  		move.w	($FFFFF72E).w,d0
000042A8                            
000042A8                            loc_60F8:
000042A8 31C0 F704                  		move.w	d0,($FFFFF704).w
000042AC 6100 0000                  		bsr.w	BgScrollSpeed
000042B0 7000                       		moveq	#0,d0
000042B2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000042B6 E508                       		lsl.b	#2,d0
000042B8 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
000042BE 6000 0000                  		bra.w	LevSz_Unk
000042C2                            ; ===========================================================================
000042C2                            ; ---------------------------------------------------------------------------
000042C2                            ; Sonic	start location array
000042C2                            ; ---------------------------------------------------------------------------
000042C2                            StartLocArray:	incbin	misc\sloc_lev.bin
00004332                            		even
00004332                            
00004332                            ; ---------------------------------------------------------------------------
00004332                            ; Which	256x256	tiles contain loops or roll-tunnels
00004332                            ; ---------------------------------------------------------------------------
00004332                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00004332                            ; loop,	loop, tunnel, tunnel
00004332                            ; ---------------------------------------------------------------------------
00004332                            LoopTileNums:	incbin	misc\loopnums.bin
0000434E                            		even
0000434E                            
0000434E                            ; ===========================================================================
0000434E                            
0000434E                            LevSz_Unk:				; XREF: LevelSizeLoad
0000434E 7000                       		moveq	#0,d0
00004350 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004354 E748                       		lsl.w	#3,d0
00004356 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
0000435A 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
0000435E 24D9                       		move.l	(a1)+,(a2)+
00004360 24D9                       		move.l	(a1)+,(a2)+
00004362 4E75                       		rts	
00004364                            ; End of function LevelSizeLoad
00004364                            
00004364                            ; ===========================================================================
00004364 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
0000436C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00004374 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000437C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00004384 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000438C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00004394 0070 0100 0100 0100        		dc.l $700100, $1000100
0000439C                            
0000439C                            ; ---------------------------------------------------------------------------
0000439C                            ; Subroutine to	set scroll speed of some backgrounds
0000439C                            ; ---------------------------------------------------------------------------
0000439C                            
0000439C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000439C                            
0000439C                            
0000439C                            BgScrollSpeed:				; XREF: LevelSizeLoad
0000439C 4A38 FE30                  		tst.b	($FFFFFE30).w
000043A0 6600                       		bne.s	loc_6206
000043A2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000043A6 31C0 F714                  		move.w	d0,($FFFFF714).w
000043AA 31C1 F708                  		move.w	d1,($FFFFF708).w
000043AE 31C1 F710                  		move.w	d1,($FFFFF710).w
000043B2 31C1 F718                  		move.w	d1,($FFFFF718).w
000043B6                            
000043B6                            loc_6206:
000043B6 7400                       		moveq	#0,d2
000043B8 1438 FE10                  		move.b	($FFFFFE10).w,d2
000043BE 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000043C2 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000043C6                            ; End of function BgScrollSpeed
000043C6                            
000043C6                            ; ===========================================================================
000043C6 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000043CA 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000043CE 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000043D2 0000                       		dc.w BgScroll_End-BgScroll_Index
000043D4                            ; ===========================================================================
000043D4                            
000043D4                            BgScroll_GHZ:				; XREF: BgScroll_Index
000043D4 6000 0000                  		bra.w	Deform_GHZ
000043D8                            ; ===========================================================================
000043D8                            
000043D8                            BgScroll_LZ:				; XREF: BgScroll_Index
000043D8 E280                       		asr.l	#1,d0
000043DA 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000043DE 4E75                       		rts	
000043E0                            ; ===========================================================================
000043E0                            
000043E0                            BgScroll_MZ:				; XREF: BgScroll_Index
000043E0 4E75                       		rts	
000043E2                            ; ===========================================================================
000043E2                            
000043E2                            BgScroll_SLZ:				; XREF: BgScroll_Index
000043E2 E280                       		asr.l	#1,d0
000043E4 0640 00C0                  		addi.w	#$C0,d0
000043E8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000043EC 4E75                       		rts	
000043EE                            ; ===========================================================================
000043EE                            
000043EE                            BgScroll_SYZ:				; XREF: BgScroll_Index
000043EE E980                       		asl.l	#4,d0
000043F0 2400                       		move.l	d0,d2
000043F2 E380                       		asl.l	#1,d0
000043F6 E080                       		asr.l	#8,d0
000043F8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000043FC 31C0 F714                  		move.w	d0,($FFFFF714).w
00004400 4E75                       		rts	
00004402                            ; ===========================================================================
00004402                            
00004402                            BgScroll_SBZ:				; XREF: BgScroll_Index
00004402 E980                       		asl.l	#4,d0
00004404 E380                       		asl.l	#1,d0
00004406 E080                       		asr.l	#8,d0
00004408 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000440C 4E75                       		rts	
0000440E                            ; ===========================================================================
0000440E                            
0000440E                            BgScroll_End:				; XREF: BgScroll_Index
0000440E 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00004414 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000441A 4E75                       		rts	
0000441C                            ; ===========================================================================
0000441C 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00004422 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00004428 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
0000442E 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00004434 4E75                       		rts
00004436                            
00004436                            ; ---------------------------------------------------------------------------
00004436                            ; Background layer deformation subroutines
00004436                            ; ---------------------------------------------------------------------------
00004436                            
00004436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004436                            
00004436                            
00004436                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00004436 4A38 F744                  		tst.b	($FFFFF744).w
0000443A 6700                       		beq.s	loc_628E
0000443C 4E75                       		rts	
0000443E                            ; ===========================================================================
0000443E                            
0000443E                            loc_628E:
0000443E 4278 F754                  		clr.w	($FFFFF754).w
00004442 4278 F756                  		clr.w	($FFFFF756).w
00004446 4278 F758                  		clr.w	($FFFFF758).w
0000444A 4278 F75A                  		clr.w	($FFFFF75A).w
0000444E 6100 0000                  		bsr.w	ScrollHoriz
00004452 6100 0000                  		bsr.w	ScrollVertical
00004456 6100 0000                  		bsr.w	DynScrResizeLoad
0000445A 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00004460 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00004466 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
0000446C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004472 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00004478 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
0000447E 7000                       		moveq	#0,d0
00004480 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004486 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
0000448A 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
0000448E                            ; End of function DeformBgLayer
0000448E                            
0000448E                            ; ===========================================================================
0000448E                            ; ---------------------------------------------------------------------------
0000448E                            ; Offset index for background layer deformation	code
0000448E                            ; ---------------------------------------------------------------------------
0000448E 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00004492 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00004496 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
0000449A 0000                       		dc.w Deform_GHZ-Deform_Index
0000449C                            ; ---------------------------------------------------------------------------
0000449C                            ; Green	Hill Zone background layer deformation code
0000449C                            ; ---------------------------------------------------------------------------
0000449C                            
0000449C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000449C                            
0000449C                            
0000449C                            Deform_GHZ:				; XREF: Deform_Index
0000449C 43F8 CC00                          lea	($FFFFCC00).w,a1        ; fucking someone else figure this out lol
000044A0 3038 F700                  	move.w	($FFFFF700).w,d0
000044A4 4440                       	neg.w	d0
000044A6 3400                       	move.w	d0,d2
000044A8 4840                       	swap	d0
000044AA 3002                       	move.w	d2,d0
000044AC 3600                       	move.w	d0,d3
000044AE E240                       	asr.w	#1,d0
000044B0 323C 00FF                  	move.w	#$FF,d1
000044B4                            deformscreenloop:
000044B4 22C0                       		move.l	d0,(a1)+
000044B6 51C9 FFFC                  		dbf	d1,deformscreenloop
000044BA 3003                                       move.w	d3,d0
000044BC 31F8 F704 F70C             		move.w	($FFFFF704).w,($FFFFF70C).w	; Set the BG's Y position to the FG's Y pos
000044C8                            
000044C8                            	@skip:
000044C8 4E75                       		rts
000044CA                            ; End of function Deform_GHZ
000044CA                            
000044CA                            ; ---------------------------------------------------------------------------
000044CA                            ; Labyrinth Zone background layer deformation code
000044CA                            ; ---------------------------------------------------------------------------
000044CA                            
000044CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044CA                            
000044CA                            
000044CA                            Deform_LZ:				; XREF: Deform_Index
000044CA 3838 F73A                  		move.w	($FFFFF73A).w,d4
000044CE 48C4                       		ext.l	d4
000044D0 EF84                       		asl.l	#7,d4
000044D2 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000044D6 48C5                       		ext.l	d5
000044D8 EF85                       		asl.l	#7,d5
000044DA 6100 0000                  		bsr.w	ScrollBlock1
000044DE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000044E4 43F8 CC00                  		lea	($FFFFCC00).w,a1
000044E8 323C 00DF                  		move.w	#$DF,d1
000044EC 3038 F700                  		move.w	($FFFFF700).w,d0
000044F0 4440                       		neg.w	d0
000044F2 4840                       		swap	d0
000044F4 3038 F708                  		move.w	($FFFFF708).w,d0
000044F8 4440                       		neg.w	d0
000044FA                            
000044FA                            loc_63C6:
000044FA 22C0                       		move.l	d0,(a1)+
000044FC 51C9 FFFC                  		dbf	d1,loc_63C6
00004500 3038 F646                  		move.w	($FFFFF646).w,d0
00004508 4E75                       		rts	
0000450A                            ; End of function Deform_LZ
0000450A                            
0000450A                            ; ---------------------------------------------------------------------------
0000450A                            ; Marble Zone background layer deformation code
0000450A                            ; ---------------------------------------------------------------------------
0000450A                            
0000450A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000450A                            
0000450A                            
0000450A                            Deform_MZ:				; XREF: Deform_Index
0000450A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000450E 48C4                       		ext.l	d4
00004510 ED84                       		asl.l	#6,d4
00004512 2204                       		move.l	d4,d1
00004514 E384                       		asl.l	#1,d4
00004518 7A00                       		moveq	#0,d5
0000451A 6100 0000                  		bsr.w	ScrollBlock1
0000451E 303C 0200                  		move.w	#$200,d0
00004522 3238 F704                  		move.w	($FFFFF704).w,d1
00004526 0441 01C8                  		subi.w	#$1C8,d1
0000452A 6500                       		bcs.s	loc_6402
0000452C 3401                       		move.w	d1,d2
00004532 E441                       		asr.w	#2,d1
00004536                            
00004536                            loc_6402:
00004536 31C0 F714                  		move.w	d0,($FFFFF714).w
0000453A 6100 0000                  		bsr.w	ScrollBlock3
0000453E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004544 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004548 323C 00DF                  		move.w	#$DF,d1
0000454C 3038 F700                  		move.w	($FFFFF700).w,d0
00004550 4440                       		neg.w	d0
00004552 4840                       		swap	d0
00004554 3038 F708                  		move.w	($FFFFF708).w,d0
00004558 4440                       		neg.w	d0
0000455A                            
0000455A                            loc_6426:
0000455A 22C0                       		move.l	d0,(a1)+
0000455C 51C9 FFFC                  		dbf	d1,loc_6426
00004560 4E75                       		rts	
00004562                            ; End of function Deform_MZ
00004562                            
00004562                            ; ---------------------------------------------------------------------------
00004562                            ; Star Light Zone background layer deformation code
00004562                            ; ---------------------------------------------------------------------------
00004562                            
00004562                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004562                            
00004562                            
00004562                            Deform_SLZ:				; XREF: Deform_Index
00004562 3838 F73A                  		move.w	($FFFFF73A).w,d4
00004566 48C4                       		ext.l	d4
00004568 EF84                       		asl.l	#7,d4
0000456A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000456E 48C5                       		ext.l	d5
00004570 EF85                       		asl.l	#7,d5
00004572 6100 0000                  		bsr.w	ScrollBlock2
00004576 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000457C 6100 0000                  		bsr.w	Deform_SLZ_2
00004580 45F8 A800                  		lea	($FFFFA800).w,a2
00004584 3038 F70C                  		move.w	($FFFFF70C).w,d0
00004588 3400                       		move.w	d0,d2
0000458A 0440 00C0                  		subi.w	#$C0,d0
0000458E 0240 03F0                  		andi.w	#$3F0,d0
00004592 E648                       		lsr.w	#3,d0
00004594 45F2 0000                  		lea	(a2,d0.w),a2
00004598 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000459C 323C 000E                  		move.w	#$E,d1
000045A0 3038 F700                  		move.w	($FFFFF700).w,d0
000045A4 4440                       		neg.w	d0
000045A6 4840                       		swap	d0
000045A8 0242 000F                  		andi.w	#$F,d2
000045AE 301A                       		move.w	(a2)+,d0
000045B0 4EFB 2000                  		jmp	loc_6482(pc,d2.w)
000045B4                            ; ===========================================================================
000045B4                            
000045B4                            loc_6480:				; XREF: Deform_SLZ
000045B4 301A                       		move.w	(a2)+,d0
000045B6                            
000045B6                            loc_6482:
000045B6 22C0                       		move.l	d0,(a1)+
000045B8 22C0                       		move.l	d0,(a1)+
000045BA 22C0                       		move.l	d0,(a1)+
000045BC 22C0                       		move.l	d0,(a1)+
000045BE 22C0                       		move.l	d0,(a1)+
000045C0 22C0                       		move.l	d0,(a1)+
000045C2 22C0                       		move.l	d0,(a1)+
000045C4 22C0                       		move.l	d0,(a1)+
000045C6 22C0                       		move.l	d0,(a1)+
000045C8 22C0                       		move.l	d0,(a1)+
000045CA 22C0                       		move.l	d0,(a1)+
000045CC 22C0                       		move.l	d0,(a1)+
000045CE 22C0                       		move.l	d0,(a1)+
000045D0 22C0                       		move.l	d0,(a1)+
000045D2 22C0                       		move.l	d0,(a1)+
000045D4 22C0                       		move.l	d0,(a1)+
000045D6 51C9 FFDC                  		dbf	d1,loc_6480
000045DA 4E75                       		rts	
000045DC                            ; End of function Deform_SLZ
000045DC                            
000045DC                            
000045DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045DC                            
000045DC                            
000045DC                            Deform_SLZ_2:				; XREF: Deform_SLZ
000045DC 43F8 A800                  		lea	($FFFFA800).w,a1
000045E0 3438 F700                  		move.w	($FFFFF700).w,d2
000045E4 4442                       		neg.w	d2
000045E6 3002                       		move.w	d2,d0
000045E8 E640                       		asr.w	#3,d0
000045EC 48C0                       		ext.l	d0
000045EE E980                       		asl.l	#4,d0
000045F0 81FC 001C                  		divs.w	#$1C,d0
000045F4 48C0                       		ext.l	d0
000045F6 E980                       		asl.l	#4,d0
000045F8 E180                       		asl.l	#8,d0
000045FA 7600                       		moveq	#0,d3
000045FC 3602                       		move.w	d2,d3
000045FE 323C 001B                  		move.w	#$1B,d1
00004602                            
00004602                            loc_64CE:
00004602 32C3                       		move.w	d3,(a1)+
00004604 4843                       		swap	d3
00004608 4843                       		swap	d3
0000460A 51C9 FFF6                  		dbf	d1,loc_64CE
0000460E 3002                       		move.w	d2,d0
00004610 E640                       		asr.w	#3,d0
00004612 323C 0004                  		move.w	#4,d1
00004616                            
00004616                            loc_64E2:
00004616 32C0                       		move.w	d0,(a1)+
00004618 51C9 FFFC                  		dbf	d1,loc_64E2
0000461C 3002                       		move.w	d2,d0
0000461E E440                       		asr.w	#2,d0
00004620 323C 0004                  		move.w	#4,d1
00004624                            
00004624                            loc_64F0:
00004624 32C0                       		move.w	d0,(a1)+
00004626 51C9 FFFC                  		dbf	d1,loc_64F0
0000462A 3002                       		move.w	d2,d0
0000462C E240                       		asr.w	#1,d0
0000462E 323C 001D                  		move.w	#$1D,d1
00004632                            
00004632                            loc_64FE:
00004632 32C0                       		move.w	d0,(a1)+
00004634 51C9 FFFC                  		dbf	d1,loc_64FE
00004638 4E75                       		rts	
0000463A                            ; End of function Deform_SLZ_2
0000463A                            
0000463A                            ; ---------------------------------------------------------------------------
0000463A                            ; Spring Yard Zone background layer deformation	code
0000463A                            ; ---------------------------------------------------------------------------
0000463A                            
0000463A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000463A                            
0000463A                            
0000463A                            Deform_SYZ:				; XREF: Deform_Index
0000463A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000463E 48C4                       		ext.l	d4
00004640 ED84                       		asl.l	#6,d4
00004642 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00004646 48C5                       		ext.l	d5
00004648 E985                       		asl.l	#4,d5
0000464A 2205                       		move.l	d5,d1
0000464C E385                       		asl.l	#1,d5
00004650 6100 0000                  		bsr.w	ScrollBlock1
00004654 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000465A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000465E 323C 00DF                  		move.w	#$DF,d1
00004662 3038 F700                  		move.w	($FFFFF700).w,d0
00004666 4440                       		neg.w	d0
00004668 4840                       		swap	d0
0000466A 3038 F708                  		move.w	($FFFFF708).w,d0
0000466E 4440                       		neg.w	d0
00004670                            
00004670                            loc_653C:
00004670 22C0                       		move.l	d0,(a1)+
00004672 51C9 FFFC                  		dbf	d1,loc_653C
00004676 4E75                       		rts	
00004678                            ; End of function Deform_SYZ
00004678                            
00004678                            ; ---------------------------------------------------------------------------
00004678                            ; Scrap	Brain Zone background layer deformation	code
00004678                            ; ---------------------------------------------------------------------------
00004678                            
00004678                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004678                            
00004678                            
00004678                            Deform_SBZ:				; XREF: Deform_Index
00004678 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000467C 48C4                       		ext.l	d4
0000467E ED84                       		asl.l	#6,d4
00004680 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00004684 48C5                       		ext.l	d5
00004686 E985                       		asl.l	#4,d5
00004688 E385                       		asl.l	#1,d5
0000468A 6100 0000                  		bsr.w	ScrollBlock1
0000468E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004694 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004698 323C 00DF                  		move.w	#$DF,d1
0000469C 3038 F700                  		move.w	($FFFFF700).w,d0
000046A0 4440                       		neg.w	d0
000046A2 4840                       		swap	d0
000046A4 3038 F708                  		move.w	($FFFFF708).w,d0
000046A8 4440                       		neg.w	d0
000046AA                            
000046AA                            loc_6576:
000046AA 22C0                       		move.l	d0,(a1)+
000046AC 51C9 FFFC                  		dbf	d1,loc_6576
000046B0 4E75                       		rts	
000046B2                            ; End of function Deform_SBZ
000046B2                            
000046B2                            ; ---------------------------------------------------------------------------
000046B2                            ; Subroutine to	scroll the level horizontally as Sonic moves
000046B2                            ; ---------------------------------------------------------------------------
000046B2                            
000046B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046B2                            
000046B2                            
000046B2                            ScrollHoriz:				; XREF: DeformBgLayer
000046B2 3838 F700                  		move.w	($FFFFF700).w,d4
000046B6 6100                       		bsr.s	ScrollHoriz2
000046B8 3038 F700                  		move.w	($FFFFF700).w,d0
000046BC 0240 0010                  		andi.w	#$10,d0
000046C0 1238 F74A                  		move.b	($FFFFF74A).w,d1
000046C4 B300                       		eor.b	d1,d0
000046C6 6600                       		bne.s	locret_65B0
000046C8 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
000046CE 3038 F700                  		move.w	($FFFFF700).w,d0
000046D4 6A00                       		bpl.s	loc_65AA
000046D6 08F8 0002 F754             		bset	#2,($FFFFF754).w
000046DC 4E75                       		rts	
000046DE                            ; ===========================================================================
000046DE                            
000046DE                            loc_65AA:
000046DE 08F8 0003 F754             		bset	#3,($FFFFF754).w
000046E4                            
000046E4                            locret_65B0:
000046E4 4E75                       		rts	
000046E6                            ; End of function ScrollHoriz
000046E6                            
000046E6                            
000046E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046E6                            
000046E6                            
000046E6                            ScrollHoriz2:				; XREF: ScrollHoriz
000046E6 3038 D008                  		move.w	($FFFFD008).w,d0
000046EE 0440 0078                  		subi.w	#$78,d0
000046F2 6500                       		bcs.s	loc_65F6
000046F4 0440 000A                  		subi.w	#10,d0
000046F8 6400                       		bcc.s	loc_65CC
000046FA 4278 F73A                  		clr.w	($FFFFF73A).w
000046FE 4E75                       		rts	
00004700                            ; ===========================================================================
00004700                            
00004700                            loc_65CC:
00004700 0C40 0010                  		cmpi.w	#$10,d0
00004704 6500                       		bcs.s	loc_65D6
00004706 303C 0010                  		move.w	#$10,d0
0000470A                            
0000470A                            loc_65D6:
0000470E B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00004712 6D00                       		blt.s	loc_65E4
00004714 3038 F72A                  		move.w	($FFFFF72A).w,d0
00004718                            
00004718                            loc_65E4:
00004718 3200                       		move.w	d0,d1
0000471E E141                       		asl.w	#8,d1
00004720 31C0 F700                  		move.w	d0,($FFFFF700).w
00004724 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00004728 4E75                       		rts	
0000472A                            ; ===========================================================================
0000472A                            
0000472A                            loc_65F6:				; XREF: ScrollHoriz2
0000472E B078 F728                  		cmp.w	($FFFFF728).w,d0
00004732 6EE4                       		bgt.s	loc_65E4
00004734 3038 F728                  		move.w	($FFFFF728).w,d0
00004738 60DE                       		bra.s	loc_65E4
0000473A                            ; End of function ScrollHoriz2
0000473A                            
0000473A                            ; ===========================================================================
0000473A 4A40                       		tst.w	d0
0000473C 6A00                       		bpl.s	loc_6610
0000473E 303C FFFE                  		move.w	#-2,d0
00004742 60E6                       		bra.s	loc_65F6
00004744                            ; ===========================================================================
00004744                            
00004744                            loc_6610:
00004744 303C 0002                  		move.w	#2,d0
00004748 60B6                       		bra.s	loc_65CC
0000474A                            
0000474A                            ; ---------------------------------------------------------------------------
0000474A                            ; Subroutine to	scroll the level vertically as Sonic moves
0000474A                            ; ---------------------------------------------------------------------------
0000474A                            
0000474A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000474A                            
0000474A                            
0000474A                            ScrollVertical:				; XREF: DeformBgLayer
0000474A 7200                       		moveq	#0,d1
0000474C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00004754 0838 0002 D022             		btst	#2,($FFFFD022).w
0000475A 6700                       		beq.s	loc_662A
0000475C 5B40                       		subq.w	#5,d0
0000475E                            
0000475E                            loc_662A:
0000475E 0838 0001 D022             		btst	#1,($FFFFD022).w
00004764 6700                       		beq.s	loc_664A
00004766 0640 0020                  		addi.w	#$20,d0
0000476E 6500                       		bcs.s	loc_6696
00004770 0440 0040                  		subi.w	#$40,d0
00004774 6400                       		bcc.s	loc_6696
00004776 4A38 F75C                  		tst.b	($FFFFF75C).w
0000477A 6600                       		bne.s	loc_66A8
0000477C 6000                       		bra.s	loc_6656
0000477E                            ; ===========================================================================
0000477E                            
0000477E                            loc_664A:
00004782 6600                       		bne.s	loc_665C
00004784 4A38 F75C                  		tst.b	($FFFFF75C).w
00004788 6600                       		bne.s	loc_66A8
0000478A                            
0000478A                            loc_6656:
0000478A 4278 F73C                  		clr.w	($FFFFF73C).w
0000478E 4E75                       		rts	
00004790                            ; ===========================================================================
00004790                            
00004790                            loc_665C:
00004790 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00004796 6600                       		bne.s	loc_6684
00004798 3238 D014                  		move.w	($FFFFD014).w,d1
0000479C 6A00                       		bpl.s	loc_666C
0000479E 4441                       		neg.w	d1
000047A0                            
000047A0                            loc_666C:
000047A0 0C41 0800                  		cmpi.w	#$800,d1
000047A4 6400                       		bcc.s	loc_6696
000047A6 323C 0600                  		move.w	#$600,d1
000047AA 0C40 0006                  		cmpi.w	#6,d0
000047AE 6E00                       		bgt.s	loc_66F6
000047B0 0C40 FFFA                  		cmpi.w	#-6,d0
000047B4 6D00                       		blt.s	loc_66C0
000047B6 6000                       		bra.s	loc_66AE
000047B8                            ; ===========================================================================
000047B8                            
000047B8                            loc_6684:
000047B8 323C 0200                  		move.w	#$200,d1
000047BC 0C40 0002                  		cmpi.w	#2,d0
000047C0 6E00                       		bgt.s	loc_66F6
000047C2 0C40 FFFE                  		cmpi.w	#-2,d0
000047C6 6D00                       		blt.s	loc_66C0
000047C8 6000                       		bra.s	loc_66AE
000047CA                            ; ===========================================================================
000047CA                            
000047CA                            loc_6696:
000047CA 323C 1000                  		move.w	#$1000,d1
000047CE 0C40 0010                  		cmpi.w	#$10,d0
000047D2 6E00                       		bgt.s	loc_66F6
000047D4 0C40 FFF0                  		cmpi.w	#-$10,d0
000047D8 6D00                       		blt.s	loc_66C0
000047DA 6000                       		bra.s	loc_66AE
000047DC                            ; ===========================================================================
000047DC                            
000047DC                            loc_66A8:
000047DC 7000                       		moveq	#0,d0
000047DE 11C0 F75C                  		move.b	d0,($FFFFF75C).w
000047E2                            
000047E2                            loc_66AE:
000047E2 7200                       		moveq	#0,d1
000047E4 3200                       		move.w	d0,d1
000047EA 4A40                       		tst.w	d0
000047EC 6A00 0000                  		bpl.w	loc_6700
000047F0 6000 0000                  		bra.w	loc_66CC
000047F4                            ; ===========================================================================
000047F4                            
000047F4                            loc_66C0:
000047F4 4441                       		neg.w	d1
000047F6 48C1                       		ext.l	d1
000047F8 E181                       		asl.l	#8,d1
000047FE 4841                       		swap	d1
00004800                            
00004800                            loc_66CC:
00004800 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00004804 6E00                       		bgt.s	loc_6724
00004806 0C41 FF00                  		cmpi.w	#-$100,d1
0000480A 6E00                       		bgt.s	loc_66F0
0000480C 0241 07FF                  		andi.w	#$7FF,d1
00004810 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00004816 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0000481C 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00004822 6000                       		bra.s	loc_6724
00004824                            ; ===========================================================================
00004824                            
00004824                            loc_66F0:
00004824 3238 F72C                  		move.w	($FFFFF72C).w,d1
00004828 6000                       		bra.s	loc_6724
0000482A                            ; ===========================================================================
0000482A                            
0000482A                            loc_66F6:
0000482A 48C1                       		ext.l	d1
0000482C E181                       		asl.l	#8,d1
00004832 4841                       		swap	d1
00004834                            
00004834                            loc_6700:
00004834 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00004838 6D00                       		blt.s	loc_6724
0000483A 0441 0800                  		subi.w	#$800,d1
0000483E 6500                       		bcs.s	loc_6720
00004840 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00004846 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
0000484C 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00004852 6000                       		bra.s	loc_6724
00004854                            ; ===========================================================================
00004854                            
00004854                            loc_6720:
00004854 3238 F72E                  		move.w	($FFFFF72E).w,d1
00004858                            
00004858                            loc_6724:
00004858 3838 F704                  		move.w	($FFFFF704).w,d4
0000485C 4841                       		swap	d1
0000485E 2601                       		move.l	d1,d3
00004864 E09B                       		ror.l	#8,d3
00004866 31C3 F73C                  		move.w	d3,($FFFFF73C).w
0000486A 21C1 F704                  		move.l	d1,($FFFFF704).w
0000486E 3038 F704                  		move.w	($FFFFF704).w,d0
00004872 0240 0010                  		andi.w	#$10,d0
00004876 1238 F74B                  		move.b	($FFFFF74B).w,d1
0000487A B300                       		eor.b	d1,d0
0000487C 6600                       		bne.s	locret_6766
0000487E 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00004884 3038 F704                  		move.w	($FFFFF704).w,d0
0000488A 6A00                       		bpl.s	loc_6760
0000488C 08F8 0000 F754             		bset	#0,($FFFFF754).w
00004892 4E75                       		rts	
00004894                            ; ===========================================================================
00004894                            
00004894                            loc_6760:
00004894 08F8 0001 F754             		bset	#1,($FFFFF754).w
0000489A                            
0000489A                            locret_6766:
0000489A 4E75                       		rts	
0000489C                            ; End of function ScrollVertical
0000489C                            
0000489C                            
0000489C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000489C                            
0000489C                            
0000489C                            ScrollBlock1:				; XREF: Deform_GHZ; et al
0000489C 2438 F708                  		move.l	($FFFFF708).w,d2
000048A0 2002                       		move.l	d2,d0
000048A4 21C0 F708                  		move.l	d0,($FFFFF708).w
000048A8 2200                       		move.l	d0,d1
000048AA 4841                       		swap	d1
000048AC 0241 0010                  		andi.w	#$10,d1
000048B0 1638 F74C                  		move.b	($FFFFF74C).w,d3
000048B4 B701                       		eor.b	d3,d1
000048B6 6600                       		bne.s	loc_679C
000048B8 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
000048C0 6A00                       		bpl.s	loc_6796
000048C2 08F8 0002 F756             		bset	#2,($FFFFF756).w
000048C8 6000                       		bra.s	loc_679C
000048CA                            ; ===========================================================================
000048CA                            
000048CA                            loc_6796:
000048CA 08F8 0003 F756             		bset	#3,($FFFFF756).w
000048D0                            
000048D0                            loc_679C:
000048D0 2638 F70C                  		move.l	($FFFFF70C).w,d3
000048D4 2003                       		move.l	d3,d0
000048D8 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000048DC 2200                       		move.l	d0,d1
000048DE 4841                       		swap	d1
000048E0 0241 0010                  		andi.w	#$10,d1
000048E4 1438 F74D                  		move.b	($FFFFF74D).w,d2
000048E8 B501                       		eor.b	d2,d1
000048EA 6600                       		bne.s	locret_67D0
000048EC 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000048F4 6A00                       		bpl.s	loc_67CA
000048F6 08F8 0000 F756             		bset	#0,($FFFFF756).w
000048FC 4E75                       		rts	
000048FE                            ; ===========================================================================
000048FE                            
000048FE                            loc_67CA:
000048FE 08F8 0001 F756             		bset	#1,($FFFFF756).w
00004904                            
00004904                            locret_67D0:
00004904 4E75                       		rts	
00004906                            ; End of function ScrollBlock1
00004906                            
00004906                            
00004906                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004906                            
00004906                            
00004906                            ScrollBlock2:				; XREF: Deform_SLZ
00004906 2438 F708                  		move.l	($FFFFF708).w,d2
0000490A 2002                       		move.l	d2,d0
0000490E 21C0 F708                  		move.l	d0,($FFFFF708).w
00004912 2638 F70C                  		move.l	($FFFFF70C).w,d3
00004916 2003                       		move.l	d3,d0
0000491A 21C0 F70C                  		move.l	d0,($FFFFF70C).w
0000491E 2200                       		move.l	d0,d1
00004920 4841                       		swap	d1
00004922 0241 0010                  		andi.w	#$10,d1
00004926 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000492A B501                       		eor.b	d2,d1
0000492C 6600                       		bne.s	locret_6812
0000492E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00004936 6A00                       		bpl.s	loc_680C
00004938 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000493E 4E75                       		rts	
00004940                            ; ===========================================================================
00004940                            
00004940                            loc_680C:
00004940 08F8 0001 F756             		bset	#1,($FFFFF756).w
00004946                            
00004946                            locret_6812:
00004946 4E75                       		rts	
00004948                            ; End of function ScrollBlock2
00004948                            
00004948                            
00004948                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004948                            
00004948                            
00004948                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00004948 3638 F70C                  		move.w	($FFFFF70C).w,d3
0000494C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00004950 3200                       		move.w	d0,d1
00004952 0241 0010                  		andi.w	#$10,d1
00004956 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000495A B501                       		eor.b	d2,d1
0000495C 6600                       		bne.s	locret_6842
0000495E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00004966 6A00                       		bpl.s	loc_683C
00004968 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000496E 4E75                       		rts	
00004970                            ; ===========================================================================
00004970                            
00004970                            loc_683C:
00004970 08F8 0001 F756             		bset	#1,($FFFFF756).w
00004976                            
00004976                            locret_6842:
00004976 4E75                       		rts	
00004978                            ; End of function ScrollBlock3
00004978                            
00004978                            
00004978                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004978                            
00004978                            
00004978                            ScrollBlock4:				; XREF: Deform_GHZ
00004978 3438 F710                  		move.w	($FFFFF710).w,d2
0000497C 3638 F714                  		move.w	($FFFFF714).w,d3
00004980 3038 F73A                  		move.w	($FFFFF73A).w,d0
00004984 48C0                       		ext.l	d0
00004986 EF80                       		asl.l	#7,d0
0000498C 3038 F710                  		move.w	($FFFFF710).w,d0
00004990 0240 0010                  		andi.w	#$10,d0
00004994 1238 F74E                  		move.b	($FFFFF74E).w,d1
00004998 B300                       		eor.b	d1,d0
0000499A 6600                       		bne.s	locret_6884
0000499C 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
000049A2 3038 F710                  		move.w	($FFFFF710).w,d0
000049A8 6A00                       		bpl.s	loc_687E
000049AA 08F8 0002 F758             		bset	#2,($FFFFF758).w
000049B0 6000                       		bra.s	locret_6884
000049B2                            ; ===========================================================================
000049B2                            
000049B2                            loc_687E:
000049B2 08F8 0003 F758             		bset	#3,($FFFFF758).w
000049B8                            
000049B8                            locret_6884:
000049B8 4E75                       		rts	
000049BA                            ; End of function ScrollBlock4
000049BA                            
000049BA                            
000049BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000049BA                            
000049BA                            
000049BA                            sub_6886:				; XREF: loc_C44
000049BA 4BF9 00C0 0004             		lea	($C00004).l,a5
000049C0 4DF9 00C0 0000             		lea	($C00000).l,a6
000049C6 45F8 F756                  		lea	($FFFFF756).w,a2
000049CA 47F8 F708                  		lea	($FFFFF708).w,a3
000049CE 49F8 A440                  		lea	($FFFFA440).w,a4
000049D2 343C 6000                  		move.w	#$6000,d2
000049D6 6100 0000                  		bsr.w	sub_6954
000049DA 45F8 F758                  		lea	($FFFFF758).w,a2
000049DE 47F8 F710                  		lea	($FFFFF710).w,a3
000049E2 6000 0000                  		bra.w	sub_69F4
000049E6                            ; End of function sub_6886
000049E6                            
000049E6                            ; ---------------------------------------------------------------------------
000049E6                            ; Subroutine to	display	correct	tiles as you move
000049E6                            ; ---------------------------------------------------------------------------
000049E6                            
000049E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000049E6                            
000049E6                            
000049E6                            LoadTilesAsYouMove:			; XREF: Demo_Time
000049E6 4BF9 00C0 0004             		lea	($C00004).l,a5
000049EC 4DF9 00C0 0000             		lea	($C00000).l,a6
000049F2 45F8 FF32                  		lea	($FFFFFF32).w,a2
000049F6 47F8 FF18                  		lea	($FFFFFF18).w,a3
000049FA 49F8 A440                  		lea	($FFFFA440).w,a4
000049FE 343C 6000                  		move.w	#$6000,d2
00004A02 6100 0000                  		bsr.w	sub_6954
00004A06 45F8 FF34                  		lea	($FFFFFF34).w,a2
00004A0A 47F8 FF20                  		lea	($FFFFFF20).w,a3
00004A0E 6100 0000                  		bsr.w	sub_69F4
00004A12 45F8 FF30                  		lea	($FFFFFF30).w,a2
00004A16 47F8 FF10                  		lea	($FFFFFF10).w,a3
00004A1A 49F8 A400                  		lea	($FFFFA400).w,a4
00004A1E 343C 4000                  		move.w	#$4000,d2
00004A22 4A12                       		tst.b	(a2)
00004A24 6700                       		beq.s	locret_6952
00004A26 0892 0000                  		bclr	#0,(a2)
00004A2A 6700                       		beq.s	loc_6908
00004A2C 78F0                       		moveq	#-$10,d4
00004A2E 7AF0                       		moveq	#-$10,d5
00004A30 6100 0000                  		bsr.w	sub_6C20
00004A34 78F0                       		moveq	#-$10,d4
00004A36 7AF0                       		moveq	#-$10,d5
00004A38 6100 0000                  		bsr.w	sub_6AD8
00004A3C                            
00004A3C                            loc_6908:
00004A3C 0892 0001                  		bclr	#1,(a2)
00004A40 6700                       		beq.s	loc_6922
00004A42 383C 00E0                  		move.w	#$E0,d4
00004A46 7AF0                       		moveq	#-$10,d5
00004A48 6100 0000                  		bsr.w	sub_6C20
00004A4C 383C 00E0                  		move.w	#$E0,d4
00004A50 7AF0                       		moveq	#-$10,d5
00004A52 6100 0000                  		bsr.w	sub_6AD8
00004A56                            
00004A56                            loc_6922:
00004A56 0892 0002                  		bclr	#2,(a2)
00004A5A 6700                       		beq.s	loc_6938
00004A5C 78F0                       		moveq	#-$10,d4
00004A5E 7AF0                       		moveq	#-$10,d5
00004A60 6100 0000                  		bsr.w	sub_6C20
00004A64 78F0                       		moveq	#-$10,d4
00004A66 7AF0                       		moveq	#-$10,d5
00004A68 6100 0000                  		bsr.w	sub_6B04
00004A6C                            
00004A6C                            loc_6938:
00004A6C 0892 0003                  		bclr	#3,(a2)
00004A70 6700                       		beq.s	locret_6952
00004A72 78F0                       		moveq	#-$10,d4
00004A74 3A3C 0140                  		move.w	#$140,d5
00004A78 6100 0000                  		bsr.w	sub_6C20
00004A7C 78F0                       		moveq	#-$10,d4
00004A7E 3A3C 0140                  		move.w	#$140,d5
00004A82 6100 0000                  		bsr.w	sub_6B04
00004A86                            
00004A86                            locret_6952:
00004A86 4E75                       		rts	
00004A88                            ; End of function LoadTilesAsYouMove
00004A88                            
00004A88                            
00004A88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004A88                            
00004A88                            
00004A88                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00004A88 4A12                       		tst.b	(a2)
00004A8A 6700 0000                  		beq.w	locret_69F2
00004A8E 0892 0000                  		bclr	#0,(a2)
00004A92 6700                       		beq.s	loc_6972
00004A94 78F0                       		moveq	#-$10,d4
00004A96 7AF0                       		moveq	#-$10,d5
00004A98 6100 0000                  		bsr.w	sub_6C20
00004A9C 78F0                       		moveq	#-$10,d4
00004A9E 7AF0                       		moveq	#-$10,d5
00004AA0 7C1F                       		moveq	#$1F,d6
00004AA2 6100 0000                  		bsr.w	sub_6ADA
00004AA6                            
00004AA6                            loc_6972:
00004AA6 0892 0001                  		bclr	#1,(a2)
00004AAA 6700                       		beq.s	loc_698E
00004AAC 383C 00E0                  		move.w	#$E0,d4
00004AB0 7AF0                       		moveq	#-$10,d5
00004AB2 6100 0000                  		bsr.w	sub_6C20
00004AB6 383C 00E0                  		move.w	#$E0,d4
00004ABA 7AF0                       		moveq	#-$10,d5
00004ABC 7C1F                       		moveq	#$1F,d6
00004ABE 6100 0000                  		bsr.w	sub_6ADA
00004AC2                            
00004AC2                            loc_698E:
00004AC2 0892 0002                  		bclr	#2,(a2)
00004AC6 6700                       		beq.s	loc_69BE
00004AC8 78F0                       		moveq	#-$10,d4
00004ACA 7AF0                       		moveq	#-$10,d5
00004ACC 6100 0000                  		bsr.w	sub_6C20
00004AD0 78F0                       		moveq	#-$10,d4
00004AD2 7AF0                       		moveq	#-$10,d5
00004AD4 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00004AD8 322B 0004                  		move.w	4(a3),d1
00004ADC 0241 FFF0                  		andi.w	#-$10,d1
00004AE2 6D00                       		blt.s	loc_69BE
00004AE4 E84E                       		lsr.w	#4,d6
00004AE6 0C46 000F                  		cmpi.w	#$F,d6
00004AEA 6500                       		bcs.s	loc_69BA
00004AEC 7C0F                       		moveq	#$F,d6
00004AEE                            
00004AEE                            loc_69BA:
00004AEE 6100 0000                  		bsr.w	sub_6B06
00004AF2                            
00004AF2                            loc_69BE:
00004AF2 0892 0003                  		bclr	#3,(a2)
00004AF6 6700                       		beq.s	locret_69F2
00004AF8 78F0                       		moveq	#-$10,d4
00004AFA 3A3C 0140                  		move.w	#$140,d5
00004AFE 6100 0000                  		bsr.w	sub_6C20
00004B02 78F0                       		moveq	#-$10,d4
00004B04 3A3C 0140                  		move.w	#$140,d5
00004B08 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00004B0C 322B 0004                  		move.w	4(a3),d1
00004B10 0241 FFF0                  		andi.w	#-$10,d1
00004B16 6D00                       		blt.s	locret_69F2
00004B18 E84E                       		lsr.w	#4,d6
00004B1A 0C46 000F                  		cmpi.w	#$F,d6
00004B1E 6500                       		bcs.s	loc_69EE
00004B20 7C0F                       		moveq	#$F,d6
00004B22                            
00004B22                            loc_69EE:
00004B22 6100 0000                  		bsr.w	sub_6B06
00004B26                            
00004B26                            locret_69F2:
00004B26 4E75                       		rts	
00004B28                            ; End of function sub_6954
00004B28                            
00004B28                            
00004B28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B28                            
00004B28                            
00004B28                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00004B28 4A12                       		tst.b	(a2)
00004B2A 6700 0000                  		beq.w	locret_6A80
00004B2E 0892 0002                  		bclr	#2,(a2)
00004B32 6700                       		beq.s	loc_6A3E
00004B34 0C53 0010                  		cmpi.w	#$10,(a3)
00004B38 6500                       		bcs.s	loc_6A3E
00004B3A 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00004B3E 322B 0004                  		move.w	4(a3),d1
00004B42 0241 FFF0                  		andi.w	#-$10,d1
00004B48 3F04                       		move.w	d4,-(sp)
00004B4A 7AF0                       		moveq	#-$10,d5
00004B4C 6100 0000                  		bsr.w	sub_6C20
00004B50 381F                       		move.w	(sp)+,d4
00004B52 7AF0                       		moveq	#-$10,d5
00004B54 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00004B58 322B 0004                  		move.w	4(a3),d1
00004B5C 0241 FFF0                  		andi.w	#-$10,d1
00004B62 6D00                       		blt.s	loc_6A3E
00004B64 E84E                       		lsr.w	#4,d6
00004B66 0446 000E                  		subi.w	#$E,d6
00004B6A 6400                       		bcc.s	loc_6A3E
00004B6C 4446                       		neg.w	d6
00004B6E 6100 0000                  		bsr.w	sub_6B06
00004B72                            
00004B72                            loc_6A3E:
00004B72 0892 0003                  		bclr	#3,(a2)
00004B76 6700                       		beq.s	locret_6A80
00004B78 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00004B7C 322B 0004                  		move.w	4(a3),d1
00004B80 0241 FFF0                  		andi.w	#-$10,d1
00004B86 3F04                       		move.w	d4,-(sp)
00004B88 3A3C 0140                  		move.w	#$140,d5
00004B8C 6100 0000                  		bsr.w	sub_6C20
00004B90 381F                       		move.w	(sp)+,d4
00004B92 3A3C 0140                  		move.w	#$140,d5
00004B96 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00004B9A 322B 0004                  		move.w	4(a3),d1
00004B9E 0241 FFF0                  		andi.w	#-$10,d1
00004BA4 6D00                       		blt.s	locret_6A80
00004BA6 E84E                       		lsr.w	#4,d6
00004BA8 0446 000E                  		subi.w	#$E,d6
00004BAC 6400                       		bcc.s	locret_6A80
00004BAE 4446                       		neg.w	d6
00004BB0 6100 0000                  		bsr.w	sub_6B06
00004BB4                            
00004BB4                            locret_6A80:
00004BB4 4E75                       		rts	
00004BB6                            ; End of function sub_69F4
00004BB6                            
00004BB6                            ; ===========================================================================
00004BB6 4A12                       		tst.b	(a2)
00004BB8 6700                       		beq.s	locret_6AD6
00004BBA 0892 0002                  		bclr	#2,(a2)
00004BBE 6700                       		beq.s	loc_6AAC
00004BC0 383C 00D0                  		move.w	#$D0,d4
00004BC4 322B 0004                  		move.w	4(a3),d1
00004BC8 0241 FFF0                  		andi.w	#-$10,d1
00004BCE 3F04                       		move.w	d4,-(sp)
00004BD0 7AF0                       		moveq	#-$10,d5
00004BD2 6100 0000                  		bsr.w	sub_6C3C
00004BD6 381F                       		move.w	(sp)+,d4
00004BD8 7AF0                       		moveq	#-$10,d5
00004BDA 7C02                       		moveq	#2,d6
00004BDC 6100 0000                  		bsr.w	sub_6B06
00004BE0                            
00004BE0                            loc_6AAC:
00004BE0 0892 0003                  		bclr	#3,(a2)
00004BE4 6700                       		beq.s	locret_6AD6
00004BE6 383C 00D0                  		move.w	#$D0,d4
00004BEA 322B 0004                  		move.w	4(a3),d1
00004BEE 0241 FFF0                  		andi.w	#-$10,d1
00004BF4 3F04                       		move.w	d4,-(sp)
00004BF6 3A3C 0140                  		move.w	#$140,d5
00004BFA 6100 0000                  		bsr.w	sub_6C3C
00004BFE 381F                       		move.w	(sp)+,d4
00004C00 3A3C 0140                  		move.w	#$140,d5
00004C04 7C02                       		moveq	#2,d6
00004C06 6100 0000                  		bsr.w	sub_6B06
00004C0A                            
00004C0A                            locret_6AD6:
00004C0A 4E75                       		rts	
00004C0C                            
00004C0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C0C                            
00004C0C                            
00004C0C                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00004C0C 7C15                       		moveq	#$15,d6
00004C0E                            ; End of function sub_6AD8
00004C0E                            
00004C0E                            
00004C0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C0E                            
00004C0E                            
00004C0E                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00004C0E 2E3C 0080 0000             		move.l	#$800000,d7
00004C14 2200                       		move.l	d0,d1
00004C16                            
00004C16                            loc_6AE2:
00004C16 48E7 0C00                  		movem.l	d4-d5,-(sp)
00004C1A 6100 0000                  		bsr.w	sub_6BD6
00004C1E 2001                       		move.l	d1,d0
00004C20 6100 0000                  		bsr.w	sub_6B32
00004C24 5801                       		addq.b	#4,d1
00004C26 0201 007F                  		andi.b	#$7F,d1
00004C2A 4CDF 0030                  		movem.l	(sp)+,d4-d5
00004C2E 0645 0010                  		addi.w	#$10,d5
00004C32 51CE FFE2                  		dbf	d6,loc_6AE2
00004C36 4E75                       		rts	
00004C38                            ; End of function sub_6ADA
00004C38                            
00004C38                            
00004C38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C38                            
00004C38                            
00004C38                            sub_6B04:				; XREF: LoadTilesAsYouMove
00004C38 7C0F                       		moveq	#$F,d6
00004C3A                            ; End of function sub_6B04
00004C3A                            
00004C3A                            
00004C3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C3A                            
00004C3A                            
00004C3A                            sub_6B06:				; XREF: sub_6954
00004C3A 2E3C 0080 0000             		move.l	#$800000,d7
00004C40 2200                       		move.l	d0,d1
00004C42                            
00004C42                            loc_6B0E:
00004C42 48E7 0C00                  		movem.l	d4-d5,-(sp)
00004C46 6100 0000                  		bsr.w	sub_6BD6
00004C4A 2001                       		move.l	d1,d0
00004C4C 6100 0000                  		bsr.w	sub_6B32
00004C50 0641 0100                  		addi.w	#$100,d1
00004C54 0241 0FFF                  		andi.w	#$FFF,d1
00004C58 4CDF 0030                  		movem.l	(sp)+,d4-d5
00004C5C 0644 0010                  		addi.w	#$10,d4
00004C60 51CE FFE0                  		dbf	d6,loc_6B0E
00004C64 4E75                       		rts	
00004C66                            ; End of function sub_6B06
00004C66                            
00004C66                            
00004C66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C66                            
00004C66                            
00004C66                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00004C68 4840                       		swap	d0
00004C6A 0810 0004                  		btst	#4,(a0)
00004C6E 6600                       		bne.s	loc_6B6E
00004C70 0810 0003                  		btst	#3,(a0)
00004C74 6600                       		bne.s	loc_6B4E
00004C76 2A80                       		move.l	d0,(a5)
00004C78 2C99                       		move.l	(a1)+,(a6)
00004C7C 2A80                       		move.l	d0,(a5)
00004C7E 2C99                       		move.l	(a1)+,(a6)
00004C80 4E75                       		rts	
00004C82                            ; ===========================================================================
00004C82                            
00004C82                            loc_6B4E:
00004C82 2A80                       		move.l	d0,(a5)
00004C84 2819                       		move.l	(a1)+,d4
00004C86 0A84 0800 0800             		eori.l	#$8000800,d4
00004C8C 4844                       		swap	d4
00004C8E 2C84                       		move.l	d4,(a6)
00004C92 2A80                       		move.l	d0,(a5)
00004C94 2819                       		move.l	(a1)+,d4
00004C96 0A84 0800 0800             		eori.l	#$8000800,d4
00004C9C 4844                       		swap	d4
00004C9E 2C84                       		move.l	d4,(a6)
00004CA0 4E75                       		rts	
00004CA2                            ; ===========================================================================
00004CA2                            
00004CA2                            loc_6B6E:
00004CA2 0810 0003                  		btst	#3,(a0)
00004CA6 6600                       		bne.s	loc_6B90
00004CA8 2A80                       		move.l	d0,(a5)
00004CAA 2A19                       		move.l	(a1)+,d5
00004CAC 2819                       		move.l	(a1)+,d4
00004CAE 0A84 1000 1000             		eori.l	#$10001000,d4
00004CB4 2C84                       		move.l	d4,(a6)
00004CB8 2A80                       		move.l	d0,(a5)
00004CBA 0A85 1000 1000             		eori.l	#$10001000,d5
00004CC0 2C85                       		move.l	d5,(a6)
00004CC2 4E75                       		rts	
00004CC4                            ; ===========================================================================
00004CC4                            
00004CC4                            loc_6B90:
00004CC4 2A80                       		move.l	d0,(a5)
00004CC6 2A19                       		move.l	(a1)+,d5
00004CC8 2819                       		move.l	(a1)+,d4
00004CCA 0A84 1800 1800             		eori.l	#$18001800,d4
00004CD0 4844                       		swap	d4
00004CD2 2C84                       		move.l	d4,(a6)
00004CD6 2A80                       		move.l	d0,(a5)
00004CD8 0A85 1800 1800             		eori.l	#$18001800,d5
00004CDE 4845                       		swap	d5
00004CE0 2C85                       		move.l	d5,(a6)
00004CE2 4E75                       		rts	
00004CE4                            ; End of function sub_6B32
00004CE4                            
00004CE4                            ; ===========================================================================
00004CE4 4E75                       		rts	
00004CE6                            ; ===========================================================================
00004CE6 2A80                       		move.l	d0,(a5)
00004CE8 3A3C 2000                  		move.w	#$2000,d5
00004CEC 3819                       		move.w	(a1)+,d4
00004CF0 3C84                       		move.w	d4,(a6)
00004CF2 3819                       		move.w	(a1)+,d4
00004CF6 3C84                       		move.w	d4,(a6)
00004CFA 2A80                       		move.l	d0,(a5)
00004CFC 3819                       		move.w	(a1)+,d4
00004D00 3C84                       		move.w	d4,(a6)
00004D02 3819                       		move.w	(a1)+,d4
00004D06 3C84                       		move.w	d4,(a6)
00004D08 4E75                       		rts	
00004D0A                            
00004D0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D0A                            
00004D0A                            
00004D0A                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00004D0A 43F8 B000                  		lea	($FFFFB000).w,a1
00004D14 3604                       		move.w	d4,d3
00004D16 E24B                       		lsr.w	#1,d3
00004D18 0243 0380                  		andi.w	#$380,d3
00004D1C E64D                       		lsr.w	#3,d5
00004D1E 3005                       		move.w	d5,d0
00004D20 EA48                       		lsr.w	#5,d0
00004D22 0240 007F                  		andi.w	#$7F,d0
00004D28 76FF                       		moveq	#-1,d3
00004D2A 1634 0000                  		move.b	(a4,d0.w),d3
00004D2E 6700                       		beq.s	locret_6C1E
00004D30 5303                       		subq.b	#1,d3
00004D32 0243 007F                  		andi.w	#$7F,d3
00004D36 EE5B                       		ror.w	#7,d3
00004D3A 0244 01E0                  		andi.w	#$1E0,d4
00004D3E 0245 001E                  		andi.w	#$1E,d5
00004D46 2043                       		movea.l	d3,a0
00004D48 3610                       		move.w	(a0),d3
00004D4A 0243 03FF                  		andi.w	#$3FF,d3
00004D4E E74B                       		lsl.w	#3,d3
00004D50 D2C3                       		adda.w	d3,a1
00004D52                            
00004D52                            locret_6C1E:
00004D52 4E75                       		rts	
00004D54                            ; End of function sub_6BD6
00004D54                            
00004D54                            
00004D54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D54                            
00004D54                            
00004D54                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00004D5A 0244 00F0                  		andi.w	#$F0,d4
00004D5E 0245 01F0                  		andi.w	#$1F0,d5
00004D62 E94C                       		lsl.w	#4,d4
00004D64 E44D                       		lsr.w	#2,d5
00004D68 7003                       		moveq	#3,d0
00004D6A 4840                       		swap	d0
00004D6C 3004                       		move.w	d4,d0
00004D6E 4E75                       		rts	
00004D70                            ; End of function sub_6C20
00004D70                            
00004D70                            
00004D70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D70                            ; not used
00004D70                            
00004D70                            
00004D70                            sub_6C3C:
00004D76 0244 00F0                  		andi.w	#$F0,d4
00004D7A 0245 01F0                  		andi.w	#$1F0,d5
00004D7E E94C                       		lsl.w	#4,d4
00004D80 E44D                       		lsr.w	#2,d5
00004D84 7002                       		moveq	#2,d0
00004D86 4840                       		swap	d0
00004D88 3004                       		move.w	d4,d0
00004D8A 4E75                       		rts	
00004D8C                            ; End of function sub_6C3C
00004D8C                            
00004D8C                            ; ---------------------------------------------------------------------------
00004D8C                            ; Subroutine to	load tiles as soon as the level	appears
00004D8C                            ; ---------------------------------------------------------------------------
00004D8C                            
00004D8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D8C                            
00004D8C                            
00004D8C                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00004D8C 4BF9 00C0 0004             		lea	($C00004).l,a5
00004D92 4DF9 00C0 0000             		lea	($C00000).l,a6
00004D98 47F8 F700                  		lea	($FFFFF700).w,a3
00004D9C 49F8 A400                  		lea	($FFFFA400).w,a4
00004DA0 343C 4000                  		move.w	#$4000,d2
00004DA4 6100                       		bsr.s	LoadTilesFromStart2
00004DA6 47F8 F708                  		lea	($FFFFF708).w,a3
00004DAA 49F8 A440                  		lea	($FFFFA440).w,a4
00004DAE 343C 6000                  		move.w	#$6000,d2
00004DB2                            ; End of function LoadTilesFromStart
00004DB2                            
00004DB2                            
00004DB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DB2                            
00004DB2                            
00004DB2                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00004DB2 78F0                       		moveq	#-$10,d4
00004DB4 7C0F                       		moveq	#$F,d6
00004DB6                            
00004DB6                            loc_6C82:
00004DB6 48E7 0E00                  		movem.l	d4-d6,-(sp)
00004DBA 7A00                       		moveq	#0,d5
00004DBC 3204                       		move.w	d4,d1
00004DBE 6100 FF94                  		bsr.w	sub_6C20
00004DC2 3801                       		move.w	d1,d4
00004DC4 7A00                       		moveq	#0,d5
00004DC6 7C1F                       		moveq	#$1F,d6
00004DC8 6100 FE44                  		bsr.w	sub_6ADA
00004DCC 4CDF 0070                  		movem.l	(sp)+,d4-d6
00004DD0 0644 0010                  		addi.w	#$10,d4
00004DD4 51CE FFE0                  		dbf	d6,loc_6C82
00004DD8 4E75                       		rts	
00004DDA                            ; End of function LoadTilesFromStart2
00004DDA                            
00004DDA                            ; ---------------------------------------------------------------------------
00004DDA                            ; Main Load Block loading subroutine
00004DDA                            ; ---------------------------------------------------------------------------
00004DDA                            
00004DDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DDA                            
00004DDA                            
00004DDA                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00004DDA 7000                       		moveq	#0,d0
00004DDC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004DE0 E948                       		lsl.w	#4,d0
00004DE2 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00004DE8 45F2 0000                  		lea	(a2,d0.w),a2
00004DEC 2F0A                       		move.l	a2,-(sp)
00004DEE 588A                       		addq.l	#4,a2
00004DF0 205A                       		movea.l	(a2)+,a0
00004DF2 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00004DF6 303C 0000                  		move.w	#0,d0
00004DFA 6100 C630                  		bsr.w	EniDec
00004DFE 205A                       		movea.l	(a2)+,a0
00004E00 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00004E06 6100 C7A2                  		bsr.w	KosDec
00004E0A 6100 0000                  		bsr.w	LevelLayoutLoad
00004E0E 301A                       		move.w	(a2)+,d0
00004E10 3012                       		move.w	(a2),d0
00004E12 0240 00FF                  		andi.w	#$FF,d0
00004E16 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00004E1C 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00004E1E 700C                       		moveq	#$C,d0		; use SB3 pallet
00004E20                            
00004E20                            MLB_ChkSBZPal:
00004E20 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00004E26 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00004E28 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00004E2E 6600                       		bne.s	MLB_NormalPal	; if not, branch
00004E30                            
00004E30                            MLB_UsePal0E:
00004E30 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00004E32                            
00004E32                            MLB_NormalPal:
00004E32 6100 CEC4                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00004E36 245F                       		movea.l	(sp)+,a2
00004E38 584A                       		addq.w	#4,a2
00004E3A 7000                       		moveq	#0,d0
00004E3C 1012                       		move.b	(a2),d0
00004E3E 6700                       		beq.s	locret_6D10
00004E40 6100 C44C                  		bsr.w	LoadPLC		; load pattern load cues
00004E44                            
00004E44                            locret_6D10:
00004E44 4E75                       		rts	
00004E46                            ; End of function MainLoadBlockLoad
00004E46                            
00004E46                            ; ---------------------------------------------------------------------------
00004E46                            ; Level	layout loading subroutine
00004E46                            ; ---------------------------------------------------------------------------
00004E46                            
00004E46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E46                            
00004E46                            
00004E46                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00004E46 47F8 A400                  		lea	($FFFFA400).w,a3
00004E4A 323C 01FF                  		move.w	#$1FF,d1
00004E4E 7000                       		moveq	#0,d0
00004E50                            
00004E50                            LevLoad_ClrRam:
00004E50 26C0                       		move.l	d0,(a3)+
00004E52 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00004E56                            
00004E56 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00004E5A 7200                       		moveq	#0,d1
00004E5C 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00004E60 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00004E64 7202                       		moveq	#2,d1
00004E66                            ; End of function LevelLayoutLoad
00004E66                            
00004E66                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00004E66                            
00004E66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E66                            
00004E66                            
00004E66                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00004E66 3038 FE10                  		move.w	($FFFFFE10).w,d0
00004E6A ED08                       		lsl.b	#6,d0
00004E6C EA48                       		lsr.w	#5,d0
00004E6E 3400                       		move.w	d0,d2
00004E76 43F9 0000 0000             		lea	(Level_Index).l,a1
00004E7C 3031 0000                  		move.w	(a1,d0.w),d0
00004E80 43F1 0000                  		lea	(a1,d0.w),a1
00004E84 7200                       		moveq	#0,d1
00004E86 3401                       		move.w	d1,d2
00004E88 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00004E8A 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00004E8C                            
00004E8C                            LevLoad_NumRows:
00004E8C 3001                       		move.w	d1,d0
00004E8E 204B                       		movea.l	a3,a0
00004E90                            
00004E90                            LevLoad_Row:
00004E90 10D9                       		move.b	(a1)+,(a0)+
00004E92 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00004E96 47EB 0080                  		lea	$80(a3),a3	; do next row
00004E9A 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00004E9E 4E75                       		rts	
00004EA0                            ; End of function LevelLayoutLoad2
00004EA0                            
00004EA0                            ; ---------------------------------------------------------------------------
00004EA0                            ; Dynamic screen resize	loading	subroutine
00004EA0                            ; ---------------------------------------------------------------------------
00004EA0                            
00004EA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EA0                            
00004EA0                            
00004EA0                            DynScrResizeLoad:			; XREF: DeformBgLayer
00004EA0 7000                       		moveq	#0,d0
00004EA2 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004EA8 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00004EAC 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00004EB0 7202                       		moveq	#2,d1
00004EB2 3038 F726                  		move.w	($FFFFF726).w,d0
00004EBA 6700                       		beq.s	locret_6DAA
00004EBC 6400                       		bcc.s	loc_6DAC
00004EBE 4441                       		neg.w	d1
00004EC0 3038 F704                  		move.w	($FFFFF704).w,d0
00004EC4 B078 F726                  		cmp.w	($FFFFF726).w,d0
00004EC8 6300                       		bls.s	loc_6DA0
00004ECA 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00004ECE 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00004ED4                            
00004ED4                            loc_6DA0:
00004ED8 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00004EDE                            
00004EDE                            locret_6DAA:
00004EDE 4E75                       		rts	
00004EE0                            ; ===========================================================================
00004EE0                            
00004EE0                            loc_6DAC:				; XREF: DynScrResizeLoad
00004EE0 3038 F704                  		move.w	($FFFFF704).w,d0
00004EE4 5040                       		addq.w	#8,d0
00004EE6 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00004EEA 6500                       		bcs.s	loc_6DC4
00004EEC 0838 0001 D022             		btst	#1,($FFFFD022).w
00004EF2 6700                       		beq.s	loc_6DC4
00004EF8                            
00004EF8                            loc_6DC4:
00004EFC 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00004F02 4E75                       		rts	
00004F04                            ; End of function DynScrResizeLoad
00004F04                            
00004F04                            ; ===========================================================================
00004F04                            ; ---------------------------------------------------------------------------
00004F04                            ; Offset index for dynamic screen resizing
00004F04                            ; ---------------------------------------------------------------------------
00004F04 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00004F08 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00004F0C 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00004F10 0000                       		dc.w Resize_Ending-Resize_Index
00004F12                            ; ===========================================================================
00004F12                            ; ---------------------------------------------------------------------------
00004F12                            ; Green	Hill Zone dynamic screen resizing
00004F12                            ; ---------------------------------------------------------------------------
00004F12                            
00004F12                            Resize_GHZ:				; XREF: Resize_Index
00004F12 7000                       		moveq	#0,d0
00004F14 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004F1A 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00004F1E 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00004F22                            ; ===========================================================================
00004F22 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00004F24 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00004F26 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00004F28                            ; ===========================================================================
00004F28                            
00004F28                            Resize_GHZ1:
00004F28 4E75                       		rts
00004F2A                            
00004F2A                            Resize_GHZ2:
00004F2A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00004F30 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00004F36 6500                       		bcs.s	locret_6E3A
00004F38 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00004F3E 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00004F44 6500                       		bcs.s	locret_6E3A
00004F46 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00004F4C 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00004F52 6500                       		bcs.s	locret_6E3A
00004F54 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00004F5A                            
00004F5A                            locret_6E3A:
00004F5A 4E75                       		rts	
00004F5C                            ; ===========================================================================
00004F5C                            
00004F5C                            Resize_GHZ3:
00004F5C 7000                       		moveq	#0,d0
00004F5E 1038 F742                  		move.b	($FFFFF742).w,d0
00004F62 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00004F66 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00004F6A                            ; ===========================================================================
00004F6A 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00004F6C 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00004F6E 0000                       		dc.w Resize_GHZ3end-off_6E4A
00004F70                            ; ===========================================================================
00004F70                            
00004F70                            Resize_GHZ3main:
00004F70 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00004F76 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00004F7C 6500                       		bcs.s	locret_6E96
00004F7E 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00004F84 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00004F8A 6500                       		bcs.s	locret_6E96
00004F8C 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00004F92 6500                       		bcs.s	loc_6E98
00004F94 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00004F9A 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00004FA0 6400                       		bcc.s	loc_6E8E
00004FA2 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00004FA8 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00004FAE                            
00004FAE                            loc_6E8E:
00004FAE 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00004FB4 6400                       		bcc.s	loc_6E98
00004FB6                            
00004FB6                            locret_6E96:
00004FB6 4E75                       		rts	
00004FB8                            ; ===========================================================================
00004FB8                            
00004FB8                            loc_6E98:
00004FB8 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00004FBE 5438 F742                  		addq.b	#2,($FFFFF742).w
00004FC2 4E75                       		rts	
00004FC4                            ; ===========================================================================
00004FC4                            
00004FC4                            Resize_GHZ3boss:
00004FC4 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00004FCA 6400                       		bcc.s	loc_6EB0
00004FCC 5538 F742                  		subq.b	#2,($FFFFF742).w
00004FD0                            
00004FD0                            loc_6EB0:
00004FD0 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00004FD6 6500                       		bcs.s	locret_6EE8
00004FD8 6100 0000                  		bsr.w	SingleObjLoad
00004FDC 6600                       		bne.s	loc_6ED0
00004FDE 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00004FE2 337C 2A60 0008             		move.w	#$2A60,8(a1)
00004FE8 337C 0280 000C             		move.w	#$280,$C(a1)
00004FEE                            
00004FEE                            loc_6ED0:
00004FEE 303C 008C                  		move.w	#$8C,d0
00004FF2 6100 C026                  		bsr.w	PlaySound	; play boss music
00004FF6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00004FFC 5438 F742                  		addq.b	#2,($FFFFF742).w
00005000 7011                       		moveq	#$11,d0
00005002 6000 C28A                  		bra.w	LoadPLC		; load boss patterns
00005006                            ; ===========================================================================
00005006                            
00005006                            locret_6EE8:
00005006 4E75                       		rts	
00005008                            ; ===========================================================================
00005008                            
00005008                            Resize_GHZ3end:
00005008 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000500E 4E75                       		rts	
00005010                            ; ===========================================================================
00005010                            ; ---------------------------------------------------------------------------
00005010                            ; Labyrinth Zone dynamic screen	resizing
00005010                            ; ---------------------------------------------------------------------------
00005010                            
00005010                            Resize_LZ:				; XREF: Resize_Index
00005010 7000                       		moveq	#0,d0
00005012 1038 FE11                  		move.b	($FFFFFE11).w,d0
00005018 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
0000501C 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00005020                            ; ===========================================================================
00005020 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00005022 0000                       		dc.w Resize_LZ12-Resize_LZx
00005024 0000                       		dc.w Resize_LZ3-Resize_LZx
00005026 0000                       		dc.w Resize_SBZ3-Resize_LZx
00005028                            ; ===========================================================================
00005028                            
00005028                            Resize_LZ12:
00005028 4E75                       		rts	
0000502A                            ; ===========================================================================
0000502A                            
0000502A                            Resize_LZ3:
0000502A 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
0000502E 6700                       		beq.s	loc_6F28	; if not, branch
00005030 43F8 A506                  		lea	($FFFFA506).w,a1
00005034 0C11 0007                  		cmpi.b	#7,(a1)
00005038 6700                       		beq.s	loc_6F28
0000503A 12BC 0007                  		move.b	#7,(a1)		; modify level layout
0000503E 303C 00B7                  		move.w	#$B7,d0
00005042 6100 BFDC                  		bsr.w	PlaySound_Special ; play rumbling sound
00005046                            
00005046                            loc_6F28:
00005046 4A38 F742                  		tst.b	($FFFFF742).w
0000504A 6600                       		bne.s	locret_6F64
0000504C 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00005052 6500                       		bcs.s	locret_6F62
00005054 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
0000505A 6400                       		bcc.s	locret_6F62
0000505C 6100 0000                  		bsr.w	SingleObjLoad
00005060 6600                       		bne.s	loc_6F4A
00005062 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00005066                            
00005066                            loc_6F4A:
00005066 303C 008C                  		move.w	#$8C,d0
0000506A 6100 BFAE                  		bsr.w	PlaySound	; play boss music
0000506E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00005074 5438 F742                  		addq.b	#2,($FFFFF742).w
00005078 7011                       		moveq	#$11,d0
0000507A 6000 C212                  		bra.w	LoadPLC		; load boss patterns
0000507E                            ; ===========================================================================
0000507E                            
0000507E                            locret_6F62:
0000507E 4E75                       		rts	
00005080                            ; ===========================================================================
00005080                            
00005080                            locret_6F64:
00005080 4E75                       		rts	
00005082                            ; ===========================================================================
00005082                            
00005082                            Resize_SBZ3:
00005082 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00005088 6500                       		bcs.s	locret_6F8C
0000508A 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00005090 6400                       		bcc.s	locret_6F8C	; if not, branch
00005092 4238 FE30                  		clr.b	($FFFFFE30).w
00005096 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000509C 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000050A2 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000050A8                            
000050A8                            locret_6F8C:
000050A8 4E75                       		rts	
000050AA                            ; ===========================================================================
000050AA                            ; ---------------------------------------------------------------------------
000050AA                            ; Marble Zone dynamic screen resizing
000050AA                            ; ---------------------------------------------------------------------------
000050AA                            
000050AA                            Resize_MZ:				; XREF: Resize_Index
000050AA 7000                       		moveq	#0,d0
000050AC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000050B2 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000050B6 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000050BA                            ; ===========================================================================
000050BA 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000050BC 0000                       		dc.w Resize_MZ2-Resize_MZx
000050BE 0000                       		dc.w Resize_MZ3-Resize_MZx
000050C0                            ; ===========================================================================
000050C0                            
000050C0                            Resize_MZ1:
000050C0 7000                       		moveq	#0,d0
000050C2 1038 F742                  		move.b	($FFFFF742).w,d0
000050C6 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000050CA 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000050CE                            ; ===========================================================================
000050CE 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000050D0 0000                       		dc.w loc_6FEA-off_6FB2
000050D2 0000                       		dc.w loc_702E-off_6FB2
000050D4 0000                       		dc.w loc_7050-off_6FB2
000050D6                            ; ===========================================================================
000050D6                            
000050D6                            loc_6FBA:
000050D6 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000050DC 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000050E2 6500                       		bcs.s	locret_6FE8
000050E4 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000050EA 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000050F0 6500                       		bcs.s	locret_6FE8
000050F2 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000050F8 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000050FE 6500                       		bcs.s	locret_6FE8
00005100 5438 F742                  		addq.b	#2,($FFFFF742).w
00005104                            
00005104                            locret_6FE8:
00005104 4E75                       		rts	
00005106                            ; ===========================================================================
00005106                            
00005106                            loc_6FEA:
00005106 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000510C 6400                       		bcc.s	loc_6FF8
0000510E 5538 F742                  		subq.b	#2,($FFFFF742).w
00005112 4E75                       		rts	
00005114                            ; ===========================================================================
00005114                            
00005114                            loc_6FF8:
00005114 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000511A 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00005120 6400                       		bcc.s	locret_702C
00005122 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00005128 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000512E 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00005134 6400                       		bcc.s	locret_702C
00005136 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000513C 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00005142 6500                       		bcs.s	locret_702C
00005144 5438 F742                  		addq.b	#2,($FFFFF742).w
00005148                            
00005148                            locret_702C:
00005148 4E75                       		rts	
0000514A                            ; ===========================================================================
0000514A                            
0000514A                            loc_702E:
0000514A 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00005150 6400                       		bcc.s	loc_703C
00005152 5538 F742                  		subq.b	#2,($FFFFF742).w
00005156 4E75                       		rts	
00005158                            ; ===========================================================================
00005158                            
00005158                            loc_703C:
00005158 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000515E 6500                       		bcs.s	locret_704E
00005160 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00005166 5438 F742                  		addq.b	#2,($FFFFF742).w
0000516A                            
0000516A                            locret_704E:
0000516A 4E75                       		rts	
0000516C                            ; ===========================================================================
0000516C                            
0000516C                            loc_7050:
0000516C 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00005172 6500                       		bcs.s	locret_7072
00005174 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000517A 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00005180 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00005186 6500                       		bcs.s	locret_7072
00005188 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000518E                            
0000518E                            locret_7072:
0000518E 4E75                       		rts	
00005190                            ; ===========================================================================
00005190                            
00005190                            Resize_MZ2:
00005190 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00005196 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000519C 6500                       		bcs.s	locret_7088
0000519E 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000051A4                            
000051A4                            locret_7088:
000051A4 4E75                       		rts	
000051A6                            ; ===========================================================================
000051A6                            
000051A6                            Resize_MZ3:
000051A6 7000                       		moveq	#0,d0
000051A8 1038 F742                  		move.b	($FFFFF742).w,d0
000051AC 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000051B0 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000051B4                            ; ===========================================================================
000051B4 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000051B6 0000                       		dc.w Resize_MZ3end-off_7098
000051B8                            ; ===========================================================================
000051B8                            
000051B8                            Resize_MZ3boss:
000051B8 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000051BE 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000051C4 6500                       		bcs.s	locret_70E8
000051C6 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000051CC 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000051D2 6500                       		bcs.s	locret_70E8
000051D4 6100 0000                  		bsr.w	SingleObjLoad
000051D8 6600                       		bne.s	loc_70D0
000051DA 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000051DE 337C 19F0 0008             		move.w	#$19F0,8(a1)
000051E4 337C 022C 000C             		move.w	#$22C,$C(a1)
000051EA                            
000051EA                            loc_70D0:
000051EA 303C 008C                  		move.w	#$8C,d0
000051EE 6100 BE2A                  		bsr.w	PlaySound	; play boss music
000051F2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000051F8 5438 F742                  		addq.b	#2,($FFFFF742).w
000051FC 7011                       		moveq	#$11,d0
000051FE 6000 C08E                  		bra.w	LoadPLC		; load boss patterns
00005202                            ; ===========================================================================
00005202                            
00005202                            locret_70E8:
00005202 4E75                       		rts	
00005204                            ; ===========================================================================
00005204                            
00005204                            Resize_MZ3end:
00005204 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000520A 4E75                       		rts	
0000520C                            ; ===========================================================================
0000520C                            ; ---------------------------------------------------------------------------
0000520C                            ; Star Light Zone dynamic screen resizing
0000520C                            ; ---------------------------------------------------------------------------
0000520C                            
0000520C                            Resize_SLZ:				; XREF: Resize_Index
0000520C 7000                       		moveq	#0,d0
0000520E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00005214 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00005218 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
0000521C                            ; ===========================================================================
0000521C 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
0000521E 0000                       		dc.w Resize_SLZ12-Resize_SLZx
00005220 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00005222                            ; ===========================================================================
00005222                            
00005222                            Resize_SLZ12:
00005222 4E75                       		rts	
00005224                            ; ===========================================================================
00005224                            
00005224                            Resize_SLZ3:
00005224 7000                       		moveq	#0,d0
00005226 1038 F742                  		move.b	($FFFFF742).w,d0
0000522A 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000522E 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00005232                            ; ===========================================================================
00005232 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00005234 0000                       		dc.w Resize_SLZ3boss-off_7118
00005236 0000                       		dc.w Resize_SLZ3end-off_7118
00005238                            ; ===========================================================================
00005238                            
00005238                            Resize_SLZ3main:
00005238 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000523E 6500                       		bcs.s	locret_7130
00005240 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00005246 5438 F742                  		addq.b	#2,($FFFFF742).w
0000524A                            
0000524A                            locret_7130:
0000524A 4E75                       		rts	
0000524C                            ; ===========================================================================
0000524C                            
0000524C                            Resize_SLZ3boss:
0000524C 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00005252 6500                       		bcs.s	locret_715C
00005254 6100 0000                  		bsr.w	SingleObjLoad
00005258 6600                       		bne.s	loc_7144
0000525A 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000525E                            
0000525E                            loc_7144:
0000525E 303C 008C                  		move.w	#$8C,d0
00005262 6100 BDB6                  		bsr.w	PlaySound	; play boss music
00005266 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000526C 5438 F742                  		addq.b	#2,($FFFFF742).w
00005270 7011                       		moveq	#$11,d0
00005272 6000 C01A                  		bra.w	LoadPLC		; load boss patterns
00005276                            ; ===========================================================================
00005276                            
00005276                            locret_715C:
00005276 4E75                       		rts	
00005278                            ; ===========================================================================
00005278                            
00005278                            Resize_SLZ3end:
00005278 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000527E 4E75                       		rts
00005280 4E75                       		rts
00005282                            ; ===========================================================================
00005282                            ; ---------------------------------------------------------------------------
00005282                            ; Spring Yard Zone dynamic screen resizing
00005282                            ; ---------------------------------------------------------------------------
00005282                            
00005282                            Resize_SYZ:				; XREF: Resize_Index
00005282 7000                       		moveq	#0,d0
00005284 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000528A 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
0000528E 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00005292                            ; ===========================================================================
00005292 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00005294 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00005296 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00005298                            ; ===========================================================================
00005298                            
00005298                            Resize_SYZ1:
00005298 4E75                       		rts	
0000529A                            ; ===========================================================================
0000529A                            
0000529A                            Resize_SYZ2:
0000529A 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000052A0 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000052A6 6500                       		bcs.s	locret_71A2
000052A8 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000052AE 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000052B4 6500                       		bcs.s	locret_71A2
000052B6 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000052BC                            
000052BC                            locret_71A2:
000052BC 4E75                       		rts	
000052BE                            ; ===========================================================================
000052BE                            
000052BE                            Resize_SYZ3:
000052BE 7000                       		moveq	#0,d0
000052C0 1038 F742                  		move.b	($FFFFF742).w,d0
000052C4 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000052C8 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000052CC                            ; ===========================================================================
000052CC 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000052CE 0000                       		dc.w Resize_SYZ3boss-off_71B2
000052D0 0000                       		dc.w Resize_SYZ3end-off_71B2
000052D2                            ; ===========================================================================
000052D2                            
000052D2                            Resize_SYZ3main:
000052D2 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000052D8 6500                       		bcs.s	locret_71CE
000052DA 6100 0000                  		bsr.w	SingleObjLoad
000052DE 6600                       		bne.s	locret_71CE
000052E0 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000052E4 5438 F742                  		addq.b	#2,($FFFFF742).w
000052E8                            
000052E8                            locret_71CE:
000052E8 4E75                       		rts	
000052EA                            ; ===========================================================================
000052EA                            
000052EA                            Resize_SYZ3boss:
000052EA 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000052F0 6500                       		bcs.s	locret_7200
000052F2 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000052F8 6100 0000                  		bsr.w	SingleObjLoad
000052FC 6600                       		bne.s	loc_71EC
000052FE 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00005302 5438 F742                  		addq.b	#2,($FFFFF742).w
00005306                            
00005306                            loc_71EC:
00005306 303C 008C                  		move.w	#$8C,d0
0000530A 6100 BD0E                  		bsr.w	PlaySound	; play boss music
0000530E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00005314 7011                       		moveq	#$11,d0
00005316 6000 BF76                  		bra.w	LoadPLC		; load boss patterns
0000531A                            ; ===========================================================================
0000531A                            
0000531A                            locret_7200:
0000531A 4E75                       		rts	
0000531C                            ; ===========================================================================
0000531C                            
0000531C                            Resize_SYZ3end:
0000531C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00005322 4E75                       		rts	
00005324                            ; ===========================================================================
00005324                            ; ---------------------------------------------------------------------------
00005324                            ; Scrap	Brain Zone dynamic screen resizing
00005324                            ; ---------------------------------------------------------------------------
00005324                            
00005324                            Resize_SBZ:				; XREF: Resize_Index
00005324 7000                       		moveq	#0,d0
00005326 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000532C 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00005330 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00005334                            ; ===========================================================================
00005334 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00005336 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00005338 0000                       		dc.w Resize_FZ-Resize_SBZx
0000533A                            ; ===========================================================================
0000533A                            
0000533A                            Resize_SBZ1:
0000533A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00005340 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00005346 6500                       		bcs.s	locret_7242
00005348 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000534E 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00005354 6500                       		bcs.s	locret_7242
00005356 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
0000535C                            
0000535C                            locret_7242:
0000535C 4E75                       		rts	
0000535E                            ; ===========================================================================
0000535E                            
0000535E                            Resize_SBZ2:
0000535E 7000                       		moveq	#0,d0
00005360 1038 F742                  		move.b	($FFFFF742).w,d0
00005364 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00005368 4EFB 0000                  		jmp	off_7252(pc,d0.w)
0000536C                            ; ===========================================================================
0000536C 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
0000536E 0000                       		dc.w Resize_SBZ2boss-off_7252
00005370 0000                       		dc.w Resize_SBZ2boss2-off_7252
00005372 0000                       		dc.w Resize_SBZ2end-off_7252
00005374                            ; ===========================================================================
00005374                            
00005374                            Resize_SBZ2main:
00005374 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
0000537A 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00005380 6500                       		bcs.s	locret_727A
00005382 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00005388 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
0000538E 6500                       		bcs.s	locret_727A
00005390 5438 F742                  		addq.b	#2,($FFFFF742).w
00005394                            
00005394                            locret_727A:
00005394 4E75                       		rts	
00005396                            ; ===========================================================================
00005396                            
00005396                            Resize_SBZ2boss:
00005396 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
0000539C 6500                       		bcs.s	locret_7298
0000539E 6100 0000                  		bsr.w	SingleObjLoad
000053A2 6600                       		bne.s	locret_7298
000053A4 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000053A8 5438 F742                  		addq.b	#2,($FFFFF742).w
000053AC 701E                       		moveq	#$1E,d0
000053AE 6000 BEDE                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000053B2                            ; ===========================================================================
000053B2                            
000053B2                            locret_7298:
000053B2 4E75                       		rts	
000053B4                            ; ===========================================================================
000053B4                            
000053B4                            Resize_SBZ2boss2:
000053B4 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000053BA 6500                       		bcs.s	loc_72B6
000053BC 6100 0000                  		bsr.w	SingleObjLoad
000053C0 6600                       		bne.s	loc_72B0
000053C2 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000053C6 5438 F742                  		addq.b	#2,($FFFFF742).w
000053CA                            
000053CA                            loc_72B0:
000053CA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000053D0                            
000053D0                            loc_72B6:
000053D0 6000                       		bra.s	loc_72C2
000053D2                            ; ===========================================================================
000053D2                            
000053D2                            Resize_SBZ2end:
000053D2 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000053D8 6500                       		bcs.s	loc_72C2
000053DA 4E75                       		rts	
000053DC                            ; ===========================================================================
000053DC                            
000053DC                            loc_72C2:
000053DC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000053E2 4E75                       		rts	
000053E4                            ; ===========================================================================
000053E4                            
000053E4                            Resize_FZ:
000053E4 7000                       		moveq	#0,d0
000053E6 1038 F742                  		move.b	($FFFFF742).w,d0
000053EA 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000053EE 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000053F2                            ; ===========================================================================
000053F2 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000053F6 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
000053FA 0000                       		dc.w Resize_FZend2-off_72D8
000053FC                            ; ===========================================================================
000053FC                            
000053FC                            Resize_FZmain:
000053FC 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00005402 6500                       		bcs.s	loc_72F4
00005404 5438 F742                  		addq.b	#2,($FFFFF742).w
00005408 701F                       		moveq	#$1F,d0
0000540A 6100 BE82                  		bsr.w	LoadPLC		; load FZ boss patterns
0000540E                            
0000540E                            loc_72F4:
0000540E 60CC                       		bra.s	loc_72C2
00005410                            ; ===========================================================================
00005410                            
00005410                            Resize_FZboss:
00005410 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00005416 6500                       		bcs.s	loc_7312
00005418 6100 0000                  		bsr.w	SingleObjLoad
0000541C 6600                       		bne.s	loc_7312
0000541E 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00005422 5438 F742                  		addq.b	#2,($FFFFF742).w
00005426 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000542C                            
0000542C                            loc_7312:
0000542C 60AE                       		bra.s	loc_72C2
0000542E                            ; ===========================================================================
0000542E                            
0000542E                            Resize_FZend:
0000542E 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00005434 6500                       		bcs.s	loc_7320
00005436 5438 F742                  		addq.b	#2,($FFFFF742).w
0000543A                            
0000543A                            loc_7320:
0000543A 60A0                       		bra.s	loc_72C2
0000543C                            ; ===========================================================================
0000543C                            
0000543C                            locret_7322:
0000543C 4E75                       		rts	
0000543E                            ; ===========================================================================
0000543E                            
0000543E                            Resize_FZend2:
0000543E 609C                       		bra.s	loc_72C2
00005440                            ; ===========================================================================
00005440                            ; ---------------------------------------------------------------------------
00005440                            ; Ending sequence dynamic screen resizing (empty)
00005440                            ; ---------------------------------------------------------------------------
00005440                            
00005440                            Resize_Ending:				; XREF: Resize_Index
00005440 4E75                       		rts	
00005442                            ; ===========================================================================
00005442                            ; ---------------------------------------------------------------------------
00005442                            ; Object 11 - GHZ bridge
00005442                            ; ---------------------------------------------------------------------------
00005442                            
00005442                            Obj11:					; XREF: Obj_Index
00005442 7000                       		moveq	#0,d0
00005444 1028 0024                  		move.b	$24(a0),d0
00005448 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
0000544C 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00005450                            ; ===========================================================================
00005450 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00005454 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00005458 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
0000545C                            ; ===========================================================================
0000545C                            
0000545C                            Obj11_Main:				; XREF: Obj11_Index
0000545C 5428 0024                  		addq.b	#2,$24(a0)
00005460 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00005468 317C 438E 0002             		move.w	#$438E,2(a0)
0000546E 117C 0004 0001             		move.b	#4,1(a0)
00005474 117C 0003 0018             		move.b	#3,$18(a0)
0000547A 117C 0080 0019             		move.b	#$80,$19(a0)
00005480 3428 000C                  		move.w	$C(a0),d2
00005484 3628 0008                  		move.w	8(a0),d3
00005488 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
0000548A 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
0000548E 7200                       		moveq	#0,d1
00005490 1212                       		move.b	(a2),d1		; copy a2 to d1
00005492 14FC 0000                  		move.b	#0,(a2)+
00005496 3001                       		move.w	d1,d0
00005498 E248                       		lsr.w	#1,d0
0000549A E948                       		lsl.w	#4,d0
0000549E 5501                       		subq.b	#2,d1
000054A0 6500                       		bcs.s	Obj11_Action
000054A2                            
000054A2                            Obj11_MakeBdg:
000054A2 6100 0000                  		bsr.w	SingleObjLoad
000054A6 6600                       		bne.s	Obj11_Action
000054A8 5228 0028                  		addq.b	#1,$28(a0)
000054AC B668 0008                  		cmp.w	8(a0),d3
000054B0 6600                       		bne.s	loc_73B8
000054B2 0643 0010                  		addi.w	#$10,d3
000054B6 3142 000C                  		move.w	d2,$C(a0)
000054BA 3142 003C                  		move.w	d2,$3C(a0)
000054BE 3A08                       		move.w	a0,d5
000054C0 0445 D000                  		subi.w	#-$3000,d5
000054C4 EC4D                       		lsr.w	#6,d5
000054C6 0245 007F                  		andi.w	#$7F,d5
000054CA 14C5                       		move.b	d5,(a2)+
000054CC 5228 0028                  		addq.b	#1,$28(a0)
000054D0                            
000054D0                            loc_73B8:				; XREF: ROM:00007398j
000054D0 3A09                       		move.w	a1,d5
000054D2 0445 D000                  		subi.w	#-$3000,d5
000054D6 EC4D                       		lsr.w	#6,d5
000054D8 0245 007F                  		andi.w	#$7F,d5
000054DC 14C5                       		move.b	d5,(a2)+
000054DE 137C 000A 0024             		move.b	#$A,$24(a1)
000054E4 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000054E6 3342 000C                  		move.w	d2,$C(a1)
000054EA 3342 003C                  		move.w	d2,$3C(a1)
000054EE 3343 0008                  		move.w	d3,8(a1)
000054F2 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
000054FA 337C 438E 0002             		move.w	#$438E,2(a1)
00005500 137C 0004 0001             		move.b	#4,1(a1)
00005506 137C 0003 0018             		move.b	#3,$18(a1)
0000550C 137C 0008 0019             		move.b	#8,$19(a1)
00005512 0643 0010                  		addi.w	#$10,d3
00005516 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
0000551A                            
0000551A                            Obj11_Action:				; XREF: Obj11_Index
0000551A 6100                       		bsr.s	Obj11_Solid
0000551C 4A28 003E                  		tst.b	$3E(a0)
00005520 6700                       		beq.s	Obj11_Display
00005522 5928 003E                  		subq.b	#4,$3E(a0)
00005526 6100 0000                  		bsr.w	Obj11_Bend
0000552A                            
0000552A                            Obj11_Display:
0000552A 6100 0000                  		bsr.w	DisplaySprite
0000552E 6000 0000                  		bra.w	Obj11_ChkDel
00005532                            
00005532                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005532                            
00005532                            
00005532                            Obj11_Solid:				; XREF: Obj11_Action
00005532 7200                       		moveq	#0,d1
00005534 1228 0028                  		move.b	$28(a0),d1
00005538 E749                       		lsl.w	#3,d1
0000553A 3401                       		move.w	d1,d2
0000553C 5041                       		addq.w	#8,d1
00005540 43F8 D000                  		lea	($FFFFD000).w,a1
00005544 4A69 0012                  		tst.w	$12(a1)
00005548 6B00 0000                  		bmi.w	locret_751E
0000554C 3029 0008                  		move.w	8(a1),d0
00005556 6B00 0000                  		bmi.w	locret_751E
0000555A B042                       		cmp.w	d2,d0
0000555C 6400 0000                  		bcc.w	locret_751E
00005560 6000                       		bra.s	Platform2
00005562                            ; End of function Obj11_Solid
00005562                            
00005562                            ; ---------------------------------------------------------------------------
00005562                            ; Platform subroutine
00005562                            ; ---------------------------------------------------------------------------
00005562                            
00005562                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005562                            
00005562                            
00005562                            PlatformObject:
00005562 43F8 D000                  		lea	($FFFFD000).w,a1
00005566 4A69 0012                  		tst.w	$12(a1)
0000556A 6B00 0000                  		bmi.w	locret_751E
0000556E 3029 0008                  		move.w	8(a1),d0
00005578 6B00 0000                  		bmi.w	locret_751E
0000557E B041                       		cmp.w	d1,d0
00005580 6400 0000                  		bcc.w	locret_751E
00005584                            
00005584                            Platform2:
00005584 3028 000C                  		move.w	$C(a0),d0
00005588 5140                       		subq.w	#8,d0
0000558A                            
0000558A                            Platform3:
0000558A 3429 000C                  		move.w	$C(a1),d2
0000558E 1229 0016                  		move.b	$16(a1),d1
00005592 4881                       		ext.w	d1
00005596 5841                       		addq.w	#4,d1
0000559A 6200 0000                  		bhi.w	locret_751E
0000559E 0C40 FFF0                  		cmpi.w	#-$10,d0
000055A2 6500 0000                  		bcs.w	locret_751E
000055A6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000055AA 6B00 0000                  		bmi.w	locret_751E
000055AE 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000055B4 6400 0000                  		bcc.w	locret_751E
000055BA 5642                       		addq.w	#3,d2
000055BC 3342 000C                  		move.w	d2,$C(a1)
000055C0 5428 0024                  		addq.b	#2,$24(a0)
000055C4                            
000055C4                            loc_74AE:
000055C4 0829 0003 0022             		btst	#3,$22(a1)
000055CA 6700                       		beq.s	loc_74DC
000055CC 7000                       		moveq	#0,d0
000055CE 1029 003D                  		move.b	$3D(a1),d0
000055D2 ED48                       		lsl.w	#6,d0
000055D4 0680 00FF D000             		addi.l	#$FFD000,d0
000055DA 2440                       		movea.l	d0,a2
000055DC 08AA 0003 0022             		bclr	#3,$22(a2)
000055E2 422A 0025                  		clr.b	$25(a2)
000055E6 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
000055EC 6600                       		bne.s	loc_74DC
000055EE 552A 0024                  		subq.b	#2,$24(a2)
000055F2                            
000055F2                            loc_74DC:
000055F2 3008                       		move.w	a0,d0
000055F4 0440 D000                  		subi.w	#-$3000,d0
000055F8 EC48                       		lsr.w	#6,d0
000055FA 0240 007F                  		andi.w	#$7F,d0
000055FE 1340 003D                  		move.b	d0,$3D(a1)
00005602 137C 0000 0026             		move.b	#0,$26(a1)
00005608 337C 0000 0012             		move.w	#0,$12(a1)
0000560E 3369 0010 0014             		move.w	$10(a1),$14(a1)
00005614 0829 0001 0022             		btst	#1,$22(a1)
0000561A 6700                       		beq.s	loc_7512
0000561C 2F08                       		move.l	a0,-(sp)
0000561E 2049                       		movea.l	a1,a0
00005620 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00005626 205F                       		movea.l	(sp)+,a0
00005628                            
00005628                            loc_7512:
00005628 08E9 0003 0022             		bset	#3,$22(a1)
0000562E 08E8 0003 0022             		bset	#3,$22(a0)
00005634                            
00005634                            locret_751E:
00005634 4E75                       		rts	
00005636                            ; End of function PlatformObject
00005636                            
00005636                            ; ---------------------------------------------------------------------------
00005636                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00005636                            ; ---------------------------------------------------------------------------
00005636                            
00005636                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005636                            
00005636                            
00005636                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00005636 43F8 D000                  		lea	($FFFFD000).w,a1
0000563A 4A69 0012                  		tst.w	$12(a1)
0000563E 6B00 FFF4                  		bmi.w	locret_751E
00005642 3029 0008                  		move.w	8(a1),d0
0000564C 6BE6                       		bmi.s	locret_751E
00005650 B041                       		cmp.w	d1,d0
00005652 64E0                       		bcc.s	locret_751E
00005654 0828 0000 0001             		btst	#0,1(a0)
0000565A 6700                       		beq.s	loc_754A
0000565C 4640                       		not.w	d0
00005660                            
00005660                            loc_754A:
00005660 E248                       		lsr.w	#1,d0
00005662 7600                       		moveq	#0,d3
00005664 1632 0000                  		move.b	(a2,d0.w),d3
00005668 3028 000C                  		move.w	$C(a0),d0
0000566E 6000 FF1A                  		bra.w	Platform3
00005672                            ; End of function SlopeObject
00005672                            
00005672                            
00005672                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005672                            
00005672                            
00005672                            Obj15_Solid:				; XREF: Obj15_SetSolid
00005672 43F8 D000                  		lea	($FFFFD000).w,a1
00005676 4A69 0012                  		tst.w	$12(a1)
0000567A 6B00 FFB8                  		bmi.w	locret_751E
0000567E 3029 0008                  		move.w	8(a1),d0
00005688 6B00 FFAA                  		bmi.w	locret_751E
0000568E B041                       		cmp.w	d1,d0
00005690 6400 FFA2                  		bcc.w	locret_751E
00005694 3028 000C                  		move.w	$C(a0),d0
0000569A 6000 FEEE                  		bra.w	Platform3
0000569E                            ; End of function Obj15_Solid
0000569E                            
0000569E                            ; ===========================================================================
0000569E                            
0000569E                            Obj11_Action2:				; XREF: Obj11_Index
0000569E 6100                       		bsr.s	Obj11_WalkOff
000056A0 6100 0000                  		bsr.w	DisplaySprite
000056A4 6000 0000                  		bra.w	Obj11_ChkDel
000056A8                            
000056A8                            ; ---------------------------------------------------------------------------
000056A8                            ; Subroutine allowing Sonic to walk off a bridge
000056A8                            ; ---------------------------------------------------------------------------
000056A8                            
000056A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000056A8                            
000056A8                            
000056A8                            Obj11_WalkOff:				; XREF: Obj11_Action2
000056A8 7200                       		moveq	#0,d1
000056AA 1228 0028                  		move.b	$28(a0),d1
000056AE E749                       		lsl.w	#3,d1
000056B0 3401                       		move.w	d1,d2
000056B2 5041                       		addq.w	#8,d1
000056B4 6100                       		bsr.s	ExitPlatform2
000056B6 6400                       		bcc.s	locret_75BE
000056B8 E848                       		lsr.w	#4,d0
000056BA 1140 003F                  		move.b	d0,$3F(a0)
000056BE 1028 003E                  		move.b	$3E(a0),d0
000056C2 0C00 0040                  		cmpi.b	#$40,d0
000056C6 6700                       		beq.s	loc_75B6
000056C8 5828 003E                  		addq.b	#4,$3E(a0)
000056CC                            
000056CC                            loc_75B6:
000056CC 6100 0000                  		bsr.w	Obj11_Bend
000056D0 6100 0000                  		bsr.w	Obj11_MoveSonic
000056D4                            
000056D4                            locret_75BE:
000056D4 4E75                       		rts	
000056D6                            ; End of function Obj11_WalkOff
000056D6                            
000056D6                            ; ---------------------------------------------------------------------------
000056D6                            ; Subroutine allowing Sonic to walk or jump off	a platform
000056D6                            ; ---------------------------------------------------------------------------
000056D6                            
000056D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000056D6                            
000056D6                            
000056D6                            ExitPlatform:
000056D6 3401                       		move.w	d1,d2
000056D8                            
000056D8                            ExitPlatform2:
000056DA 43F8 D000                  		lea	($FFFFD000).w,a1
000056DE 0829 0001 0022             		btst	#1,$22(a1)
000056E4 6600                       		bne.s	loc_75E0
000056E6 3029 0008                  		move.w	8(a1),d0
000056F0 6B00                       		bmi.s	loc_75E0
000056F2 B042                       		cmp.w	d2,d0
000056F4 6500                       		bcs.s	locret_75F2
000056F6                            
000056F6                            loc_75E0:
000056F6 08A9 0003 0022             		bclr	#3,$22(a1)
000056FC 117C 0002 0024             		move.b	#2,$24(a0)
00005702 08A8 0003 0022             		bclr	#3,$22(a0)
00005708                            
00005708                            locret_75F2:
00005708 4E75                       		rts	
0000570A                            ; End of function ExitPlatform
0000570A                            
0000570A                            
0000570A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000570A                            
0000570A                            
0000570A                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
0000570A 7000                       		moveq	#0,d0
0000570C 1028 003F                  		move.b	$3F(a0),d0
00005710 1030 0029                  		move.b	$29(a0,d0.w),d0
00005714 ED48                       		lsl.w	#6,d0
00005716 0680 00FF D000             		addi.l	#$FFD000,d0
0000571C 2440                       		movea.l	d0,a2
0000571E 43F8 D000                  		lea	($FFFFD000).w,a1
00005722 302A 000C                  		move.w	$C(a2),d0
00005726 5140                       		subq.w	#8,d0
00005728 7200                       		moveq	#0,d1
0000572A 1229 0016                  		move.b	$16(a1),d1
00005730 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00005734 4E75                       		rts	
00005736                            ; End of function Obj11_MoveSonic
00005736                            
00005736                            
00005736                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005736                            
00005736                            
00005736                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00005736 1028 003E                  		move.b	$3E(a0),d0
0000573A 6100 CE1A                  		bsr.w	CalcSine
0000573E 3800                       		move.w	d0,d4
00005740 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00005746 7000                       		moveq	#0,d0
00005748 1028 0028                  		move.b	$28(a0),d0
0000574C E948                       		lsl.w	#4,d0
0000574E 7600                       		moveq	#0,d3
00005750 1628 003F                  		move.b	$3F(a0),d3
00005754 3403                       		move.w	d3,d2
00005758 7A00                       		moveq	#0,d5
0000575A 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00005760 1A35 3000                  		move.b	(a5,d3.w),d5
00005764 0243 000F                  		andi.w	#$F,d3
00005768 E94B                       		lsl.w	#4,d3
0000576A 47F4 3000                  		lea	(a4,d3.w),a3
0000576E 45E8 0029                  		lea	$29(a0),a2
00005772                            
00005772                            loc_765C:
00005772 7000                       		moveq	#0,d0
00005774 101A                       		move.b	(a2)+,d0
00005776 ED48                       		lsl.w	#6,d0
00005778 0680 00FF D000             		addi.l	#$FFD000,d0
0000577E 2240                       		movea.l	d0,a1
00005780 7000                       		moveq	#0,d0
00005782 101B                       		move.b	(a3)+,d0
00005784 5240                       		addq.w	#1,d0
00005786 C0C5                       		mulu.w	d5,d0
00005788 C0C4                       		mulu.w	d4,d0
0000578A 4840                       		swap	d0
00005790 3340 000C                  		move.w	d0,$C(a1)
00005794 51CA FFDC                  		dbf	d2,loc_765C
00005798 7000                       		moveq	#0,d0
0000579A 1028 0028                  		move.b	$28(a0),d0
0000579E 7600                       		moveq	#0,d3
000057A0 1628 003F                  		move.b	$3F(a0),d3
000057A4 5203                       		addq.b	#1,d3
000057A8 4403                       		neg.b	d3
000057AA 6B00                       		bmi.s	locret_76CA
000057AC 3403                       		move.w	d3,d2
000057AE E94B                       		lsl.w	#4,d3
000057B0 47F4 3000                  		lea	(a4,d3.w),a3
000057B4 D6C2                       		adda.w	d2,a3
000057B6 5342                       		subq.w	#1,d2
000057B8 6500                       		bcs.s	locret_76CA
000057BA                            
000057BA                            loc_76A4:
000057BA 7000                       		moveq	#0,d0
000057BC 101A                       		move.b	(a2)+,d0
000057BE ED48                       		lsl.w	#6,d0
000057C0 0680 00FF D000             		addi.l	#$FFD000,d0
000057C6 2240                       		movea.l	d0,a1
000057C8 7000                       		moveq	#0,d0
000057CA 1023                       		move.b	-(a3),d0
000057CC 5240                       		addq.w	#1,d0
000057CE C0C5                       		mulu.w	d5,d0
000057D0 C0C4                       		mulu.w	d4,d0
000057D2 4840                       		swap	d0
000057D8 3340 000C                  		move.w	d0,$C(a1)
000057DC 51CA FFDC                  		dbf	d2,loc_76A4
000057E0                            
000057E0                            locret_76CA:
000057E0 4E75                       		rts	
000057E2                            ; End of function Obj11_Bend
000057E2                            
000057E2                            ; ===========================================================================
000057E2                            ; ---------------------------------------------------------------------------
000057E2                            ; GHZ bridge-bending data
000057E2                            ; (Defines how the bridge bends	when Sonic walks across	it)
000057E2                            ; ---------------------------------------------------------------------------
000057E2                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000058F2                            		even
000058F2                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000059F2                            		even
000059F2                            
000059F2                            ; ===========================================================================
000059F2                            
000059F2                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000059F2 3028 0008                  		move.w	8(a0),d0
000059F6 0240 FF80                  		andi.w	#$FF80,d0
000059FA 3238 F700                  		move.w	($FFFFF700).w,d1
000059FE 0441 0080                  		subi.w	#$80,d1
00005A02 0241 FF80                  		andi.w	#$FF80,d1
00005A08 0C40 0280                  		cmpi.w	#$280,d0
00005A0C 6200 0000                  		bhi.w	Obj11_DelAll
00005A10 4E75                       		rts	
00005A12                            ; ===========================================================================
00005A12                            
00005A12                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00005A12 7400                       		moveq	#0,d2
00005A14 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00005A18 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00005A1A 5302                       		subq.b	#1,d2		; subtract 1
00005A1C 6500                       		bcs.s	Obj11_Delete
00005A1E                            
00005A1E                            Obj11_DelLoop:
00005A1E 7000                       		moveq	#0,d0
00005A20 101A                       		move.b	(a2)+,d0
00005A22 ED48                       		lsl.w	#6,d0
00005A24 0680 00FF D000             		addi.l	#$FFD000,d0
00005A2A 2240                       		movea.l	d0,a1
00005A2C B048                       		cmp.w	a0,d0
00005A2E 6700                       		beq.s	loc_791E
00005A30 6100 0000                  		bsr.w	DeleteObject2
00005A34                            
00005A34                            loc_791E:
00005A34 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00005A38                            
00005A38                            Obj11_Delete:
00005A38 6100 0000                  		bsr.w	DeleteObject
00005A3C 4E75                       		rts	
00005A3E                            ; ===========================================================================
00005A3E                            
00005A3E                            Obj11_Delete2:				; XREF: Obj11_Index
00005A3E 6100 0000                  		bsr.w	DeleteObject
00005A42 4E75                       		rts	
00005A44                            ; ===========================================================================
00005A44                            
00005A44                            Obj11_Display2:				; XREF: Obj11_Index
00005A44 6100 0000                  		bsr.w	DisplaySprite
00005A48 4E75                       		rts	
00005A4A                            ; ===========================================================================
00005A4A                            ; ---------------------------------------------------------------------------
00005A4A                            ; Sprite mappings - GHZ	bridge
00005A4A                            ; ---------------------------------------------------------------------------
00005A4A                            Map_obj11:
00005A4A                            	include "_maps\obj11.asm"
00005A4A                            ; ---------------------------------------------------------------------------
00005A4A                            ; Sprite mappings - GHZ	bridge
00005A4A                            ; ---------------------------------------------------------------------------
00005A4A 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00005A4E 0000                       		dc.w byte_794B-Map_obj11
00005A50 01                         byte_793A:	dc.b 1
00005A51 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005A56 02                         byte_7940:	dc.b 2
00005A57 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00005A5C 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00005A61 01                         byte_794B:	dc.b 1
00005A62 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00005A68 00                         		even
00005A68 00                         		even
00005A68                            
00005A68                            ; ===========================================================================
00005A68                            ; ---------------------------------------------------------------------------
00005A68                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00005A68                            ;	    - spiked ball on a chain (SBZ)
00005A68                            ; ---------------------------------------------------------------------------
00005A68                            
00005A68                            Obj15:					; XREF: Obj_Index
00005A68 7000                       		moveq	#0,d0
00005A6A 1028 0024                  		move.b	$24(a0),d0
00005A6E 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00005A72 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00005A76                            ; ===========================================================================
00005A76 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00005A7A 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00005A7E 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00005A82 0000                       		dc.w Obj15_Action-Obj15_Index
00005A84                            ; ===========================================================================
00005A84                            
00005A84                            Obj15_Main:				; XREF: Obj15_Index
00005A84 5428 0024                  		addq.b	#2,$24(a0)
00005A88 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00005A90 317C 4380 0002             		move.w	#$4380,2(a0)
00005A96 117C 0004 0001             		move.b	#4,1(a0)
00005A9C 117C 0003 0018             		move.b	#3,$18(a0)
00005AA2 117C 0018 0019             		move.b	#$18,$19(a0)
00005AA8 117C 0008 0016             		move.b	#8,$16(a0)
00005AAE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00005AB4 3168 0008 003A             		move.w	8(a0),$3A(a0)
00005ABA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00005AC0 6600                       		bne.s	Obj15_NotSLZ
00005AC2 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00005ACA 317C 43DC 0002             		move.w	#$43DC,2(a0)
00005AD0 117C 0020 0019             		move.b	#$20,$19(a0)
00005AD6 117C 0010 0016             		move.b	#$10,$16(a0)
00005ADC 117C 0099 0020             		move.b	#$99,$20(a0)
00005AE2                            
00005AE2                            Obj15_NotSLZ:
00005AE2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00005AE8 6600                       		bne.s	Obj15_SetLength
00005AEA 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00005AF2 317C 0391 0002             		move.w	#$391,2(a0)
00005AF8 117C 0018 0019             		move.b	#$18,$19(a0)
00005AFE 117C 0018 0016             		move.b	#$18,$16(a0)
00005B04 117C 0086 0020             		move.b	#$86,$20(a0)
00005B0A 117C 000C 0024             		move.b	#$C,$24(a0)
00005B10                            
00005B10                            Obj15_SetLength:
00005B10 1810                       		move.b	0(a0),d4
00005B12 7200                       		moveq	#0,d1
00005B14 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00005B18 1212                       		move.b	(a2),d1		; move a2 to d1
00005B1A 3F01                       		move.w	d1,-(sp)
00005B1C 0241 000F                  		andi.w	#$F,d1
00005B20 14FC 0000                  		move.b	#0,(a2)+
00005B24 3601                       		move.w	d1,d3
00005B26 E94B                       		lsl.w	#4,d3
00005B28 5003                       		addq.b	#8,d3
00005B2A 1143 003C                  		move.b	d3,$3C(a0)
00005B2E 5103                       		subq.b	#8,d3
00005B30 4A28 001A                  		tst.b	$1A(a0)
00005B34 6700                       		beq.s	Obj15_MakeChain
00005B36 5003                       		addq.b	#8,d3
00005B38 5341                       		subq.w	#1,d1
00005B3A                            
00005B3A                            Obj15_MakeChain:
00005B3A 6100 0000                  		bsr.w	SingleObjLoad
00005B3E 6600                       		bne.s	loc_7A92
00005B40 5228 0028                  		addq.b	#1,$28(a0)
00005B44 3A09                       		move.w	a1,d5
00005B46 0445 D000                  		subi.w	#-$3000,d5
00005B4A EC4D                       		lsr.w	#6,d5
00005B4C 0245 007F                  		andi.w	#$7F,d5
00005B50 14C5                       		move.b	d5,(a2)+
00005B52 137C 000A 0024             		move.b	#$A,$24(a1)
00005B58 1284                       		move.b	d4,0(a1)	; load swinging	object
00005B5A 2368 0004 0004             		move.l	4(a0),4(a1)
00005B60 3368 0002 0002             		move.w	2(a0),2(a1)
00005B66 08A9 0006 0002             		bclr	#6,2(a1)
00005B6C 137C 0004 0001             		move.b	#4,1(a1)
00005B72 137C 0004 0018             		move.b	#4,$18(a1)
00005B78 137C 0008 0019             		move.b	#8,$19(a1)
00005B7E 137C 0001 001A             		move.b	#1,$1A(a1)
00005B84 1343 003C                  		move.b	d3,$3C(a1)
00005B88 0403 0010                  		subi.b	#$10,d3
00005B8C 6400                       		bcc.s	loc_7A8E
00005B8E 137C 0002 001A             		move.b	#2,$1A(a1)
00005B94 137C 0003 0018             		move.b	#3,$18(a1)
00005B9A 08E9 0006 0002             		bset	#6,2(a1)
00005BA0                            
00005BA0                            loc_7A8E:
00005BA0 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00005BA4                            
00005BA4                            loc_7A92:
00005BA4 3A08                       		move.w	a0,d5
00005BA6 0445 D000                  		subi.w	#-$3000,d5
00005BAA EC4D                       		lsr.w	#6,d5
00005BAC 0245 007F                  		andi.w	#$7F,d5
00005BB0 14C5                       		move.b	d5,(a2)+
00005BB2 317C 4080 0026             		move.w	#$4080,$26(a0)
00005BB8 317C FE00 003E             		move.w	#-$200,$3E(a0)
00005BBE 321F                       		move.w	(sp)+,d1
00005BC0 0801 0004                  		btst	#4,d1		; is object type $8X ?
00005BC4 6700                       		beq.s	loc_7AD4	; if not, branch
00005BC6 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00005BCE 317C 43AA 0002             		move.w	#$43AA,2(a0)
00005BD4 117C 0001 001A             		move.b	#1,$1A(a0)
00005BDA 117C 0002 0018             		move.b	#2,$18(a0)
00005BE0 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00005BE6                            
00005BE6                            loc_7AD4:
00005BE6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00005BEC 6700                       		beq.s	Obj15_Action	; if yes, branch
00005BEE                            
00005BEE                            Obj15_SetSolid:				; XREF: Obj15_Index
00005BEE 7200                       		moveq	#0,d1
00005BF0 1228 0019                  		move.b	$19(a0),d1
00005BF4 7600                       		moveq	#0,d3
00005BF6 1628 0016                  		move.b	$16(a0),d3
00005BFA 6100 FA76                  		bsr.w	Obj15_Solid
00005BFE                            
00005BFE                            Obj15_Action:				; XREF: Obj15_Index
00005BFE 6100 0000                  		bsr.w	Obj15_Move
00005C02 6100 0000                  		bsr.w	DisplaySprite
00005C06 6000 0000                  		bra.w	Obj15_ChkDel
00005C0A                            ; ===========================================================================
00005C0A                            
00005C0A                            Obj15_Action2:				; XREF: Obj15_Index
00005C0A 7200                       		moveq	#0,d1
00005C0C 1228 0019                  		move.b	$19(a0),d1
00005C10 6100 FAC4                  		bsr.w	ExitPlatform
00005C14 3F28 0008                  		move.w	8(a0),-(sp)
00005C18 6100 0000                  		bsr.w	Obj15_Move
00005C1C 341F                       		move.w	(sp)+,d2
00005C1E 7600                       		moveq	#0,d3
00005C20 1628 0016                  		move.b	$16(a0),d3
00005C24 5203                       		addq.b	#1,d3
00005C26 6100 0000                  		bsr.w	MvSonicOnPtfm
00005C2A 6100 0000                  		bsr.w	DisplaySprite
00005C2E 6000 0000                  		bra.w	Obj15_ChkDel
00005C32                            
00005C32 4E75                       		rts
00005C34                            
00005C34                            ; ---------------------------------------------------------------------------
00005C34                            ; Subroutine to	change Sonic's position with a platform
00005C34                            ; ---------------------------------------------------------------------------
00005C34                            
00005C34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005C34                            
00005C34                            
00005C34                            MvSonicOnPtfm:
00005C34 43F8 D000                  		lea	($FFFFD000).w,a1
00005C38 3028 000C                  		move.w	$C(a0),d0
00005C3E 6000                       		bra.s	MvSonic2
00005C40                            ; End of function MvSonicOnPtfm
00005C40                            
00005C40                            ; ---------------------------------------------------------------------------
00005C40                            ; Subroutine to	change Sonic's position with a platform
00005C40                            ; ---------------------------------------------------------------------------
00005C40                            
00005C40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005C40                            
00005C40                            
00005C40                            MvSonicOnPtfm2:
00005C40 43F8 D000                  		lea	($FFFFD000).w,a1
00005C44 3028 000C                  		move.w	$C(a0),d0
00005C48 0440 0009                  		subi.w	#9,d0
00005C4C                            
00005C4C                            MvSonic2:
00005C4C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00005C50 6B00                       		bmi.s	locret_7B62
00005C52 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005C58 6400                       		bcc.s	locret_7B62
00005C5A 4A78 FE08                  		tst.w	($FFFFFE08).w
00005C5E 6600                       		bne.s	locret_7B62
00005C60 7200                       		moveq	#0,d1
00005C62 1229 0016                  		move.b	$16(a1),d1
00005C68 3340 000C                  		move.w	d0,$C(a1)
00005C74                            
00005C74                            locret_7B62:
00005C74 4E75                       		rts	
00005C76                            ; End of function MvSonicOnPtfm2
00005C76                            
00005C76                            
00005C76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005C76                            
00005C76                            
00005C76                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00005C76 1038 FE78                  		move.b	($FFFFFE78).w,d0
00005C7A 323C 0080                  		move.w	#$80,d1
00005C7E 0828 0000 0022             		btst	#0,$22(a0)
00005C84 6700                       		beq.s	loc_7B78
00005C86 4440                       		neg.w	d0
00005C8A                            
00005C8A                            loc_7B78:
00005C8A 6000                       		bra.s	Obj15_Move2
00005C8C                            ; End of function Obj15_Move
00005C8C                            
00005C8C                            
00005C8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005C8C                            
00005C8C                            
00005C8C                            Obj48_Move:				; XREF: Obj48_Display2
00005C8C 4A28 003D                  		tst.b	$3D(a0)
00005C90 6600                       		bne.s	loc_7B9C
00005C92 3028 003E                  		move.w	$3E(a0),d0
00005C96 5040                       		addq.w	#8,d0
00005C98 3140 003E                  		move.w	d0,$3E(a0)
00005CA0 0C40 0200                  		cmpi.w	#$200,d0
00005CA4 6600                       		bne.s	loc_7BB6
00005CA6 117C 0001 003D             		move.b	#1,$3D(a0)
00005CAC 6000                       		bra.s	loc_7BB6
00005CAE                            ; ===========================================================================
00005CAE                            
00005CAE                            loc_7B9C:
00005CAE 3028 003E                  		move.w	$3E(a0),d0
00005CB2 5140                       		subq.w	#8,d0
00005CB4 3140 003E                  		move.w	d0,$3E(a0)
00005CBC 0C40 FE00                  		cmpi.w	#-$200,d0
00005CC0 6600                       		bne.s	loc_7BB6
00005CC2 117C 0000 003D             		move.b	#0,$3D(a0)
00005CC8                            
00005CC8                            loc_7BB6:
00005CC8 1028 0026                  		move.b	$26(a0),d0
00005CCC                            ; End of function Obj48_Move
00005CCC                            
00005CCC                            
00005CCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005CCC                            
00005CCC                            
00005CCC                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00005CCC 6100 C888                  		bsr.w	CalcSine
00005CD0 3428 0038                  		move.w	$38(a0),d2
00005CD4 3628 003A                  		move.w	$3A(a0),d3
00005CD8 45E8 0028                  		lea	$28(a0),a2
00005CDC 7C00                       		moveq	#0,d6
00005CDE 1C1A                       		move.b	(a2)+,d6
00005CE0                            
00005CE0                            loc_7BCE:
00005CE0 7800                       		moveq	#0,d4
00005CE2 181A                       		move.b	(a2)+,d4
00005CE4 ED4C                       		lsl.w	#6,d4
00005CE6 0684 00FF D000             		addi.l	#$FFD000,d4
00005CEC 2244                       		movea.l	d4,a1
00005CEE 7800                       		moveq	#0,d4
00005CF0 1829 003C                  		move.b	$3C(a1),d4
00005CF4 2A04                       		move.l	d4,d5
00005CF6 C9C0                       		muls.w	d0,d4
00005CF8 E084                       		asr.l	#8,d4
00005CFA CBC1                       		muls.w	d1,d5
00005CFC E085                       		asr.l	#8,d5
00005D02 3344 000C                  		move.w	d4,$C(a1)
00005D06 3345 0008                  		move.w	d5,8(a1)
00005D0A 51CE FFD4                  		dbf	d6,loc_7BCE
00005D0E 4E75                       		rts	
00005D10                            ; End of function Obj15_Move2
00005D10                            
00005D10                            ; ===========================================================================
00005D10                            
00005D10                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00005D10 3028 003A                  		move.w	$3A(a0),d0
00005D14 0240 FF80                  		andi.w	#$FF80,d0
00005D18 3238 F700                  		move.w	($FFFFF700).w,d1
00005D1C 0441 0080                  		subi.w	#$80,d1
00005D20 0241 FF80                  		andi.w	#$FF80,d1
00005D26 0C40 0280                  		cmpi.w	#$280,d0
00005D2A 6200 0000                  		bhi.w	Obj15_DelAll
00005D2E 4E75                       		rts	
00005D30                            ; ===========================================================================
00005D30                            
00005D30                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00005D30 7400                       		moveq	#0,d2
00005D32 45E8 0028                  		lea	$28(a0),a2
00005D36 141A                       		move.b	(a2)+,d2
00005D38                            
00005D38                            Obj15_DelLoop:
00005D38 7000                       		moveq	#0,d0
00005D3A 101A                       		move.b	(a2)+,d0
00005D3C ED48                       		lsl.w	#6,d0
00005D3E 0680 00FF D000             		addi.l	#$FFD000,d0
00005D44 2240                       		movea.l	d0,a1
00005D46 6100 0000                  		bsr.w	DeleteObject2
00005D4A 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00005D4E 4E75                       		rts	
00005D50                            ; ===========================================================================
00005D50                            
00005D50                            Obj15_Delete:				; XREF: Obj15_Index
00005D50 6100 0000                  		bsr.w	DeleteObject
00005D54 4E75                       		rts	
00005D56                            ; ===========================================================================
00005D56                            
00005D56                            Obj15_Display:				; XREF: Obj15_Index
00005D56 6000 0000                  		bra.w	DisplaySprite
00005D5A                            ; ===========================================================================
00005D5A                            ; ---------------------------------------------------------------------------
00005D5A                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00005D5A                            ; ---------------------------------------------------------------------------
00005D5A                            Map_obj15:
00005D5A                            	include "_maps\obj15ghz.asm"
00005D5A                            ; ---------------------------------------------------------------------------
00005D5A                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00005D5A                            ; ---------------------------------------------------------------------------
00005D5A 0000                       		dc.w byte_7C4E-Map_obj15
00005D5C 0000                       		dc.w byte_7C59-Map_obj15
00005D5E 0000                       		dc.w byte_7C5F-Map_obj15
00005D60 02                         byte_7C4E:	dc.b 2
00005D61 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00005D66 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00005D6B 01                         byte_7C59:	dc.b 1
00005D6C F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005D71 01                         byte_7C5F:	dc.b 1
00005D72 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00005D78 00                         		even
00005D78 00                         		even
00005D78                            
00005D78                            ; ---------------------------------------------------------------------------
00005D78                            ; Sprite mappings - SLZ	swinging platforms
00005D78                            ; ---------------------------------------------------------------------------
00005D78                            Map_obj15a:
00005D78                            	include "_maps\obj15slz.asm"
00005D78                            ; ---------------------------------------------------------------------------
00005D78                            ; Sprite mappings - SLZ	swinging platforms
00005D78                            ; ---------------------------------------------------------------------------
00005D78 0000                       		dc.w byte_7C6C-Map_obj15a
00005D7A 0000                       		dc.w byte_7C95-Map_obj15a
00005D7C 0000                       		dc.w byte_7C9B-Map_obj15a
00005D7E 08                         byte_7C6C:	dc.b 8
00005D7F F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00005D84 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00005D89 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00005D8E F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00005D93 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00005D98 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00005D9D 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00005DA2 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00005DA7 01                         byte_7C95:	dc.b 1
00005DA8 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00005DAD 01                         byte_7C9B:	dc.b 1
00005DAE F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00005DB4 00                         		even
00005DB4 00                         		even
00005DB4                            
00005DB4                            ; ===========================================================================
00005DB4                            ; ---------------------------------------------------------------------------
00005DB4                            ; Object 17 - helix of spikes on a pole	(GHZ)
00005DB4                            ; ---------------------------------------------------------------------------
00005DB4                            
00005DB4                            Obj17:					; XREF: Obj_Index
00005DB4 7000                       		moveq	#0,d0
00005DB6 1028 0024                  		move.b	$24(a0),d0
00005DBA 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00005DBE 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00005DC2                            ; ===========================================================================
00005DC2 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00005DC4 0000                       		dc.w Obj17_Action-Obj17_Index
00005DC6 0000                       		dc.w Obj17_Action-Obj17_Index
00005DC8 0000                       		dc.w Obj17_Delete-Obj17_Index
00005DCA 0000                       		dc.w Obj17_Display-Obj17_Index
00005DCC                            ; ===========================================================================
00005DCC                            
00005DCC                            Obj17_Main:				; XREF: Obj17_Index
00005DCC 5428 0024                  		addq.b	#2,$24(a0)
00005DD0 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00005DD8 317C 4398 0002             		move.w	#$4398,2(a0)
00005DDE 117C 0007 0022             		move.b	#7,$22(a0)
00005DE4 117C 0004 0001             		move.b	#4,1(a0)
00005DEA 117C 0003 0018             		move.b	#3,$18(a0)
00005DF0 117C 0008 0019             		move.b	#8,$19(a0)
00005DF6 3428 000C                  		move.w	$C(a0),d2
00005DFA 3628 0008                  		move.w	8(a0),d3
00005DFE 1810                       		move.b	0(a0),d4
00005E00 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00005E04 7200                       		moveq	#0,d1
00005E06 1212                       		move.b	(a2),d1		; move a2 to d1
00005E08 14FC 0000                  		move.b	#0,(a2)+
00005E0C 3001                       		move.w	d1,d0
00005E0E E248                       		lsr.w	#1,d0
00005E10 E948                       		lsl.w	#4,d0
00005E14 5501                       		subq.b	#2,d1
00005E16 6500                       		bcs.s	Obj17_Action
00005E18 7C00                       		moveq	#0,d6
00005E1A                            
00005E1A                            Obj17_MakeHelix:
00005E1A 6100 0000                  		bsr.w	SingleObjLoad
00005E1E 6600                       		bne.s	Obj17_Action
00005E20 5228 0028                  		addq.b	#1,$28(a0)
00005E24 3A09                       		move.w	a1,d5
00005E26 0445 D000                  		subi.w	#$D000,d5
00005E2A EC4D                       		lsr.w	#6,d5
00005E2C 0245 007F                  		andi.w	#$7F,d5
00005E30 14C5                       		move.b	d5,(a2)+
00005E32 137C 0008 0024             		move.b	#8,$24(a1)
00005E38 1284                       		move.b	d4,0(a1)
00005E3A 3342 000C                  		move.w	d2,$C(a1)
00005E3E 3343 0008                  		move.w	d3,8(a1)
00005E42 2368 0004 0004             		move.l	4(a0),4(a1)
00005E48 337C 4398 0002             		move.w	#$4398,2(a1)
00005E4E 137C 0004 0001             		move.b	#4,1(a1)
00005E54 137C 0003 0018             		move.b	#3,$18(a1)
00005E5A 137C 0008 0019             		move.b	#8,$19(a1)
00005E60 1346 003E                  		move.b	d6,$3E(a1)
00005E64 5206                       		addq.b	#1,d6
00005E66 0206 0007                  		andi.b	#7,d6
00005E6A 0643 0010                  		addi.w	#$10,d3
00005E6E B668 0008                  		cmp.w	8(a0),d3
00005E72 6600                       		bne.s	loc_7D78
00005E74 1146 003E                  		move.b	d6,$3E(a0)
00005E78 5206                       		addq.b	#1,d6
00005E7A 0206 0007                  		andi.b	#7,d6
00005E7E 0643 0010                  		addi.w	#$10,d3
00005E82 5228 0028                  		addq.b	#1,$28(a0)
00005E86                            
00005E86                            loc_7D78:
00005E86 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00005E8A                            
00005E8A                            Obj17_Action:				; XREF: Obj17_Index
00005E8A 6100 0000                  		bsr.w	Obj17_RotateSpikes
00005E8E 6100 0000                  		bsr.w	DisplaySprite
00005E92 6000 0000                  		bra.w	Obj17_ChkDel
00005E96                            
00005E96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005E96                            
00005E96                            
00005E96                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00005E96 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00005E9A 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00005EA4 0200 0007                  		andi.b	#7,d0
00005EA8 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00005EAC 6600                       		bne.s	locret_7DA6
00005EAE 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00005EB4                            
00005EB4                            locret_7DA6:
00005EB4 4E75                       		rts	
00005EB6                            ; End of function Obj17_RotateSpikes
00005EB6                            
00005EB6                            ; ===========================================================================
00005EB6                            
00005EB6                            Obj17_ChkDel:				; XREF: Obj17_Action
00005EB6 3028 0008                  		move.w	8(a0),d0
00005EBA 0240 FF80                  		andi.w	#$FF80,d0
00005EBE 3238 F700                  		move.w	($FFFFF700).w,d1
00005EC2 0441 0080                  		subi.w	#$80,d1
00005EC6 0241 FF80                  		andi.w	#$FF80,d1
00005ECC 0C40 0280                  		cmpi.w	#$280,d0
00005ED0 6200 0000                  		bhi.w	Obj17_DelAll
00005ED4 4E75                       		rts	
00005ED6                            ; ===========================================================================
00005ED6                            
00005ED6                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00005ED6 7400                       		moveq	#0,d2
00005ED8 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00005EDC 141A                       		move.b	(a2)+,d2	; move a2 to d2
00005EDE 5502                       		subq.b	#2,d2
00005EE0 6500                       		bcs.s	Obj17_Delete
00005EE2                            
00005EE2                            Obj17_DelLoop:
00005EE2 7000                       		moveq	#0,d0
00005EE4 101A                       		move.b	(a2)+,d0
00005EE6 ED48                       		lsl.w	#6,d0
00005EE8 0680 00FF D000             		addi.l	#$FFD000,d0
00005EEE 2240                       		movea.l	d0,a1
00005EF0 6100 0000                  		bsr.w	DeleteObject2	; delete object
00005EF4 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00005EF8                            
00005EF8                            Obj17_Delete:				; XREF: Obj17_Index
00005EF8 6100 0000                  		bsr.w	DeleteObject
00005EFC 4E75                       		rts	
00005EFE                            ; ===========================================================================
00005EFE                            
00005EFE                            Obj17_Display:				; XREF: Obj17_Index
00005EFE 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00005F02 6000 0000                  		bra.w	DisplaySprite
00005F06                            ; ===========================================================================
00005F06                            ; ---------------------------------------------------------------------------
00005F06                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00005F06                            ; ---------------------------------------------------------------------------
00005F06                            Map_obj17:
00005F06                            	include "_maps\obj17.asm"
00005F06                            ; ---------------------------------------------------------------------------
00005F06                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00005F06                            ; ---------------------------------------------------------------------------
00005F06 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00005F0A 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00005F0E 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00005F12 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00005F16 01                         byte_7E08:	dc.b 1
00005F17 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00005F1C 01                         byte_7E0E:	dc.b 1
00005F1D F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00005F22 01                         byte_7E14:	dc.b 1
00005F23 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00005F28 01                         byte_7E1A:	dc.b 1
00005F29 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00005F2E 01                         byte_7E20:	dc.b 1
00005F2F 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00005F34 01                         byte_7E26:	dc.b 1
00005F35 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00005F3A 01                         byte_7E2C:	dc.b 1
00005F3B F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00005F40                            		even
00005F40                            		even
00005F40                            
00005F40                            ; ===========================================================================
00005F40                            ; ---------------------------------------------------------------------------
00005F40                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00005F40                            ; ---------------------------------------------------------------------------
00005F40                            
00005F40                            Obj18:					; XREF: Obj_Index
00005F40 7000                       		moveq	#0,d0
00005F42 1028 0024                  		move.b	$24(a0),d0
00005F46 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00005F4A 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00005F4E                            ; ===========================================================================
00005F4E 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00005F50 0000                       		dc.w Obj18_Solid-Obj18_Index
00005F52 0000                       		dc.w Obj18_Action2-Obj18_Index
00005F54 0000                       		dc.w Obj18_Delete-Obj18_Index
00005F56 0000                       		dc.w Obj18_Action-Obj18_Index
00005F58                            ; ===========================================================================
00005F58                            
00005F58                            Obj18_Main:				; XREF: Obj18_Index
00005F58 5428 0024                  		addq.b	#2,$24(a0)
00005F5C 317C 4000 0002             		move.w	#$4000,2(a0)
00005F62 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00005F6A 117C 0020 0019             		move.b	#$20,$19(a0)
00005F70 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00005F76 6600                       		bne.s	Obj18_NotSYZ
00005F78 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00005F80 117C 0020 0019             		move.b	#$20,$19(a0)
00005F86                            
00005F86                            Obj18_NotSYZ:
00005F86 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00005F8C 6600                       		bne.s	Obj18_NotSLZ
00005F8E 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00005F96 117C 0020 0019             		move.b	#$20,$19(a0)
00005F9C 317C 4000 0002             		move.w	#$4000,2(a0)
00005FA2 117C 0003 0028             		move.b	#3,$28(a0)
00005FA8                            
00005FA8                            Obj18_NotSLZ:
00005FA8 117C 0004 0001             		move.b	#4,1(a0)
00005FAE 117C 0004 0018             		move.b	#4,$18(a0)
00005FB4 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00005FBA 3168 000C 0034             		move.w	$C(a0),$34(a0)
00005FC0 3168 0008 0032             		move.w	8(a0),$32(a0)
00005FC6 317C 0080 0026             		move.w	#$80,$26(a0)
00005FCC 7200                       		moveq	#0,d1
00005FCE 1028 0028                  		move.b	$28(a0),d0
00005FD2 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00005FD6 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00005FD8 5201                       		addq.b	#1,d1		; use frame #1
00005FDA 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00005FE0                            
00005FE0                            Obj18_SetFrame:
00005FE0 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00005FE4                            
00005FE4                            Obj18_Solid:				; XREF: Obj18_Index
00005FE4 4A28 0038                  		tst.b	$38(a0)
00005FE8 6700                       		beq.s	loc_7EE0
00005FEA 5928 0038                  		subq.b	#4,$38(a0)
00005FEE                            
00005FEE                            loc_7EE0:
00005FEE 7200                       		moveq	#0,d1
00005FF0 1228 0019                  		move.b	$19(a0),d1
00005FF4 6100 F56C                  		bsr.w	PlatformObject
00005FF8                            
00005FF8                            Obj18_Action:				; XREF: Obj18_Index
00005FF8 6100 0000                  		bsr.w	Obj18_Move
00005FFC 6100 0000                  		bsr.w	Obj18_Nudge
00006000 6100 0000                  		bsr.w	DisplaySprite
00006004 6000 0000                  		bra.w	Obj18_ChkDel
00006008                            ; ===========================================================================
00006008                            
00006008                            Obj18_Action2:				; XREF: Obj18_Index
00006008 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000600E 6700                       		beq.s	loc_7F06
00006010 5828 0038                  		addq.b	#4,$38(a0)
00006014                            
00006014                            loc_7F06:
00006014 7200                       		moveq	#0,d1
00006016 1228 0019                  		move.b	$19(a0),d1
0000601A 6100 F6BA                  		bsr.w	ExitPlatform
0000601E 3F28 0008                  		move.w	8(a0),-(sp)
00006022 6100 0000                  		bsr.w	Obj18_Move
00006026 6100 0000                  		bsr.w	Obj18_Nudge
0000602A 341F                       		move.w	(sp)+,d2
0000602C 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00006030 6100 0000                  		bsr.w	DisplaySprite
00006034 6000 0000                  		bra.w	Obj18_ChkDel
00006038                            
00006038 4E75                       		rts
0000603A                            
0000603A                            ; ---------------------------------------------------------------------------
0000603A                            ; Subroutine to	move platform slightly when you	stand on it
0000603A                            ; ---------------------------------------------------------------------------
0000603A                            
0000603A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000603A                            
0000603A                            
0000603A                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
0000603A 1028 0038                  		move.b	$38(a0),d0
0000603E 6100 C516                  		bsr.w	CalcSine
00006042 323C 0400                  		move.w	#$400,d1
00006046 C1C1                       		muls.w	d1,d0
00006048 4840                       		swap	d0
0000604E 3140 000C                  		move.w	d0,$C(a0)
00006052 4E75                       		rts	
00006054                            ; End of function Obj18_Nudge
00006054                            
00006054                            ; ---------------------------------------------------------------------------
00006054                            ; Subroutine to	move platforms
00006054                            ; ---------------------------------------------------------------------------
00006054                            
00006054                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006054                            
00006054                            
00006054                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00006054 7000                       		moveq	#0,d0
00006056 1028 0028                  		move.b	$28(a0),d0
0000605A 0240 000F                  		andi.w	#$F,d0
00006060 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00006064 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00006068                            ; End of function Obj18_Move
00006068                            
00006068                            ; ===========================================================================
00006068 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
0000606C 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00006070 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00006074 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00006078 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
0000607C 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00006080 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00006082                            ; ===========================================================================
00006082                            
00006082                            Obj18_Type00:
00006082 4E75                       		rts			; platform 00 doesn't move
00006084                            ; ===========================================================================
00006084                            
00006084                            Obj18_Type05:
00006084 3028 0032                  		move.w	$32(a0),d0
00006088 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000608C 4401                       		neg.b	d1		; reverse platform-motion
0000608E 0601 0040                  		addi.b	#$40,d1
00006092 6000                       		bra.s	Obj18_01_Move
00006094                            ; ===========================================================================
00006094                            
00006094                            Obj18_Type01:
00006094 3028 0032                  		move.w	$32(a0),d0
00006098 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000609C 0401 0040                  		subi.b	#$40,d1
000060A0                            
000060A0                            Obj18_01_Move:
000060A0 4881                       		ext.w	d1
000060A4 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000060A8 6000 0000                  		bra.w	Obj18_ChgMotion
000060AC                            ; ===========================================================================
000060AC                            
000060AC                            Obj18_Type0C:
000060AC 3028 0034                  		move.w	$34(a0),d0
000060B0 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000060B4 4401                       		neg.b	d1		; reverse platform-motion
000060B6 0601 0030                  		addi.b	#$30,d1
000060BA 6000                       		bra.s	Obj18_02_Move
000060BC                            ; ===========================================================================
000060BC                            
000060BC                            Obj18_Type0B:
000060BC 3028 0034                  		move.w	$34(a0),d0
000060C0 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000060C4 0401 0030                  		subi.b	#$30,d1
000060C8 6000                       		bra.s	Obj18_02_Move
000060CA                            ; ===========================================================================
000060CA                            
000060CA                            Obj18_Type06:
000060CA 3028 0034                  		move.w	$34(a0),d0
000060CE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000060D2 4401                       		neg.b	d1		; reverse platform-motion
000060D4 0601 0040                  		addi.b	#$40,d1
000060D8 6000                       		bra.s	Obj18_02_Move
000060DA                            ; ===========================================================================
000060DA                            
000060DA                            Obj18_Type02:
000060DA 3028 0034                  		move.w	$34(a0),d0
000060DE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000060E2 0401 0040                  		subi.b	#$40,d1
000060E6                            
000060E6                            Obj18_02_Move:
000060E6 4881                       		ext.w	d1
000060EA 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000060EE 6000 0000                  		bra.w	Obj18_ChgMotion
000060F2                            ; ===========================================================================
000060F2                            
000060F2                            Obj18_Type03:
000060F2 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000060F6 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
000060F8 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000060FE 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00006100 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00006106                            
00006106                            Obj18_03_NoMove:
00006106 4E75                       		rts	
00006108                            ; ===========================================================================
00006108                            
00006108                            Obj18_03_Wait:
00006108 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
0000610C 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
0000610E 317C 0020 003A             		move.w	#32,$3A(a0)
00006114 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00006118 4E75                       		rts	
0000611A                            ; ===========================================================================
0000611A                            
0000611A                            Obj18_Type04:
0000611A 4A68 003A                  		tst.w	$3A(a0)
0000611E 6700                       		beq.s	loc_8048
00006120 5368 003A                  		subq.w	#1,$3A(a0)
00006124 6600                       		bne.s	loc_8048
00006126 0828 0003 0022             		btst	#3,$22(a0)
0000612C 6700                       		beq.s	loc_8042
0000612E 08E9 0001 0022             		bset	#1,$22(a1)
00006134 08A9 0003 0022             		bclr	#3,$22(a1)
0000613A 137C 0002 0024             		move.b	#2,$24(a1)
00006140 08A8 0003 0022             		bclr	#3,$22(a0)
00006146 4228 0025                  		clr.b	$25(a0)
0000614A 3368 0012 0012             		move.w	$12(a0),$12(a1)
00006150                            
00006150                            loc_8042:
00006150 117C 0008 0024             		move.b	#8,$24(a0)
00006156                            
00006156                            loc_8048:
00006156 2628 002C                  		move.l	$2C(a0),d3
0000615A 3028 0012                  		move.w	$12(a0),d0
0000615E 48C0                       		ext.l	d0
00006160 E180                       		asl.l	#8,d0
00006164 2143 002C                  		move.l	d3,$2C(a0)
00006168 0668 0038 0012             		addi.w	#$38,$12(a0)
0000616E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006172 0640 00E0                  		addi.w	#$E0,d0
00006176 B068 002C                  		cmp.w	$2C(a0),d0
0000617A 6400                       		bcc.s	locret_8074
0000617C 117C 0006 0024             		move.b	#6,$24(a0)
00006182                            
00006182                            locret_8074:
00006182 4E75                       		rts	
00006184                            ; ===========================================================================
00006184                            
00006184                            Obj18_Type07:
00006184 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00006188 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
0000618A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000618E 7000                       		moveq	#0,d0
00006190 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00006194 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00006196 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000619A 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
0000619C 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000061A2                            
000061A2                            Obj18_07_NoMove:
000061A2 4E75                       		rts	
000061A4                            ; ===========================================================================
000061A4                            
000061A4                            Obj18_07_Wait:
000061A4 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000061A8 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000061AA 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000061AE 4E75                       		rts	
000061B0                            ; ===========================================================================
000061B0                            
000061B0                            Obj18_Type08:
000061B0 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000061B4 3028 0034                  		move.w	$34(a0),d0
000061B8 0440 0200                  		subi.w	#$200,d0
000061BC B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000061C0 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000061C2 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000061C6                            
000061C6                            Obj18_08_NoStop:
000061C6 4E75                       		rts	
000061C8                            ; ===========================================================================
000061C8                            
000061C8                            Obj18_Type0A:
000061C8 3028 0034                  		move.w	$34(a0),d0
000061CC 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000061D0 0401 0040                  		subi.b	#$40,d1
000061D4 4881                       		ext.w	d1
000061D6 E241                       		asr.w	#1,d1
000061DA 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000061DE                            
000061DE                            Obj18_ChgMotion:
000061DE 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
000061E4 4E75                       		rts	
000061E6                            ; ===========================================================================
000061E6                            
000061E6                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
000061E6 3028 0032                  		move.w	$32(a0),d0
000061EA 0240 FF80                  		andi.w	#$FF80,d0
000061EE 3238 F700                  		move.w	($FFFFF700).w,d1
000061F2 0441 0080                  		subi.w	#$80,d1
000061F6 0241 FF80                  		andi.w	#$FF80,d1
000061FC 0C40 0280                  		cmpi.w	#$280,d0
00006200 6200                       		bhi.s	Obj18_Delete
00006202 4E75                       		rts	
00006204                            ; ===========================================================================
00006204                            
00006204                            Obj18_Delete:				; XREF: Obj18_Index
00006204 6000 0000                  		bra.w	DeleteObject
00006208                            ; ===========================================================================
00006208                            
00006208                            ; ---------------------------------------------------------------------------
00006208                            ; Sprite mappings - GHZ	platforms
00006208                            ; ---------------------------------------------------------------------------
00006208                            Map_obj18:
00006208                            	include "_maps\obj18ghz.asm"
00006208                            ; ---------------------------------------------------------------------------
00006208                            ; Sprite mappings - GHZ	platforms
00006208                            ; ---------------------------------------------------------------------------
00006208 0000                       		dc.w byte_8140-Map_obj18
0000620A 0000                       		dc.w byte_8155-Map_obj18
0000620C 04                         byte_8140:	dc.b 4
0000620D F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00006212 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00006217 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000621C F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00006221 0A                         byte_8155:	dc.b $A
00006222 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00006227 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
0000622C 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00006231 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00006236 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000623B F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00006240 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00006245 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000624A 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000624F 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00006254                            		even
00006254                            		even
00006254                            
00006254                            ; ---------------------------------------------------------------------------
00006254                            ; Sprite mappings - SYZ	platforms
00006254                            ; ---------------------------------------------------------------------------
00006254                            Map_obj18a:
00006254                            	include "_maps\obj18syz.asm"
00006254                            ; ---------------------------------------------------------------------------
00006254                            ; Sprite mappings - SYZ	platforms
00006254                            ; ---------------------------------------------------------------------------
00006254 0000                       		dc.w byte_818A-Map_obj18a
00006256 03                         byte_818A:	dc.b 3
00006257 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000625C F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00006261 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00006266                            		even
00006266                            		even
00006266                            
00006266                            ; ---------------------------------------------------------------------------
00006266                            ; Sprite mappings - SLZ	platforms
00006266                            ; ---------------------------------------------------------------------------
00006266                            Map_obj18b:
00006266                            	include "_maps\obj18slz.asm"
00006266                            ; ---------------------------------------------------------------------------
00006266                            ; Sprite mappings - SLZ	platforms
00006266                            ; ---------------------------------------------------------------------------
00006266 0000                       		dc.w byte_819C-Map_obj18b
00006268 02                         byte_819C:	dc.b 2
00006269 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
0000626E F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00006274 00                         		even
00006274 00                         		even
00006274                            
00006274                            ; ===========================================================================
00006274                            ; ===========================================================================
00006274                            ; ---------------------------------------------------------------------------
00006274                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00006274                            ; ---------------------------------------------------------------------------
00006274                            Map_obj48:
00006274                            	include "_maps\obj48.asm"
00006274                            ; ---------------------------------------------------------------------------
00006274                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00006274                            ; ---------------------------------------------------------------------------
00006274 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00006278 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
0000627C 06                         byte_81B2:	dc.b 6
0000627D F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00006282 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00006287 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000628C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00006291 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00006296 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000629B 04                         byte_81D1:	dc.b 4
0000629C E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
000062A1 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000062A6 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
000062AB 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000062B0 04                         byte_81E6:	dc.b 4
000062B1 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000062B6 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000062BB 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000062C0 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000062C5 04                         byte_81FB:	dc.b 4
000062C6 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000062CB E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000062D0 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000062D5 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000062DA                            		even
000062DA                            		even
000062DA                            
000062DA                            ; ===========================================================================
000062DA                            ; ---------------------------------------------------------------------------
000062DA                            ; Object 1A - GHZ collapsing ledge
000062DA                            ; ---------------------------------------------------------------------------
000062DA                            
000062DA                            Obj1A:					; XREF: Obj_Index
000062DA 7000                       		moveq	#0,d0
000062DC 1028 0024                  		move.b	$24(a0),d0
000062E0 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000062E4 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000062E8                            ; ===========================================================================
000062E8 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000062EC 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000062F0 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
000062F4                            ; ===========================================================================
000062F4                            
000062F4                            Obj1A_Main:				; XREF: Obj1A_Index
000062F4 5428 0024                  		addq.b	#2,$24(a0)
000062F8 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00006300 317C 4000 0002             		move.w	#$4000,2(a0)
00006306 0028 0004 0001             		ori.b	#4,1(a0)
0000630C 117C 0004 0018             		move.b	#4,$18(a0)
00006312 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00006318 117C 0064 0019             		move.b	#$64,$19(a0)
0000631E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00006324 117C 0038 0016             		move.b	#$38,$16(a0)
0000632A 08E8 0004 0001             		bset	#4,1(a0)
00006330                            
00006330                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00006330 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00006334 6700                       		beq.s	Obj1A_Slope	; if not, branch
00006336 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
0000633A 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
0000633E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00006342                            
00006342                            Obj1A_Slope:
00006342 323C 0030                  		move.w	#$30,d1
00006346 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000634C 6100 F2E8                  		bsr.w	SlopeObject
00006350 6000 0000                  		bra.w	MarkObjGone
00006354                            ; ===========================================================================
00006354                            
00006354                            Obj1A_Touch:				; XREF: Obj1A_Index
00006354 4A28 0038                  		tst.b	$38(a0)
00006358 6700 0000                  		beq.w	loc_847A
0000635C 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00006362 5328 0038                  		subq.b	#1,$38(a0)
00006366                            
00006366                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006366                            
00006366                            
00006366                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00006366 323C 0030                  		move.w	#$30,d1
0000636A 6100 F36A                  		bsr.w	ExitPlatform
0000636E 323C 0030                  		move.w	#$30,d1
00006372 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00006378 3428 0008                  		move.w	8(a0),d2
0000637C 6100 0000                  		bsr.w	SlopeObject2
00006380 6000 0000                  		bra.w	MarkObjGone
00006384                            ; End of function Obj1A_WalkOff
00006384                            
00006384                            ; ===========================================================================
00006384                            
00006384                            Obj1A_Display:				; XREF: Obj1A_Index
00006384 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00006388 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000638A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000638E 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00006392 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00006396 6000 0000                  		bra.w	DisplaySprite
0000639A                            ; ===========================================================================
0000639A                            
0000639A                            loc_82D0:				; XREF: Obj1A_Display
0000639A 5328 0038                  		subq.b	#1,$38(a0)
0000639E 6100 FFC6                  		bsr.w	Obj1A_WalkOff
000063A2 43F8 D000                  		lea	($FFFFD000).w,a1
000063A6 0829 0003 0022             		btst	#3,$22(a1)
000063AC 6700                       		beq.s	loc_82FC
000063AE 4A28 0038                  		tst.b	$38(a0)
000063B2 6600                       		bne.s	locret_8308
000063B4 08A9 0003 0022             		bclr	#3,$22(a1)
000063BA 08A9 0005 0022             		bclr	#5,$22(a1)
000063C0 137C 0001 001D             		move.b	#1,$1D(a1)
000063C6                            
000063C6                            loc_82FC:
000063C6 117C 0000 003A             		move.b	#0,$3A(a0)
000063CC 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
000063D2                            
000063D2                            locret_8308:
000063D2 4E75                       		rts	
000063D4                            ; ===========================================================================
000063D4                            
000063D4                            Obj1A_TimeZero:				; XREF: Obj1A_Display
000063D4 6100 0000                  		bsr.w	ObjectFall
000063D8 6100 0000                  		bsr.w	DisplaySprite
000063DC 4A28 0001                  		tst.b	1(a0)
000063E0 6A00                       		bpl.s	Obj1A_Delete
000063E2 4E75                       		rts	
000063E4                            ; ===========================================================================
000063E4                            
000063E4                            Obj1A_Delete:				; XREF: Obj1A_Index
000063E4 6100 0000                  		bsr.w	DeleteObject
000063E8 4E75                       		rts	
000063EA                            ; ===========================================================================
000063EA                            ; ---------------------------------------------------------------------------
000063EA                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000063EA                            ; ---------------------------------------------------------------------------
000063EA                            
000063EA                            Obj53:					; XREF: Obj_Index
000063EA 7000                       		moveq	#0,d0
000063EC 1028 0024                  		move.b	$24(a0),d0
000063F0 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
000063F4 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
000063F8                            ; ===========================================================================
000063F8 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
000063FC 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00006400 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00006404                            ; ===========================================================================
00006404                            
00006404                            Obj53_Main:				; XREF: Obj53_Index
00006404 5428 0024                  		addq.b	#2,$24(a0)
00006408 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00006410 317C 42B8 0002             		move.w	#$42B8,2(a0)
00006416 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000641C 6600                       		bne.s	Obj53_NotSLZ
0000641E 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00006424 5428 001A                  		addq.b	#2,$1A(a0)
00006428                            
00006428                            Obj53_NotSLZ:
00006428 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000642E 6600                       		bne.s	Obj53_NotSBZ
00006430 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00006436                            
00006436                            Obj53_NotSBZ:
00006436 0028 0004 0001             		ori.b	#4,1(a0)
0000643C 117C 0004 0018             		move.b	#4,$18(a0)
00006442 117C 0007 0038             		move.b	#7,$38(a0)
00006448 117C 0044 0019             		move.b	#$44,$19(a0)
0000644E                            
0000644E                            Obj53_ChkTouch:				; XREF: Obj53_Index
0000644E 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00006452 6700                       		beq.s	Obj53_Solid	; if not, branch
00006454 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00006458 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
0000645C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00006460                            
00006460                            Obj53_Solid:
00006460 323C 0020                  		move.w	#$20,d1
00006464 6100 F0FC                  		bsr.w	PlatformObject
00006468 4A28 0028                  		tst.b	$28(a0)
0000646C 6A00                       		bpl.s	Obj53_MarkAsGone
0000646E 0829 0003 0022             		btst	#3,$22(a1)
00006474 6700                       		beq.s	Obj53_MarkAsGone
00006476 08A8 0000 0001             		bclr	#0,1(a0)
0000647C 3029 0008                  		move.w	8(a1),d0
00006484 6400                       		bcc.s	Obj53_MarkAsGone
00006486 08E8 0000 0001             		bset	#0,1(a0)
0000648C                            
0000648C                            Obj53_MarkAsGone:
0000648C 6000 0000                  		bra.w	MarkObjGone
00006490                            ; ===========================================================================
00006490                            
00006490                            Obj53_Touch:				; XREF: Obj53_Index
00006490 4A28 0038                  		tst.b	$38(a0)
00006494 6700 0000                  		beq.w	loc_8458
00006498 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000649E 5328 0038                  		subq.b	#1,$38(a0)
000064A2                            
000064A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000064A2                            
000064A2                            
000064A2                            Obj53_WalkOff:				; XREF: Obj53_Index
000064A2 323C 0020                  		move.w	#$20,d1
000064A6 6100 F22E                  		bsr.w	ExitPlatform
000064AA 3428 0008                  		move.w	8(a0),d2
000064AE 6100 F790                  		bsr.w	MvSonicOnPtfm2
000064B2 6000 0000                  		bra.w	MarkObjGone
000064B6                            ; End of function Obj53_WalkOff
000064B6                            
000064B6                            ; ===========================================================================
000064B6                            
000064B6                            Obj53_Display:				; XREF: Obj53_Index
000064B6 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000064BA 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
000064BC 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000064C0 6600 0000                  		bne.w	loc_8402	; if yes, branch
000064C4 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000064C8 6000 0000                  		bra.w	DisplaySprite
000064CC                            ; ===========================================================================
000064CC                            
000064CC                            loc_8402:
000064CC 5328 0038                  		subq.b	#1,$38(a0)
000064D0 6100 FFD0                  		bsr.w	Obj53_WalkOff
000064D4 43F8 D000                  		lea	($FFFFD000).w,a1
000064D8 0829 0003 0022             		btst	#3,$22(a1)
000064DE 6700                       		beq.s	loc_842E
000064E0 4A28 0038                  		tst.b	$38(a0)
000064E4 6600                       		bne.s	locret_843A
000064E6 08A9 0003 0022             		bclr	#3,$22(a1)
000064EC 08A9 0005 0022             		bclr	#5,$22(a1)
000064F2 137C 0001 001D             		move.b	#1,$1D(a1)
000064F8                            
000064F8                            loc_842E:
000064F8 117C 0000 003A             		move.b	#0,$3A(a0)
000064FE 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00006504                            
00006504                            locret_843A:
00006504 4E75                       		rts	
00006506                            ; ===========================================================================
00006506                            
00006506                            Obj53_TimeZero:				; XREF: Obj53_Display
00006506 6100 0000                  		bsr.w	ObjectFall
0000650A 6100 0000                  		bsr.w	DisplaySprite
0000650E 4A28 0001                  		tst.b	1(a0)
00006512 6A00                       		bpl.s	Obj53_Delete
00006514 4E75                       		rts	
00006516                            ; ===========================================================================
00006516                            
00006516                            Obj53_Delete:				; XREF: Obj53_Index
00006516 6100 0000                  		bsr.w	DeleteObject
0000651A 4E75                       		rts	
0000651C                            ; ===========================================================================
0000651C                            
0000651C                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
0000651C 117C 0000 003A             		move.b	#0,$3A(a0)
00006522                            
00006522                            loc_8458:				; XREF: Obj53_Touch
00006522 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00006528 0828 0000 0028             		btst	#0,$28(a0)
0000652E 6700                       		beq.s	loc_846C
00006530 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00006536                            
00006536                            loc_846C:
00006536 7207                       		moveq	#7,d1
00006538 5228 001A                  		addq.b	#1,$1A(a0)
0000653C 6000                       		bra.s	loc_8486
0000653E                            ; ===========================================================================
0000653E                            
0000653E                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
0000653E 117C 0000 003A             		move.b	#0,$3A(a0)
00006544                            
00006544                            loc_847A:				; XREF: Obj1A_Touch
00006544 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
0000654A 7218                       		moveq	#$18,d1
0000654C 5428 001A                  		addq.b	#2,$1A(a0)
00006550                            
00006550                            loc_8486:				; XREF: Obj53_Collapse
00006550 7000                       		moveq	#0,d0
00006552 1028 001A                  		move.b	$1A(a0),d0
00006558 2668 0004                  		movea.l	4(a0),a3
0000655C D6F3 0000                  		adda.w	(a3,d0.w),a3
00006560 524B                       		addq.w	#1,a3
00006562 08E8 0005 0001             		bset	#5,1(a0)
00006568 1810                       		move.b	0(a0),d4
0000656A 1A28 0001                  		move.b	1(a0),d5
0000656E 2248                       		movea.l	a0,a1
00006570 6000                       		bra.s	loc_84B2
00006572                            ; ===========================================================================
00006572                            
00006572                            loc_84AA:
00006572 6100 0000                  		bsr.w	SingleObjLoad
00006576 6600                       		bne.s	loc_84F2
00006578 5A4B                       		addq.w	#5,a3
0000657A                            
0000657A                            loc_84B2:
0000657A 137C 0006 0024             		move.b	#6,$24(a1)
00006580 1284                       		move.b	d4,0(a1)
00006582 234B 0004                  		move.l	a3,4(a1)
00006586 1345 0001                  		move.b	d5,1(a1)
0000658A 3368 0008 0008             		move.w	8(a0),8(a1)
00006590 3368 000C 000C             		move.w	$C(a0),$C(a1)
00006596 3368 0002 0002             		move.w	2(a0),2(a1)
0000659C 1368 0018 0018             		move.b	$18(a0),$18(a1)
000065A2 1368 0019 0019             		move.b	$19(a0),$19(a1)
000065A8 135C 0038                  		move.b	(a4)+,$38(a1)
000065AC B3C8                       		cmpa.l	a0,a1
000065AE 6400                       		bcc.s	loc_84EE
000065B0 6100 0000                  		bsr.w	DisplaySprite2
000065B4                            
000065B4                            loc_84EE:
000065B4 51C9 FFBC                  		dbf	d1,loc_84AA
000065B8                            
000065B8                            loc_84F2:
000065B8 6100 0000                  		bsr.w	DisplaySprite
000065BC 303C 00B9                  		move.w	#$B9,d0
000065C0 4EF9 0000 1020             		jmp	(PlaySound_Special).l ;	play collapsing	sound
000065C6                            ; ===========================================================================
000065C6                            ; ---------------------------------------------------------------------------
000065C6                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
000065C6                            ; ---------------------------------------------------------------------------
000065C6 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
000065D6 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
000065E0 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
000065E8 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
000065F0                            
000065F0                            ; ---------------------------------------------------------------------------
000065F0                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
000065F0                            ; ---------------------------------------------------------------------------
000065F0                            
000065F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065F0                            
000065F0                            
000065F0                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
000065F0 43F8 D000                  		lea	($FFFFD000).w,a1
000065F4 0829 0003 0022             		btst	#3,$22(a1)
000065FA 6700                       		beq.s	locret_856E
000065FC 3029 0008                  		move.w	8(a1),d0
00006606 E248                       		lsr.w	#1,d0
00006608 0828 0000 0001             		btst	#0,1(a0)
0000660E 6700                       		beq.s	loc_854E
00006610 4640                       		not.w	d0
00006614                            
00006614                            loc_854E:
00006614 7200                       		moveq	#0,d1
00006616 1232 0000                  		move.b	(a2,d0.w),d1
0000661A 3028 000C                  		move.w	$C(a0),d0
00006620 7200                       		moveq	#0,d1
00006622 1229 0016                  		move.b	$16(a1),d1
00006628 3340 000C                  		move.w	d0,$C(a1)
00006634                            
00006634                            locret_856E:
00006634 4E75                       		rts	
00006636                            ; End of function SlopeObject2
00006636                            
00006636                            ; ===========================================================================
00006636                            ; ---------------------------------------------------------------------------
00006636                            ; Collision data for GHZ collapsing ledge
00006636                            ; ---------------------------------------------------------------------------
00006636                            Obj1A_SlopeData:
00006636                            		incbin	misc\ghzledge.bin
00006666                            		even
00006666                            
00006666                            ; ---------------------------------------------------------------------------
00006666                            ; Sprite mappings - GHZ	collapsing ledge
00006666                            ; ---------------------------------------------------------------------------
00006666                            Map_obj1A:
00006666                            	include "_maps\obj1A.asm"
00006666                            ; ---------------------------------------------------------------------------
00006666                            ; Sprite mappings - GHZ	collapsing ledge
00006666                            ; ---------------------------------------------------------------------------
00006666 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
0000666A 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
0000666E 10                         byte_85A8:	dc.b $10
0000666F C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00006674 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00006679 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000667E E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00006683 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00006688 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000668D F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00006692 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00006697 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000669C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000066A1 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000066A6 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000066AB 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000066B0 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000066B5 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000066BA 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000066BF 10                         byte_85F9:	dc.b $10
000066C0 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
000066C5 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000066CA E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000066CF E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000066D4 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000066D9 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000066DE F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000066E3 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000066E8 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000066ED F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000066F2 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000066F7 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000066FC 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00006701 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00006706 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000670B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00006710 19                         byte_864A:	dc.b $19
00006711 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00006716 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000671B D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00006720 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00006725 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000672A E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000672F E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00006734 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00006739 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000673E D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00006743 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00006748 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000674D F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00006752 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00006757 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000675C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00006761 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00006766 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000676B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00006770 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00006775 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000677A 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000677F 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00006784 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00006789 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000678E 19                         byte_86C8:	dc.b $19
0000678F C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00006794 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00006799 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000679E D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000067A3 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
000067A8 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000067AD E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000067B2 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000067B7 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000067BC D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000067C1 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000067C6 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000067CB F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
000067D0 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
000067D5 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000067DA F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000067DF 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000067E4 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000067E9 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000067EE 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000067F3 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000067F8 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000067FD 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00006802 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00006807 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000680C                            		even
0000680C                            		even
0000680C                            
0000680C                            ; ---------------------------------------------------------------------------
0000680C                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000680C                            ; ---------------------------------------------------------------------------
0000680C                            Map_obj53:
0000680C                            	include "_maps\obj53.asm"
0000680C                            ; ---------------------------------------------------------------------------
0000680C                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000680C                            ; ---------------------------------------------------------------------------
0000680C 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00006810 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00006814 04                         byte_874E:	dc.b 4
00006815 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000681A 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
0000681F F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00006824 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00006829 08                         byte_8763:	dc.b 8
0000682A F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000682F F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00006834 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00006839 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000683E 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00006843 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00006848 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000684D 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00006852 04                         byte_878C:	dc.b 4
00006853 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00006858 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000685D F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00006862 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00006867 08                         byte_87A1:	dc.b 8
00006868 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000686D F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00006872 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00006877 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000687C 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00006881 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00006886 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000688B 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00006890                            		even
00006890                            		even
00006890                            
00006890                            ; ===========================================================================
00006890                            ; ---------------------------------------------------------------------------
00006890                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00006890                            ; ---------------------------------------------------------------------------
00006890                            
00006890                            Obj1C:					; XREF: Obj_Index
00006890 7000                       		moveq	#0,d0
00006892 1028 0024                  		move.b	$24(a0),d0
00006896 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
0000689A 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
0000689E                            ; ===========================================================================
0000689E 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
000068A0 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
000068A2                            ; ===========================================================================
000068A2                            
000068A2                            Obj1C_Main:				; XREF: Obj1C_Index
000068A2 5428 0024                  		addq.b	#2,$24(a0)
000068A6 7000                       		moveq	#0,d0
000068A8 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
000068AC C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
000068B0 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
000068B4 2159 0004                  		move.l	(a1)+,4(a0)
000068B8 3159 0002                  		move.w	(a1)+,2(a0)
000068BC 0028 0004 0001             		ori.b	#4,1(a0)
000068C2 1159 001A                  		move.b	(a1)+,$1A(a0)
000068C6 1159 0019                  		move.b	(a1)+,$19(a0)
000068CA 1159 0018                  		move.b	(a1)+,$18(a0)
000068CE 1159 0020                  		move.b	(a1)+,$20(a0)
000068D2                            
000068D2                            Obj1C_ChkDel:				; XREF: Obj1C_Index
000068D2 3028 0008                  		move.w	8(a0),d0
000068D6 0240 FF80                  		andi.w	#$FF80,d0
000068DA 3238 F700                  		move.w	($FFFFF700).w,d1
000068DE 0441 0080                  		subi.w	#$80,d1
000068E2 0241 FF80                  		andi.w	#$FF80,d1
000068E8 0C40 0280                  		cmpi.w	#$280,d0
000068EC 6200 0000                  		bhi.w	DeleteObject
000068F0 6000 0000                  		bra.w	DisplaySprite
000068F4                            ; ===========================================================================
000068F4                            ; ---------------------------------------------------------------------------
000068F4                            ; Variables for	object $1C are stored in an array
000068F4                            ; ---------------------------------------------------------------------------
000068F4 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
000068F8 44D8                       		dc.w $44D8		; VRAM setting
000068FA 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
000068FE 0000 0000                  		dc.l Map_obj1C
00006902 44D8                       		dc.w $44D8
00006904 0008 0200                  		dc.b 0,	8, 2, 0
00006908 0000 0000                  		dc.l Map_obj1C
0000690C 44D8                       		dc.w $44D8
0000690E 0008 0200                  		dc.b 0,	8, 2, 0
00006912 0000 5A4A                  		dc.l Map_obj11
00006916 438E                       		dc.w $438E
00006918 0110 0100                  		dc.b 1,	$10, 1,	0
0000691C                            ; ---------------------------------------------------------------------------
0000691C                            ; Sprite mappings - SLZ	lava thrower
0000691C                            ; ---------------------------------------------------------------------------
0000691C                            Map_obj1C:
0000691C                            	include "_maps\obj1C.asm"
0000691C                            ; ---------------------------------------------------------------------------
0000691C                            ; Sprite mappings - SLZ	lava thrower
0000691C                            ; ---------------------------------------------------------------------------
0000691C 0000                       		dc.w byte_8858-Map_obj1C
0000691E 01                         byte_8858:	dc.b 1
0000691F F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00006924                            		even
00006924                            		even
00006924                            
00006924                            ; ===========================================================================
00006924                            ; ---------------------------------------------------------------------------
00006924                            ; Object 1D - switch that activates when Sonic touches it
00006924                            ; (this	is not used anywhere in	the game)
00006924                            ; ---------------------------------------------------------------------------
00006924                            
00006924                            Obj1D:					; XREF: Obj_Index
00006924 7000                       		moveq	#0,d0
00006926 1028 0024                  		move.b	$24(a0),d0
0000692A 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
0000692E 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00006932                            ; ===========================================================================
00006932 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00006934 0000                       		dc.w Obj1D_Action-Obj1D_Index
00006936 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00006938                            ; ===========================================================================
00006938                            
00006938                            Obj1D_Main:				; XREF: Obj1D_Index
00006938 5428 0024                  		addq.b	#2,$24(a0)
0000693C 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00006944 317C 4000 0002             		move.w	#$4000,2(a0)
0000694A 117C 0004 0001             		move.b	#4,1(a0)
00006950 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00006956 117C 0010 0019             		move.b	#$10,$19(a0)
0000695C 117C 0005 0018             		move.b	#5,$18(a0)
00006962                            
00006962                            Obj1D_Action:				; XREF: Obj1D_Index
00006962 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00006968 323C 0010                  		move.w	#$10,d1
0000696C 6100 0000                  		bsr.w	Obj1D_ChkTouch
00006970 6700                       		beq.s	Obj1D_ChkDel
00006972 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00006976 7001                       		moveq	#1,d0
00006978 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
0000697C                            
0000697C                            Obj1D_ChkDel:
0000697C 6100 0000                  		bsr.w	DisplaySprite
00006980 3028 0008                  		move.w	8(a0),d0
00006984 0240 FF80                  		andi.w	#$FF80,d0
00006988 3238 F700                  		move.w	($FFFFF700).w,d1
0000698C 0441 0080                  		subi.w	#$80,d1
00006990 0241 FF80                  		andi.w	#$FF80,d1
00006996 0C40 0280                  		cmpi.w	#$280,d0
0000699A 6200 0000                  		bhi.w	Obj1D_Delete
0000699E 4E75                       		rts	
000069A0                            ; ===========================================================================
000069A0                            
000069A0                            Obj1D_Delete:				; XREF: Obj1D_Index
000069A0 6100 0000                  		bsr.w	DeleteObject
000069A4 4E75                       		rts	
000069A6                            ; ---------------------------------------------------------------------------
000069A6                            ; Subroutine to	check if Sonic touches the object
000069A6                            ; ---------------------------------------------------------------------------
000069A6                            
000069A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069A6                            
000069A6                            
000069A6                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
000069A6 43F8 D000                  		lea	($FFFFD000).w,a1
000069AA 3029 0008                  		move.w	8(a1),d0
000069B4 6B00                       		bmi.s	loc_8918
000069B8 B041                       		cmp.w	d1,d0
000069BA 6400                       		bcc.s	loc_8918
000069BC 3429 000C                  		move.w	$C(a1),d2
000069C0 1229 0016                  		move.b	$16(a1),d1
000069C4 4881                       		ext.w	d1
000069C8 3028 000C                  		move.w	$C(a0),d0
000069CC 0440 0010                  		subi.w	#$10,d0
000069D2 6200                       		bhi.s	loc_8918
000069D4 0C40 FFF0                  		cmpi.w	#-$10,d0
000069D8 6500                       		bcs.s	loc_8918
000069DA 70FF                       		moveq	#-1,d0
000069DC 4E75                       		rts	
000069DE                            ; ===========================================================================
000069DE                            
000069DE                            loc_8918:
000069DE 7000                       		moveq	#0,d0
000069E0 4E75                       		rts	
000069E2                            ; End of function Obj1D_ChkTouch
000069E2                            
000069E2                            ; ===========================================================================
000069E2                            ; ---------------------------------------------------------------------------
000069E2                            ; Sprite mappings - object 1D
000069E2                            ; ---------------------------------------------------------------------------
000069E2                            Map_obj1D:
000069E2                            	include "_maps\obj1D.asm"
000069E2                            ; ---------------------------------------------------------------------------
000069E2                            ; Sprite mappings - object 1D
000069E2                            ; ---------------------------------------------------------------------------
000069E2 0000                       		dc.w byte_891E-Map_obj1D
000069E4 04                         byte_891E:	dc.b 4
000069E5 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
000069EA 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
000069EF E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
000069F4 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
000069FA 00                         		even
000069FA 00                         		even
000069FA                            
000069FA                            ; ===========================================================================
000069FA                            ; ---------------------------------------------------------------------------
000069FA                            ; Object 2A - doors (SBZ)
000069FA                            ; ---------------------------------------------------------------------------
000069FA                            
000069FA                            Obj2A:					; XREF: Obj_Index
000069FA 7000                       		moveq	#0,d0
000069FC 1028 0024                  		move.b	$24(a0),d0
00006A00 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00006A04 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00006A08                            ; ===========================================================================
00006A08 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00006A0A 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00006A0C                            ; ===========================================================================
00006A0C                            
00006A0C                            Obj2A_Main:				; XREF: Obj2A_Index
00006A0C 5428 0024                  		addq.b	#2,$24(a0)
00006A10 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00006A18 317C 42E8 0002             		move.w	#$42E8,2(a0)
00006A1E 0028 0004 0001             		ori.b	#4,1(a0)
00006A24 117C 0008 0019             		move.b	#8,$19(a0)
00006A2A 117C 0004 0018             		move.b	#4,$18(a0)
00006A30                            
00006A30                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00006A30 323C 0040                  		move.w	#$40,d1
00006A34 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00006A38 3038 D008                  		move.w	($FFFFD008).w,d0
00006A3E B068 0008                  		cmp.w	8(a0),d0
00006A42 6500                       		bcs.s	Obj2A_Animate
00006A48 B068 0008                  		cmp.w	8(a0),d0
00006A4C 6400                       		bcc.s	Obj2A_Animate
00006A50 B068 0008                  		cmp.w	8(a0),d0
00006A54 6400                       		bcc.s	loc_899A
00006A56 0828 0000 0022             		btst	#0,$22(a0)
00006A5C 6600                       		bne.s	Obj2A_Animate
00006A5E 6000                       		bra.s	Obj2A_Open
00006A60                            ; ===========================================================================
00006A60                            
00006A60                            loc_899A:				; XREF: Obj2A_OpenShut
00006A60 0828 0000 0022             		btst	#0,$22(a0)
00006A66 6700                       		beq.s	Obj2A_Animate
00006A68                            
00006A68                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00006A68 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00006A6E                            
00006A6E                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00006A6E 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00006A74 6100 0000                  		bsr.w	AnimateSprite
00006A78 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00006A7C 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00006A7E 323C 0011                  		move.w	#$11,d1
00006A82 343C 0020                  		move.w	#$20,d2
00006A86 3602                       		move.w	d2,d3
00006A88 5243                       		addq.w	#1,d3
00006A8A 3828 0008                  		move.w	8(a0),d4
00006A8E 6100 0000                  		bsr.w	SolidObject
00006A92                            
00006A92                            Obj2A_MarkAsUsed:
00006A92 6000 0000                  		bra.w	MarkObjGone
00006A96                            ; ===========================================================================
00006A96                            Ani_obj2A:
00006A96                            	include "_anim\obj2A.asm"
00006A96                            ; ---------------------------------------------------------------------------
00006A96                            ; Animation script - doors (SBZ)
00006A96                            ; ---------------------------------------------------------------------------
00006A96 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00006A98 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00006A9A 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00006AA6 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00006AB2                            		even
00006AB2                            		even
00006AB2                            
00006AB2                            ; ---------------------------------------------------------------------------
00006AB2                            ; Sprite mappings - doors (SBZ)
00006AB2                            ; ---------------------------------------------------------------------------
00006AB2                            Map_obj2A:
00006AB2                            	include "_maps\obj2A.asm"
00006AB2                            ; ---------------------------------------------------------------------------
00006AB2                            ; Sprite mappings - doors (SBZ)
00006AB2                            ; ---------------------------------------------------------------------------
00006AB2 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00006AB6 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00006ABA 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00006ABE 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00006AC2 0000                       		dc.w byte_8A56-Map_obj2A
00006AC4 02                         byte_89FE:	dc.b 2
00006AC5 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00006ACA 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00006ACF 02                         byte_8A09:	dc.b 2
00006AD0 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00006AD5 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00006ADA 02                         byte_8A14:	dc.b 2
00006ADB D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00006AE0 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00006AE5 02                         byte_8A1F:	dc.b 2
00006AE6 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00006AEB 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00006AF0 02                         byte_8A2A:	dc.b 2
00006AF1 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00006AF6 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00006AFB 02                         byte_8A35:	dc.b 2
00006AFC CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00006B01 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00006B06 02                         byte_8A40:	dc.b 2
00006B07 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00006B0C 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00006B11 02                         byte_8A4B:	dc.b 2
00006B12 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00006B17 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00006B1C 02                         byte_8A56:	dc.b 2
00006B1D C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00006B22 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00006B28 00                         		even
00006B28 00                         		even
00006B28                            
00006B28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B28                            
00006B28                            
00006B28                            Obj44_SolidWall:			; XREF: Obj44_Solid
00006B28 6100 0000                  		bsr.w	Obj44_SolidWall2
00006B2C 6700                       		beq.s	loc_8AA8
00006B2E 6B00 0000                  		bmi.w	loc_8AC4
00006B32 4A40                       		tst.w	d0
00006B34 6700 0000                  		beq.w	loc_8A92
00006B38 6B00                       		bmi.s	loc_8A7C
00006B3A 4A69 0010                  		tst.w	$10(a1)
00006B3E 6B00                       		bmi.s	loc_8A92
00006B40 6000                       		bra.s	loc_8A82
00006B42                            ; ===========================================================================
00006B42                            
00006B42                            loc_8A7C:
00006B42 4A69 0010                  		tst.w	$10(a1)
00006B46 6A00                       		bpl.s	loc_8A92
00006B48                            
00006B48                            loc_8A82:
00006B4C 337C 0000 0014             		move.w	#0,$14(a1)
00006B52 337C 0000 0010             		move.w	#0,$10(a1)
00006B58                            
00006B58                            loc_8A92:
00006B58 0829 0001 0022             		btst	#1,$22(a1)
00006B5E 6600                       		bne.s	loc_8AB6
00006B60 08E9 0005 0022             		bset	#5,$22(a1)
00006B66 08E8 0005 0022             		bset	#5,$22(a0)
00006B6C 4E75                       		rts	
00006B6E                            ; ===========================================================================
00006B6E                            
00006B6E                            loc_8AA8:
00006B6E 0828 0005 0022             		btst	#5,$22(a0)
00006B74 6700                       		beq.s	locret_8AC2
00006B76 337C 0001 001C             		move.w	#1,$1C(a1)
00006B7C                            
00006B7C                            loc_8AB6:
00006B7C 08A8 0005 0022             		bclr	#5,$22(a0)
00006B82 08A9 0005 0022             		bclr	#5,$22(a1)
00006B88                            
00006B88                            locret_8AC2:
00006B88 4E75                       		rts	
00006B8A                            ; ===========================================================================
00006B8A                            
00006B8A                            loc_8AC4:
00006B8A 4A69 0012                  		tst.w	$12(a1)
00006B8E 6A00                       		bpl.s	locret_8AD8
00006B90 4A43                       		tst.w	d3
00006B92 6A00                       		bpl.s	locret_8AD8
00006B98 337C 0000 0012             		move.w	#0,$12(a1)
00006B9E                            
00006B9E                            locret_8AD8:
00006B9E 4E75                       		rts	
00006BA0                            ; End of function Obj44_SolidWall
00006BA0                            
00006BA0                            
00006BA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BA0                            
00006BA0                            
00006BA0                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00006BA0 43F8 D000                  		lea	($FFFFD000).w,a1
00006BA4 3029 0008                  		move.w	8(a1),d0
00006BAE 6B00                       		bmi.s	loc_8B48
00006BB0 3601                       		move.w	d1,d3
00006BB4 B043                       		cmp.w	d3,d0
00006BB6 6200                       		bhi.s	loc_8B48
00006BB8 1629 0016                  		move.b	$16(a1),d3
00006BBC 4883                       		ext.w	d3
00006BC0 3629 000C                  		move.w	$C(a1),d3
00006BCA 6B00                       		bmi.s	loc_8B48
00006BCC 3802                       		move.w	d2,d4
00006BD0 B644                       		cmp.w	d4,d3
00006BD2 6400                       		bcc.s	loc_8B48
00006BD4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00006BD8 6B00                       		bmi.s	loc_8B48
00006BDA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00006BE0 6400                       		bcc.s	loc_8B48
00006BE2 4A78 FE08                  		tst.w	($FFFFFE08).w
00006BE6 6600                       		bne.s	loc_8B48
00006BE8 3A00                       		move.w	d0,d5
00006BEA B240                       		cmp.w	d0,d1
00006BEC 6400                       		bcc.s	loc_8B30
00006BF2 3A00                       		move.w	d0,d5
00006BF4 4445                       		neg.w	d5
00006BF6                            
00006BF6                            loc_8B30:
00006BF6 3203                       		move.w	d3,d1
00006BF8 B443                       		cmp.w	d3,d2
00006BFA 6400                       		bcc.s	loc_8B3C
00006BFE 3203                       		move.w	d3,d1
00006C00 4441                       		neg.w	d1
00006C02                            
00006C02                            loc_8B3C:
00006C02 BA41                       		cmp.w	d1,d5
00006C04 6200                       		bhi.s	loc_8B44
00006C06 7801                       		moveq	#1,d4
00006C08 4E75                       		rts	
00006C0A                            ; ===========================================================================
00006C0A                            
00006C0A                            loc_8B44:
00006C0A 78FF                       		moveq	#-1,d4
00006C0C 4E75                       		rts	
00006C0E                            ; ===========================================================================
00006C0E                            
00006C0E                            loc_8B48:
00006C0E 7800                       		moveq	#0,d4
00006C10 4E75                       		rts	
00006C12                            ; End of function Obj44_SolidWall2
00006C12                            
00006C12                            ; ===========================================================================
00006C12                            ; ---------------------------------------------------------------------------
00006C12                            ; Object 1E - Ball Hog enemy (SBZ)
00006C12                            ; ---------------------------------------------------------------------------
00006C12                            
00006C12                            Obj1E:					; XREF: Obj_Index
00006C12 7000                       		moveq	#0,d0
00006C14 1028 0024                  		move.b	$24(a0),d0
00006C18 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00006C1C 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00006C20                            ; ===========================================================================
00006C20 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00006C22 0000                       		dc.w Obj1E_Action-Obj1E_Index
00006C24                            ; ===========================================================================
00006C24                            
00006C24                            Obj1E_Main:				; XREF: Obj1E_Index
00006C24 117C 0013 0016             		move.b	#$13,$16(a0)
00006C2A 117C 0008 0017             		move.b	#8,$17(a0)
00006C30 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00006C38 317C 2302 0002             		move.w	#$2302,2(a0)
00006C3E 117C 0004 0001             		move.b	#4,1(a0)
00006C44 117C 0004 0018             		move.b	#4,$18(a0)
00006C4A 117C 0005 0020             		move.b	#5,$20(a0)
00006C50 117C 000C 0019             		move.b	#$C,$19(a0)
00006C56 6100 0000                  		bsr.w	ObjectFall
00006C5A 4EB9 0000 0000             		jsr	ObjHitFloor
00006C60 4A41                       		tst.w	d1
00006C62 6A00                       		bpl.s	locret_8BAC
00006C68 317C 0000 0012             		move.w	#0,$12(a0)
00006C6E 5428 0024                  		addq.b	#2,$24(a0)
00006C72                            
00006C72                            locret_8BAC:
00006C72 4E75                       		rts	
00006C74                            ; ===========================================================================
00006C74                            
00006C74                            Obj1E_Action:				; XREF: Obj1E_Index
00006C74 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00006C7A 6100 0000                  		bsr.w	AnimateSprite
00006C7E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00006C84 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00006C86 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00006C8A 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00006C8C 6000                       		bra.s	Obj1E_MarkAsGone
00006C8E                            ; ===========================================================================
00006C8E                            
00006C8E                            Obj1E_SetBall:				; XREF: Obj1E_Action
00006C8E 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00006C92                            
00006C92                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00006C92 6000 0000                  		bra.w	MarkObjGone
00006C96                            ; ===========================================================================
00006C96                            
00006C96                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00006C96 117C 0001 0032             		move.b	#1,$32(a0)
00006C9C 6100 0000                  		bsr.w	SingleObjLoad
00006CA0 6600                       		bne.s	loc_8C1A
00006CA2 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00006CA6 3368 0008 0008             		move.w	8(a0),8(a1)
00006CAC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00006CB2 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00006CB8 337C 0000 0012             		move.w	#0,$12(a1)
00006CBE 70FC                       		moveq	#-4,d0
00006CC0 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00006CC6 6700                       		beq.s	loc_8C0A	; if not, branch
00006CC8 4440                       		neg.w	d0
00006CCA 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00006CCE                            
00006CCE                            loc_8C0A:
00006CD2 0669 000C 000C             		addi.w	#$C,$C(a1)
00006CD8 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00006CDE                            
00006CDE                            loc_8C1A:
00006CDE 60B2                       		bra.s	Obj1E_MarkAsGone
00006CE0                            ; ===========================================================================
00006CE0                            ; ---------------------------------------------------------------------------
00006CE0                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00006CE0                            ; ---------------------------------------------------------------------------
00006CE0                            
00006CE0                            Obj20:					; XREF: Obj_Index
00006CE0 7000                       		moveq	#0,d0
00006CE2 1028 0024                  		move.b	$24(a0),d0
00006CE6 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00006CEA 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00006CEE                            ; ===========================================================================
00006CEE 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00006CF0 0000                       		dc.w Obj20_Bounce-Obj20_Index
00006CF2                            ; ===========================================================================
00006CF2                            
00006CF2                            Obj20_Main:				; XREF: Obj20_Index
00006CF2 5428 0024                  		addq.b	#2,$24(a0)
00006CF6 117C 0007 0016             		move.b	#7,$16(a0)
00006CFC 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00006D04 317C 2302 0002             		move.w	#$2302,2(a0)
00006D0A 117C 0004 0001             		move.b	#4,1(a0)
00006D10 117C 0003 0018             		move.b	#3,$18(a0)
00006D16 117C 0087 0020             		move.b	#$87,$20(a0)
00006D1C 117C 0008 0019             		move.b	#8,$19(a0)
00006D22 7000                       		moveq	#0,d0
00006D24 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00006D28 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00006D2C 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00006D30 117C 0004 001A             		move.b	#4,$1A(a0)
00006D36                            
00006D36                            Obj20_Bounce:				; XREF: Obj20_Index
00006D36 4EB9 0000 0000             		jsr	ObjectFall
00006D3C 4A68 0012                  		tst.w	$12(a0)
00006D40 6B00                       		bmi.s	Obj20_ChkExplode
00006D42 4EB9 0000 0000             		jsr	ObjHitFloor
00006D48 4A41                       		tst.w	d1
00006D4A 6A00                       		bpl.s	Obj20_ChkExplode
00006D50 317C FD00 0012             		move.w	#-$300,$12(a0)
00006D56 4A03                       		tst.b	d3
00006D58 6700                       		beq.s	Obj20_ChkExplode
00006D5A 6B00                       		bmi.s	loc_8CA4
00006D5C 4A68 0010                  		tst.w	$10(a0)
00006D60 6A00                       		bpl.s	Obj20_ChkExplode
00006D62 4468 0010                  		neg.w	$10(a0)
00006D66 6000                       		bra.s	Obj20_ChkExplode
00006D68                            ; ===========================================================================
00006D68                            
00006D68                            loc_8CA4:				; XREF: Obj20_Bounce
00006D68 4A68 0010                  		tst.w	$10(a0)
00006D6C 6B00                       		bmi.s	Obj20_ChkExplode
00006D6E 4468 0010                  		neg.w	$10(a0)
00006D72                            
00006D72                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00006D72 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00006D76 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00006D78 10BC 0024                  		move.b	#$24,0(a0)
00006D7C 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00006D80 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00006D86 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00006D8A                            ; ===========================================================================
00006D8A                            
00006D8A                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00006D8A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00006D8E 6A00                       		bpl.s	Obj20_Display
00006D90 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00006D96 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00006D9C                            
00006D9C                            Obj20_Display:
00006D9C 6100 0000                  		bsr.w	DisplaySprite
00006DA0 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006DA4 0640 00E0                  		addi.w	#$E0,d0
00006DA8 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00006DAC 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00006DB0 4E75                       		rts	
00006DB2                            ; ===========================================================================
00006DB2                            ; ---------------------------------------------------------------------------
00006DB2                            ; Object 24 - explosion	from a destroyed monitor
00006DB2                            ; ---------------------------------------------------------------------------
00006DB2                            
00006DB2                            Obj24:					; XREF: Obj_Index
00006DB2 7000                       		moveq	#0,d0
00006DB4 1028 0024                  		move.b	$24(a0),d0
00006DB8 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00006DBC 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00006DC0                            ; ===========================================================================
00006DC0 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00006DC2 0000                       		dc.w Obj24_Animate-Obj24_Index
00006DC4                            ; ===========================================================================
00006DC4                            
00006DC4                            Obj24_Main:				; XREF: Obj24_Index
00006DC4 5428 0024                  		addq.b	#2,$24(a0)
00006DC8 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00006DD0 317C 041C 0002             		move.w	#$41C,2(a0)
00006DD6 117C 0004 0001             		move.b	#4,1(a0)
00006DDC 117C 0001 0018             		move.b	#1,$18(a0)
00006DE2 117C 0000 0020             		move.b	#0,$20(a0)
00006DE8 117C 000C 0019             		move.b	#$C,$19(a0)
00006DEE 117C 0009 001E             		move.b	#9,$1E(a0)
00006DF4 117C 0000 001A             		move.b	#0,$1A(a0)
00006DFA 303C 00A5                  		move.w	#$A5,d0
00006DFE 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play explosion sound
00006E04                            
00006E04                            Obj24_Animate:				; XREF: Obj24_Index
00006E04 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00006E08 6A00                       		bpl.s	Obj24_Display
00006E0A 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00006E10 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00006E14 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00006E1A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00006E1E                            
00006E1E                            Obj24_Display:
00006E1E 6000 0000                  		bra.w	DisplaySprite
00006E22                            ; ===========================================================================
00006E22                            ; ---------------------------------------------------------------------------
00006E22                            ; Object 27 - explosion	from a destroyed enemy
00006E22                            ; ---------------------------------------------------------------------------
00006E22                            
00006E22                            Obj27:					; XREF: Obj_Index
00006E22 7000                       		moveq	#0,d0
00006E24 1028 0024                  		move.b	$24(a0),d0
00006E28 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00006E2C 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00006E30                            ; ===========================================================================
00006E30 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00006E32 0000                       		dc.w Obj27_Main-Obj27_Index
00006E34 0000                       		dc.w Obj27_Animate-Obj27_Index
00006E36                            ; ===========================================================================
00006E36                            
00006E36                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00006E36 5428 0024                  		addq.b	#2,$24(a0)
00006E3A 6100 0000                  		bsr.w	SingleObjLoad
00006E3E 6600                       		bne.s	Obj27_Main
00006E40 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00006E44 3368 0008 0008             		move.w	8(a0),8(a1)
00006E4A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00006E50 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00006E56                            
00006E56                            Obj27_Main:				; XREF: Obj27_Index
00006E56 5428 0024                  		addq.b	#2,$24(a0)
00006E5A 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00006E62 317C 05A0 0002             		move.w	#$5A0,2(a0)
00006E68 117C 0004 0001             		move.b	#4,1(a0)
00006E6E 117C 0001 0018             		move.b	#1,$18(a0)
00006E74 117C 0000 0020             		move.b	#0,$20(a0)
00006E7A 117C 000C 0019             		move.b	#$C,$19(a0)
00006E80 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00006E86 117C 0000 001A             		move.b	#0,$1A(a0)
00006E8C 303C 00C1                  		move.w	#$C1,d0
00006E90 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00006E96                            
00006E96                            Obj27_Animate:				; XREF: Obj27_Index
00006E96 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00006E9A 6A00                       		bpl.s	Obj27_Display
00006E9C 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00006EA2 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00006EA6 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00006EAC 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00006EB0                            
00006EB0                            Obj27_Display:
00006EB0 6000 0000                  		bra.w	DisplaySprite
00006EB4                            ; ===========================================================================
00006EB4                            ; ---------------------------------------------------------------------------
00006EB4                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00006EB4                            ; ---------------------------------------------------------------------------
00006EB4                            
00006EB4                            Obj3F:					; XREF: Obj_Index
00006EB4 7000                       		moveq	#0,d0
00006EB6 1028 0024                  		move.b	$24(a0),d0
00006EBA 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00006EBE 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00006EC2                            ; ===========================================================================
00006EC2 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00006EC4 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
00006EC6                            ; ===========================================================================
00006EC6                            
00006EC6                            Obj3F_Main:				; XREF: Obj3F_Index
00006EC6 5428 0024                  		addq.b	#2,$24(a0)
00006ECA 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00006ED2 317C 05A0 0002             		move.w	#$5A0,2(a0)
00006ED8 117C 0004 0001             		move.b	#4,1(a0)
00006EDE 117C 0001 0018             		move.b	#1,$18(a0)
00006EE4 117C 0000 0020             		move.b	#0,$20(a0)
00006EEA 117C 000C 0019             		move.b	#$C,$19(a0)
00006EF0 117C 0007 001E             		move.b	#7,$1E(a0)
00006EF6 117C 0000 001A             		move.b	#0,$1A(a0)
00006EFC 303C 00C4                  		move.w	#$C4,d0
00006F00 4EF9 0000 1020             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00006F06                            ; ===========================================================================
00006F06                            Ani_obj1E:
00006F06                            	include "_anim\obj1E.asm"
00006F06                            ; ---------------------------------------------------------------------------
00006F06                            ; Animation script - doors (SBZ)
00006F06                            ; ---------------------------------------------------------------------------
00006F06 0000                       		dc.w byte_8E4A-Ani_obj1E
00006F08 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00006F20 00                         		even
00006F20 00                         		even
00006F20                            
00006F20                            ; ---------------------------------------------------------------------------
00006F20                            ; Sprite mappings - Ball Hog enemy (SBZ)
00006F20                            ; ---------------------------------------------------------------------------
00006F20                            Map_obj1E:
00006F20                            	include "_maps\obj1E.asm"
00006F20                            ; ---------------------------------------------------------------------------
00006F20                            ; Sprite mappings - Ball Hog enemy (SBZ)
00006F20                            ; ---------------------------------------------------------------------------
00006F20 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00006F24 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00006F28 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00006F2C 02                         byte_8E6E:	dc.b 2
00006F2D EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00006F32 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00006F37 02                         byte_8E79:	dc.b 2
00006F38 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00006F3D FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00006F42 02                         byte_8E84:	dc.b 2
00006F43 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00006F48 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00006F4D 02                         byte_8E8F:	dc.b 2
00006F4E E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00006F53 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00006F58 01                         byte_8E9A:	dc.b 1
00006F59 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
00006F5E 01                         byte_8EA0:	dc.b 1
00006F5F F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00006F64                            		even
00006F64                            		even
00006F64                            
00006F64                            ; ---------------------------------------------------------------------------
00006F64                            ; Sprite mappings - explosion
00006F64                            ; ---------------------------------------------------------------------------
00006F64                            Map_obj24:
00006F64                            	include "_maps\obj24.asm"
00006F64                            ; ---------------------------------------------------------------------------
00006F64                            ; Sprite mappings - explosion
00006F64                            ; ---------------------------------------------------------------------------
00006F64 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00006F68 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00006F6C 01                         byte_8EAE:	dc.b 1
00006F6D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00006F72 01                         byte_8EB4:	dc.b 1
00006F73 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00006F78 01                         byte_8EBA:	dc.b 1
00006F79 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00006F7E 01                         byte_8EC0:	dc.b 1
00006F7F F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00006F84                            		even
00006F84                            		even
00006F84                            
00006F84                            ; ---------------------------------------------------------------------------
00006F84                            ; Sprite mappings - explosion
00006F84                            ; ---------------------------------------------------------------------------
00006F84 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00006F88 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00006F8C 0000                       		dc.w byte_8EF7-Map_obj27
00006F8E 01                         byte_8ED0:	dc.b 1
00006F8F F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00006F94 01                         byte_8ED6:	dc.b 1
00006F95 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00006F9A 01                         byte_8EDC:	dc.b 1
00006F9B F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00006FA0 04                         byte_8EE2:	dc.b 4
00006FA1 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00006FA6 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00006FAB 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00006FB0 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00006FB5 04                         byte_8EF7:	dc.b 4
00006FB6 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00006FBB EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00006FC0 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00006FC5 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00006FCA                            		even
00006FCA                            ; ---------------------------------------------------------------------------
00006FCA                            ; Sprite mappings - explosion from when	a boss is destroyed
00006FCA                            ; ---------------------------------------------------------------------------
00006FCA FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00006FCC 0000                       		dc.w byte_8F16-Map_obj3F
00006FCE 0000                       		dc.w byte_8F1C-Map_obj3F
00006FD0 FFD6                       		dc.w byte_8EE2-Map_obj3F
00006FD2 FFEB                       		dc.w byte_8EF7-Map_obj3F
00006FD4 01                         byte_8F16:	dc.b 1
00006FD5 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00006FDA 01                         byte_8F1C:	dc.b 1
00006FDB F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00006FE0                            		even
00006FE0                            ; ===========================================================================
00006FE0                            ; ---------------------------------------------------------------------------
00006FE0                            ; Object 28 - animals
00006FE0                            ; ---------------------------------------------------------------------------
00006FE0                            
00006FE0                            Obj28:					; XREF: Obj_Index
00006FE0 7000                       		moveq	#0,d0
00006FE2 1028 0024                  		move.b	$24(a0),d0
00006FE6 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00006FEA 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00006FEE                            ; ===========================================================================
00006FEE 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00006FF2 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00006FF6 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00006FFA 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00006FFE 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00007002 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00007006 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000700A 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000700E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00007012 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00007016 0000                       		dc.w loc_92D6-Obj28_Index
00007018                            
00007018 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00007024                            
00007024 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00007028 0000 0000                  		dc.l Map_obj28
0000702C FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00007030 0000 0000                  		dc.l Map_obj28a		; mappings address
00007034 FE80 FD00                  		dc.w $FE80, $FD00
00007038 0000 0000                  		dc.l Map_obj28
0000703C FEC0 FE80                  		dc.w $FEC0, $FE80
00007040 0000 0000                  		dc.l Map_obj28a
00007044 FE40 FD00                  		dc.w $FE40, $FD00
00007048 0000 0000                  		dc.l Map_obj28b
0000704C FD00 FC00                  		dc.w $FD00, $FC00
00007050 0000 0000                  		dc.l Map_obj28a
00007054 FD80 FC80                  		dc.w $FD80, $FC80
00007058 0000 0000                  		dc.l Map_obj28b
0000705C                            
0000705C FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000706C FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000707C FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00007088                            
00007088 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000709C 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
000070B0 0000 0000                  		dc.l Map_obj28b
000070B4                            
000070B4 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
000070C6 0565 05B3                  		dc.w $565, $5B3
000070CA                            ; ===========================================================================
000070CA                            
000070CA                            Obj28_Ending:				; XREF: Obj28_Index
000070CA 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
000070CE 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
000070D2 7000                       		moveq	#0,d0
000070D4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000070DA 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
000070DE 0440 0014                  		subi.w	#$14,d0
000070E2 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
000070EA 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
000070F0 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
000070F4 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
000070FA 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00007100 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00007106 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000710C 117C 000C 0016             		move.b	#$C,$16(a0)
00007112 117C 0004 0001             		move.b	#4,1(a0)
00007118 08E8 0000 0001             		bset	#0,1(a0)
0000711E 117C 0006 0018             		move.b	#6,$18(a0)
00007124 117C 0008 0019             		move.b	#8,$19(a0)
0000712A 117C 0007 001E             		move.b	#7,$1E(a0)
00007130 6000 0000                  		bra.w	DisplaySprite
00007134                            ; ===========================================================================
00007134                            
00007134                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00007134 5428 0024                  		addq.b	#2,$24(a0)
00007138 6100 B3F6                  		bsr.w	RandomNumber
0000713C 0240 0001                  		andi.w	#1,d0
00007140 7200                       		moveq	#0,d1
00007142 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000714A 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000714E 1031 1000                  		move.b	(a1,d1.w),d0
00007152 1140 0030                  		move.b	d0,$30(a0)
00007156 E748                       		lsl.w	#3,d0
00007158 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000715C D2C0                       		adda.w	d0,a1
0000715E 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00007162 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00007166 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000716A 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00007170 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00007176 6700                       		beq.s	loc_90C0	; if yes, branch
00007178 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000717E                            
0000717E                            loc_90C0:
0000717E 117C 000C 0016             		move.b	#$C,$16(a0)
00007184 117C 0004 0001             		move.b	#4,1(a0)
0000718A 08E8 0000 0001             		bset	#0,1(a0)
00007190 117C 0006 0018             		move.b	#6,$18(a0)
00007196 117C 0008 0019             		move.b	#8,$19(a0)
0000719C 117C 0007 001E             		move.b	#7,$1E(a0)
000071A2 117C 0002 001A             		move.b	#2,$1A(a0)
000071A8 317C FC00 0012             		move.w	#-$400,$12(a0)
000071AE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000071B2 6600                       		bne.s	loc_911C
000071B4 6100 0000                  		bsr.w	SingleObjLoad
000071B8 6600                       		bne.s	Obj28_Display
000071BA 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000071BE 3368 0008 0008             		move.w	8(a0),8(a1)
000071C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000071CA 3028 003E                  		move.w	$3E(a0),d0
000071CE E248                       		lsr.w	#1,d0
000071D0 1340 001A                  		move.b	d0,$1A(a1)
000071D4                            
000071D4                            Obj28_Display:
000071D4 6000 0000                  		bra.w	DisplaySprite
000071D8                            ; ===========================================================================
000071D8                            
000071D8                            loc_911C:
000071D8 117C 0012 0024             		move.b	#$12,$24(a0)
000071DE 4268 0010                  		clr.w	$10(a0)
000071E2 6000 0000                  		bra.w	DisplaySprite
000071E6                            ; ===========================================================================
000071E6                            
000071E6                            loc_912A:				; XREF: Obj28_Index
000071E6 4A28 0001                  		tst.b	1(a0)
000071EA 6A00 0000                  		bpl.w	DeleteObject
000071EE 6100 0000                  		bsr.w	ObjectFall
000071F2 4A68 0012                  		tst.w	$12(a0)
000071F6 6B00                       		bmi.s	loc_9180
000071F8 4EB9 0000 0000             		jsr	ObjHitFloor
000071FE 4A41                       		tst.w	d1
00007200 6A00                       		bpl.s	loc_9180
00007206 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000720C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00007212 117C 0001 001A             		move.b	#1,$1A(a0)
00007218 1028 0030                  		move.b	$30(a0),d0
0000721E 5800                       		addq.b	#4,d0
00007220 1140 0024                  		move.b	d0,$24(a0)
00007224 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00007228 6700                       		beq.s	loc_9180
0000722A 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00007230 6700                       		beq.s	loc_9180
00007232 4468 0010                  		neg.w	$10(a0)
00007236 0868 0000 0001             		bchg	#0,1(a0)
0000723C                            
0000723C                            loc_9180:
0000723C 6000 0000                  		bra.w	DisplaySprite
00007240                            ; ===========================================================================
00007240                            
00007240                            loc_9184:				; XREF: Obj28_Index
00007240 6100 0000                  		bsr.w	ObjectFall
00007244 117C 0001 001A             		move.b	#1,$1A(a0)
0000724A 4A68 0012                  		tst.w	$12(a0)
0000724E 6B00                       		bmi.s	loc_91AE
00007250 117C 0000 001A             		move.b	#0,$1A(a0)
00007256 4EB9 0000 0000             		jsr	ObjHitFloor
0000725C 4A41                       		tst.w	d1
0000725E 6A00                       		bpl.s	loc_91AE
00007264 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000726A                            
0000726A                            loc_91AE:
0000726A 4A28 0028                  		tst.b	$28(a0)
0000726E 6600                       		bne.s	loc_9224
00007270 4A28 0001                  		tst.b	1(a0)
00007274 6A00 0000                  		bpl.w	DeleteObject
00007278 6000 0000                  		bra.w	DisplaySprite
0000727C                            ; ===========================================================================
0000727C                            
0000727C                            loc_91C0:				; XREF: Obj28_Index
0000727C 6100 0000                  		bsr.w	SpeedToPos
00007280 0668 0018 0012             		addi.w	#$18,$12(a0)
00007286 4A68 0012                  		tst.w	$12(a0)
0000728A 6B00                       		bmi.s	loc_91FC
0000728C 4EB9 0000 0000             		jsr	ObjHitFloor
00007292 4A41                       		tst.w	d1
00007294 6A00                       		bpl.s	loc_91FC
0000729A 3168 0034 0012             		move.w	$34(a0),$12(a0)
000072A0 4A28 0028                  		tst.b	$28(a0)
000072A4 6700                       		beq.s	loc_91FC
000072A6 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
000072AC 6700                       		beq.s	loc_91FC
000072AE 4468 0010                  		neg.w	$10(a0)
000072B2 0868 0000 0001             		bchg	#0,1(a0)
000072B8                            
000072B8                            loc_91FC:
000072B8 5328 001E                  		subq.b	#1,$1E(a0)
000072BC 6A00                       		bpl.s	loc_9212
000072BE 117C 0001 001E             		move.b	#1,$1E(a0)
000072C4 5228 001A                  		addq.b	#1,$1A(a0)
000072C8 0228 0001 001A             		andi.b	#1,$1A(a0)
000072CE                            
000072CE                            loc_9212:
000072CE 4A28 0028                  		tst.b	$28(a0)
000072D2 6600                       		bne.s	loc_9224
000072D4 4A28 0001                  		tst.b	1(a0)
000072D8 6A00 0000                  		bpl.w	DeleteObject
000072DC 6000 0000                  		bra.w	DisplaySprite
000072E0                            ; ===========================================================================
000072E0                            
000072E0                            loc_9224:				; XREF: Obj28_Index
000072E0 3028 0008                  		move.w	8(a0),d0
000072E8 6500                       		bcs.s	loc_923C
000072EA 0440 0180                  		subi.w	#$180,d0
000072EE 6A00                       		bpl.s	loc_923C
000072F0 4A28 0001                  		tst.b	1(a0)
000072F4 6A00 0000                  		bpl.w	DeleteObject
000072F8                            
000072F8                            loc_923C:
000072F8 6000 0000                  		bra.w	DisplaySprite
000072FC                            ; ===========================================================================
000072FC                            
000072FC                            loc_9240:				; XREF: Obj28_Index
000072FC 4A28 0001                  		tst.b	1(a0)
00007300 6A00 0000                  		bpl.w	DeleteObject
00007304 5368 0036                  		subq.w	#1,$36(a0)
00007308 6600 0000                  		bne.w	loc_925C
0000730C 117C 0002 0024             		move.b	#2,$24(a0)
00007312 117C 0003 0018             		move.b	#3,$18(a0)
00007318                            
00007318                            loc_925C:
00007318 6000 0000                  		bra.w	DisplaySprite
0000731C                            ; ===========================================================================
0000731C                            
0000731C                            loc_9260:				; XREF: Obj28_Index
0000731C 6100 0000                  		bsr.w	sub_9404
00007320 6400                       		bcc.s	loc_927C
00007322 3168 0032 0010             		move.w	$32(a0),$10(a0)
00007328 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000732E 117C 000E 0024             		move.b	#$E,$24(a0)
00007334 6000 FF46                  		bra.w	loc_91C0
00007338                            ; ===========================================================================
00007338                            
00007338                            loc_927C:
00007338 6000 FFA6                  		bra.w	loc_9224
0000733C                            ; ===========================================================================
0000733C                            
0000733C                            loc_9280:				; XREF: Obj28_Index
0000733C 6100 0000                  		bsr.w	sub_9404
00007340 6A00                       		bpl.s	loc_92B6
00007342 4268 0010                  		clr.w	$10(a0)
00007346 4268 0032                  		clr.w	$32(a0)
0000734A 6100 0000                  		bsr.w	SpeedToPos
0000734E 0668 0018 0012             		addi.w	#$18,$12(a0)
00007354 6100 0000                  		bsr.w	loc_93C4
00007358 6100 0000                  		bsr.w	loc_93EC
0000735C 5328 001E                  		subq.b	#1,$1E(a0)
00007360 6A00                       		bpl.s	loc_92B6
00007362 117C 0001 001E             		move.b	#1,$1E(a0)
00007368 5228 001A                  		addq.b	#1,$1A(a0)
0000736C 0228 0001 001A             		andi.b	#1,$1A(a0)
00007372                            
00007372                            loc_92B6:
00007372 6000 FF6C                  		bra.w	loc_9224
00007376                            ; ===========================================================================
00007376                            
00007376                            loc_92BA:				; XREF: Obj28_Index
00007376 6100 0000                  		bsr.w	sub_9404
0000737A 6A00                       		bpl.s	loc_9310
0000737C 3168 0032 0010             		move.w	$32(a0),$10(a0)
00007382 3168 0034 0012             		move.w	$34(a0),$12(a0)
00007388 117C 0004 0024             		move.b	#4,$24(a0)
0000738E 6000 FEB0                  		bra.w	loc_9184
00007392                            ; ===========================================================================
00007392                            
00007392                            loc_92D6:				; XREF: Obj28_Index
00007392 6100 0000                  		bsr.w	ObjectFall
00007396 117C 0001 001A             		move.b	#1,$1A(a0)
0000739C 4A68 0012                  		tst.w	$12(a0)
000073A0 6B00                       		bmi.s	loc_9310
000073A2 117C 0000 001A             		move.b	#0,$1A(a0)
000073A8 4EB9 0000 0000             		jsr	ObjHitFloor
000073AE 4A41                       		tst.w	d1
000073B0 6A00                       		bpl.s	loc_9310
000073B2 4628 0029                  		not.b	$29(a0)
000073B6 6600                       		bne.s	loc_9306
000073B8 4468 0010                  		neg.w	$10(a0)
000073BC 0868 0000 0001             		bchg	#0,1(a0)
000073C2                            
000073C2                            loc_9306:
000073C6 3168 0034 0012             		move.w	$34(a0),$12(a0)
000073CC                            
000073CC                            loc_9310:
000073CC 6000 FF12                  		bra.w	loc_9224
000073D0                            ; ===========================================================================
000073D0                            
000073D0                            loc_9314:				; XREF: Obj28_Index
000073D0 6100 0000                  		bsr.w	sub_9404
000073D4 6A00                       		bpl.s	loc_932E
000073D6 4268 0010                  		clr.w	$10(a0)
000073DA 4268 0032                  		clr.w	$32(a0)
000073DE 6100 0000                  		bsr.w	ObjectFall
000073E2 6100 0000                  		bsr.w	loc_93C4
000073E6 6100 0000                  		bsr.w	loc_93EC
000073EA                            
000073EA                            loc_932E:
000073EA 6000 FEF4                  		bra.w	loc_9224
000073EE                            ; ===========================================================================
000073EE                            
000073EE                            loc_9332:				; XREF: Obj28_Index
000073EE 6100 0000                  		bsr.w	sub_9404
000073F2 6A00                       		bpl.s	loc_936C
000073F4 6100 0000                  		bsr.w	ObjectFall
000073F8 117C 0001 001A             		move.b	#1,$1A(a0)
000073FE 4A68 0012                  		tst.w	$12(a0)
00007402 6B00                       		bmi.s	loc_936C
00007404 117C 0000 001A             		move.b	#0,$1A(a0)
0000740A 4EB9 0000 0000             		jsr	ObjHitFloor
00007410 4A41                       		tst.w	d1
00007412 6A00                       		bpl.s	loc_936C
00007414 4468 0010                  		neg.w	$10(a0)
00007418 0868 0000 0001             		bchg	#0,1(a0)
00007422 3168 0034 0012             		move.w	$34(a0),$12(a0)
00007428                            
00007428                            loc_936C:
00007428 6000 FEB6                  		bra.w	loc_9224
0000742C                            ; ===========================================================================
0000742C                            
0000742C                            loc_9370:				; XREF: Obj28_Index
0000742C 6100 0000                  		bsr.w	sub_9404
00007430 6A00                       		bpl.s	loc_93C0
00007432 6100 0000                  		bsr.w	SpeedToPos
00007436 0668 0018 0012             		addi.w	#$18,$12(a0)
0000743C 4A68 0012                  		tst.w	$12(a0)
00007440 6B00                       		bmi.s	loc_93AA
00007442 4EB9 0000 0000             		jsr	ObjHitFloor
00007448 4A41                       		tst.w	d1
0000744A 6A00                       		bpl.s	loc_93AA
0000744C 4628 0029                  		not.b	$29(a0)
00007450 6600                       		bne.s	loc_93A0
00007452 4468 0010                  		neg.w	$10(a0)
00007456 0868 0000 0001             		bchg	#0,1(a0)
0000745C                            
0000745C                            loc_93A0:
00007460 3168 0034 0012             		move.w	$34(a0),$12(a0)
00007466                            
00007466                            loc_93AA:
00007466 5328 001E                  		subq.b	#1,$1E(a0)
0000746A 6A00                       		bpl.s	loc_93C0
0000746C 117C 0001 001E             		move.b	#1,$1E(a0)
00007472 5228 001A                  		addq.b	#1,$1A(a0)
00007476 0228 0001 001A             		andi.b	#1,$1A(a0)
0000747C                            
0000747C                            loc_93C0:
0000747C 6000 FE62                  		bra.w	loc_9224
00007480                            ; ===========================================================================
00007480                            
00007480                            loc_93C4:
00007480 117C 0001 001A             		move.b	#1,$1A(a0)
00007486 4A68 0012                  		tst.w	$12(a0)
0000748A 6B00                       		bmi.s	locret_93EA
0000748C 117C 0000 001A             		move.b	#0,$1A(a0)
00007492 4EB9 0000 0000             		jsr	ObjHitFloor
00007498 4A41                       		tst.w	d1
0000749A 6A00                       		bpl.s	locret_93EA
000074A0 3168 0034 0012             		move.w	$34(a0),$12(a0)
000074A6                            
000074A6                            locret_93EA:
000074A6 4E75                       		rts	
000074A8                            ; ===========================================================================
000074A8                            
000074A8                            loc_93EC:
000074A8 08E8 0000 0001             		bset	#0,1(a0)
000074AE 3028 0008                  		move.w	8(a0),d0
000074B6 6400                       		bcc.s	locret_9402
000074B8 08A8 0000 0001             		bclr	#0,1(a0)
000074BE                            
000074BE                            locret_9402:
000074BE 4E75                       		rts	
000074C0                            
000074C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074C0                            
000074C0                            
000074C0                            sub_9404:
000074C0 3038 D008                  		move.w	($FFFFD008).w,d0
000074C8 0440 00B8                  		subi.w	#$B8,d0
000074CC 4E75                       		rts	
000074CE                            ; End of function sub_9404
000074CE                            
000074CE                            ; ===========================================================================
000074CE                            ; ---------------------------------------------------------------------------
000074CE                            ; Object 29 - points that appear when you destroy something
000074CE                            ; ---------------------------------------------------------------------------
000074CE                            
000074CE                            Obj29:					; XREF: Obj_Index
000074CE 7000                       		moveq	#0,d0
000074D0 1028 0024                  		move.b	$24(a0),d0
000074D4 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
000074D8 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
000074DC 6000 0000                  		bra.w	DisplaySprite
000074E0                            ; ===========================================================================
000074E0 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
000074E2 0000                       		dc.w Obj29_Slower-Obj29_Index
000074E4                            ; ===========================================================================
000074E4                            
000074E4                            Obj29_Main:				; XREF: Obj29_Index
000074E4 5428 0024                  		addq.b	#2,$24(a0)
000074E8 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
000074F0 317C 2797 0002             		move.w	#$2797,2(a0)
000074F6 117C 0004 0001             		move.b	#4,1(a0)
000074FC 117C 0001 0018             		move.b	#1,$18(a0)
00007502 117C 0008 0019             		move.b	#8,$19(a0)
00007508 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000750E                            
0000750E                            Obj29_Slower:				; XREF: Obj29_Index
0000750E 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00007512 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00007516 6100 0000                  		bsr.w	SpeedToPos
0000751A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00007520 4E75                       		rts	
00007522                            ; ===========================================================================
00007522                            ; ---------------------------------------------------------------------------
00007522                            ; Sprite mappings - animals
00007522                            ; ---------------------------------------------------------------------------
00007522                            Map_obj28:
00007522                            	include "_maps\obj28.asm"
00007522                            ; ---------------------------------------------------------------------------
00007522                            ; Sprite mappings - animals
00007522                            ; ---------------------------------------------------------------------------
00007522 0000                       		dc.w byte_9472-Map_obj28
00007524 0000                       		dc.w byte_9478-Map_obj28
00007526 0000                       		dc.w byte_946C-Map_obj28
00007528 01                         byte_946C:	dc.b 1
00007529 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000752E 01                         byte_9472:	dc.b 1
0000752F F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00007534 01                         byte_9478:	dc.b 1
00007535 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000753A                            		even
0000753A                            		even
0000753A                            
0000753A                            Map_obj28a:
0000753A                            	include "_maps\obj28a.asm"
0000753A                            ; ---------------------------------------------------------------------------
0000753A                            ; Sprite mappings - animals
0000753A                            ; ---------------------------------------------------------------------------
0000753A 0000                       		dc.w byte_948A-Map_obj28a
0000753C 0000                       		dc.w byte_9490-Map_obj28a
0000753E 0000                       		dc.w byte_9484-Map_obj28a
00007540 01                         byte_9484:	dc.b 1
00007541 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00007546 01                         byte_948A:	dc.b 1
00007547 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000754C 01                         byte_9490:	dc.b 1
0000754D FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00007552                            		even
00007552                            		even
00007552                            
00007552                            Map_obj28b:
00007552                            	include "_maps\obj28b.asm"
00007552                            ; ---------------------------------------------------------------------------
00007552                            ; Sprite mappings - animals
00007552                            ; ---------------------------------------------------------------------------
00007552 0000                       		dc.w byte_94A2-Map_obj28b
00007554 0000                       		dc.w byte_94A8-Map_obj28b
00007556 0000                       		dc.w byte_949C-Map_obj28b
00007558 01                         byte_949C:	dc.b 1
00007559 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000755E 01                         byte_94A2:	dc.b 1
0000755F FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00007564 01                         byte_94A8:	dc.b 1
00007565 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000756A                            		even
0000756A                            		even
0000756A                            
0000756A                            ; ---------------------------------------------------------------------------
0000756A                            ; Sprite mappings - points that	appear when you	destroy	something
0000756A                            ; ---------------------------------------------------------------------------
0000756A                            Map_obj29:
0000756A                            	include "_maps\obj29.asm"
0000756A                            ; ---------------------------------------------------------------------------
0000756A                            ; Sprite mappings - points that	appear when you	destroy	something
0000756A                            ; ---------------------------------------------------------------------------
0000756A 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000756E 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00007572 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00007576 0000                       		dc.w byte_94E5-Map_obj29
00007578 01                         byte_94BC:	dc.b 1
00007579 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000757E 01                         byte_94C2:	dc.b 1
0000757F FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00007584 01                         byte_94C8:	dc.b 1
00007585 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000758A 01                         byte_94CE:	dc.b 1
0000758B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00007590 01                         byte_94D4:	dc.b 1
00007591 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00007596 02                         byte_94DA:	dc.b 2
00007597 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000759C FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
000075A1 02                         byte_94E5:	dc.b 2
000075A2 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
000075A7 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
000075AC                            		even
000075AC                            		even
000075AC                            
000075AC                            ; ===========================================================================
000075AC                            ; ---------------------------------------------------------------------------
000075AC                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
000075AC                            ; ---------------------------------------------------------------------------
000075AC                            
000075AC                            Obj1F:					; XREF: Obj_Index
000075AC 7000                       		moveq	#0,d0
000075AE 1028 0024                  		move.b	$24(a0),d0
000075B2 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
000075B6 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
000075BA                            ; ===========================================================================
000075BA 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
000075BC 0000                       		dc.w Obj1F_Action-Obj1F_Index
000075BE 0000                       		dc.w Obj1F_Delete-Obj1F_Index
000075C0 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
000075C2 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
000075C4                            ; ===========================================================================
000075C4                            
000075C4                            Obj1F_Main:				; XREF: Obj1F_Index
000075C4 117C 0010 0016             		move.b	#$10,$16(a0)
000075CA 117C 0008 0017             		move.b	#8,$17(a0)
000075D0 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
000075D8 317C 0400 0002             		move.w	#$400,2(a0)
000075DE 117C 0004 0001             		move.b	#4,1(a0)
000075E4 117C 0003 0018             		move.b	#3,$18(a0)
000075EA 117C 0006 0020             		move.b	#6,$20(a0)
000075F0 117C 0015 0019             		move.b	#$15,$19(a0)
000075F6 6100 0000                  		bsr.w	ObjectFall
000075FA 4EB9 0000 0000             		jsr	ObjHitFloor
00007600 4A41                       		tst.w	d1
00007602 6A00                       		bpl.s	locret_955A
00007608 1143 0026                  		move.b	d3,$26(a0)
0000760C 317C 0000 0012             		move.w	#0,$12(a0)
00007612 5428 0024                  		addq.b	#2,$24(a0)
00007616                            
00007616                            locret_955A:
00007616 4E75                       		rts	
00007618                            ; ===========================================================================
00007618                            
00007618                            Obj1F_Action:				; XREF: Obj1F_Index
00007618 7000                       		moveq	#0,d0
0000761A 1028 0025                  		move.b	$25(a0),d0
0000761E 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00007622 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00007626 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000762C 6100 0000                  		bsr.w	AnimateSprite
00007630 6000 0000                  		bra.w	MarkObjGone
00007634                            ; ===========================================================================
00007634 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00007636 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00007638                            ; ===========================================================================
00007638                            
00007638                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00007638 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000763C 6A00                       		bpl.s	locret_95B6
0000763E 4A28 0001                  		tst.b	1(a0)
00007642 6A00                       		bpl.s	Obj1F_Move
00007644 0868 0001 0032             		bchg	#1,$32(a0)
0000764A 6600                       		bne.s	Obj1F_MakeFire
0000764C                            
0000764C                            Obj1F_Move:
0000764C 5428 0025                  		addq.b	#2,$25(a0)
00007650 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00007656 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000765C 6100 0000                  		bsr.w	Obj1F_SetAni
00007660 5600                       		addq.b	#3,d0
00007662 1140 001C                  		move.b	d0,$1C(a0)
00007666 0868 0000 0022             		bchg	#0,$22(a0)
0000766C 6600                       		bne.s	locret_95B6
0000766E 4468 0010                  		neg.w	$10(a0)		; change direction
00007672                            
00007672                            locret_95B6:
00007672 4E75                       		rts	
00007674                            ; ===========================================================================
00007674                            
00007674                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00007674 317C 003B 0030             		move.w	#$3B,$30(a0)
0000767A 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00007680 6100 0000                  		bsr.w	SingleObjLoad
00007684 6600                       		bne.s	Obj1F_MakeFire2
00007686 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000768A 137C 0006 0024             		move.b	#6,$24(a1)
00007690 3368 0008 0008             		move.w	8(a0),8(a1)
00007696 0469 0010 0008             		subi.w	#$10,8(a1)
0000769C 3368 000C 000C             		move.w	$C(a0),$C(a1)
000076A2 337C FF00 0010             		move.w	#-$100,$10(a1)
000076A8                            
000076A8                            Obj1F_MakeFire2:
000076A8 6100 0000                  		bsr.w	SingleObjLoad
000076AC 6600                       		bne.s	locret_9618
000076AE 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
000076B2 137C 0006 0024             		move.b	#6,$24(a1)
000076B8 3368 0008 0008             		move.w	8(a0),8(a1)
000076BE 0669 0010 0008             		addi.w	#$10,8(a1)
000076C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000076CA 337C 0100 0010             		move.w	#$100,$10(a1)
000076D0                            
000076D0                            locret_9618:
000076D0 4E75                       		rts	
000076D2                            ; ===========================================================================
000076D2                            
000076D2                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
000076D2 5368 0030                  		subq.w	#1,$30(a0)
000076D6 6B00                       		bmi.s	loc_966E
000076D8 6100 0000                  		bsr.w	SpeedToPos
000076DC 0868 0000 0032             		bchg	#0,$32(a0)
000076E2 6600                       		bne.s	loc_9654
000076E4 3628 0008                  		move.w	8(a0),d3
000076E8 0643 0010                  		addi.w	#$10,d3
000076EC 0828 0000 0022             		btst	#0,$22(a0)
000076F2 6700                       		beq.s	loc_9640
000076F4 0443 0020                  		subi.w	#$20,d3
000076F8                            
000076F8                            loc_9640:
000076F8 4EB9 0000 0000             		jsr	ObjHitFloor2
000076FE 0C41 FFF8                  		cmpi.w	#-8,d1
00007702 6D00                       		blt.s	loc_966E
00007704 0C41 000C                  		cmpi.w	#$C,d1
00007708 6C00                       		bge.s	loc_966E
0000770A 4E75                       		rts	
0000770C                            ; ===========================================================================
0000770C                            
0000770C                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000770C 4EB9 0000 0000             		jsr	ObjHitFloor
00007716 1143 0026                  		move.b	d3,$26(a0)
0000771A 6100 0000                  		bsr.w	Obj1F_SetAni
0000771E 5600                       		addq.b	#3,d0
00007720 1140 001C                  		move.b	d0,$1C(a0)
00007724 4E75                       		rts	
00007726                            ; ===========================================================================
00007726                            
00007726                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00007726 5528 0025                  		subq.b	#2,$25(a0)
0000772A 317C 003B 0030             		move.w	#59,$30(a0)
00007730 317C 0000 0010             		move.w	#0,$10(a0)
00007736 6100 0000                  		bsr.w	Obj1F_SetAni
0000773A 1140 001C                  		move.b	d0,$1C(a0)
0000773E 4E75                       		rts	
00007740                            ; ---------------------------------------------------------------------------
00007740                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00007740                            ; ---------------------------------------------------------------------------
00007740                            
00007740                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007740                            
00007740                            
00007740                            Obj1F_SetAni:				; XREF: loc_966E
00007740 7000                       		moveq	#0,d0
00007742 1628 0026                  		move.b	$26(a0),d3
00007746 6B00                       		bmi.s	loc_96A4
00007748 0C03 0006                  		cmpi.b	#6,d3
0000774C 6500                       		bcs.s	locret_96A2
0000774E 7001                       		moveq	#1,d0
00007750 0828 0000 0022             		btst	#0,$22(a0)
00007756 6600                       		bne.s	locret_96A2
00007758 7002                       		moveq	#2,d0
0000775A                            
0000775A                            locret_96A2:
0000775A 4E75                       		rts	
0000775C                            ; ===========================================================================
0000775C                            
0000775C                            loc_96A4:				; XREF: Obj1F_SetAni
0000775C 0C03 00FA                  		cmpi.b	#-6,d3
00007760 6200                       		bhi.s	locret_96B6
00007762 7002                       		moveq	#2,d0
00007764 0828 0000 0022             		btst	#0,$22(a0)
0000776A 6600                       		bne.s	locret_96B6
0000776C 7001                       		moveq	#1,d0
0000776E                            
0000776E                            locret_96B6:
0000776E 4E75                       		rts	
00007770                            ; End of function Obj1F_SetAni
00007770                            
00007770                            ; ===========================================================================
00007770                            
00007770                            Obj1F_Delete:				; XREF: Obj1F_Index
00007770 6100 0000                  		bsr.w	DeleteObject
00007774 4E75                       		rts	
00007776                            ; ===========================================================================
00007776                            ; ---------------------------------------------------------------------------
00007776                            ; Sub-object - missile that the	Crabmeat throws
00007776                            ; ---------------------------------------------------------------------------
00007776                            
00007776                            Obj1F_BallMain:				; XREF: Obj1F_Index
00007776 5428 0024                  		addq.b	#2,$24(a0)
0000777A 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00007782 317C 0400 0002             		move.w	#$400,2(a0)
00007788 117C 0004 0001             		move.b	#4,1(a0)
0000778E 117C 0003 0018             		move.b	#3,$18(a0)
00007794 117C 0087 0020             		move.b	#$87,$20(a0)
0000779A 117C 0008 0019             		move.b	#8,$19(a0)
000077A0 317C FC00 0012             		move.w	#-$400,$12(a0)
000077A6 117C 0007 001C             		move.b	#7,$1C(a0)
000077AC                            
000077AC                            Obj1F_BallMove:				; XREF: Obj1F_Index
000077AC 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
000077B2 6100 0000                  		bsr.w	AnimateSprite
000077B6 6100 0000                  		bsr.w	ObjectFall
000077BA 6100 0000                  		bsr.w	DisplaySprite
000077BE 3038 F72E                  		move.w	($FFFFF72E).w,d0
000077C2 0640 00E0                  		addi.w	#$E0,d0
000077C6 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
000077CA 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
000077CC 4E75                       		rts	
000077CE                            ; ===========================================================================
000077CE                            
000077CE                            Obj1F_Delete2:
000077CE 6000 0000                  		bra.w	DeleteObject
000077D2                            ; ===========================================================================
000077D2                            Ani_obj1F:
000077D2                            	include "_anim\obj1F.asm"
000077D2                            ; ---------------------------------------------------------------------------
000077D2                            ; Animation script - Crabmeat enemy
000077D2                            ; ---------------------------------------------------------------------------
000077D2 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
000077D8 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
000077DE 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
000077E2 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
000077E6 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
000077EA 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
000077EE 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
000077F4 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
000077FA 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00007800 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00007804 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00007808                            		even
00007808                            		even
00007808                            
00007808                            ; ---------------------------------------------------------------------------
00007808                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00007808                            ; ---------------------------------------------------------------------------
00007808                            Map_obj1F:
00007808                            	include "_maps\obj1F.asm"
00007808                            ; ---------------------------------------------------------------------------
00007808                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00007808                            ; ---------------------------------------------------------------------------
00007808 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000780C 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
00007810 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
00007814 0000                       		dc.w byte_97D7-Map_obj1F
00007816 04                         byte_975E:	dc.b 4
00007817 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000781C F009 0800 00               		dc.b $F0, 9, 8,	0, 0
00007821 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
00007826 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000782B 04                         byte_9773:	dc.b 4
0000782C F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
00007831 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
00007836 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000783B 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
00007840 04                         byte_9788:	dc.b 4
00007841 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
00007846 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000784B FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
00007850 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
00007855 04                         byte_979D:	dc.b 4
00007856 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000785B EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
00007860 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
00007865 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000786A 06                         byte_97B2:	dc.b 6
0000786B F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
00007870 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
00007875 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000787A F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000787F 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
00007884 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
00007889 01                         byte_97D1:	dc.b 1
0000788A F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000788F 01                         byte_97D7:	dc.b 1
00007890 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
00007896 00                         		even
00007896 00                         		even
00007896                            
00007896                            ; ===========================================================================
00007896                            ; ---------------------------------------------------------------------------
00007896                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00007896                            ; ---------------------------------------------------------------------------
00007896                            
00007896                            Obj22:					; XREF: Obj_Index
00007896 7000                       		moveq	#0,d0
00007898 1028 0024                  		move.b	$24(a0),d0
0000789C 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
000078A0 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
000078A4                            ; ===========================================================================
000078A4 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
000078A6 0000                       		dc.w Obj22_Action-Obj22_Index
000078A8 0000                       		dc.w Obj22_Delete-Obj22_Index
000078AA                            ; ===========================================================================
000078AA                            
000078AA                            Obj22_Main:				; XREF: Obj22_Index
000078AA 5428 0024                  		addq.b	#2,$24(a0)
000078AE 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
000078B6 317C 0444 0002             		move.w	#$444,2(a0)
000078BC 117C 0004 0001             		move.b	#4,1(a0)
000078C2 117C 0003 0018             		move.b	#3,$18(a0)
000078C8 117C 0008 0020             		move.b	#8,$20(a0)
000078CE 117C 0018 0019             		move.b	#$18,$19(a0)
000078D4                            
000078D4                            Obj22_Action:				; XREF: Obj22_Index
000078D4 7000                       		moveq	#0,d0
000078D6 1028 0025                  		move.b	$25(a0),d0
000078DA 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
000078DE 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
000078E2 43F9 0000 0000             		lea	(Ani_obj22).l,a1
000078E8 6100 0000                  		bsr.w	AnimateSprite
000078EC 6000 0000                  		bra.w	MarkObjGone
000078F0                            ; ===========================================================================
000078F0 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
000078F2 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
000078F4                            ; ===========================================================================
000078F4                            
000078F4                            Obj22_Move:				; XREF: Obj22_Index2
000078F4 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
000078F8 6A00                       		bpl.s	locret_986C	; if time remains, branch
000078FA 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00007900 6600                       		bne.s	Obj22_Fire	; if yes, branch
00007902 5428 0025                  		addq.b	#2,$25(a0)
00007906 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000790C 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00007912 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00007918 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000791E 6600                       		bne.s	locret_986C	; if not, branch
00007920 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00007924                            
00007924                            locret_986C:
00007924 4E75                       		rts	
00007926                            ; ===========================================================================
00007926                            
00007926                            Obj22_Fire:				; XREF: Obj22_Move
00007926 6100 0000                  		bsr.w	SingleObjLoad
0000792A 6600                       		bne.s	locret_98D0
0000792C 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00007930 3368 0008 0008             		move.w	8(a0),8(a1)
00007936 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000793C 0669 001C 000C             		addi.w	#$1C,$C(a1)
00007942 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00007948 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000794E 303C 0018                  		move.w	#$18,d0
00007952 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00007958 6600                       		bne.s	loc_98AA	; if not, branch
0000795A 4440                       		neg.w	d0
0000795C 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00007960                            
00007960                            loc_98AA:
00007964 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000796A 337C 000E 0032             		move.w	#$E,$32(a1)
00007970 2348 003C                  		move.l	a0,$3C(a1)
00007974 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000797A 317C 003B 0032             		move.w	#$3B,$32(a0)
00007980 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00007986                            
00007986                            locret_98D0:
00007986 4E75                       		rts	
00007988                            ; ===========================================================================
00007988                            
00007988                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00007988 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000798C 6B00                       		bmi.s	Obj22_ChgDir
0000798E 6100 0000                  		bsr.w	SpeedToPos
00007992 4A28 0034                  		tst.b	$34(a0)
00007996 6600                       		bne.s	locret_992A
00007998 3038 D008                  		move.w	($FFFFD008).w,d0
000079A0 6A00                       		bpl.s	Obj22_SetNrSonic
000079A2 4440                       		neg.w	d0
000079A4                            
000079A4                            Obj22_SetNrSonic:
000079A4 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
000079A8 6400                       		bcc.s	locret_992A	; if not, branch
000079AA 4A28 0001                  		tst.b	1(a0)
000079AE 6A00                       		bpl.s	locret_992A
000079B0 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
000079B6 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
000079BC 6000                       		bra.s	Obj22_Stop
000079BE                            ; ===========================================================================
000079BE                            
000079BE                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
000079BE 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
000079C4 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
000079CA 317C 003B 0032             		move.w	#59,$32(a0)
000079D0                            
000079D0                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
000079D0 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
000079D4 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
000079DA 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
000079E0                            
000079E0                            locret_992A:
000079E0 4E75                       		rts	
000079E2                            ; ===========================================================================
000079E2                            
000079E2                            Obj22_Delete:				; XREF: Obj22_Index
000079E2 6100 0000                  		bsr.w	DeleteObject
000079E6 4E75                       		rts	
000079E8                            ; ===========================================================================
000079E8                            ; ---------------------------------------------------------------------------
000079E8                            ; Object 23 - missile that Buzz	Bomber throws
000079E8                            ; ---------------------------------------------------------------------------
000079E8                            
000079E8                            Obj23:					; XREF: Obj_Index
000079E8 7000                       		moveq	#0,d0
000079EA 1028 0024                  		move.b	$24(a0),d0
000079EE 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
000079F2 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
000079F6                            ; ===========================================================================
000079F6 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
000079F8 0000                       		dc.w Obj23_Animate-Obj23_Index
000079FA 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
000079FC 0000                       		dc.w Obj23_Delete-Obj23_Index
000079FE 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00007A00                            ; ===========================================================================
00007A00                            
00007A00                            Obj23_Main:				; XREF: Obj23_Index
00007A00 5368 0032                  		subq.w	#1,$32(a0)
00007A04 6A00                       		bpl.s	Obj23_ChkCancel
00007A06 5428 0024                  		addq.b	#2,$24(a0)
00007A0A 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00007A12 317C 2444 0002             		move.w	#$2444,2(a0)
00007A18 117C 0004 0001             		move.b	#4,1(a0)
00007A1E 117C 0003 0018             		move.b	#3,$18(a0)
00007A24 117C 0008 0019             		move.b	#8,$19(a0)
00007A2A 0228 0003 0022             		andi.b	#3,$22(a0)
00007A30 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00007A34 6700                       		beq.s	Obj23_Animate	; if not, branch
00007A36 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00007A3C 117C 0087 0020             		move.b	#$87,$20(a0)
00007A42 117C 0001 001C             		move.b	#1,$1C(a0)
00007A48 6000                       		bra.s	Obj23_Animate2
00007A4A                            ; ===========================================================================
00007A4A                            
00007A4A                            Obj23_Animate:				; XREF: Obj23_Index
00007A4A 6100                       		bsr.s	Obj23_ChkCancel
00007A4C 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00007A52 6100 0000                  		bsr.w	AnimateSprite
00007A56 6000 0000                  		bra.w	DisplaySprite
00007A5A                            ; ---------------------------------------------------------------------------
00007A5A                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00007A5A                            ; destroyed, and if it has, then cancel	the missile
00007A5A                            ; ---------------------------------------------------------------------------
00007A5A                            
00007A5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A5A                            
00007A5A                            
00007A5A                            Obj23_ChkCancel:			; XREF: Obj23_Main
00007A5A 2268 003C                  		movea.l	$3C(a0),a1
00007A5E 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00007A62 6700                       		beq.s	Obj23_Delete	; if yes, branch
00007A64 4E75                       		rts	
00007A66                            ; End of function Obj23_ChkCancel
00007A66                            
00007A66                            ; ===========================================================================
00007A66                            
00007A66                            Obj23_FromBuzz:				; XREF: Obj23_Index
00007A66 0828 0007 0022             		btst	#7,$22(a0)
00007A6C 6600                       		bne.s	Obj23_Explode
00007A6E 117C 0087 0020             		move.b	#$87,$20(a0)
00007A74 117C 0001 001C             		move.b	#1,$1C(a0)
00007A7A 6100 0000                  		bsr.w	SpeedToPos
00007A7E 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00007A84 6100 0000                  		bsr.w	AnimateSprite
00007A88 6100 0000                  		bsr.w	DisplaySprite
00007A8C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00007A90 0640 00E0                  		addi.w	#$E0,d0
00007A94 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00007A98 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00007A9A 4E75                       		rts	
00007A9C                            ; ===========================================================================
00007A9C                            
00007A9C                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00007A9C 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00007AA0 117C 0000 0024             		move.b	#0,$24(a0)
00007AA6 6000 F30A                  		bra.w	Obj24
00007AAA                            ; ===========================================================================
00007AAA                            
00007AAA                            Obj23_Delete:				; XREF: Obj23_Index
00007AAA 6100 0000                  		bsr.w	DeleteObject
00007AAE 4E75                       		rts	
00007AB0                            ; ===========================================================================
00007AB0                            
00007AB0                            Obj23_FromNewt:				; XREF: Obj23_Index
00007AB0 4A28 0001                  		tst.b	1(a0)
00007AB4 6AF4                       		bpl.s	Obj23_Delete
00007AB6 6100 0000                  		bsr.w	SpeedToPos
00007ABA                            
00007ABA                            Obj23_Animate2:				; XREF: Obj23_Main
00007ABA 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00007AC0 6100 0000                  		bsr.w	AnimateSprite
00007AC4 6100 0000                  		bsr.w	DisplaySprite
00007AC8 4E75                       		rts	
00007ACA                            ; ===========================================================================
00007ACA                            Ani_obj22:
00007ACA                            	include "_anim\obj22.asm"
00007ACA                            ; ---------------------------------------------------------------------------
00007ACA                            ; Animation script - Buzz Bomber enemy
00007ACA                            ; ---------------------------------------------------------------------------
00007ACA 0000                       		dc.w byte_9A1E-Ani_obj22
00007ACC 0000                       		dc.w byte_9A22-Ani_obj22
00007ACE 0000                       		dc.w byte_9A26-Ani_obj22
00007AD0 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00007AD4 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00007AD8 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00007ADC                            		even
00007ADC                            		even
00007ADC                            
00007ADC                            Ani_obj23:
00007ADC                            	include "_anim\obj23.asm"
00007ADC                            ; ---------------------------------------------------------------------------
00007ADC                            ; Animation script - missile that Buzz Bomber throws
00007ADC                            ; ---------------------------------------------------------------------------
00007ADC 0000                       		dc.w byte_9A2E-Ani_obj23
00007ADE 0000                       		dc.w byte_9A32-Ani_obj23
00007AE0 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00007AE4 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00007AE8                            		even
00007AE8                            		even
00007AE8                            
00007AE8                            ; ---------------------------------------------------------------------------
00007AE8                            ; Sprite mappings - Buzz Bomber	enemy
00007AE8                            ; ---------------------------------------------------------------------------
00007AE8                            Map_obj22:
00007AE8                            	include "_maps\obj22.asm"
00007AE8                            ; ---------------------------------------------------------------------------
00007AE8                            ; Sprite mappings - Buzz Bomber	enemy
00007AE8                            ; ---------------------------------------------------------------------------
00007AE8 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
00007AEC 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
00007AF0 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
00007AF4 06                         byte_9A42:	dc.b 6
00007AF5 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00007AFA F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00007AFF 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00007B04 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00007B09 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00007B0E F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00007B13 06                         byte_9A61:	dc.b 6
00007B14 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00007B19 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00007B1E 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00007B23 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00007B28 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00007B2D F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00007B32 07                         byte_9A80:	dc.b 7
00007B33 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
00007B38 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00007B3D F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00007B42 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00007B47 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00007B4C F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00007B51 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00007B56 07                         byte_9AA4:	dc.b 7
00007B57 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
00007B5C F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00007B61 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00007B66 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00007B6B 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00007B70 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00007B75 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00007B7A 06                         byte_9AC8:	dc.b 6
00007B7B F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
00007B80 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
00007B85 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
00007B8A 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
00007B8F F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00007B94 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00007B99 04                         byte_9AE7:	dc.b 4
00007B9A F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
00007B9F 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
00007BA4 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
00007BA9 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
00007BAE F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00007BB3 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00007BB8                            		even
00007BB8                            		even
00007BB8                            
00007BB8                            ; ---------------------------------------------------------------------------
00007BB8                            ; Sprite mappings - missile that Buzz Bomber throws
00007BB8                            ; ---------------------------------------------------------------------------
00007BB8                            Map_obj23:
00007BB8                            	include "_maps\obj23.asm"
00007BB8                            ; ---------------------------------------------------------------------------
00007BB8                            ; Sprite mappings - missile that Buzz Bomber throws
00007BB8                            ; ---------------------------------------------------------------------------
00007BB8 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00007BBC 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00007BC0 01                         byte_9B0E:	dc.b 1
00007BC1 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00007BC6 01                         byte_9B14:	dc.b 1
00007BC7 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00007BCC 01                         byte_9B1A:	dc.b 1
00007BCD F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00007BD2 01                         byte_9B20:	dc.b 1
00007BD3 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
00007BD8                            		even
00007BD8                            		even
00007BD8                            
00007BD8                            ; ===========================================================================
00007BD8                            ; ---------------------------------------------------------------------------
00007BD8                            ; Object 25 - rings
00007BD8                            ; ---------------------------------------------------------------------------
00007BD8                            
00007BD8                            Obj25:					; XREF: Obj_Index
00007BD8 7000                       		moveq	#0,d0
00007BDA 1028 0024                  		move.b	$24(a0),d0
00007BDE 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
00007BE2 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
00007BE6                            ; ===========================================================================
00007BE6 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
00007BE8 0000                       		dc.w Obj25_Animate-Obj25_Index
00007BEA 0000                       		dc.w Obj25_Collect-Obj25_Index
00007BEC 0000                       		dc.w Obj25_Sparkle-Obj25_Index
00007BEE 0000                       		dc.w Obj25_Delete-Obj25_Index
00007BF0                            ; ---------------------------------------------------------------------------
00007BF0                            ; Distances between rings (format: horizontal, vertical)
00007BF0                            ; ---------------------------------------------------------------------------
00007BF0 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
00007BF2 1800                       		dc.b $18, 0		; horizontal normal
00007BF4 2000                       		dc.b $20, 0		; horizontal wide
00007BF6 0010                       		dc.b 0,	$10		; vertical tight
00007BF8 0018                       		dc.b 0,	$18		; vertical normal
00007BFA 0020                       		dc.b 0,	$20		; vertical wide
00007BFC 1010                       		dc.b $10, $10		; diagonal
00007BFE 1818                       		dc.b $18, $18
00007C00 2020                       		dc.b $20, $20
00007C02 F010                       		dc.b $F0, $10
00007C04 E818                       		dc.b $E8, $18
00007C06 E020                       		dc.b $E0, $20
00007C08 1008                       		dc.b $10, 8
00007C0A 1810                       		dc.b $18, $10
00007C0C F008                       		dc.b $F0, 8
00007C0E E810                       		dc.b $E8, $10
00007C10                            ; ===========================================================================
00007C10                            
00007C10                            Obj25_Main:				; XREF: Obj25_Index
00007C10 45F8 FC00                  		lea	($FFFFFC00).w,a2
00007C14 7000                       		moveq	#0,d0
00007C16 1028 0023                  		move.b	$23(a0),d0
00007C1A 45F2 0002                  		lea	2(a2,d0.w),a2
00007C1E 1812                       		move.b	(a2),d4
00007C20 1228 0028                  		move.b	$28(a0),d1
00007C24 1001                       		move.b	d1,d0
00007C26 0241 0007                  		andi.w	#7,d1
00007C2A 0C41 0007                  		cmpi.w	#7,d1
00007C2E 6600                       		bne.s	loc_9B80
00007C30 7206                       		moveq	#6,d1
00007C32                            
00007C32                            loc_9B80:
00007C32 4841                       		swap	d1
00007C34 323C 0000                  		move.w	#0,d1
00007C38 E808                       		lsr.b	#4,d0
00007C3C 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
00007C40 4885                       		ext.w	d5
00007C42 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
00007C46 4886                       		ext.w	d6
00007C48 2248                       		movea.l	a0,a1
00007C4A 3428 0008                  		move.w	8(a0),d2
00007C4E 3628 000C                  		move.w	$C(a0),d3
00007C52 E20C                       		lsr.b	#1,d4
00007C54 6500                       		bcs.s	loc_9C02
00007C56 0892 0007                  		bclr	#7,(a2)
00007C5A 6000                       		bra.s	loc_9BBA
00007C5C                            ; ===========================================================================
00007C5C                            
00007C5C                            Obj25_MakeRings:
00007C5C 4841                       		swap	d1
00007C5E E20C                       		lsr.b	#1,d4
00007C60 6500                       		bcs.s	loc_9C02
00007C62 0892 0007                  		bclr	#7,(a2)
00007C66 6100 0000                  		bsr.w	SingleObjLoad
00007C6A 6600                       		bne.s	loc_9C0E
00007C6C                            
00007C6C                            loc_9BBA:				; XREF: Obj25_Main
00007C6C 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
00007C70 5429 0024                  		addq.b	#2,$24(a1)
00007C74 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
00007C78 3368 0008 0032             		move.w	8(a0),$32(a1)
00007C7E 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
00007C82 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00007C8A 337C 27B2 0002             		move.w	#$27B2,2(a1)
00007C90 137C 0004 0001             		move.b	#4,1(a1)
00007C96 137C 0002 0018             		move.b	#2,$18(a1)
00007C9C 137C 0047 0020             		move.b	#$47,$20(a1)
00007CA2 137C 0008 0019             		move.b	#8,$19(a1)
00007CA8 1368 0023 0023             		move.b	$23(a0),$23(a1)
00007CAE 1341 0034                  		move.b	d1,$34(a1)
00007CB2                            
00007CB2                            loc_9C02:
00007CB2 5241                       		addq.w	#1,d1
00007CB8 4841                       		swap	d1
00007CBA 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
00007CBE                            
00007CBE                            loc_9C0E:
00007CBE 0812 0000                  		btst	#0,(a2)
00007CC2 6600 0000                  		bne.w	DeleteObject
00007CC6                            
00007CC6                            Obj25_Animate:				; XREF: Obj25_Index
00007CC6 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
00007CCC 6100 0000                  		bsr.w	DisplaySprite
00007CD0 3028 0032                  		move.w	$32(a0),d0
00007CD4 0240 FF80                  		andi.w	#$FF80,d0
00007CD8 3238 F700                  		move.w	($FFFFF700).w,d1
00007CDC 0441 0080                  		subi.w	#$80,d1
00007CE0 0241 FF80                  		andi.w	#$FF80,d1
00007CE6 0C40 0280                  		cmpi.w	#$280,d0
00007CEA 6200                       		bhi.s	Obj25_Delete
00007CEC 4E75                       		rts	
00007CEE                            ; ===========================================================================
00007CEE                            
00007CEE                            Obj25_Collect:				; XREF: Obj25_Index
00007CEE 5428 0024                  		addq.b	#2,$24(a0)
00007CF2 117C 0000 0020             		move.b	#0,$20(a0)
00007CF8 117C 0001 0018             		move.b	#1,$18(a0)
00007CFE 6100 0000                  		bsr.w	CollectRing
00007D02 45F8 FC00                  		lea	($FFFFFC00).w,a2
00007D06 7000                       		moveq	#0,d0
00007D08 1028 0023                  		move.b	$23(a0),d0
00007D0C 1228 0034                  		move.b	$34(a0),d1
00007D10 03F2 0002                  		bset	d1,2(a2,d0.w)
00007D14                            
00007D14                            Obj25_Sparkle:				; XREF: Obj25_Index
00007D14 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00007D1A 6100 0000                  		bsr.w	AnimateSprite
00007D1E 6000 0000                  		bra.w	DisplaySprite
00007D22                            ; ===========================================================================
00007D22                            
00007D22                            Obj25_Delete:				; XREF: Obj25_Index
00007D22 6000 0000                  		bra.w	DeleteObject
00007D26                            
00007D26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D26                            
00007D26                            
00007D26                            CollectRing:				; XREF: Obj25_Collect
00007D26 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
00007D2A 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
00007D30 303C 00B5                  		move.w	#$B5,d0		; play ring sound
00007D34 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
00007D3A 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
00007D3C 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
00007D42 6700                       		beq.s	loc_9CA4
00007D44 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
00007D4A 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
00007D4C 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
00007D52 6600                       		bne.s	Obj25_PlaySnd
00007D54                            
00007D54                            loc_9CA4:
00007D54 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
00007D58 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
00007D5C 303C 0088                  		move.w	#$88,d0		; play extra life music
00007D60                            
00007D60                            Obj25_PlaySnd:
00007D60 4EF9 0000 1020             		jmp	(PlaySound_Special).l
00007D66                            ; End of function CollectRing
00007D66                            
00007D66                            ; ===========================================================================
00007D66                            ; ---------------------------------------------------------------------------
00007D66                            ; Object 37 - rings flying out of Sonic	when he's hit
00007D66                            ; ---------------------------------------------------------------------------
00007D66                            
00007D66                            Obj37:					; XREF: Obj_Index
00007D66 7000                       		moveq	#0,d0
00007D68 1028 0024                  		move.b	$24(a0),d0
00007D6C 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
00007D70 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
00007D74                            ; ===========================================================================
00007D74 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
00007D76 0000                       		dc.w Obj37_Bounce-Obj37_Index
00007D78 0000                       		dc.w Obj37_Collect-Obj37_Index
00007D7A 0000                       		dc.w Obj37_Sparkle-Obj37_Index
00007D7C 0000                       		dc.w Obj37_Delete-Obj37_Index
00007D7E                            ; ===========================================================================
00007D7E                            
00007D7E                            Obj37_CountRings:			; XREF: Obj37_Index
00007D7E 2248                       		movea.l	a0,a1
00007D80 7A00                       		moveq	#0,d5
00007D82 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
00007D86 7020                       		moveq	#32,d0
00007D88 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
00007D8A 6500                       		bcs.s	loc_9CDE	; if not, branch
00007D8C 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
00007D8E                            
00007D8E                            loc_9CDE:
00007D8E 5345                       		subq.w	#1,d5
00007D90 383C 0288                  		move.w	#$288,d4
00007D94 6000                       		bra.s	Obj37_MakeRings
00007D96                            ; ===========================================================================
00007D96                            
00007D96                            Obj37_Loop:
00007D96 6100 0000                  		bsr.w	SingleObjLoad
00007D9A 6600 0000                  		bne.w	Obj37_ResetCounter
00007D9E                            
00007D9E                            Obj37_MakeRings:			; XREF: Obj37_CountRings
00007D9E 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
00007DA2 5429 0024                  		addq.b	#2,$24(a1)
00007DA6 137C 0008 0016             		move.b	#8,$16(a1)
00007DAC 137C 0008 0017             		move.b	#8,$17(a1)
00007DB2 3368 0008 0008             		move.w	8(a0),8(a1)
00007DB8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00007DBE 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00007DC6 337C 27B2 0002             		move.w	#$27B2,2(a1)
00007DCC 137C 0004 0001             		move.b	#4,1(a1)
00007DD2 137C 0003 0018             		move.b	#3,$18(a1)
00007DD8 137C 0047 0020             		move.b	#$47,$20(a1)
00007DDE 137C 0008 0019             		move.b	#8,$19(a1)
00007DE4 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
00007DEA 4A44                       		tst.w	d4
00007DEC 6B00                       		bmi.s	loc_9D62
00007DEE 3004                       		move.w	d4,d0
00007DF0 6100 A764                  		bsr.w	CalcSine
00007DF4 3404                       		move.w	d4,d2
00007DF6 E04A                       		lsr.w	#8,d2
00007DF8 E560                       		asl.w	d2,d0
00007DFA E561                       		asl.w	d2,d1
00007DFC 3400                       		move.w	d0,d2
00007DFE 3601                       		move.w	d1,d3
00007E00 0604 0010                  		addi.b	#$10,d4
00007E04 6400                       		bcc.s	loc_9D62
00007E06 0444 0080                  		subi.w	#$80,d4
00007E0A 6400                       		bcc.s	loc_9D62
00007E0C 383C 0288                  		move.w	#$288,d4
00007E10                            
00007E10                            loc_9D62:
00007E10 3342 0010                  		move.w	d2,$10(a1)
00007E14 3343 0012                  		move.w	d3,$12(a1)
00007E18 4442                       		neg.w	d2
00007E1A 4444                       		neg.w	d4
00007E1C 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
00007E20                            
00007E20                            Obj37_ResetCounter:			; XREF: Obj37_Loop
00007E20 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
00007E26 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
00007E2C 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
00007E32 303C 00C6                  		move.w	#$C6,d0
00007E36 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play ring loss sound
00007E3C                            
00007E3C                            Obj37_Bounce:				; XREF: Obj37_Index
00007E3C 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
00007E42 6100 0000                  		bsr.w	SpeedToPos
00007E46 0668 0018 0012             		addi.w	#$18,$12(a0)
00007E4C 6B00                       		bmi.s	Obj37_ChkDel
00007E4E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00007E54 0200 0003                  		andi.b	#3,d0
00007E58 6600                       		bne.s	Obj37_ChkDel
00007E5A 4EB9 0000 0000             		jsr	ObjHitFloor
00007E60 4A41                       		tst.w	d1
00007E62 6A00                       		bpl.s	Obj37_ChkDel
00007E68 3028 0012                  		move.w	$12(a0),d0
00007E6C E440                       		asr.w	#2,d0
00007E72 4468 0012                  		neg.w	$12(a0)
00007E76                            
00007E76                            Obj37_ChkDel:				; XREF: Obj37_Bounce
00007E76 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00007E7A 6700                       		beq.s	Obj37_Delete
00007E7C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00007E80 0640 00E0                  		addi.w	#$E0,d0
00007E84 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
00007E88 6500                       		bcs.s	Obj37_Delete	; if yes, branch
00007E8A 6000 0000                  		bra.w	DisplaySprite
00007E8E                            ; ===========================================================================
00007E8E                            
00007E8E                            Obj37_Collect:				; XREF: Obj37_Index
00007E8E 5428 0024                  		addq.b	#2,$24(a0)
00007E92 117C 0000 0020             		move.b	#0,$20(a0)
00007E98 117C 0001 0018             		move.b	#1,$18(a0)
00007E9E 6100 FE86                  		bsr.w	CollectRing
00007EA2                            
00007EA2                            Obj37_Sparkle:				; XREF: Obj37_Index
00007EA2 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00007EA8 6100 0000                  		bsr.w	AnimateSprite
00007EAC 6000 0000                  		bra.w	DisplaySprite
00007EB0                            ; ===========================================================================
00007EB0                            
00007EB0                            Obj37_Delete:				; XREF: Obj37_Index
00007EB0 6000 0000                  		bra.w	DeleteObject
00007EB4                            ; ===========================================================================
00007EB4                            ; ---------------------------------------------------------------------------
00007EB4                            ; Object 4B - giant ring for entry to special stage
00007EB4                            ; ---------------------------------------------------------------------------
00007EB4                            
00007EB4                            Obj4B:					; XREF: Obj_Index
00007EB4 7000                       		moveq	#0,d0
00007EB6 1028 0024                  		move.b	$24(a0),d0
00007EBA 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
00007EBE 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
00007EC2                            ; ===========================================================================
00007EC2 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
00007EC4 0000                       		dc.w Obj4B_Animate-Obj4B_Index
00007EC6 0000                       		dc.w Obj4B_Collect-Obj4B_Index
00007EC8 0000                       		dc.w Obj4B_Delete-Obj4B_Index
00007ECA                            ; ===========================================================================
00007ECA                            
00007ECA                            Obj4B_Main:				; XREF: Obj4B_Index
00007ECA 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
00007ED2 317C 2400 0002             		move.w	#$2400,2(a0)
00007ED8 0028 0004 0001             		ori.b	#4,1(a0)
00007EDE 117C 0040 0019             		move.b	#$40,$19(a0)
00007EE4 4A28 0001                  		tst.b	1(a0)
00007EE8 6A00                       		bpl.s	Obj4B_Animate
00007EEA 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
00007EF0 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
00007EF4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
00007EFA 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
00007EFC 4E75                       		rts	
00007EFE                            ; ===========================================================================
00007EFE                            
00007EFE                            Obj4B_Okay:				; XREF: Obj4B_Main
00007EFE 5428 0024                  		addq.b	#2,$24(a0)
00007F02 117C 0002 0018             		move.b	#2,$18(a0)
00007F08 117C 0052 0020             		move.b	#$52,$20(a0)
00007F0E 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
00007F14                            
00007F14                            Obj4B_Animate:				; XREF: Obj4B_Index
00007F14 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
00007F1A 3028 0008                  		move.w	8(a0),d0
00007F1E 0240 FF80                  		andi.w	#$FF80,d0
00007F22 3238 F700                  		move.w	($FFFFF700).w,d1
00007F26 0441 0080                  		subi.w	#$80,d1
00007F2A 0241 FF80                  		andi.w	#$FF80,d1
00007F30 0C40 0280                  		cmpi.w	#$280,d0
00007F34 6200 0000                  		bhi.w	DeleteObject
00007F38 6000 0000                  		bra.w	DisplaySprite
00007F3C                            ; ===========================================================================
00007F3C                            
00007F3C                            Obj4B_Collect:				; XREF: Obj4B_Index
00007F3C 5528 0024                  		subq.b	#2,$24(a0)
00007F40 117C 0000 0020             		move.b	#0,$20(a0)
00007F46 6100 0000                  		bsr.w	SingleObjLoad
00007F4A 6600 0000                  		bne.w	Obj4B_PlaySnd
00007F4E 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
00007F52 3368 0008 0008             		move.w	8(a0),8(a1)
00007F58 3368 000C 000C             		move.w	$C(a0),$C(a1)
00007F5E 2348 003C                  		move.l	a0,$3C(a1)
00007F62 3038 D008                  		move.w	($FFFFD008).w,d0
00007F66 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
00007F6A 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
00007F6C 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
00007F72                            
00007F72                            Obj4B_PlaySnd:
00007F72 303C 00C3                  		move.w	#$C3,d0
00007F76 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play giant ring	sound
00007F7C 6096                       		bra.s	Obj4B_Animate
00007F7E                            ; ===========================================================================
00007F7E                            
00007F7E                            Obj4B_Delete:				; XREF: Obj4B_Index
00007F7E 6000 0000                  		bra.w	DeleteObject
00007F82                            ; ===========================================================================
00007F82                            ; ---------------------------------------------------------------------------
00007F82                            ; Object 7C - flash effect when	you collect the	giant ring
00007F82                            ; ---------------------------------------------------------------------------
00007F82                            
00007F82                            Obj7C:					; XREF: Obj_Index
00007F82 7000                       		moveq	#0,d0
00007F84 1028 0024                  		move.b	$24(a0),d0
00007F88 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
00007F8C 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
00007F90                            ; ===========================================================================
00007F90 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
00007F92 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
00007F94 0000                       		dc.w Obj7C_Delete-Obj7C_Index
00007F96                            ; ===========================================================================
00007F96                            
00007F96                            Obj7C_Main:				; XREF: Obj7C_Index
00007F96 5428 0024                  		addq.b	#2,$24(a0)
00007F9A 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
00007FA2 317C 2462 0002             		move.w	#$2462,2(a0)
00007FA8 0028 0004 0001             		ori.b	#4,1(a0)
00007FAE 117C 0000 0018             		move.b	#0,$18(a0)
00007FB4 117C 0020 0019             		move.b	#$20,$19(a0)
00007FBA 117C 00FF 001A             		move.b	#$FF,$1A(a0)
00007FC0                            
00007FC0                            Obj7C_ChkDel:				; XREF: Obj7C_Index
00007FC0 6100                       		bsr.s	Obj7C_Collect
00007FC2 3028 0008                  		move.w	8(a0),d0
00007FC6 0240 FF80                  		andi.w	#$FF80,d0
00007FCA 3238 F700                  		move.w	($FFFFF700).w,d1
00007FCE 0441 0080                  		subi.w	#$80,d1
00007FD2 0241 FF80                  		andi.w	#$FF80,d1
00007FD8 0C40 0280                  		cmpi.w	#$280,d0
00007FDC 6200 0000                  		bhi.w	DeleteObject
00007FE0 6000 0000                  		bra.w	DisplaySprite
00007FE4                            
00007FE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FE4                            
00007FE4                            
00007FE4                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
00007FE4 5328 001E                  		subq.b	#1,$1E(a0)
00007FE8 6A00                       		bpl.s	locret_9F76
00007FEA 117C 0001 001E             		move.b	#1,$1E(a0)
00007FF0 5228 001A                  		addq.b	#1,$1A(a0)
00007FF4 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
00007FFA 6400                       		bcc.s	Obj7C_End	; if yes, branch
00007FFC 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
00008002 6600                       		bne.s	locret_9F76	; if not, branch
00008004 2268 003C                  		movea.l	$3C(a0),a1
00008008 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000800E 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
00008014 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000801A 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000801E 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
00008022                            
00008022                            locret_9F76:
00008022 4E75                       		rts	
00008024                            ; ===========================================================================
00008024                            
00008024                            Obj7C_End:				; XREF: Obj7C_Collect
00008024 5428 0024                  		addq.b	#2,$24(a0)
00008028 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000802E 588F                       		addq.l	#4,sp
00008030 4E75                       		rts	
00008032                            ; End of function Obj7C_Collect
00008032                            
00008032                            ; ===========================================================================
00008032                            
00008032                            Obj7C_Delete:				; XREF: Obj7C_Index
00008032 6000 0000                  		bra.w	DeleteObject
00008036                            ; ===========================================================================
00008036                            Ani_obj25:
00008036                            	include "_anim\obj25.asm"
00008036                            ; ---------------------------------------------------------------------------
00008036                            ; Animation script - ring
00008036                            ; ---------------------------------------------------------------------------
00008036 0000                       		dc.w byte_9F8C-Ani_obj25
00008038 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000803E                            		even
0000803E                            		even
0000803E                            
0000803E                            ; ---------------------------------------------------------------------------
0000803E                            ; Sprite mappings - rings
0000803E                            ; ---------------------------------------------------------------------------
0000803E                            Map_obj25:
0000803E                            	include "_maps\obj25.asm"
0000803E                            ; ---------------------------------------------------------------------------
0000803E                            ; Sprite mappings - rings
0000803E                            ; ---------------------------------------------------------------------------
0000803E 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
00008042 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
00008046 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000804A 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000804E 01                         byte_9FA2:	dc.b 1
0000804F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008054 01                         byte_9FA8:	dc.b 1
00008055 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000805A 01                         byte_9FAE:	dc.b 1
0000805B F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
00008060 01                         byte_9FB4:	dc.b 1
00008061 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
00008066 01                         byte_9FBA:	dc.b 1
00008067 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000806C 01                         byte_9FC0:	dc.b 1
0000806D F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
00008072 01                         byte_9FC6:	dc.b 1
00008073 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
00008078 01                         byte_9FCC:	dc.b 1
00008079 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000807E                            		even
0000807E                            		even
0000807E                            
0000807E                            ; ---------------------------------------------------------------------------
0000807E                            ; Sprite mappings - giant ring
0000807E                            ; ---------------------------------------------------------------------------
0000807E                            Map_obj4B:
0000807E                            	include "_maps\obj4B.asm"
0000807E                            ; ---------------------------------------------------------------------------
0000807E                            ; Sprite mappings - giant ring
0000807E                            ; ---------------------------------------------------------------------------
0000807E 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
00008082 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
00008086 0A                         byte_9FDA:	dc.b $A
00008087 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000808C E008 0003 00               		dc.b $E0, 8, 0,	3, 0
00008091 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
00008096 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000809B F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
000080A0 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
000080A5 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
000080AA 100C 0022 00               		dc.b $10, $C, 0, $22, 0
000080AF 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
000080B4 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
000080B9 08                         byte_A00D:	dc.b 8
000080BA E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
000080BF E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
000080C4 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
000080C9 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
000080CE F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
000080D3 0809 0045 00               		dc.b 8,	9, 0, $45, 0
000080D8 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
000080DD 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
000080E2 04                         byte_A036:	dc.b 4
000080E3 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
000080E8 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
000080ED 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
000080F2 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
000080F7 08                         byte_A04B:	dc.b 8
000080F8 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
000080FD E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
00008102 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
00008107 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000810C F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
00008111 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
00008116 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000811B 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
00008120                            		even
00008120                            		even
00008120                            
00008120                            ; ---------------------------------------------------------------------------
00008120                            ; Sprite mappings - flash effect when you collect the giant ring
00008120                            ; ---------------------------------------------------------------------------
00008120                            Map_obj7C:
00008120                            	include "_maps\obj7C.asm"
00008120                            ; ---------------------------------------------------------------------------
00008120                            ; Sprite mappings - flash effect when you collect the giant ring
00008120                            ; ---------------------------------------------------------------------------
00008120 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
00008124 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
00008128 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000812C 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
00008130 02                         byte_A084:	dc.b 2
00008131 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
00008136 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000813B 04                         byte_A08F:	dc.b 4
0000813C E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
00008141 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
00008146 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000814B 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
00008150 04                         byte_A0A4:	dc.b 4
00008151 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
00008156 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000815B 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
00008160 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
00008165 04                         byte_A0B9:	dc.b 4
00008166 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000816B E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
00008170 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
00008175 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000817A 04                         byte_A0CE:	dc.b 4
0000817B E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
00008180 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
00008185 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000818A 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000818F 04                         byte_A0E3:	dc.b 4
00008190 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
00008195 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000819A 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000819F 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
000081A4 02                         byte_A0F8:	dc.b 2
000081A5 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
000081AA 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
000081AF 04                         byte_A103:	dc.b 4
000081B0 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
000081B5 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
000081BA 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
000081BF 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
000081C4                            		even
000081C4                            		even
000081C4                            
000081C4                            ; ===========================================================================
000081C4                            ; ---------------------------------------------------------------------------
000081C4                            ; Object 26 - monitors
000081C4                            ; ---------------------------------------------------------------------------
000081C4                            
000081C4                            Obj26:					; XREF: Obj_Index
000081C4 7000                       		moveq	#0,d0
000081C6 1028 0024                  		move.b	$24(a0),d0
000081CA 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
000081CE 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
000081D2                            ; ===========================================================================
000081D2 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
000081D4 0000                       		dc.w Obj26_Solid-Obj26_Index
000081D6 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
000081D8 0000                       		dc.w Obj26_Animate-Obj26_Index
000081DA 0000                       		dc.w Obj26_Display-Obj26_Index
000081DC                            ; ===========================================================================
000081DC                            
000081DC                            Obj26_Main:				; XREF: Obj26_Index
000081DC 5428 0024                  		addq.b	#2,$24(a0)
000081E0 117C 000E 0016             		move.b	#$E,$16(a0)
000081E6 117C 000E 0017             		move.b	#$E,$17(a0)
000081EC 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
000081F4 317C 0680 0002             		move.w	#$680,2(a0)
000081FA 117C 0004 0001             		move.b	#4,1(a0)
00008200 117C 0003 0018             		move.b	#3,$18(a0)
00008206 117C 000F 0019             		move.b	#$F,$19(a0)
0000820C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00008210 7000                       		moveq	#0,d0
00008212 1028 0023                  		move.b	$23(a0),d0
00008216 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000821C 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
00008222 6700                       		beq.s	Obj26_NotBroken	; if not, branch
00008224 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000822A 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
00008230 4E75                       		rts	
00008232                            ; ===========================================================================
00008232                            
00008232                            Obj26_NotBroken:			; XREF: Obj26_Main
00008232 117C 0046 0020             		move.b	#$46,$20(a0)
00008238 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000823E                            
0000823E                            Obj26_Solid:				; XREF: Obj26_Index
0000823E 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
00008242 6700                       		beq.s	loc_A1EC	; if not, branch
00008244 5500                       		subq.b	#2,d0
00008246 6600                       		bne.s	Obj26_Fall
00008248 7200                       		moveq	#0,d1
0000824A 1228 0019                  		move.b	$19(a0),d1
0000824E 0641 000B                  		addi.w	#$B,d1
00008252 6100 D482                  		bsr.w	ExitPlatform
00008256 0829 0003 0022             		btst	#3,$22(a1)
0000825C 6600 0000                  		bne.w	loc_A1BC
00008260 4228 0025                  		clr.b	$25(a0)
00008264 6000 0000                  		bra.w	Obj26_Animate
00008268                            ; ===========================================================================
00008268                            
00008268                            loc_A1BC:				; XREF: Obj26_Solid
00008268 363C 0010                  		move.w	#$10,d3
0000826C 3428 0008                  		move.w	8(a0),d2
00008270 6100 D9C2                  		bsr.w	MvSonicOnPtfm
00008274 6000 0000                  		bra.w	Obj26_Animate
00008278                            ; ===========================================================================
00008278                            
00008278                            Obj26_Fall:				; XREF: Obj26_Solid
00008278 6100 0000                  		bsr.w	ObjectFall
0000827C 4EB9 0000 0000             		jsr	ObjHitFloor
00008282 4A41                       		tst.w	d1
00008284 6A00 0000                  		bpl.w	Obj26_Animate
0000828C 4268 0012                  		clr.w	$12(a0)
00008290 4228 0025                  		clr.b	$25(a0)
00008294 6000 0000                  		bra.w	Obj26_Animate
00008298                            ; ===========================================================================
00008298                            
00008298                            loc_A1EC:				; XREF: Obj26_Solid
00008298 323C 001A                  		move.w	#$1A,d1
0000829C 343C 000F                  		move.w	#$F,d2
000082A0 6100 0000                  		bsr.w	Obj26_SolidSides
000082A4 6700 0000                  		beq.w	loc_A25C
000082A8 4A69 0012                  		tst.w	$12(a1)
000082AC 6B00                       		bmi.s	loc_A20A
000082AE 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
000082B4 6700                       		beq.s	loc_A25C	; if yes, branch
000082B6                            
000082B6                            loc_A20A:
000082B6 4A41                       		tst.w	d1
000082B8 6A00                       		bpl.s	loc_A220
000082BE 6100 D304                  		bsr.w	loc_74AE
000082C2 117C 0002 0025             		move.b	#2,$25(a0)
000082C8 6000 0000                  		bra.w	Obj26_Animate
000082CC                            ; ===========================================================================
000082CC                            
000082CC                            loc_A220:
000082CC 4A40                       		tst.w	d0
000082CE 6700 0000                  		beq.w	loc_A246
000082D2 6B00                       		bmi.s	loc_A230
000082D4 4A69 0010                  		tst.w	$10(a1)
000082D8 6B00                       		bmi.s	loc_A246
000082DA 6000                       		bra.s	loc_A236
000082DC                            ; ===========================================================================
000082DC                            
000082DC                            loc_A230:
000082DC 4A69 0010                  		tst.w	$10(a1)
000082E0 6A00                       		bpl.s	loc_A246
000082E2                            
000082E2                            loc_A236:
000082E6 337C 0000 0014             		move.w	#0,$14(a1)
000082EC 337C 0000 0010             		move.w	#0,$10(a1)
000082F2                            
000082F2                            loc_A246:
000082F2 0829 0001 0022             		btst	#1,$22(a1)
000082F8 6600                       		bne.s	loc_A26A
000082FA 08E9 0005 0022             		bset	#5,$22(a1)
00008300 08E8 0005 0022             		bset	#5,$22(a0)
00008306 6000                       		bra.s	Obj26_Animate
00008308                            ; ===========================================================================
00008308                            
00008308                            loc_A25C:
00008308 0828 0005 0022             		btst	#5,$22(a0)
0000830E 6700                       		beq.s	Obj26_Animate
00008310 337C 0001 001C             		move.w	#1,$1C(a1)
00008316                            
00008316                            loc_A26A:
00008316 08A8 0005 0022             		bclr	#5,$22(a0)
0000831C 08A9 0005 0022             		bclr	#5,$22(a1)
00008322                            
00008322                            Obj26_Animate:				; XREF: Obj26_Index
00008322 43F9 0000 0000             		lea	(Ani_obj26).l,a1
00008328 6100 0000                  		bsr.w	AnimateSprite
0000832C                            
0000832C                            Obj26_Display:				; XREF: Obj26_Index
0000832C 6100 0000                  		bsr.w	DisplaySprite
00008330 3028 0008                  		move.w	8(a0),d0
00008334 0240 FF80                  		andi.w	#$FF80,d0
00008338 3238 F700                  		move.w	($FFFFF700).w,d1
0000833C 0441 0080                  		subi.w	#$80,d1
00008340 0241 FF80                  		andi.w	#$FF80,d1
00008346 0C40 0280                  		cmpi.w	#$280,d0
0000834A 6200 0000                  		bhi.w	DeleteObject
0000834E 4E75                       		rts	
00008350                            ; ===========================================================================
00008350                            
00008350                            Obj26_BreakOpen:			; XREF: Obj26_Index
00008350 5428 0024                  		addq.b	#2,$24(a0)
00008354 117C 0000 0020             		move.b	#0,$20(a0)
0000835A 6100 0000                  		bsr.w	SingleObjLoad
0000835E 6600                       		bne.s	Obj26_Explode
00008360 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
00008364 3368 0008 0008             		move.w	8(a0),8(a1)
0000836A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008370 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
00008376                            
00008376                            Obj26_Explode:
00008376 6100 0000                  		bsr.w	SingleObjLoad
0000837A 6600                       		bne.s	Obj26_SetBroken
0000837C 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
00008380 5429 0024                  		addq.b	#2,$24(a1)
00008384 3368 0008 0008             		move.w	8(a0),8(a1)
0000838A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008390                            
00008390                            Obj26_SetBroken:
00008390 45F8 FC00                  		lea	($FFFFFC00).w,a2
00008394 7000                       		moveq	#0,d0
00008396 1028 0023                  		move.b	$23(a0),d0
0000839A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000083A0 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
000083A6 6000 0000                  		bra.w	DisplaySprite
000083AA                            ; ===========================================================================
000083AA                            ; ---------------------------------------------------------------------------
000083AA                            ; Object 2E - contents of monitors
000083AA                            ; ---------------------------------------------------------------------------
000083AA                            
000083AA                            Obj2E:					; XREF: Obj_Index
000083AA 7000                       		moveq	#0,d0
000083AC 1028 0024                  		move.b	$24(a0),d0
000083B0 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
000083B4 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
000083B8 6000 0000                  		bra.w	DisplaySprite
000083BC                            ; ===========================================================================
000083BC 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
000083BE 0000                       		dc.w Obj2E_Move-Obj2E_Index
000083C0 0000                       		dc.w Obj2E_Delete-Obj2E_Index
000083C2                            ; ===========================================================================
000083C2                            
000083C2                            Obj2E_Main:				; XREF: Obj2E_Index
000083C2 5428 0024                  		addq.b	#2,$24(a0)
000083C6 317C 0680 0002             		move.w	#$680,2(a0)
000083CC 117C 0024 0001             		move.b	#$24,1(a0)
000083D2 117C 0003 0018             		move.b	#3,$18(a0)
000083D8 117C 0008 0019             		move.b	#8,$19(a0)
000083DE 317C FD00 0012             		move.w	#-$300,$12(a0)
000083E4 7000                       		moveq	#0,d0
000083E6 1028 001C                  		move.b	$1C(a0),d0
000083EA 5400                       		addq.b	#2,d0
000083EC 1140 001A                  		move.b	d0,$1A(a0)
000083F0 227C 0000 0000             		movea.l	#Map_obj26,a1
000083F8 D2F1 0000                  		adda.w	(a1,d0.w),a1
000083FC 5249                       		addq.w	#1,a1
000083FE 2149 0004                  		move.l	a1,4(a0)
00008402                            
00008402                            Obj2E_Move:				; XREF: Obj2E_Index
00008402 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00008406 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000840A 6100 0000                  		bsr.w	SpeedToPos
0000840E 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00008414 4E75                       		rts	
00008416                            ; ===========================================================================
00008416                            
00008416                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
00008416 5428 0024                  		addq.b	#2,$24(a0)
0000841A 317C 001D 001E             		move.w	#29,$1E(a0)
00008420 1028 001C                  		move.b	$1C(a0),d0
00008424 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
00008428 6600                       		bne.s	Obj2E_ChkSonic
0000842A 4E75                       		rts			; Eggman monitor does nothing
0000842C                            ; ===========================================================================
0000842C                            
0000842C                            Obj2E_ChkSonic:
0000842C 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
00008430 6600                       		bne.s	Obj2E_ChkShoes
00008432                            
00008432                            ExtraLife:
00008432 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
00008436 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000843A 303C 0088                  		move.w	#$88,d0
0000843E 4EF9 0000 101A             		jmp	(PlaySound).l	; play extra life music
00008444                            ; ===========================================================================
00008444                            
00008444                            Obj2E_ChkShoes:
00008444 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
00008448 6600                       		bne.s	Obj2E_ChkShield
0000844A 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
00008450 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
00008456 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000845C 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
00008462 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
00008468 303C 00E2                  		move.w	#$E2,d0
0000846C 4EF9 0000 101A             		jmp	(PlaySound).l	; Speed	up the music
00008472                            ; ===========================================================================
00008472                            
00008472                            Obj2E_ChkShield:
00008472 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
00008476 6600                       		bne.s	Obj2E_ChkInvinc
00008478 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000847E 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
00008484 303C 00AF                  		move.w	#$AF,d0
00008488 4EF9 0000 101A             		jmp	(PlaySound).l	; play shield sound
0000848E                            ; ===========================================================================
0000848E                            
0000848E                            Obj2E_ChkInvinc:
0000848E 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
00008492 6600                       		bne.s	Obj2E_ChkRings
00008494 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000849A 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
000084A0 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
000084A6 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
000084AC 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
000084B2 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
000084B8 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
000084BE 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
000084C4 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
000084CA 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
000084D0 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
000084D4 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
000084D6 303C 0087                  		move.w	#$87,d0
000084DA 4EF9 0000 101A             		jmp	(PlaySound).l	; play invincibility music
000084E0                            ; ===========================================================================
000084E0                            
000084E0                            Obj2E_NoMusic:
000084E0 4E75                       		rts	
000084E2                            ; ===========================================================================
000084E2                            
000084E2                            Obj2E_ChkRings:
000084E2 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
000084E6 6600                       		bne.s	Obj2E_ChkS
000084E8 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
000084EE 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
000084F4 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
000084FA 6500                       		bcs.s	Obj2E_RingSound
000084FC 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
00008502 6700 FF2E                  		beq.w	ExtraLife
00008506 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000850C 6500                       		bcs.s	Obj2E_RingSound
0000850E 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
00008514 6700 FF1C                  		beq.w	ExtraLife
00008518                            
00008518                            Obj2E_RingSound:
00008518 303C 00B5                  		move.w	#$B5,d0
0000851C 4EF9 0000 101A             		jmp	(PlaySound).l	; play ring sound
00008522                            ; ===========================================================================
00008522                            
00008522                            Obj2E_ChkS:
00008522 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
00008526 6600                       		bne.s	Obj2E_ChkEnd
0000852A                            
0000852A                            Obj2E_ChkEnd:
0000852A 4E75                       		rts			; 'S' and goggles monitors do nothing
0000852C                            ; ===========================================================================
0000852C                            
0000852C                            Obj2E_Delete:				; XREF: Obj2E_Index
0000852C 5368 001E                  		subq.w	#1,$1E(a0)
00008530 6B00 0000                  		bmi.w	DeleteObject
00008534 4E75                       		rts	
00008536                            ; ---------------------------------------------------------------------------
00008536                            ; Subroutine to	make the sides of a monitor solid
00008536                            ; ---------------------------------------------------------------------------
00008536                            
00008536                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008536                            
00008536                            
00008536                            Obj26_SolidSides:			; XREF: loc_A1EC
00008536 43F8 D000                  		lea	($FFFFD000).w,a1
0000853A 3029 0008                  		move.w	8(a1),d0
00008544 6B00                       		bmi.s	loc_A4E6
00008546 3601                       		move.w	d1,d3
0000854A B043                       		cmp.w	d3,d0
0000854C 6200                       		bhi.s	loc_A4E6
0000854E 1629 0016                  		move.b	$16(a1),d3
00008552 4883                       		ext.w	d3
00008556 3629 000C                  		move.w	$C(a1),d3
00008560 6B00                       		bmi.s	loc_A4E6
00008564 B642                       		cmp.w	d2,d3
00008566 6400                       		bcc.s	loc_A4E6
00008568 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000856C 6B00                       		bmi.s	loc_A4E6
0000856E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008574 6400                       		bcc.s	loc_A4E6
00008576 4A78 FE08                  		tst.w	($FFFFFE08).w
0000857A 6600                       		bne.s	loc_A4E6
0000857C B240                       		cmp.w	d0,d1
0000857E 6400                       		bcc.s	loc_A4DC
00008584                            
00008584                            loc_A4DC:
00008584 0C43 0010                  		cmpi.w	#$10,d3
00008588 6500                       		bcs.s	loc_A4EA
0000858A                            
0000858A                            loc_A4E2:
0000858A 7201                       		moveq	#1,d1
0000858C 4E75                       		rts	
0000858E                            ; ===========================================================================
0000858E                            
0000858E                            loc_A4E6:
0000858E 7200                       		moveq	#0,d1
00008590 4E75                       		rts	
00008592                            ; ===========================================================================
00008592                            
00008592                            loc_A4EA:
00008592 7200                       		moveq	#0,d1
00008594 1228 0019                  		move.b	$19(a0),d1
00008598 5841                       		addq.w	#4,d1
0000859A 3401                       		move.w	d1,d2
000085A6 6BE2                       		bmi.s	loc_A4E2
000085A8 B242                       		cmp.w	d2,d1
000085AA 64DE                       		bcc.s	loc_A4E2
000085AC 72FF                       		moveq	#-1,d1
000085AE 4E75                       		rts	
000085B0                            ; End of function Obj26_SolidSides
000085B0                            
000085B0                            ; ===========================================================================
000085B0                            Ani_obj26:
000085B0                            	include "_anim\obj26.asm"
000085B0                            ; ---------------------------------------------------------------------------
000085B0                            ; Animation script - monitors
000085B0                            ; ---------------------------------------------------------------------------
000085B0 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
000085B6 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
000085BC 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
000085C2 0000                       		dc.w byte_A582-Ani_obj26
000085C4 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
000085CA 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
000085D6 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
000085E2 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
000085EE 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
000085FA 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
00008606 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
00008612 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000861E 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000862A 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
00008632                            		even
00008632                            		even
00008632                            
00008632                            ; ---------------------------------------------------------------------------
00008632                            ; Sprite mappings - monitors
00008632                            ; ---------------------------------------------------------------------------
00008632                            Map_obj26:
00008632                            	include "_maps\obj26.asm"
00008632                            ; ---------------------------------------------------------------------------
00008632                            ; Sprite mappings - monitors
00008632                            ; ---------------------------------------------------------------------------
00008632 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
00008636 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000863A 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000863E 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
00008642 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
00008646 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000864A 01                         byte_A5A2:	dc.b 1			; static monitor
0000864B EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
00008650 02                         byte_A5A8:	dc.b 2			; static monitor
00008651 F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
00008656 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000865B 02                         byte_A5B3:	dc.b 2			; static monitor
0000865C F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
00008661 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
00008666 02                         byte_A5BE:	dc.b 2			; Eggman monitor
00008667 F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000866C EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
00008671 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
00008672 F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
00008677 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000867C 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000867D F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
00008682 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
00008687 02                         byte_A5DF:	dc.b 2			; shield monitor
00008688 F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000868D EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
00008692 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
00008693 F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
00008698 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000869D 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000869E F505 0030 F8               		dc.b $F5, 5, 0,	$30, $F8
000086A3 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
000086A8 02                         byte_A600:	dc.b 2			; 'S' monitor
000086A9 F505 0034 F8               byte_A601:	dc.b $F5, 5, 0,	$34, $F8
000086AE EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
000086B3 02                         byte_A60B:	dc.b 2			; goggles monitor
000086B4 F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
000086B9 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
000086BE 01                         byte_A616:	dc.b 1			; broken monitor
000086BF FF0D 0038 F0               		dc.b $FF, $D, 0, $38, $F0
000086C4                            		even
000086C4                            		even
000086C4                            
000086C4                            ; ===========================================================================
000086C4                            ; ---------------------------------------------------------------------------
000086C4                            ; Object 0E - Sonic on the title screen
000086C4                            ; ---------------------------------------------------------------------------
000086C4                            
000086C4                            Obj0E:					; XREF: Obj_Index
000086C4 7000                       		moveq	#0,d0
000086C6 1028 0024                  		move.b	$24(a0),d0
000086CA 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
000086CE 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
000086D2                            ; ===========================================================================
000086D2 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
000086D4 0000                       		dc.w Obj0E_Delay-Obj0E_Index
000086D6 0000                       		dc.w Obj0E_Move-Obj0E_Index
000086D8 0000                       		dc.w Obj0E_Animate-Obj0E_Index
000086DA                            ; ===========================================================================
000086DA                            
000086DA                            Obj0E_Main:				; XREF: Obj0E_Index
000086DA 5428 0024                  		addq.b	#2,$24(a0)
000086DE 317C 00F0 0008             		move.w	#$F0,8(a0)
000086E4 317C 00DE 000A             		move.w	#$DE,$A(a0)
000086EA 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
000086F2 317C 2300 0002             		move.w	#$2300,2(a0)
000086F8 117C 0001 0018             		move.b	#1,$18(a0)
000086FE 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
00008704 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000870A 6100 0000                  		bsr.w	AnimateSprite
0000870E                            
0000870E                            Obj0E_Delay:				; XREF: Obj0E_Index
0000870E 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
00008712 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
00008714 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
00008718 6000 0000                  		bra.w	DisplaySprite
0000871C                            ; ===========================================================================
0000871C                            
0000871C                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000871C 4E75                       		rts	
0000871E                            ; ===========================================================================
0000871E                            
0000871E                            Obj0E_Move:				; XREF: Obj0E_Index
0000871E 5168 000A                  		subq.w	#8,$A(a0)
00008722 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
00008728 6600                       		bne.s	Obj0E_Display
0000872A 5428 0024                  		addq.b	#2,$24(a0)
0000872E                            
0000872E                            Obj0E_Display:
0000872E 6000 0000                  		bra.w	DisplaySprite
00008732                            ; ===========================================================================
00008732 4E75                       		rts	
00008734                            ; ===========================================================================
00008734                            
00008734                            Obj0E_Animate:				; XREF: Obj0E_Index
00008734 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000873A 6100 0000                  		bsr.w	AnimateSprite
0000873E 6000 0000                  		bra.w	DisplaySprite
00008742                            ; ===========================================================================
00008742 4E75                       		rts	
00008744                            ; ===========================================================================
00008744                            ; ---------------------------------------------------------------------------
00008744                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
00008744                            ; ---------------------------------------------------------------------------
00008744                            
00008744                            Obj0F:					; XREF: Obj_Index
00008744 7000                       		moveq	#0,d0
00008746 1028 0024                  		move.b	$24(a0),d0
0000874A 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000874E 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
00008752 6000 0000                  		bra.w	DisplaySprite
00008756                            ; ===========================================================================
00008756 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
00008758 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000875A 0000                       		dc.w locret_A6F8-Obj0F_Index
0000875C                            ; ===========================================================================
0000875C                            
0000875C                            Obj0F_Main:				; XREF: Obj0F_Index
0000875C 5428 0024                  		addq.b	#2,$24(a0)
00008760 317C 00D0 0008             		move.w	#$D0,8(a0)
00008766 317C 0130 000A             		move.w	#$130,$A(a0)
0000876C 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
00008774 317C 0200 0002             		move.w	#$200,2(a0)
0000877A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
00008780 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
00008782 5428 0024                  		addq.b	#2,$24(a0)
00008786 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000878C 6600                       		bne.s	locret_A6F8	; if not, branch
0000878E 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
00008794 317C 0170 0008             		move.w	#$170,8(a0)
0000879A 317C 00F8 000A             		move.w	#$F8,$A(a0)
000087A0                            
000087A0                            locret_A6F8:				; XREF: Obj0F_Index
000087A0 4E75                       		rts	
000087A2                            ; ===========================================================================
000087A2                            
000087A2                            Obj0F_PrsStart:				; XREF: Obj0F_Index
000087A2 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
000087A8 6000 0000                  		bra.w	AnimateSprite
000087AC                            ; ===========================================================================
000087AC                            Ani_obj0E:
000087AC                            	include "_anim\obj0E.asm"
000087AC                            ; ---------------------------------------------------------------------------
000087AC                            ; Animation script - Sonic on the title screen
000087AC                            ; ---------------------------------------------------------------------------
000087AC 0000                       		dc.w byte_A706-Ani_obj0E
000087AE 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
000087BA                            		even
000087BA                            		even
000087BA                            
000087BA                            Ani_obj0F:
000087BA                            	include "_anim\obj0F.asm"
000087BA                            ; ---------------------------------------------------------------------------
000087BA                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
000087BA                            ; ---------------------------------------------------------------------------
000087BA 0000                       		dc.w byte_A714-Ani_obj0F
000087BC 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
000087C0                            		even
000087C0                            		even
000087C0                            
000087C0                            ; ---------------------------------------------------------------------------
000087C0                            ; Subroutine to	animate	a sprite using an animation script
000087C0                            ; ---------------------------------------------------------------------------
000087C0                            
000087C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000087C0                            
000087C0                            
000087C0                            AnimateSprite:
000087C0 7000                       		moveq	#0,d0
000087C2 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
000087C6 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
000087CA 6700                       		beq.s	Anim_Run	; if not, branch
000087CC 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
000087D0 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
000087D6 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
000087DC                            
000087DC                            Anim_Run:
000087DC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000087E0 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
000087E4 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000087E8 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
000087EC 7200                       		moveq	#0,d1
000087EE 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
000087F2 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000087F6 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
000087F8                            
000087F8                            Anim_Next:
000087F8 1200                       		move.b	d0,d1
000087FA 0200 001F                  		andi.b	#$1F,d0
000087FE 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00008802 1028 0022                  		move.b	$22(a0),d0
00008806 E719                       		rol.b	#3,d1
00008808 B101                       		eor.b	d0,d1
0000880A 0201 0003                  		andi.b	#3,d1
0000880E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00008818 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000881C                            
0000881C                            Anim_Wait:
0000881C 4E75                       		rts	
0000881E                            ; ===========================================================================
0000881E                            
0000881E                            Anim_End_FF:
0000881E 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00008820 6600                       		bne.s	Anim_End_FE	; if not, branch
00008822 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00008828 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000882C 60CA                       		bra.s	Anim_Next
0000882E                            ; ===========================================================================
0000882E                            
0000882E                            Anim_End_FE:
0000882E 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00008830 6600                       		bne.s	Anim_End_FD	; if not, branch
00008832 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000883C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00008840 60B6                       		bra.s	Anim_Next
00008842                            ; ===========================================================================
00008842                            
00008842                            Anim_End_FD:
00008842 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00008844 6600                       		bne.s	Anim_End_FC	; if not, branch
00008846 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000884C                            
0000884C                            Anim_End_FC:
0000884C 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000884E 6600                       		bne.s	Anim_End_FB	; if not, branch
00008850 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
00008854                            
00008854                            Anim_End_FB:
00008854 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
00008856 6600                       		bne.s	Anim_End_FA	; if not, branch
00008858 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000885E 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
00008862                            
00008862                            Anim_End_FA:
00008862 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
00008864 6600                       		bne.s	Anim_End	; if not, branch
00008866 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000886A                            
0000886A                            Anim_End:
0000886A 4E75                       		rts	
0000886C                            ; End of function AnimateSprite
0000886C                            
0000886C                            ; ===========================================================================
0000886C                            ; ---------------------------------------------------------------------------
0000886C                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000886C                            ; ---------------------------------------------------------------------------
0000886C                            Map_obj0F:
0000886C                            	include "_maps\obj0F.asm"
0000886C                            ; ---------------------------------------------------------------------------
0000886C                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000886C                            ; ---------------------------------------------------------------------------
0000886C 0000                       		dc.w byte_A7CD-Map_obj0F
0000886E 0000                       		dc.w byte_A7CC-Map_obj0F
00008870 0000                       		dc.w byte_A7EB-Map_obj0F
00008872 0000                       		dc.w byte_A882-Map_obj0F
00008874 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
00008875 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000887A 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000887F 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
00008884 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
00008889 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000888E 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
00008893 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
00008894 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
00008899 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000889E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
000088A3 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
000088A8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
000088AD B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
000088B2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
000088B7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
000088BC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
000088C1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
000088C6 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
000088CB D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
000088D0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
000088D5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
000088DA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
000088DF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
000088E4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
000088E9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
000088EE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
000088F3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
000088F8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
000088FD F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
00008902 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
00008907 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000890C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
00008911 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
00008916 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000891B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
00008920 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
00008925 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000892A 01                         byte_A882:	dc.b 1			; "TM"
0000892B FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00008930                            		even
00008930                            		even
00008930                            
00008930                            ; ---------------------------------------------------------------------------
00008930                            ; Sprite mappings - Sonic on the title screen
00008930                            ; ---------------------------------------------------------------------------
00008930                            Map_obj0E:
00008930                            	include "_maps\obj0E.asm"
00008930                            ; ---------------------------------------------------------------------------
00008930                            ; Sprite mappings - Sonic on the title screen
00008930                            ; ---------------------------------------------------------------------------
00008930 0000                       		dc.w byte_A898-Map_obj0E
00008932 0000                       		dc.w byte_A8CB-Map_obj0E
00008934 0000                       		dc.w byte_A917-Map_obj0E
00008936 0000                       		dc.w byte_A96D-Map_obj0E
00008938 0000                       		dc.w byte_A9AF-Map_obj0E
0000893A 0000                       		dc.w byte_A9E7-Map_obj0E
0000893C 0000                       		dc.w byte_AA47-Map_obj0E
0000893E 0000                       		dc.w byte_AAB1-Map_obj0E
00008940 0A                         byte_A898:	dc.b $A
00008941 0808 0000 08               		dc.b 8,	8, 0, 0, 8
00008946 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000894B 100F 0013 28               		dc.b $10, $F, 0, $13, $28
00008950 300E 0023 08               		dc.b $30, $E, 0, $23, 8
00008955 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000895A 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000895F 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
00008964 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
00008969 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000896E 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
00008973 0F                         byte_A8CB:	dc.b $F
00008974 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
00008979 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000897E 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
00008983 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
00008988 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000898D 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
00008992 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
00008997 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000899C 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
000089A1 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
000089A6 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
000089AB 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
000089B0 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
000089B5 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
000089BA 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
000089BF 11                         byte_A917:	dc.b $11
000089C0 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
000089C5 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
000089CA 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
000089CF 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
000089D4 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
000089D9 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
000089DE 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
000089E3 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
000089E8 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
000089ED 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
000089F2 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
000089F7 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
000089FC 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
00008A01 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
00008A06 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
00008A0B 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
00008A10 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
00008A15 0D                         byte_A96D:	dc.b $D
00008A16 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
00008A1B 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
00008A20 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
00008A25 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
00008A2A 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
00008A2F 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
00008A34 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
00008A39 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
00008A3E 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
00008A43 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
00008A48 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
00008A4D 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
00008A52 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
00008A57 0B                         byte_A9AF:	dc.b $B
00008A58 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
00008A5D 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
00008A62 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
00008A67 280E 0118 18               		dc.b $28, $E, 1, $18, $18
00008A6C 280E 0124 38               		dc.b $28, $E, 1, $24, $38
00008A71 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
00008A76 400E 0132 10               		dc.b $40, $E, 1, $32, $10
00008A7B 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
00008A80 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
00008A85 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
00008A8A 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
00008A8F 13                         byte_A9E7:	dc.b $13
00008A90 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
00008A95 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
00008A9A 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
00008A9F 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
00008AA4 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
00008AA9 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
00008AAE 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
00008AB3 0800 0168 48               		dc.b 8,	0, 1, $68, $48
00008AB8 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
00008ABD 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
00008AC2 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
00008AC7 300F 0171 10               		dc.b $30, $F, 1, $71, $10
00008ACC 200D 0181 30               		dc.b $20, $D, 1, $81, $30
00008AD1 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
00008AD6 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
00008ADB 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
00008AE0 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
00008AE5 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
00008AEA 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
00008AEF 15                         byte_AA47:	dc.b $15
00008AF0 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
00008AF5 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
00008AFA 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
00008AFF 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
00008B04 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
00008B09 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
00008B0E 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
00008B13 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
00008B18 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
00008B1D 0800 0168 48               		dc.b 8,	0, 1, $68, $48
00008B22 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
00008B27 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
00008B2C 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
00008B31 300F 0171 10               		dc.b $30, $F, 1, $71, $10
00008B36 200D 0181 30               		dc.b $20, $D, 1, $81, $30
00008B3B 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
00008B40 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
00008B45 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
00008B4A 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
00008B4F 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
00008B54 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
00008B59 16                         byte_AAB1:	dc.b $16
00008B5A 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
00008B5F 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
00008B64 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
00008B69 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
00008B6E 300B 0201 38               		dc.b $30, $B, 2, 1, $38
00008B73 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
00008B78 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
00008B7D 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
00008B82 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
00008B87 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
00008B8C 0800 0168 48               		dc.b 8,	0, 1, $68, $48
00008B91 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
00008B96 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
00008B9B 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
00008BA0 300F 0171 10               		dc.b $30, $F, 1, $71, $10
00008BA5 200D 0181 30               		dc.b $20, $D, 1, $81, $30
00008BAA 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
00008BAF 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
00008BB4 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
00008BB9 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
00008BBE 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
00008BC3 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
00008BC8                            		even
00008BC8                            		even
00008BC8                            
00008BC8                            ; ===========================================================================
00008BC8                            ; ---------------------------------------------------------------------------
00008BC8                            ; Object 2B - Chopper enemy (GHZ)
00008BC8                            ; ---------------------------------------------------------------------------
00008BC8                            
00008BC8                            Obj2B:					; XREF: Obj_Index
00008BC8 7000                       		moveq	#0,d0
00008BCA 1028 0024                  		move.b	$24(a0),d0
00008BCE 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
00008BD2 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
00008BD6 6000 0000                  		bra.w	MarkObjGone
00008BDA                            ; ===========================================================================
00008BDA 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
00008BDC 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
00008BDE                            ; ===========================================================================
00008BDE                            
00008BDE                            Obj2B_Main:				; XREF: Obj2B_Index
00008BDE 5428 0024                  		addq.b	#2,$24(a0)
00008BE2 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
00008BEA 317C 047B 0002             		move.w	#$47B,2(a0)
00008BF0 117C 0004 0001             		move.b	#4,1(a0)
00008BF6 117C 0004 0018             		move.b	#4,$18(a0)
00008BFC 117C 0009 0020             		move.b	#9,$20(a0)
00008C02 117C 0010 0019             		move.b	#$10,$19(a0)
00008C08 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
00008C0E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00008C14                            
00008C14                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
00008C14 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
00008C1A 6100 FBA4                  		bsr.w	AnimateSprite
00008C1E 6100 0000                  		bsr.w	SpeedToPos
00008C22 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
00008C28 3028 0030                  		move.w	$30(a0),d0
00008C2C B068 000C                  		cmp.w	$C(a0),d0
00008C30 6400                       		bcc.s	Obj2B_ChgAni
00008C32 3140 000C                  		move.w	d0,$C(a0)
00008C36 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
00008C3C                            
00008C3C                            Obj2B_ChgAni:
00008C3C 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
00008C42 0440 00C0                  		subi.w	#$C0,d0
00008C46 B068 000C                  		cmp.w	$C(a0),d0
00008C4A 6400                       		bcc.s	locret_ABB6
00008C4C 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
00008C52 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
00008C56 6B00                       		bmi.s	locret_ABB6	; if not, branch
00008C58 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
00008C5E                            
00008C5E                            locret_ABB6:
00008C5E 4E75                       		rts	
00008C60                            ; ===========================================================================
00008C60                            Ani_obj2B:
00008C60                            	include "_anim\obj2B.asm"
00008C60                            ; ---------------------------------------------------------------------------
00008C60                            ; Animation script - Chopper enemy
00008C60                            ; ---------------------------------------------------------------------------
00008C60 0000                       		dc.w byte_ABBE-Ani_obj2B
00008C62 0000                       		dc.w byte_ABC2-Ani_obj2B
00008C64 0000                       		dc.w byte_ABC6-Ani_obj2B
00008C66 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
00008C6A 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
00008C6E 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
00008C72 00                         		even
00008C72 00                         		even
00008C72                            
00008C72                            ; ---------------------------------------------------------------------------
00008C72                            ; Sprite mappings - Chopper enemy (GHZ)
00008C72                            ; ---------------------------------------------------------------------------
00008C72                            Map_obj2B:
00008C72                            	include "_maps\obj2B.asm"
00008C72                            ; ---------------------------------------------------------------------------
00008C72                            ; Sprite mappings - Chopper enemy (GHZ)
00008C72                            ; ---------------------------------------------------------------------------
00008C72 0000                       		dc.w byte_ABCE-Map_obj2B
00008C74 0000                       		dc.w byte_ABD4-Map_obj2B
00008C76 01                         byte_ABCE:	dc.b 1
00008C77 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00008C7C 01                         byte_ABD4:	dc.b 1
00008C7D F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00008C82                            		even
00008C82                            		even
00008C82                            
00008C82                            ; ===========================================================================
00008C82                            ; ---------------------------------------------------------------------------
00008C82                            ; Object 2C - Jaws enemy (LZ)
00008C82                            ; ---------------------------------------------------------------------------
00008C82                            
00008C82                            Obj2C:					; XREF: Obj_Index
00008C82 7000                       		moveq	#0,d0
00008C84 1028 0024                  		move.b	$24(a0),d0
00008C88 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
00008C8C 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
00008C90                            ; ===========================================================================
00008C90 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
00008C92 0000                       		dc.w Obj2C_Turn-Obj2C_Index
00008C94                            ; ===========================================================================
00008C94                            
00008C94                            Obj2C_Main:				; XREF: Obj2C_Index
00008C94 5428 0024                  		addq.b	#2,$24(a0)
00008C98 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
00008CA0 317C 2486 0002             		move.w	#$2486,2(a0)
00008CA6 0028 0004 0001             		ori.b	#4,1(a0)
00008CAC 117C 000A 0020             		move.b	#$A,$20(a0)
00008CB2 117C 0004 0018             		move.b	#4,$18(a0)
00008CB8 117C 0010 0019             		move.b	#$10,$19(a0)
00008CBE 7000                       		moveq	#0,d0
00008CC0 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
00008CC4 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
00008CC6 5340                       		subq.w	#1,d0
00008CC8 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
00008CCC 3140 0032                  		move.w	d0,$32(a0)
00008CD0 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
00008CD6 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
00008CDC 6700                       		beq.s	Obj2C_Turn	; if yes, branch
00008CDE 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
00008CE2                            
00008CE2                            Obj2C_Turn:				; XREF: Obj2C_Index
00008CE2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
00008CE6 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
00008CE8 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
00008CEE 4468 0010                  		neg.w	$10(a0)		; change speed direction
00008CF2 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
00008CF8 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
00008CFE                            
00008CFE                            Obj2C_Animate:
00008CFE 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
00008D04 6100 FABA                  		bsr.w	AnimateSprite
00008D08 6100 0000                  		bsr.w	SpeedToPos
00008D0C 6000 0000                  		bra.w	MarkObjGone
00008D10                            ; ===========================================================================
00008D10                            Ani_obj2C:
00008D10                            	include "_anim\obj2C.asm"
00008D10                            ; ---------------------------------------------------------------------------
00008D10                            ; Animation script - Jaws enemy
00008D10                            ; ---------------------------------------------------------------------------
00008D10 0000                       		dc.w byte_AC6A-Ani_obj2C
00008D12 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
00008D18                            		even
00008D18                            		even
00008D18                            
00008D18                            ; ---------------------------------------------------------------------------
00008D18                            ; Sprite mappings - Jaws enemy (LZ)
00008D18                            ; ---------------------------------------------------------------------------
00008D18                            Map_obj2C:
00008D18                            	include "_maps\obj2C.asm"
00008D18                            ; ---------------------------------------------------------------------------
00008D18                            ; Sprite mappings - Jaws enemy (LZ)
00008D18                            ; ---------------------------------------------------------------------------
00008D18 0000                       		dc.w byte_AC78-Map_obj2C
00008D1A 0000                       		dc.w byte_AC83-Map_obj2C
00008D1C 0000                       		dc.w byte_AC8E-Map_obj2C
00008D1E 0000                       		dc.w byte_AC99-Map_obj2C
00008D20 02                         byte_AC78:	dc.b 2
00008D21 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00008D26 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
00008D2B 02                         byte_AC83:	dc.b 2
00008D2C F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00008D31 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
00008D36 02                         byte_AC8E:	dc.b 2
00008D37 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00008D3C F505 1018 10               		dc.b $F5, 5, $10, $18, $10
00008D41 02                         byte_AC99:	dc.b 2
00008D42 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00008D47 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
00008D4C                            		even
00008D4C                            		even
00008D4C                            
00008D4C                            ; ===========================================================================
00008D4C                            ; ---------------------------------------------------------------------------
00008D4C                            ; Object 2D - Burrobot enemy (LZ)
00008D4C                            ; ---------------------------------------------------------------------------
00008D4C                            
00008D4C                            Obj2D:					; XREF: Obj_Index
00008D4C 7000                       		moveq	#0,d0
00008D4E 1028 0024                  		move.b	$24(a0),d0
00008D52 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
00008D56 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
00008D5A                            ; ===========================================================================
00008D5A 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
00008D5C 0000                       		dc.w Obj2D_Action-Obj2D_Index
00008D5E                            ; ===========================================================================
00008D5E                            
00008D5E                            Obj2D_Main:				; XREF: Obj2D_Index
00008D5E 5428 0024                  		addq.b	#2,$24(a0)
00008D62 117C 0013 0016             		move.b	#$13,$16(a0)
00008D68 117C 0008 0017             		move.b	#8,$17(a0)
00008D6E 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
00008D76 317C 04A6 0002             		move.w	#$4A6,2(a0)
00008D7C 0028 0004 0001             		ori.b	#4,1(a0)
00008D82 117C 0004 0018             		move.b	#4,$18(a0)
00008D88 117C 0005 0020             		move.b	#5,$20(a0)
00008D8E 117C 000C 0019             		move.b	#$C,$19(a0)
00008D94 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
00008D98 117C 0002 001C             		move.b	#2,$1C(a0)
00008D9E                            
00008D9E                            Obj2D_Action:				; XREF: Obj2D_Index
00008D9E 7000                       		moveq	#0,d0
00008DA0 1028 0025                  		move.b	$25(a0),d0
00008DA4 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
00008DA8 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
00008DAC 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
00008DB2 6100 FA0C                  		bsr.w	AnimateSprite
00008DB6 6000 0000                  		bra.w	MarkObjGone
00008DBA                            ; ===========================================================================
00008DBA 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
00008DBC 0000                       		dc.w Obj2D_Move-Obj2D_Index2
00008DBE 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
00008DC0 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
00008DC2                            ; ===========================================================================
00008DC2                            
00008DC2                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
00008DC2 5368 0030                  		subq.w	#1,$30(a0)
00008DC6 6A00                       		bpl.s	locret_AD42
00008DC8 5428 0025                  		addq.b	#2,$25(a0)
00008DCC 317C 00FF 0030             		move.w	#$FF,$30(a0)
00008DD2 317C 0080 0010             		move.w	#$80,$10(a0)
00008DD8 117C 0001 001C             		move.b	#1,$1C(a0)
00008DDE 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
00008DE4 6700                       		beq.s	locret_AD42
00008DE6 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
00008DEA                            
00008DEA                            locret_AD42:
00008DEA 4E75                       		rts	
00008DEC                            ; ===========================================================================
00008DEC                            
00008DEC                            Obj2D_Move:				; XREF: Obj2D_Index2
00008DEC 5368 0030                  		subq.w	#1,$30(a0)
00008DF0 6B00                       		bmi.s	loc_AD84
00008DF2 6100 0000                  		bsr.w	SpeedToPos
00008DF6 0868 0000 0032             		bchg	#0,$32(a0)
00008DFC 6600                       		bne.s	loc_AD78
00008DFE 3628 0008                  		move.w	8(a0),d3
00008E02 0643 000C                  		addi.w	#$C,d3
00008E06 0828 0000 0022             		btst	#0,$22(a0)
00008E0C 6600                       		bne.s	loc_AD6A
00008E0E 0443 0018                  		subi.w	#$18,d3
00008E12                            
00008E12                            loc_AD6A:
00008E12 4EB9 0000 0000             		jsr	ObjHitFloor2
00008E18 0C41 000C                  		cmpi.w	#$C,d1
00008E1C 6C00                       		bge.s	loc_AD84
00008E1E 4E75                       		rts	
00008E20                            ; ===========================================================================
00008E20                            
00008E20                            loc_AD78:				; XREF: Obj2D_Move
00008E20 4EB9 0000 0000             		jsr	ObjHitFloor
00008E2A 4E75                       		rts	
00008E2C                            ; ===========================================================================
00008E2C                            
00008E2C                            loc_AD84:				; XREF: Obj2D_Move
00008E2C 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
00008E32 6700                       		beq.s	loc_ADA4
00008E34 5528 0025                  		subq.b	#2,$25(a0)
00008E38 317C 003B 0030             		move.w	#$3B,$30(a0)
00008E3E 317C 0000 0010             		move.w	#0,$10(a0)
00008E44 117C 0000 001C             		move.b	#0,$1C(a0)
00008E4A 4E75                       		rts	
00008E4C                            ; ===========================================================================
00008E4C                            
00008E4C                            loc_ADA4:
00008E4C 5428 0025                  		addq.b	#2,$25(a0)
00008E50 317C FC00 0012             		move.w	#-$400,$12(a0)
00008E56 117C 0002 001C             		move.b	#2,$1C(a0)
00008E5C 4E75                       		rts	
00008E5E                            ; ===========================================================================
00008E5E                            
00008E5E                            Obj2D_Jump:				; XREF: Obj2D_Index2
00008E5E 6100 0000                  		bsr.w	SpeedToPos
00008E62 0668 0018 0012             		addi.w	#$18,$12(a0)
00008E68 6B00                       		bmi.s	locret_ADF0
00008E6A 117C 0003 001C             		move.b	#3,$1C(a0)
00008E70 4EB9 0000 0000             		jsr	ObjHitFloor
00008E76 4A41                       		tst.w	d1
00008E78 6A00                       		bpl.s	locret_ADF0
00008E7E 317C 0000 0012             		move.w	#0,$12(a0)
00008E84 117C 0001 001C             		move.b	#1,$1C(a0)
00008E8A 317C 00FF 0030             		move.w	#$FF,$30(a0)
00008E90 5528 0025                  		subq.b	#2,$25(a0)
00008E94 6100 0000                  		bsr.w	Obj2D_ChkSonic2
00008E98                            
00008E98                            locret_ADF0:
00008E98 4E75                       		rts	
00008E9A                            ; ===========================================================================
00008E9A                            
00008E9A                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
00008E9A 343C 0060                  		move.w	#$60,d2
00008E9E 6100 0000                  		bsr.w	Obj2D_ChkSonic2
00008EA2 6400                       		bcc.s	locret_AE20
00008EA4 3038 D00C                  		move.w	($FFFFD00C).w,d0
00008EAC 6400                       		bcc.s	locret_AE20
00008EAE 0C40 FF80                  		cmpi.w	#-$80,d0
00008EB2 6500                       		bcs.s	locret_AE20
00008EB4 4A78 FE08                  		tst.w	($FFFFFE08).w
00008EB8 6600                       		bne.s	locret_AE20
00008EBA 5528 0025                  		subq.b	#2,$25(a0)
00008EBE 3141 0010                  		move.w	d1,$10(a0)
00008EC2 317C FC00 0012             		move.w	#-$400,$12(a0)
00008EC8                            
00008EC8                            locret_AE20:
00008EC8 4E75                       		rts	
00008ECA                            
00008ECA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008ECA                            
00008ECA                            
00008ECA                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
00008ECA 323C 0080                  		move.w	#$80,d1
00008ECE 08E8 0000 0022             		bset	#0,$22(a0)
00008ED4 3038 D008                  		move.w	($FFFFD008).w,d0
00008EDC 6400                       		bcc.s	loc_AE40
00008EDE 4440                       		neg.w	d0
00008EE0 4441                       		neg.w	d1
00008EE2 08A8 0000 0022             		bclr	#0,$22(a0)
00008EE8                            
00008EE8                            loc_AE40:
00008EE8 B042                       		cmp.w	d2,d0
00008EEA 4E75                       		rts	
00008EEC                            ; End of function Obj2D_ChkSonic2
00008EEC                            
00008EEC                            ; ===========================================================================
00008EEC                            Ani_obj2D:
00008EEC                            	include "_anim\obj2D.asm"
00008EEC                            ; ---------------------------------------------------------------------------
00008EEC                            ; Animation script - Burrobot enemy
00008EEC                            ; ---------------------------------------------------------------------------
00008EEC 0000                       		dc.w byte_AE4C-Ani_obj2D
00008EEE 0000                       		dc.w byte_AE50-Ani_obj2D
00008EF0 0000                       		dc.w byte_AE54-Ani_obj2D
00008EF2 0000                       		dc.w byte_AE58-Ani_obj2D
00008EF4 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
00008EF8 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
00008EFC 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
00008F00 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
00008F04 00                         		even
00008F04 00                         		even
00008F04                            
00008F04                            ; ---------------------------------------------------------------------------
00008F04                            ; Sprite mappings - Burrobot enemy (LZ)
00008F04                            ; ---------------------------------------------------------------------------
00008F04                            Map_obj2D:
00008F04                            	include "_maps\obj2D.asm"
00008F04                            ; ---------------------------------------------------------------------------
00008F04                            ; Sprite mappings - Burrobot enemy (LZ)
00008F04                            ; ---------------------------------------------------------------------------
00008F04 0000                       		dc.w byte_AE6A-Map_obj2D
00008F06 0000                       		dc.w byte_AE75-Map_obj2D
00008F08 0000                       		dc.w byte_AE80-Map_obj2D
00008F0A 0000                       		dc.w byte_AE8B-Map_obj2D
00008F0C 0000                       		dc.w byte_AE96-Map_obj2D
00008F0E 0000                       		dc.w byte_AEA1-Map_obj2D
00008F10 0000                       		dc.w byte_AEAC-Map_obj2D
00008F12 02                         byte_AE6A:	dc.b 2
00008F13 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
00008F18 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
00008F1D 02                         byte_AE75:	dc.b 2
00008F1E EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
00008F23 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00008F28 02                         byte_AE80:	dc.b 2
00008F29 E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
00008F2E 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
00008F33 02                         byte_AE8B:	dc.b 2
00008F34 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
00008F39 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
00008F3E 02                         byte_AE96:	dc.b 2
00008F3F E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
00008F44 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
00008F49 02                         byte_AEA1:	dc.b 2
00008F4A F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
00008F4F F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
00008F54 02                         byte_AEAC:	dc.b 2
00008F55 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
00008F5A 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
00008F60 00                         		even
00008F60 00                         		even
00008F60                            
00008F60                            ; ===========================================================================
00008F60                            ; ---------------------------------------------------------------------------
00008F60                            ; Object 2F - large moving platforms (MZ)
00008F60                            ; ---------------------------------------------------------------------------
00008F60                            
00008F60                            Obj2F:					; XREF: Obj_Index
00008F60 7000                       		moveq	#0,d0
00008F62 1028 0024                  		move.b	$24(a0),d0
00008F66 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
00008F6A 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
00008F6E                            ; ===========================================================================
00008F6E 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
00008F70 0000                       		dc.w Obj2F_Action-Obj2F_Index
00008F72                            
00008F72 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
00008F74 0040                       		dc.b 0,	$40			; frame	number,	platform width
00008F76 0000                       		dc.w Obj2F_Data3-Obj2F_Data
00008F78 0140                       		dc.b 1,	$40
00008F7A 0000                       		dc.w Obj2F_Data2-Obj2F_Data
00008F7C 0220                       		dc.b 2,	$20
00008F7E                            ; ===========================================================================
00008F7E                            
00008F7E                            Obj2F_Main:				; XREF: Obj2F_Index
00008F7E 5428 0024                  		addq.b	#2,$24(a0)
00008F82 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
00008F8A 317C C000 0002             		move.w	#$C000,2(a0)
00008F90 117C 0004 0001             		move.b	#4,1(a0)
00008F96 117C 0005 0018             		move.b	#5,$18(a0)
00008F9C 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008FA2 3168 0008 002A             		move.w	8(a0),$2A(a0)
00008FA8 7000                       		moveq	#0,d0
00008FAA 1028 0028                  		move.b	$28(a0),d0
00008FAE E448                       		lsr.w	#2,d0
00008FB0 0240 001C                  		andi.w	#$1C,d0
00008FB4 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
00008FB8 3019                       		move.w	(a1)+,d0
00008FBA 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
00008FBE 214A 0030                  		move.l	a2,$30(a0)
00008FC2 1159 001A                  		move.b	(a1)+,$1A(a0)
00008FC6 1151 0019                  		move.b	(a1),$19(a0)
00008FCA 0228 000F 0028             		andi.b	#$F,$28(a0)
00008FD0 117C 0040 0016             		move.b	#$40,$16(a0)
00008FD6 08E8 0004 0001             		bset	#4,1(a0)
00008FDC                            
00008FDC                            Obj2F_Action:				; XREF: Obj2F_Index
00008FDC 6100 0000                  		bsr.w	Obj2F_Types
00008FE0 4A28 0025                  		tst.b	$25(a0)
00008FE4 6700                       		beq.s	Obj2F_Solid
00008FE6 7200                       		moveq	#0,d1
00008FE8 1228 0019                  		move.b	$19(a0),d1
00008FEC 0641 000B                  		addi.w	#$B,d1
00008FF0 6100 C6E4                  		bsr.w	ExitPlatform
00008FF4 0829 0003 0022             		btst	#3,$22(a1)
00008FFA 6600 0000                  		bne.w	Obj2F_Slope
00008FFE 4228 0025                  		clr.b	$25(a0)
00009002 6000                       		bra.s	Obj2F_Display
00009004                            ; ===========================================================================
00009004                            
00009004                            Obj2F_Slope:				; XREF: Obj2F_Action
00009004 7200                       		moveq	#0,d1
00009006 1228 0019                  		move.b	$19(a0),d1
0000900A 0641 000B                  		addi.w	#$B,d1
0000900E 2468 0030                  		movea.l	$30(a0),a2
00009012 3428 0008                  		move.w	8(a0),d2
00009016 6100 D5D8                  		bsr.w	SlopeObject2
0000901A 6000                       		bra.s	Obj2F_Display
0000901C                            ; ===========================================================================
0000901C                            
0000901C                            Obj2F_Solid:				; XREF: Obj2F_Action
0000901C 7200                       		moveq	#0,d1
0000901E 1228 0019                  		move.b	$19(a0),d1
00009022 0641 000B                  		addi.w	#$B,d1
00009026 343C 0020                  		move.w	#$20,d2
0000902A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00009030 6600                       		bne.s	loc_AF8E
00009032 343C 0030                  		move.w	#$30,d2
00009036                            
00009036                            loc_AF8E:
00009036 2468 0030                  		movea.l	$30(a0),a2
0000903A 6100 0000                  		bsr.w	SolidObject2F
0000903E                            
0000903E                            Obj2F_Display:				; XREF: Obj2F_Action
0000903E 6100 0000                  		bsr.w	DisplaySprite
00009042 6000 0000                  		bra.w	Obj2F_ChkDel
00009046                            
00009046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009046                            
00009046                            
00009046                            Obj2F_Types:				; XREF: Obj2F_Action
00009046 7000                       		moveq	#0,d0
00009048 1028 0028                  		move.b	$28(a0),d0
0000904C 0240 0007                  		andi.w	#7,d0
00009052 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
00009056 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000905A                            ; End of function Obj2F_Types
0000905A                            
0000905A                            ; ===========================================================================
0000905A 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000905C 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000905E 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
00009060 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
00009062 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
00009064 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
00009066                            ; ===========================================================================
00009066                            
00009066                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
00009066 4E75                       		rts			; type 00 platform doesn't move
00009068                            ; ===========================================================================
00009068                            
00009068                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
00009068 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000906C 323C 0020                  		move.w	#$20,d1
00009070 6000                       		bra.s	Obj2F_Move
00009072                            ; ===========================================================================
00009072                            
00009072                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
00009072 1038 FE64                  		move.b	($FFFFFE64).w,d0
00009076 323C 0030                  		move.w	#$30,d1
0000907A 6000                       		bra.s	Obj2F_Move
0000907C                            ; ===========================================================================
0000907C                            
0000907C                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000907C 1038 FE68                  		move.b	($FFFFFE68).w,d0
00009080 323C 0040                  		move.w	#$40,d1
00009084 6000                       		bra.s	Obj2F_Move
00009086                            ; ===========================================================================
00009086                            
00009086                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
00009086 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000908A 323C 0060                  		move.w	#$60,d1
0000908E                            
0000908E                            Obj2F_Move:
0000908E 0828 0003 0028             		btst	#3,$28(a0)
00009094 6700                       		beq.s	loc_AFF2
00009096 4440                       		neg.w	d0
0000909A                            
0000909A                            loc_AFF2:
0000909A 3228 002C                  		move.w	$2C(a0),d1
000090A0 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
000090A4 4E75                       		rts	
000090A6                            ; ===========================================================================
000090A6                            
000090A6                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
000090A6 1028 0034                  		move.b	$34(a0),d0
000090AA 4A28 0025                  		tst.b	$25(a0)
000090AE 6600                       		bne.s	loc_B010
000090B0 5500                       		subq.b	#2,d0
000090B2 6400                       		bcc.s	loc_B01C
000090B4 7000                       		moveq	#0,d0
000090B6 6000                       		bra.s	loc_B01C
000090B8                            ; ===========================================================================
000090B8                            
000090B8                            loc_B010:
000090B8 5800                       		addq.b	#4,d0
000090BA 0C00 0040                  		cmpi.b	#$40,d0
000090BE 6500                       		bcs.s	loc_B01C
000090C0 103C 0040                  		move.b	#$40,d0
000090C4                            
000090C4                            loc_B01C:
000090C4 1140 0034                  		move.b	d0,$34(a0)
000090C8 4EB9 0000 2556             		jsr	(CalcSine).l
000090CE E848                       		lsr.w	#4,d0
000090D0 3200                       		move.w	d0,d1
000090D6 3140 000C                  		move.w	d0,$C(a0)
000090DA 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
000090E0 6600                       		bne.s	loc_B07A
000090E2 4A28 0035                  		tst.b	$35(a0)
000090E6 6600                       		bne.s	loc_B07A
000090E8 117C 0001 0035             		move.b	#1,$35(a0)
000090EE 6100 0000                  		bsr.w	SingleObjLoad2
000090F2 6600                       		bne.s	loc_B07A
000090F4 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
000090F8 3368 0008 0008             		move.w	8(a0),8(a1)
000090FE 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
00009104 5069 002C                  		addq.w	#8,$2C(a1)
00009108 5769 002C                  		subq.w	#3,$2C(a1)
0000910C 0469 0040 0008             		subi.w	#$40,8(a1)
00009112 2368 0030 0030             		move.l	$30(a0),$30(a1)
00009118 2348 0038                  		move.l	a0,$38(a1)
0000911C 2448                       		movea.l	a0,a2
0000911E 6100                       		bsr.s	sub_B09C
00009120                            
00009120                            loc_B07A:
00009120 7400                       		moveq	#0,d2
00009122 45E8 0036                  		lea	$36(a0),a2
00009126 141A                       		move.b	(a2)+,d2
00009128 5302                       		subq.b	#1,d2
0000912A 6500                       		bcs.s	locret_B09A
0000912C                            
0000912C                            loc_B086:
0000912C 7000                       		moveq	#0,d0
0000912E 101A                       		move.b	(a2)+,d0
00009130 ED48                       		lsl.w	#6,d0
00009132 0640 D000                  		addi.w	#-$3000,d0
00009136 3240                       		movea.w	d0,a1
00009138 3341 003C                  		move.w	d1,$3C(a1)
0000913C 51CA FFEE                  		dbf	d2,loc_B086
00009140                            
00009140                            locret_B09A:
00009140 4E75                       		rts	
00009142                            
00009142                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009142                            
00009142                            
00009142                            sub_B09C:
00009142 45EA 0036                  		lea	$36(a2),a2
00009146 7000                       		moveq	#0,d0
00009148 1012                       		move.b	(a2),d0
0000914A 5212                       		addq.b	#1,(a2)
0000914C 45F2 0001                  		lea	1(a2,d0.w),a2
00009150 3009                       		move.w	a1,d0
00009152 0440 D000                  		subi.w	#-$3000,d0
00009156 EC48                       		lsr.w	#6,d0
00009158 0240 007F                  		andi.w	#$7F,d0
0000915C 1480                       		move.b	d0,(a2)
0000915E 4E75                       		rts	
00009160                            ; End of function sub_B09C
00009160                            
00009160                            ; ===========================================================================
00009160                            
00009160                            Obj2F_ChkDel:				; XREF: Obj2F_Display
00009160 4A28 0035                  		tst.b	$35(a0)
00009164 6700                       		beq.s	loc_B0C6
00009166 4A28 0001                  		tst.b	1(a0)
0000916A 6A00                       		bpl.s	Obj2F_DelFlames
0000916C                            
0000916C                            loc_B0C6:
0000916C 3028 002A                  		move.w	$2A(a0),d0
00009170 0240 FF80                  		andi.w	#$FF80,d0
00009174 3238 F700                  		move.w	($FFFFF700).w,d1
00009178 0441 0080                  		subi.w	#$80,d1
0000917C 0241 FF80                  		andi.w	#$FF80,d1
00009182 0C40 0280                  		cmpi.w	#$280,d0
00009186 6200 0000                  		bhi.w	DeleteObject
0000918A 4E75                       		rts	
0000918C                            ; ===========================================================================
0000918C                            
0000918C                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000918C 7400                       		moveq	#0,d2
0000918E                            
0000918E                            loc_B0E8:
0000918E 45E8 0036                  		lea	$36(a0),a2
00009192 1412                       		move.b	(a2),d2
00009194 421A                       		clr.b	(a2)+
00009196 5302                       		subq.b	#1,d2
00009198 6500                       		bcs.s	locret_B116
0000919A                            
0000919A                            loc_B0F4:
0000919A 7000                       		moveq	#0,d0
0000919C 1012                       		move.b	(a2),d0
0000919E 421A                       		clr.b	(a2)+
000091A0 ED48                       		lsl.w	#6,d0
000091A2 0640 D000                  		addi.w	#-$3000,d0
000091A6 3240                       		movea.w	d0,a1
000091A8 6100 0000                  		bsr.w	DeleteObject2
000091AC 51CA FFEC                  		dbf	d2,loc_B0F4
000091B0 117C 0000 0035             		move.b	#0,$35(a0)
000091B6 117C 0000 0034             		move.b	#0,$34(a0)
000091BC                            
000091BC                            locret_B116:
000091BC 4E75                       		rts	
000091BE                            ; ===========================================================================
000091BE                            ; ---------------------------------------------------------------------------
000091BE                            ; Collision data for large moving platforms (MZ)
000091BE                            ; ---------------------------------------------------------------------------
000091BE                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000920A                            		even
0000920A                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
00009236                            		even
00009236                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
00009282                            		even
00009282                            ; ===========================================================================
00009282                            ; ---------------------------------------------------------------------------
00009282                            ; Object 35 - fireball that sits on the	floor (MZ)
00009282                            ; (appears when	you walk on sinking platforms)
00009282                            ; ---------------------------------------------------------------------------
00009282                            
00009282                            Obj35:					; XREF: Obj_Index
00009282 7000                       		moveq	#0,d0
00009284 1028 0024                  		move.b	$24(a0),d0
00009288 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000928C 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
00009290                            ; ===========================================================================
00009290 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
00009292 0000                       		dc.w loc_B238-Obj35_Index
00009294 0000                       		dc.w Obj35_Move-Obj35_Index
00009296                            ; ===========================================================================
00009296                            
00009296                            Obj35_Main:				; XREF: Obj35_Index
00009296 5428 0024                  		addq.b	#2,$24(a0)
0000929A 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
000092A2 317C 0345 0002             		move.w	#$345,2(a0)
000092A8 3168 0008 002A             		move.w	8(a0),$2A(a0)
000092AE 117C 0004 0001             		move.b	#4,1(a0)
000092B4 117C 0001 0018             		move.b	#1,$18(a0)
000092BA 117C 008B 0020             		move.b	#$8B,$20(a0)
000092C0 117C 0008 0019             		move.b	#8,$19(a0)
000092C6 303C 00C8                  		move.w	#$C8,d0
000092CA 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play flame sound
000092D0 4A28 0028                  		tst.b	$28(a0)
000092D4 6700                       		beq.s	loc_B238
000092D6 5428 0024                  		addq.b	#2,$24(a0)
000092DA 6000 0000                  		bra.w	Obj35_Move
000092DE                            ; ===========================================================================
000092DE                            
000092DE                            loc_B238:				; XREF: Obj35_Index
000092DE 2268 0030                  		movea.l	$30(a0),a1
000092E2 3228 0008                  		move.w	8(a0),d1
000092EA 0641 000C                  		addi.w	#$C,d1
000092EE 3001                       		move.w	d1,d0
000092F0 E248                       		lsr.w	#1,d0
000092F2 1031 0000                  		move.b	(a1,d0.w),d0
000092F6 4440                       		neg.w	d0
000092FC 3400                       		move.w	d0,d2
00009302 3140 000C                  		move.w	d0,$C(a0)
00009306 0C41 0084                  		cmpi.w	#$84,d1
0000930A 6400                       		bcc.s	loc_B2B0
0000930C 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
00009314 0C41 0080                  		cmpi.w	#$80,d1
00009318 6400                       		bcc.s	loc_B2B0
0000931A 2028 0008                  		move.l	8(a0),d0
0000931E 0680 0008 0000             		addi.l	#$80000,d0
00009324 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000932A 6600                       		bne.s	loc_B2B0
0000932C 6100 0000                  		bsr.w	SingleObjLoad2
00009330 6600                       		bne.s	loc_B2B0
00009332 12BC 0035                  		move.b	#$35,0(a1)
00009336 3368 0008 0008             		move.w	8(a0),8(a1)
0000933C 3342 002C                  		move.w	d2,$2C(a1)
00009340 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
00009346 137C 0001 0028             		move.b	#1,$28(a1)
0000934C 2468 0038                  		movea.l	$38(a0),a2
00009350 6100 FDF0                  		bsr.w	sub_B09C
00009354                            
00009354                            loc_B2B0:
00009354 6000                       		bra.s	Obj35_Animate
00009356                            ; ===========================================================================
00009356                            
00009356                            Obj35_Move:				; XREF: Obj35_Index
00009356 3028 002C                  		move.w	$2C(a0),d0
0000935E 3140 000C                  		move.w	d0,$C(a0)
00009362                            
00009362                            Obj35_Animate:				; XREF: loc_B238
00009362 43F9 0000 0000             		lea	(Ani_obj35).l,a1
00009368 6100 F456                  		bsr.w	AnimateSprite
0000936C 6000 0000                  		bra.w	DisplaySprite
00009370                            ; ===========================================================================
00009370                            Ani_obj35:
00009370                            	include "_anim\obj35.asm"
00009370                            ; ---------------------------------------------------------------------------
00009370                            ; Animation script - fireball that sits on the	floor (MZ)
00009370                            ; ---------------------------------------------------------------------------
00009370 0000                       		dc.w byte_B2CE-Ani_obj35
00009372 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
00009378                            		even
00009378                            		even
00009378                            
00009378                            ; ---------------------------------------------------------------------------
00009378                            ; Sprite mappings - large moving platforms (MZ)
00009378                            ; ---------------------------------------------------------------------------
00009378                            Map_obj2F:
00009378                            	include "_maps\obj2F.asm"
00009378                            ; ---------------------------------------------------------------------------
00009378                            ; Sprite mappings - large moving platforms (MZ)
00009378                            ; ---------------------------------------------------------------------------
00009378 0000                       		dc.w byte_B2DA-Map_obj2F
0000937A 0000                       		dc.w byte_B31C-Map_obj2F
0000937C 0000                       		dc.w byte_B34F-Map_obj2F
0000937E 0D                         byte_B2DA:	dc.b $D
0000937F D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
00009384 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
00009389 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000938E D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
00009393 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
00009398 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000939D D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
000093A2 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
000093A7 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
000093AC F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
000093B1 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
000093B6 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
000093BB F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
000093C0 0A                         byte_B31C:	dc.b $A
000093C1 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
000093C6 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
000093CB 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
000093D0 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
000093D5 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
000093DA F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
000093DF C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
000093E4 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
000093E9 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
000093EE E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
000093F3 06                         byte_B34F:	dc.b 6
000093F4 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
000093F9 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
000093FE 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
00009403 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
00009408 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000940D 100F 0001 00               		dc.b $10, $F, 0, 1, 0
00009412                            		even
00009412                            		even
00009412                            
00009412                            ; ---------------------------------------------------------------------------
00009412                            ; Sprite mappings - lava balls (MZ, SLZ)
00009412                            ; ---------------------------------------------------------------------------
00009412                            Map_obj14:
00009412                            	include "_maps\obj14.asm"
00009412                            ; ---------------------------------------------------------------------------
00009412                            ; Sprite mappings - lava balls (MZ, SLZ)
00009412                            ; ---------------------------------------------------------------------------
00009412 0000                       		dc.w byte_B37A-Map_obj14
00009414 0000                       		dc.w byte_B380-Map_obj14
00009416 0000                       		dc.w byte_B386-Map_obj14
00009418 0000                       		dc.w byte_B38C-Map_obj14
0000941A 0000                       		dc.w byte_B392-Map_obj14
0000941C 0000                       		dc.w byte_B398-Map_obj14
0000941E 01                         byte_B37A:	dc.b 1
0000941F E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
00009424 01                         byte_B380:	dc.b 1
00009425 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000942A 01                         byte_B386:	dc.b 1
0000942B F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
00009430 01                         byte_B38C:	dc.b 1
00009431 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
00009436 01                         byte_B392:	dc.b 1
00009437 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000943C 01                         byte_B398:	dc.b 1
0000943D F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
00009442                            		even
00009442                            		even
00009442                            
00009442                            ; ===========================================================================
00009442                            ; ---------------------------------------------------------------------------
00009442                            ; Object 30 - large green glassy blocks	(MZ)
00009442                            ; ---------------------------------------------------------------------------
00009442                            
00009442                            Obj30:					; XREF: Obj_Index
00009442 7000                       		moveq	#0,d0
00009444 1028 0024                  		move.b	$24(a0),d0
00009448 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000944C 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
00009450 3028 0008                  		move.w	8(a0),d0
00009454 0240 FF80                  		andi.w	#$FF80,d0
00009458 3238 F700                  		move.w	($FFFFF700).w,d1
0000945C 0441 0080                  		subi.w	#$80,d1
00009460 0241 FF80                  		andi.w	#$FF80,d1
00009466 0C40 0280                  		cmpi.w	#$280,d0
0000946A 6200 0000                  		bhi.w	Obj30_Delete
0000946E 6000 0000                  		bra.w	DisplaySprite
00009472                            ; ===========================================================================
00009472                            
00009472                            Obj30_Delete:
00009472 6000 0000                  		bra.w	DeleteObject
00009476                            ; ===========================================================================
00009476 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
00009478 0000                       		dc.w Obj30_Block012-Obj30_Index
0000947A 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000947C 0000                       		dc.w Obj30_Block34-Obj30_Index
0000947E 0000                       		dc.w Obj30_Reflect34-Obj30_Index
00009480                            
00009480 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
00009483 0400 01                    		dc.b 4,	0, 1
00009486 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
00009489 0800 01                    		dc.b 8,	0, 1
0000948C                            ; ===========================================================================
0000948C                            
0000948C                            Obj30_Main:				; XREF: Obj30_Index
0000948C 45F9 0000 9480             		lea	(Obj30_Vars1).l,a2
00009492 7201                       		moveq	#1,d1
00009494 117C 0048 0016             		move.b	#$48,$16(a0)
0000949A 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
000094A0 6500                       		bcs.s	loc_B40C	; if yes, branch
000094A2 45F9 0000 9486             		lea	(Obj30_Vars2).l,a2
000094A8 7201                       		moveq	#1,d1
000094AA 117C 0038 0016             		move.b	#$38,$16(a0)
000094B0                            
000094B0                            loc_B40C:
000094B0 2248                       		movea.l	a0,a1
000094B2 6000                       		bra.s	Obj30_Load	; load main object
000094B4                            ; ===========================================================================
000094B4                            
000094B4                            Obj30_Loop:
000094B4 6100 0000                  		bsr.w	SingleObjLoad2
000094B8 6600                       		bne.s	loc_B480
000094BA                            
000094BA                            Obj30_Load:				; XREF: Obj30_Main
000094BA 135A 0024                  		move.b	(a2)+,$24(a1)
000094BE 12BC 0030                  		move.b	#$30,0(a1)
000094C2 3368 0008 0008             		move.w	8(a0),8(a1)
000094C8 101A                       		move.b	(a2)+,d0
000094CA 4880                       		ext.w	d0
000094D0 3340 000C                  		move.w	d0,$C(a1)
000094D4 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
000094DC 337C C38E 0002             		move.w	#$C38E,2(a1)
000094E2 137C 0004 0001             		move.b	#4,1(a1)
000094E8 3369 000C 0030             		move.w	$C(a1),$30(a1)
000094EE 1368 0028 0028             		move.b	$28(a0),$28(a1)
000094F4 137C 0020 0019             		move.b	#$20,$19(a1)
000094FA 137C 0004 0018             		move.b	#4,$18(a1)
00009500 135A 001A                  		move.b	(a2)+,$1A(a1)
00009504 2348 003C                  		move.l	a0,$3C(a1)
00009508 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000950C                            
0000950C 137C 0010 0019             		move.b	#$10,$19(a1)
00009512 137C 0003 0018             		move.b	#3,$18(a1)
00009518 5029 0028                  		addq.b	#8,$28(a1)
0000951C 0229 000F 0028             		andi.b	#$F,$28(a1)
00009522                            
00009522                            loc_B480:
00009522 317C 0090 0032             		move.w	#$90,$32(a0)
00009528 08E8 0004 0001             		bset	#4,1(a0)
0000952E                            
0000952E                            Obj30_Block012:				; XREF: Obj30_Index
0000952E 6100 0000                  		bsr.w	Obj30_Types
00009532 323C 002B                  		move.w	#$2B,d1
00009536 343C 0048                  		move.w	#$48,d2
0000953A 363C 0049                  		move.w	#$49,d3
0000953E 3828 0008                  		move.w	8(a0),d4
00009542 6000 0000                  		bra.w	SolidObject
00009546                            ; ===========================================================================
00009546                            
00009546                            Obj30_Reflect012:			; XREF: Obj30_Index
00009546 2268 003C                  		movea.l	$3C(a0),a1
0000954A 3169 0032 0032             		move.w	$32(a1),$32(a0)
00009550 6000 0000                  		bra.w	Obj30_Types
00009554                            ; ===========================================================================
00009554                            
00009554                            Obj30_Block34:				; XREF: Obj30_Index
00009554 6100 0000                  		bsr.w	Obj30_Types
00009558 323C 002B                  		move.w	#$2B,d1
0000955C 343C 0038                  		move.w	#$38,d2
00009560 363C 0039                  		move.w	#$39,d3
00009564 3828 0008                  		move.w	8(a0),d4
00009568 6000 0000                  		bra.w	SolidObject
0000956C                            ; ===========================================================================
0000956C                            
0000956C                            Obj30_Reflect34:			; XREF: Obj30_Index
0000956C 2268 003C                  		movea.l	$3C(a0),a1
00009570 3169 0032 0032             		move.w	$32(a1),$32(a0)
00009576 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000957C 6000 0002                  		bra.w	*+4
00009580                            
00009580                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009580                            
00009580                            
00009580                            Obj30_Types:				; XREF: Obj30_Block012; et al
00009580 7000                       		moveq	#0,d0
00009582 1028 0028                  		move.b	$28(a0),d0
00009586 0240 0007                  		andi.w	#7,d0
0000958C 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
00009590 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
00009594                            ; End of function Obj30_Types
00009594                            
00009594                            ; ===========================================================================
00009594 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
00009596 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
00009598 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000959A 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000959C 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000959E                            ; ===========================================================================
0000959E                            
0000959E                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000959E 4E75                       		rts	
000095A0                            ; ===========================================================================
000095A0                            
000095A0                            Obj30_Type01:				; XREF: Obj30_TypeIndex
000095A0 1038 FE70                  		move.b	($FFFFFE70).w,d0
000095A4 323C 0040                  		move.w	#$40,d1
000095A8 6000                       		bra.s	loc_B514
000095AA                            ; ===========================================================================
000095AA                            
000095AA                            Obj30_Type02:				; XREF: Obj30_TypeIndex
000095AA 1038 FE70                  		move.b	($FFFFFE70).w,d0
000095AE 323C 0040                  		move.w	#$40,d1
000095B2 4440                       		neg.w	d0
000095B6                            
000095B6                            loc_B514:				; XREF: Obj30_Type01
000095B6 0828 0003 0028             		btst	#3,$28(a0)
000095BC 6700                       		beq.s	loc_B526
000095BE 4440                       		neg.w	d0
000095C2 E208                       		lsr.b	#1,d0
000095C4 0640 0020                  		addi.w	#$20,d0
000095C8                            
000095C8                            loc_B526:
000095C8 6000 0000                  		bra.w	loc_B5EE
000095CC                            ; ===========================================================================
000095CC                            
000095CC                            Obj30_Type03:				; XREF: Obj30_TypeIndex
000095CC 0828 0003 0028             		btst	#3,$28(a0)
000095D2 6700                       		beq.s	loc_B53E
000095D4 1038 FE70                  		move.b	($FFFFFE70).w,d0
000095D8 0440 0010                  		subi.w	#$10,d0
000095DC 6000 0000                  		bra.w	loc_B5EE
000095E0                            ; ===========================================================================
000095E0                            
000095E0                            loc_B53E:
000095E0 0828 0003 0022             		btst	#3,$22(a0)
000095E6 6600                       		bne.s	loc_B54E
000095E8 08A8 0000 0034             		bclr	#0,$34(a0)
000095EE 6000                       		bra.s	loc_B582
000095F0                            ; ===========================================================================
000095F0                            
000095F0                            loc_B54E:
000095F0 4A28 0034                  		tst.b	$34(a0)
000095F4 6600                       		bne.s	loc_B582
000095F6 117C 0001 0034             		move.b	#1,$34(a0)
000095FC 08E8 0000 0035             		bset	#0,$35(a0)
00009602 6700                       		beq.s	loc_B582
00009604 08E8 0007 0034             		bset	#7,$34(a0)
0000960A 317C 0010 0036             		move.w	#$10,$36(a0)
00009610 117C 000A 0038             		move.b	#$A,$38(a0)
00009616 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000961C 6600                       		bne.s	loc_B582
0000961E 317C 0040 0036             		move.w	#$40,$36(a0)
00009624                            
00009624                            loc_B582:
00009624 4A28 0034                  		tst.b	$34(a0)
00009628 6A00                       		bpl.s	loc_B5AA
0000962A 4A28 0038                  		tst.b	$38(a0)
0000962E 6700                       		beq.s	loc_B594
00009630 5328 0038                  		subq.b	#1,$38(a0)
00009634 6600                       		bne.s	loc_B5AA
00009636                            
00009636                            loc_B594:
00009636 4A68 0032                  		tst.w	$32(a0)
0000963A 6700                       		beq.s	loc_B5A4
0000963C 5368 0032                  		subq.w	#1,$32(a0)
00009640 5368 0036                  		subq.w	#1,$36(a0)
00009644 6600                       		bne.s	loc_B5AA
00009646                            
00009646                            loc_B5A4:
00009646 08A8 0007 0034             		bclr	#7,$34(a0)
0000964C                            
0000964C                            loc_B5AA:
0000964C 3028 0032                  		move.w	$32(a0),d0
00009650 6000                       		bra.s	loc_B5EE
00009652                            ; ===========================================================================
00009652                            
00009652                            Obj30_Type04:				; XREF: Obj30_TypeIndex
00009652 0828 0003 0028             		btst	#3,$28(a0)
00009658 6700                       		beq.s	Obj30_ChkSwitch
0000965A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000965E 0440 0010                  		subi.w	#$10,d0
00009662 6000                       		bra.s	loc_B5EE
00009664                            ; ===========================================================================
00009664                            
00009664                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
00009664 4A28 0034                  		tst.b	$34(a0)
00009668 6600                       		bne.s	loc_B5E0
0000966A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000966E 7000                       		moveq	#0,d0
00009670 1028 0028                  		move.b	$28(a0),d0	; load object type number
00009674 E848                       		lsr.w	#4,d0		; read only the	first nybble
00009676 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000967A 6700                       		beq.s	loc_B5EA	; if not, branch
0000967C 117C 0001 0034             		move.b	#1,$34(a0)
00009682                            
00009682                            loc_B5E0:
00009682 4A68 0032                  		tst.w	$32(a0)
00009686 6700                       		beq.s	loc_B5EA
00009688 5568 0032                  		subq.w	#2,$32(a0)
0000968C                            
0000968C                            loc_B5EA:
0000968C 3028 0032                  		move.w	$32(a0),d0
00009690                            
00009690                            loc_B5EE:
00009690 3228 0030                  		move.w	$30(a0),d1
00009696 3141 000C                  		move.w	d1,$C(a0)
0000969A 4E75                       		rts	
0000969C                            ; ===========================================================================
0000969C                            ; ---------------------------------------------------------------------------
0000969C                            ; Sprite mappings - large green	glassy blocks (MZ)
0000969C                            ; ---------------------------------------------------------------------------
0000969C                            Map_obj30:
0000969C                            	include "_maps\obj30.asm"
0000969C                            ; ---------------------------------------------------------------------------
0000969C                            ; Sprite mappings - large green	glassy blocks (MZ)
0000969C                            ; ---------------------------------------------------------------------------
0000969C 0000                       		dc.w byte_B600-Map_obj30
0000969E 0000                       		dc.w byte_B63D-Map_obj30
000096A0 0000                       		dc.w byte_B648-Map_obj30
000096A2 0C                         byte_B600:	dc.b $C
000096A3 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
000096A8 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
000096AD C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
000096B2 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
000096B7 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
000096BC E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
000096C1 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
000096C6 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
000096CB 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
000096D0 200F 0804 00               		dc.b $20, $F, 8, 4, 0
000096D5 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
000096DA 400C 1800 00               		dc.b $40, $C, $18, 0, 0
000096DF 02                         byte_B63D:	dc.b 2
000096E0 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
000096E5 0006 0014 00               		dc.b 0,	6, 0, $14, 0
000096EA 0A                         byte_B648:	dc.b $A
000096EB C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
000096F0 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
000096F5 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
000096FA D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
000096FF F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00009704 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00009709 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000970E 100F 0804 00               		dc.b $10, $F, 8, 4, 0
00009713 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
00009718 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000971E 00                         		even
0000971E 00                         		even
0000971E                            
0000971E                            ; ===========================================================================
0000971E                            ; ---------------------------------------------------------------------------
0000971E                            ; Object 31 - stomping metal blocks on chains (MZ)
0000971E                            ; ---------------------------------------------------------------------------
0000971E                            
0000971E                            Obj31:					; XREF: Obj_Index
0000971E 7000                       		moveq	#0,d0
00009720 1028 0024                  		move.b	$24(a0),d0
00009724 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
00009728 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000972C                            ; ===========================================================================
0000972C 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000972E 0000                       		dc.w loc_B798-Obj31_Index
00009730 0000                       		dc.w loc_B7FE-Obj31_Index
00009732 0000                       		dc.w Obj31_Display2-Obj31_Index
00009734 0000                       		dc.w loc_B7E2-Obj31_Index
00009736                            
00009736 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
00009738 0100                       		dc.b 1,	0
0000973A                            
0000973A 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000973D 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
00009740 08CC 03                    		dc.b 8,	$CC, 3
00009743 06F0 02                    		dc.b 6,	$F0, 2
00009746                            
00009746 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000974A 5000 7800                  		dc.w $5000, $7800
0000974E 3800 5800                  		dc.w $3800, $5800
00009752 B800                       		dc.w $B800
00009754                            ; ===========================================================================
00009754                            
00009754                            Obj31_Main:				; XREF: Obj31_Index
00009754 7000                       		moveq	#0,d0
00009756 1028 0028                  		move.b	$28(a0),d0
0000975A 6A00                       		bpl.s	loc_B6CE
0000975C 0240 007F                  		andi.w	#$7F,d0
00009762 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
00009766 115A 003A                  		move.b	(a2)+,$3A(a0)
0000976A 101A                       		move.b	(a2)+,d0
0000976C 1140 0028                  		move.b	d0,$28(a0)
00009770                            
00009770                            loc_B6CE:
00009770 0200 000F                  		andi.b	#$F,d0
00009776 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000977A 4A40                       		tst.w	d0
0000977C 6600                       		bne.s	loc_B6E0
0000977E 3142 0032                  		move.w	d2,$32(a0)
00009782                            
00009782                            loc_B6E0:
00009782 45F9 0000 973A             		lea	(Obj31_Var).l,a2
00009788 2248                       		movea.l	a0,a1
0000978A 7203                       		moveq	#3,d1
0000978C 6000                       		bra.s	Obj31_MakeStomper
0000978E                            ; ===========================================================================
0000978E                            
0000978E                            Obj31_Loop:
0000978E 6100 0000                  		bsr.w	SingleObjLoad2
00009792 6600 0000                  		bne.w	Obj31_SetSize
00009796                            
00009796                            Obj31_MakeStomper:			; XREF: Obj31_Main
00009796 135A 0024                  		move.b	(a2)+,$24(a1)
0000979A 12BC 0031                  		move.b	#$31,0(a1)
0000979E 3368 0008 0008             		move.w	8(a0),8(a1)
000097A4 101A                       		move.b	(a2)+,d0
000097A6 4880                       		ext.w	d0
000097AC 3340 000C                  		move.w	d0,$C(a1)
000097B0 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
000097B8 337C 0300 0002             		move.w	#$300,2(a1)
000097BE 137C 0004 0001             		move.b	#4,1(a1)
000097C4 3369 000C 0030             		move.w	$C(a1),$30(a1)
000097CA 1368 0028 0028             		move.b	$28(a0),$28(a1)
000097D0 137C 0010 0019             		move.b	#$10,$19(a1)
000097D6 3342 0034                  		move.w	d2,$34(a1)
000097DA 137C 0004 0018             		move.b	#4,$18(a1)
000097E0 135A 001A                  		move.b	(a2)+,$1A(a1)
000097E4 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
000097EA 6600                       		bne.s	loc_B76A
000097EC 5341                       		subq.w	#1,d1
000097EE 1028 0028                  		move.b	$28(a0),d0
000097F2 0240 00F0                  		andi.w	#$F0,d0
000097F6 0C40 0020                  		cmpi.w	#$20,d0
000097FA 679A                       		beq.s	Obj31_MakeStomper
000097FC 137C 0038 0019             		move.b	#$38,$19(a1)
00009802 137C 0090 0020             		move.b	#$90,$20(a1)
00009808 5241                       		addq.w	#1,d1
0000980A                            
0000980A                            loc_B76A:
0000980A 2348 003C                  		move.l	a0,$3C(a1)
0000980E 51C9 FF7E                  		dbf	d1,Obj31_Loop
00009812                            
00009812 137C 0003 0018             		move.b	#3,$18(a1)
00009818                            
00009818                            Obj31_SetSize:
00009818 7000                       		moveq	#0,d0
0000981A 1028 0028                  		move.b	$28(a0),d0
0000981E E648                       		lsr.w	#3,d0
00009820 0200 000E                  		andi.b	#$E,d0
00009824 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
00009828 115A 0019                  		move.b	(a2)+,$19(a0)
0000982C 115A 001A                  		move.b	(a2)+,$1A(a0)
00009830 6000                       		bra.s	loc_B798
00009832                            ; ===========================================================================
00009832 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
00009834 3009                       		dc.b $30, 9
00009836 100A                       		dc.b $10, $A
00009838                            ; ===========================================================================
00009838                            
00009838                            loc_B798:				; XREF: Obj31_Index
00009838 6100 0000                  		bsr.w	Obj31_Types
0000983C 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
00009842 7200                       		moveq	#0,d1
00009844 1228 0019                  		move.b	$19(a0),d1
00009848 0641 000B                  		addi.w	#$B,d1
0000984C 343C 000C                  		move.w	#$C,d2
00009850 363C 000D                  		move.w	#$D,d3
00009854 3828 0008                  		move.w	8(a0),d4
00009858 6100 0000                  		bsr.w	SolidObject
0000985C 0828 0003 0022             		btst	#3,$22(a0)
00009862 6700                       		beq.s	Obj31_Display
00009864 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000986A 6400                       		bcc.s	Obj31_Display
0000986C 2448                       		movea.l	a0,a2
0000986E 41F8 D000                  		lea	($FFFFD000).w,a0
00009872 4EB9 0000 0000             		jsr	KillSonic
00009878 204A                       		movea.l	a2,a0
0000987A                            
0000987A                            Obj31_Display:
0000987A 6100 0000                  		bsr.w	DisplaySprite
0000987E 6000 0000                  		bra.w	Obj31_ChkDel
00009882                            ; ===========================================================================
00009882                            
00009882                            loc_B7E2:				; XREF: Obj31_Index
00009882 117C 0080 0016             		move.b	#$80,$16(a0)
00009888 08E8 0004 0001             		bset	#4,1(a0)
0000988E 2268 003C                  		movea.l	$3C(a0),a1
00009892 1029 0032                  		move.b	$32(a1),d0
00009896 EA08                       		lsr.b	#5,d0
00009898 5600                       		addq.b	#3,d0
0000989A 1140 001A                  		move.b	d0,$1A(a0)
0000989E                            
0000989E                            loc_B7FE:				; XREF: Obj31_Index
0000989E 2268 003C                  		movea.l	$3C(a0),a1
000098A2 7000                       		moveq	#0,d0
000098A4 1029 0032                  		move.b	$32(a1),d0
000098AC 3140 000C                  		move.w	d0,$C(a0)
000098B0                            
000098B0                            Obj31_Display2:				; XREF: Obj31_Index
000098B0 6100 0000                  		bsr.w	DisplaySprite
000098B4                            
000098B4                            Obj31_ChkDel:				; XREF: Obj31_Display
000098B4 3028 0008                  		move.w	8(a0),d0
000098B8 0240 FF80                  		andi.w	#$FF80,d0
000098BC 3238 F700                  		move.w	($FFFFF700).w,d1
000098C0 0441 0080                  		subi.w	#$80,d1
000098C4 0241 FF80                  		andi.w	#$FF80,d1
000098CA 0C40 0280                  		cmpi.w	#$280,d0
000098CE 6200 0000                  		bhi.w	DeleteObject
000098D2 4E75                       		rts	
000098D4                            ; ===========================================================================
000098D4                            
000098D4                            Obj31_Types:				; XREF: loc_B798
000098D4 1028 0028                  		move.b	$28(a0),d0
000098D8 0240 000F                  		andi.w	#$F,d0
000098DE 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
000098E2 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
000098E6                            ; ===========================================================================
000098E6 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
000098E8 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
000098EA 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
000098EC 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
000098EE 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
000098F0 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
000098F2 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
000098F4                            ; ===========================================================================
000098F4                            
000098F4                            Obj31_Type00:				; XREF: Obj31_TypeIndex
000098F4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000098F8 7000                       		moveq	#0,d0
000098FA 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
000098FE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
00009902 6700                       		beq.s	loc_B8A8	; if not, branch
00009904 4A78 F7A4                  		tst.w	($FFFFF7A4).w
00009908 6A00                       		bpl.s	loc_B872
0000990A 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
00009910 6700                       		beq.s	loc_B8A0
00009912                            
00009912                            loc_B872:
00009912 4A68 0032                  		tst.w	$32(a0)
00009916 6700                       		beq.s	loc_B8A0
00009918 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000991C 0200 000F                  		andi.b	#$F,d0
00009920 6600                       		bne.s	loc_B892
00009922 4A28 0001                  		tst.b	1(a0)
00009926 6A00                       		bpl.s	loc_B892
00009928 303C 00C7                  		move.w	#$C7,d0
0000992C 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play rising chain sound
00009932                            
00009932                            loc_B892:
00009932 0468 0080 0032             		subi.w	#$80,$32(a0)
00009938 6400                       		bcc.s	Obj31_Restart
0000993A 317C 0000 0032             		move.w	#0,$32(a0)
00009940                            
00009940                            loc_B8A0:
00009940 317C 0000 0012             		move.w	#0,$12(a0)
00009946 6000                       		bra.s	Obj31_Restart
00009948                            ; ===========================================================================
00009948                            
00009948                            loc_B8A8:				; XREF: Obj31_Type00
00009948 3228 0034                  		move.w	$34(a0),d1
0000994C B268 0032                  		cmp.w	$32(a0),d1
00009950 6700                       		beq.s	Obj31_Restart
00009952 3028 0012                  		move.w	$12(a0),d0
00009956 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
00009960 B268 0032                  		cmp.w	$32(a0),d1
00009964 6200                       		bhi.s	Obj31_Restart
00009966 3141 0032                  		move.w	d1,$32(a0)
0000996A 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
00009970 4A28 0001                  		tst.b	1(a0)
00009974 6A00                       		bpl.s	Obj31_Restart
00009976 303C 00BD                  		move.w	#$BD,d0
0000997A 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play stomping sound
00009980                            
00009980                            Obj31_Restart:
00009980 7000                       		moveq	#0,d0
00009982 1028 0032                  		move.b	$32(a0),d0
0000998A 3140 000C                  		move.w	d0,$C(a0)
0000998E 4E75                       		rts	
00009990                            ; ===========================================================================
00009990                            
00009990                            Obj31_Type01:				; XREF: Obj31_TypeIndex
00009990 4A68 0036                  		tst.w	$36(a0)
00009994 6700                       		beq.s	loc_B938
00009996 4A68 0038                  		tst.w	$38(a0)
0000999A 6700                       		beq.s	loc_B902
0000999C 5368 0038                  		subq.w	#1,$38(a0)
000099A0 6000                       		bra.s	loc_B97C
000099A2                            ; ===========================================================================
000099A2                            
000099A2                            loc_B902:
000099A2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000099A6 0200 000F                  		andi.b	#$F,d0
000099AA 6600                       		bne.s	loc_B91C
000099AC 4A28 0001                  		tst.b	1(a0)
000099B0 6A00                       		bpl.s	loc_B91C
000099B2 303C 00C7                  		move.w	#$C7,d0
000099B6 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play rising chain sound
000099BC                            
000099BC                            loc_B91C:
000099BC 0468 0080 0032             		subi.w	#$80,$32(a0)
000099C2 6400                       		bcc.s	loc_B97C
000099C4 317C 0000 0032             		move.w	#0,$32(a0)
000099CA 317C 0000 0012             		move.w	#0,$12(a0)
000099D0 317C 0000 0036             		move.w	#0,$36(a0)
000099D6 6000                       		bra.s	loc_B97C
000099D8                            ; ===========================================================================
000099D8                            
000099D8                            loc_B938:				; XREF: Obj31_Type01
000099D8 3228 0034                  		move.w	$34(a0),d1
000099DC B268 0032                  		cmp.w	$32(a0),d1
000099E0 6700                       		beq.s	loc_B97C
000099E2 3028 0012                  		move.w	$12(a0),d0
000099E6 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
000099F0 B268 0032                  		cmp.w	$32(a0),d1
000099F4 6200                       		bhi.s	loc_B97C
000099F6 3141 0032                  		move.w	d1,$32(a0)
000099FA 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
00009A00 317C 0001 0036             		move.w	#1,$36(a0)
00009A06 317C 003C 0038             		move.w	#$3C,$38(a0)
00009A0C 4A28 0001                  		tst.b	1(a0)
00009A10 6A00                       		bpl.s	loc_B97C
00009A12 303C 00BD                  		move.w	#$BD,d0
00009A16 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play stomping sound
00009A1C                            
00009A1C                            loc_B97C:
00009A1C 6000 FF62                  		bra.w	Obj31_Restart
00009A20                            ; ===========================================================================
00009A20                            
00009A20                            Obj31_Type03:				; XREF: Obj31_TypeIndex
00009A20 3038 D008                  		move.w	($FFFFD008).w,d0
00009A28 6400                       		bcc.s	loc_B98C
00009A2A 4440                       		neg.w	d0
00009A2C                            
00009A2C                            loc_B98C:
00009A2C 0C40 0090                  		cmpi.w	#$90,d0
00009A30 6400                       		bcc.s	loc_B996
00009A32 5228 0028                  		addq.b	#1,$28(a0)
00009A36                            
00009A36                            loc_B996:
00009A36 6000 FF48                  		bra.w	Obj31_Restart
00009A3A                            ; ===========================================================================
00009A3A                            ; ---------------------------------------------------------------------------
00009A3A                            ; Object 45 - spiked metal block from beta version (MZ)
00009A3A                            ; ---------------------------------------------------------------------------
00009A3A                            
00009A3A                            Obj45:					; XREF: Obj_Index
00009A3A 7000                       		moveq	#0,d0
00009A3C 1028 0024                  		move.b	$24(a0),d0
00009A40 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
00009A44 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
00009A48                            ; ===========================================================================
00009A48 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
00009A4A 0000                       		dc.w Obj45_Solid-Obj45_Index
00009A4C 0000                       		dc.w loc_BA8E-Obj45_Index
00009A4E 0000                       		dc.w Obj45_Display-Obj45_Index
00009A50 0000                       		dc.w loc_BA7A-Obj45_Index
00009A52                            
00009A52 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
00009A55 04E4 01                    		dc.b	4, $E4,	  1
00009A58 0834 03                    		dc.b	8, $34,	  3
00009A5B 0628 02                    		dc.b	6, $28,	  2
00009A5E                            
00009A5E 3800                       word_B9BE:	dc.w $3800
00009A60 A000                       		dc.w -$6000
00009A62 5000                       		dc.w $5000
00009A64                            ; ===========================================================================
00009A64                            
00009A64                            Obj45_Main:				; XREF: Obj45_Index
00009A64 7000                       		moveq	#0,d0
00009A66 1028 0028                  		move.b	$28(a0),d0
00009A6C 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
00009A70 45F9 0000 9A52             		lea	(Obj45_Var).l,a2
00009A76 2248                       		movea.l	a0,a1
00009A78 7203                       		moveq	#3,d1
00009A7A 6000                       		bra.s	Obj45_Load
00009A7C                            ; ===========================================================================
00009A7C                            
00009A7C                            Obj45_Loop:
00009A7C 6100 0000                  		bsr.w	SingleObjLoad2
00009A80 6600                       		bne.s	loc_BA52
00009A82                            
00009A82                            Obj45_Load:				; XREF: Obj45_Main
00009A82 135A 0024                  		move.b	(a2)+,$24(a1)
00009A86 12BC 0045                  		move.b	#$45,0(a1)
00009A8A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009A90 101A                       		move.b	(a2)+,d0
00009A92 4880                       		ext.w	d0
00009A98 3340 0008                  		move.w	d0,8(a1)
00009A9C 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
00009AA4 337C 0300 0002             		move.w	#$300,2(a1)
00009AAA 137C 0004 0001             		move.b	#4,1(a1)
00009AB0 3369 0008 0030             		move.w	8(a1),$30(a1)
00009AB6 3368 0008 003A             		move.w	8(a0),$3A(a1)
00009ABC 1368 0028 0028             		move.b	$28(a0),$28(a1)
00009AC2 137C 0020 0019             		move.b	#$20,$19(a1)
00009AC8 3342 0034                  		move.w	d2,$34(a1)
00009ACC 137C 0004 0018             		move.b	#4,$18(a1)
00009AD2 0C12 0001                  		cmpi.b	#1,(a2)
00009AD6 6600                       		bne.s	loc_BA40
00009AD8 137C 0091 0020             		move.b	#$91,$20(a1)
00009ADE                            
00009ADE                            loc_BA40:
00009ADE 135A 001A                  		move.b	(a2)+,$1A(a1)
00009AE2 2348 003C                  		move.l	a0,$3C(a1)
00009AE6 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
00009AEA                            
00009AEA 137C 0003 0018             		move.b	#3,$18(a1)
00009AF0                            
00009AF0                            loc_BA52:
00009AF0 117C 0010 0019             		move.b	#$10,$19(a0)
00009AF6                            
00009AF6                            Obj45_Solid:				; XREF: Obj45_Index
00009AF6 3F28 0008                  		move.w	8(a0),-(sp)
00009AFA 6100 0000                  		bsr.w	Obj45_Move
00009AFE 323C 0017                  		move.w	#$17,d1
00009B02 343C 0020                  		move.w	#$20,d2
00009B06 363C 0020                  		move.w	#$20,d3
00009B0A 381F                       		move.w	(sp)+,d4
00009B0C 6100 0000                  		bsr.w	SolidObject
00009B10 6100 0000                  		bsr.w	DisplaySprite
00009B14 6000 0000                  		bra.w	Obj45_ChkDel
00009B18                            ; ===========================================================================
00009B18                            
00009B18                            loc_BA7A:				; XREF: Obj45_Index
00009B18 2268 003C                  		movea.l	$3C(a0),a1
00009B1C 1029 0032                  		move.b	$32(a1),d0
00009B20 0600 0010                  		addi.b	#$10,d0
00009B24 EA08                       		lsr.b	#5,d0
00009B26 5600                       		addq.b	#3,d0
00009B28 1140 001A                  		move.b	d0,$1A(a0)
00009B2C                            
00009B2C                            loc_BA8E:				; XREF: Obj45_Index
00009B2C 2268 003C                  		movea.l	$3C(a0),a1
00009B30 7000                       		moveq	#0,d0
00009B32 1029 0032                  		move.b	$32(a1),d0
00009B36 4440                       		neg.w	d0
00009B3C 3140 0008                  		move.w	d0,8(a0)
00009B40                            
00009B40                            Obj45_Display:				; XREF: Obj45_Index
00009B40 6100 0000                  		bsr.w	DisplaySprite
00009B44                            
00009B44                            Obj45_ChkDel:				; XREF: Obj45_Solid
00009B44 3028 003A                  		move.w	$3A(a0),d0
00009B48 0240 FF80                  		andi.w	#$FF80,d0
00009B4C 3238 F700                  		move.w	($FFFFF700).w,d1
00009B50 0441 0080                  		subi.w	#$80,d1
00009B54 0241 FF80                  		andi.w	#$FF80,d1
00009B5A 0C40 0280                  		cmpi.w	#$280,d0
00009B5E 6200 0000                  		bhi.w	DeleteObject
00009B62 4E75                       		rts	
00009B64                            
00009B64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B64                            
00009B64                            
00009B64                            Obj45_Move:				; XREF: Obj45_Solid
00009B64 7000                       		moveq	#0,d0
00009B66 1028 0028                  		move.b	$28(a0),d0
00009B6C 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
00009B70 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
00009B74                            ; End of function Obj45_Move
00009B74                            
00009B74                            ; ===========================================================================
00009B74 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
00009B76 0000                       		dc.w loc_BADA-off_BAD6
00009B78                            ; ===========================================================================
00009B78                            
00009B78                            loc_BADA:				; XREF: off_BAD6
00009B78 4A68 0036                  		tst.w	$36(a0)
00009B7C 6700                       		beq.s	loc_BB08
00009B7E 4A68 0038                  		tst.w	$38(a0)
00009B82 6700                       		beq.s	loc_BAEC
00009B84 5368 0038                  		subq.w	#1,$38(a0)
00009B88 6000                       		bra.s	loc_BB3C
00009B8A                            ; ===========================================================================
00009B8A                            
00009B8A                            loc_BAEC:
00009B8A 0468 0080 0032             		subi.w	#$80,$32(a0)
00009B90 6400                       		bcc.s	loc_BB3C
00009B92 317C 0000 0032             		move.w	#0,$32(a0)
00009B98 317C 0000 0010             		move.w	#0,$10(a0)
00009B9E 317C 0000 0036             		move.w	#0,$36(a0)
00009BA4 6000                       		bra.s	loc_BB3C
00009BA6                            ; ===========================================================================
00009BA6                            
00009BA6                            loc_BB08:				; XREF: loc_BADA
00009BA6 3228 0034                  		move.w	$34(a0),d1
00009BAA B268 0032                  		cmp.w	$32(a0),d1
00009BAE 6700                       		beq.s	loc_BB3C
00009BB0 3028 0010                  		move.w	$10(a0),d0
00009BB4 0668 0070 0010             		addi.w	#$70,$10(a0)
00009BBE B268 0032                  		cmp.w	$32(a0),d1
00009BC2 6200                       		bhi.s	loc_BB3C
00009BC4 3141 0032                  		move.w	d1,$32(a0)
00009BC8 317C 0000 0010             		move.w	#0,$10(a0)
00009BCE 317C 0001 0036             		move.w	#1,$36(a0)
00009BD4 317C 003C 0038             		move.w	#$3C,$38(a0)
00009BDA                            
00009BDA                            loc_BB3C:
00009BDA 7000                       		moveq	#0,d0
00009BDC 1028 0032                  		move.b	$32(a0),d0
00009BE0 4440                       		neg.w	d0
00009BE6 3140 0008                  		move.w	d0,8(a0)
00009BEA 4E75                       		rts	
00009BEC                            ; ===========================================================================
00009BEC                            ; ---------------------------------------------------------------------------
00009BEC                            ; Sprite mappings - metal stomping blocks on chains (MZ)
00009BEC                            ; ---------------------------------------------------------------------------
00009BEC                            Map_obj31:
00009BEC                            	include "_maps\obj31.asm"
00009BEC                            ; ---------------------------------------------------------------------------
00009BEC                            ; Sprite mappings - metal stomping blocks on chains (MZ)
00009BEC                            ; ---------------------------------------------------------------------------
00009BEC 0000                       		dc.w byte_BB64-Map_obj31
00009BEE 0000                       		dc.w byte_BB7E-Map_obj31
00009BF0 0000                       		dc.w byte_BB98-Map_obj31
00009BF2 0000                       		dc.w byte_BB9E-Map_obj31
00009BF4 0000                       		dc.w byte_BBA9-Map_obj31
00009BF6 0000                       		dc.w byte_BBBE-Map_obj31
00009BF8 0000                       		dc.w byte_BBDD-Map_obj31
00009BFA 0000                       		dc.w byte_BC06-Map_obj31
00009BFC 0000                       		dc.w byte_BC06-Map_obj31
00009BFE 0000                       		dc.w byte_BC39-Map_obj31
00009C00 0000                       		dc.w byte_BC53-Map_obj31
00009C02 05                         byte_BB64:	dc.b 5
00009C03 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
00009C08 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
00009C0D EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
00009C12 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
00009C17 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
00009C1C 05                         byte_BB7E:	dc.b 5
00009C1D F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
00009C22 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
00009C27 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
00009C2C F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
00009C31 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
00009C36 01                         byte_BB98:	dc.b 1
00009C37 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
00009C3C 02                         byte_BB9E:	dc.b 2
00009C3D 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
00009C42 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
00009C47 04                         byte_BBA9:	dc.b 4
00009C48 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
00009C4D F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
00009C52 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
00009C57 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
00009C5C 06                         byte_BBBE:	dc.b 6
00009C5D C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
00009C62 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
00009C67 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
00009C6C F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
00009C71 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
00009C76 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
00009C7B 08                         byte_BBDD:	dc.b 8
00009C7C A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
00009C81 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
00009C86 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
00009C8B D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
00009C90 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
00009C95 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
00009C9A 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
00009C9F 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
00009CA4 0A                         byte_BC06:	dc.b $A
00009CA5 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
00009CAA 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
00009CAF A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
00009CB4 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
00009CB9 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
00009CBE D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
00009CC3 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
00009CC8 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
00009CCD 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
00009CD2 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
00009CD7 05                         byte_BC39:	dc.b 5
00009CD8 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
00009CDD F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
00009CE2 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
00009CE7 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
00009CEC EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
00009CF1 01                         byte_BC53:	dc.b 1
00009CF2 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
00009CF8 00                         		even
00009CF8 00                         		even
00009CF8                            
00009CF8                            ; ---------------------------------------------------------------------------
00009CF8                            ; Sprite mappings - spiked metal block from beta version (MZ)
00009CF8                            ; ---------------------------------------------------------------------------
00009CF8                            Map_obj45:
00009CF8                            	include "_maps\obj45.asm"
00009CF8                            ; ---------------------------------------------------------------------------
00009CF8                            ; Sprite mappings - spiked metal block from beta version (MZ)
00009CF8                            ; ---------------------------------------------------------------------------
00009CF8 0000                       		dc.w byte_BC6C-Map_obj45
00009CFA 0000                       		dc.w byte_BC7C-Map_obj45
00009CFC 0000                       		dc.w byte_BC8C-Map_obj45
00009CFE 0000                       		dc.w byte_BC92-Map_obj45
00009D00 0000                       		dc.w byte_BC9D-Map_obj45
00009D02 0000                       		dc.w byte_BCB2-Map_obj45
00009D04 0000                       		dc.w byte_BCD1-Map_obj45
00009D06 0000                       		dc.w byte_BCFA-Map_obj45
00009D08 0000                       		dc.w byte_BCFA-Map_obj45
00009D0A 03                         byte_BC6C:	dc.b 3
00009D0B E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
00009D10 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
00009D15 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
00009D1A 03                         byte_BC7C:	dc.b 3
00009D1B E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
00009D20 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
00009D25 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
00009D2A 01                         byte_BC8C:	dc.b 1
00009D2B F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
00009D30 02                         byte_BC92:	dc.b 2
00009D31 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
00009D36 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
00009D3B 04                         byte_BC9D:	dc.b 4
00009D3C F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
00009D41 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
00009D46 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
00009D4B F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
00009D50 06                         byte_BCB2:	dc.b 6
00009D51 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
00009D56 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
00009D5B F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
00009D60 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
00009D65 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
00009D6A F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
00009D6F 08                         byte_BCD1:	dc.b 8
00009D70 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
00009D75 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
00009D7A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
00009D7F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
00009D84 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
00009D89 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
00009D8E F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
00009D93 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
00009D98 08                         byte_BCFA:	dc.b 8
00009D99 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
00009D9E F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
00009DA3 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
00009DA8 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
00009DAD F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
00009DB2 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
00009DB7 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
00009DBC F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
00009DC1 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
00009DC6 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
00009DCC 00                         		even
00009DCC 00                         		even
00009DCC                            
00009DCC                            ; ===========================================================================
00009DCC                            ; ---------------------------------------------------------------------------
00009DCC                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
00009DCC                            ; ---------------------------------------------------------------------------
00009DCC                            
00009DCC                            Obj32:					; XREF: Obj_Index
00009DCC 7000                       		moveq	#0,d0
00009DCE 1028 0024                  		move.b	$24(a0),d0
00009DD2 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
00009DD6 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
00009DDA                            ; ===========================================================================
00009DDA 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
00009DDC 0000                       		dc.w Obj32_Pressed-Obj32_Index
00009DDE                            ; ===========================================================================
00009DDE                            
00009DDE                            Obj32_Main:				; XREF: Obj32_Index
00009DDE 5428 0024                  		addq.b	#2,$24(a0)
00009DE2 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
00009DEA 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
00009DF0 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
00009DF6 6700                       		beq.s	loc_BD60
00009DF8 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
00009DFE                            
00009DFE                            loc_BD60:
00009DFE 117C 0004 0001             		move.b	#4,1(a0)
00009E04 117C 0010 0019             		move.b	#$10,$19(a0)
00009E0A 117C 0004 0018             		move.b	#4,$18(a0)
00009E10 5668 000C                  		addq.w	#3,$C(a0)
00009E14                            
00009E14                            Obj32_Pressed:				; XREF: Obj32_Index
00009E14 4A28 0001                  		tst.b	1(a0)
00009E18 6A00                       		bpl.s	Obj32_Display
00009E1A 323C 001B                  		move.w	#$1B,d1
00009E1E 343C 0005                  		move.w	#5,d2
00009E22 363C 0005                  		move.w	#5,d3
00009E26 3828 0008                  		move.w	8(a0),d4
00009E2A 6100 0000                  		bsr.w	SolidObject
00009E2E 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
00009E34 1028 0028                  		move.b	$28(a0),d0
00009E38 0240 000F                  		andi.w	#$F,d0
00009E3C 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
00009E40 47F3 0000                  		lea	(a3,d0.w),a3
00009E44 7600                       		moveq	#0,d3
00009E46 0828 0006 0028             		btst	#6,$28(a0)
00009E4C 6700                       		beq.s	loc_BDB2
00009E4E 7607                       		moveq	#7,d3
00009E50                            
00009E50                            loc_BDB2:
00009E50 4A28 0028                  		tst.b	$28(a0)
00009E54 6A00                       		bpl.s	loc_BDBE
00009E56 6100 0000                  		bsr.w	Obj32_MZBlock
00009E5A 6600                       		bne.s	loc_BDC8
00009E5C                            
00009E5C                            loc_BDBE:
00009E5C 4A28 0025                  		tst.b	$25(a0)
00009E60 6600                       		bne.s	loc_BDC8
00009E62 0793                       		bclr	d3,(a3)
00009E64 6000                       		bra.s	loc_BDDE
00009E66                            ; ===========================================================================
00009E66                            
00009E66                            loc_BDC8:
00009E66 4A13                       		tst.b	(a3)
00009E68 6600                       		bne.s	loc_BDD6
00009E6A 303C 00CD                  		move.w	#$CD,d0
00009E6E 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play switch sound
00009E74                            
00009E74                            loc_BDD6:
00009E74 07D3                       		bset	d3,(a3)
00009E76 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
00009E7C                            
00009E7C                            loc_BDDE:
00009E7C 0828 0005 0028             		btst	#5,$28(a0)
00009E82 6700                       		beq.s	Obj32_Display
00009E84 5328 001E                  		subq.b	#1,$1E(a0)
00009E88 6A00                       		bpl.s	Obj32_Display
00009E8A 117C 0007 001E             		move.b	#7,$1E(a0)
00009E90 0868 0001 001A             		bchg	#1,$1A(a0)
00009E96                            
00009E96                            Obj32_Display:
00009E96 6100 0000                  		bsr.w	DisplaySprite
00009E9A 3028 0008                  		move.w	8(a0),d0
00009E9E 0240 FF80                  		andi.w	#$FF80,d0
00009EA2 3238 F700                  		move.w	($FFFFF700).w,d1
00009EA6 0441 0080                  		subi.w	#$80,d1
00009EAA 0241 FF80                  		andi.w	#$FF80,d1
00009EB0 0C40 0280                  		cmpi.w	#$280,d0
00009EB4 6200 0000                  		bhi.w	Obj32_Delete
00009EB8 4E75                       		rts	
00009EBA                            ; ===========================================================================
00009EBA                            
00009EBA                            Obj32_Delete:
00009EBA 6100 0000                  		bsr.w	DeleteObject
00009EBE 4E75                       		rts	
00009EC0                            
00009EC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009EC0                            
00009EC0                            
00009EC0                            Obj32_MZBlock:				; XREF: Obj32_Pressed
00009EC0 3F03                       		move.w	d3,-(sp)
00009EC2 3428 0008                  		move.w	8(a0),d2
00009EC6 3628 000C                  		move.w	$C(a0),d3
00009ECA 0442 0010                  		subi.w	#$10,d2
00009ECE 5143                       		subq.w	#8,d3
00009ED0 383C 0020                  		move.w	#$20,d4
00009ED4 3A3C 0010                  		move.w	#$10,d5
00009ED8 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
00009EDC 3C3C 005F                  		move.w	#$5F,d6
00009EE0                            
00009EE0                            Obj32_MZLoop:
00009EE0 4A29 0001                  		tst.b	1(a1)
00009EE4 6A00                       		bpl.s	loc_BE4E
00009EE6 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
00009EEA 6700                       		beq.s	loc_BE5E	; if yes, branch
00009EEC                            
00009EEC                            loc_BE4E:
00009EEC 43E9 0040                  		lea	$40(a1),a1	; check	next object
00009EF0 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
00009EF4                            
00009EF4 361F                       		move.w	(sp)+,d3
00009EF6 7000                       		moveq	#0,d0
00009EF8                            
00009EF8                            locret_BE5A:
00009EF8 4E75                       		rts	
00009EFA                            ; ===========================================================================
00009EFA 1010                       Obj32_MZData:	dc.b $10, $10
00009EFC                            ; ===========================================================================
00009EFC                            
00009EFC                            loc_BE5E:				; XREF: Obj32_MZBlock
00009EFC 7001                       		moveq	#1,d0
00009EFE 0240 003F                  		andi.w	#$3F,d0
00009F04 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
00009F08 121A                       		move.b	(a2)+,d1
00009F0A 4881                       		ext.w	d1
00009F0C 3029 0008                  		move.w	8(a1),d0
00009F14 6400                       		bcc.s	loc_BE80
00009F1A 6500                       		bcs.s	loc_BE84
00009F1C 60CE                       		bra.s	loc_BE4E
00009F1E                            ; ===========================================================================
00009F1E                            
00009F1E                            loc_BE80:
00009F1E B044                       		cmp.w	d4,d0
00009F20 62CA                       		bhi.s	loc_BE4E
00009F22                            
00009F22                            loc_BE84:
00009F22 121A                       		move.b	(a2)+,d1
00009F24 4881                       		ext.w	d1
00009F26 3029 000C                  		move.w	$C(a1),d0
00009F2E 6400                       		bcc.s	loc_BE9A
00009F34 6500                       		bcs.s	loc_BE9E
00009F36 60B4                       		bra.s	loc_BE4E
00009F38                            ; ===========================================================================
00009F38                            
00009F38                            loc_BE9A:
00009F38 B045                       		cmp.w	d5,d0
00009F3A 62B0                       		bhi.s	loc_BE4E
00009F3C                            
00009F3C                            loc_BE9E:
00009F3C 361F                       		move.w	(sp)+,d3
00009F3E 7001                       		moveq	#1,d0
00009F40 4E75                       		rts	
00009F42                            ; End of function Obj32_MZBlock
00009F42                            
00009F42                            ; ===========================================================================
00009F42                            ; ---------------------------------------------------------------------------
00009F42                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
00009F42                            ; ---------------------------------------------------------------------------
00009F42                            Map_obj32:
00009F42                            	include "_maps\obj32.asm"
00009F42                            ; ---------------------------------------------------------------------------
00009F42                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
00009F42                            ; ---------------------------------------------------------------------------
00009F42 0000                       		dc.w byte_BEAC-Map_obj32
00009F44 0000                       		dc.w byte_BEB7-Map_obj32
00009F46 0000                       		dc.w byte_BEC2-Map_obj32
00009F48 0000                       		dc.w byte_BEB7-Map_obj32
00009F4A 02                         byte_BEAC:	dc.b 2
00009F4B F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
00009F50 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
00009F55 02                         byte_BEB7:	dc.b 2
00009F56 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
00009F5B F505 0804 00               		dc.b $F5, 5, 8,	4, 0
00009F60 02                         byte_BEC2:	dc.b 2
00009F61 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
00009F66 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
00009F6B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009F70                            		even
00009F70                            		even
00009F70                            
00009F70                            ; ===========================================================================
00009F70                            ; ---------------------------------------------------------------------------
00009F70                            ; Object 33 - pushable blocks (MZ, LZ)
00009F70                            ; ---------------------------------------------------------------------------
00009F70                            
00009F70                            Obj33:					; XREF: Obj_Index
00009F70 7000                       		moveq	#0,d0
00009F72 1028 0024                  		move.b	$24(a0),d0
00009F76 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
00009F7A 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
00009F7E                            ; ===========================================================================
00009F7E 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
00009F80 0000                       		dc.w loc_BF6E-Obj33_Index
00009F82 0000                       		dc.w loc_C02C-Obj33_Index
00009F84                            
00009F84 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
00009F86 4001                       		dc.b $40, 1
00009F88                            ; ===========================================================================
00009F88                            
00009F88                            Obj33_Main:				; XREF: Obj33_Index
00009F88 5428 0024                  		addq.b	#2,$24(a0)
00009F8C 117C 000F 0016             		move.b	#$F,$16(a0)
00009F92 117C 000F 0017             		move.b	#$F,$17(a0)
00009F98 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
00009FA0 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
00009FA6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00009FAC 6600                       		bne.s	loc_BF16
00009FAE 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
00009FB4                            
00009FB4                            loc_BF16:
00009FB4 117C 0004 0001             		move.b	#4,1(a0)
00009FBA 117C 0003 0018             		move.b	#3,$18(a0)
00009FC0 3168 0008 0034             		move.w	8(a0),$34(a0)
00009FC6 3168 000C 0036             		move.w	$C(a0),$36(a0)
00009FCC 7000                       		moveq	#0,d0
00009FCE 1028 0028                  		move.b	$28(a0),d0
00009FD4 0240 000E                  		andi.w	#$E,d0
00009FD8 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
00009FDC 115A 0019                  		move.b	(a2)+,$19(a0)
00009FE0 115A 001A                  		move.b	(a2)+,$1A(a0)
00009FE4 4A28 0028                  		tst.b	$28(a0)
00009FE8 6700                       		beq.s	Obj33_ChkGone
00009FEA 317C C2B8 0002             		move.w	#$C2B8,2(a0)
00009FF0                            
00009FF0                            Obj33_ChkGone:
00009FF0 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009FF4 7000                       		moveq	#0,d0
00009FF6 1028 0023                  		move.b	$23(a0),d0
00009FFA 6700                       		beq.s	loc_BF6E
00009FFC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A002 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A008 6600 0000                  		bne.w	DeleteObject
0000A00C                            
0000A00C                            loc_BF6E:				; XREF: Obj33_Index
0000A00C 4A28 0032                  		tst.b	$32(a0)
0000A010 6600 0000                  		bne.w	loc_C046
0000A014 7200                       		moveq	#0,d1
0000A016 1228 0019                  		move.b	$19(a0),d1
0000A01A 0641 000B                  		addi.w	#$B,d1
0000A01E 343C 0010                  		move.w	#$10,d2
0000A022 363C 0011                  		move.w	#$11,d3
0000A026 3828 0008                  		move.w	8(a0),d4
0000A02A 6100 0000                  		bsr.w	loc_C186
0000A02E 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000A034 6600                       		bne.s	loc_BFC6	; if not, branch
0000A036 08A8 0007 0028             		bclr	#7,$28(a0)
0000A03C 3028 0008                  		move.w	8(a0),d0
0000A040 0C40 0A20                  		cmpi.w	#$A20,d0
0000A044 6500                       		bcs.s	loc_BFC6
0000A046 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000A04A 6400                       		bcc.s	loc_BFC6
0000A04C 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000A050 0440 001C                  		subi.w	#$1C,d0
0000A054 3140 000C                  		move.w	d0,$C(a0)
0000A058 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000A05E 08E8 0007 0028             		bset	#7,$28(a0)
0000A064                            
0000A064                            loc_BFC6:
0000A064 3028 0008                  		move.w	8(a0),d0
0000A068 0240 FF80                  		andi.w	#$FF80,d0
0000A06C 3238 F700                  		move.w	($FFFFF700).w,d1
0000A070 0441 0080                  		subi.w	#$80,d1
0000A074 0241 FF80                  		andi.w	#$FF80,d1
0000A07A 0C40 0280                  		cmpi.w	#$280,d0
0000A07E 6200                       		bhi.s	loc_BFE6
0000A080 6000 0000                  		bra.w	DisplaySprite
0000A084                            ; ===========================================================================
0000A084                            
0000A084                            loc_BFE6:
0000A084 3028 0034                  		move.w	$34(a0),d0
0000A088 0240 FF80                  		andi.w	#$FF80,d0
0000A08C 3238 F700                  		move.w	($FFFFF700).w,d1
0000A090 0441 0080                  		subi.w	#$80,d1
0000A094 0241 FF80                  		andi.w	#$FF80,d1
0000A09A 0C40 0280                  		cmpi.w	#$280,d0
0000A09E 6200                       		bhi.s	loc_C016
0000A0A0 3168 0034 0008             		move.w	$34(a0),8(a0)
0000A0A6 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000A0AC 117C 0004 0024             		move.b	#4,$24(a0)
0000A0B2 6000                       		bra.s	loc_C02C
0000A0B4                            ; ===========================================================================
0000A0B4                            
0000A0B4                            loc_C016:
0000A0B4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A0B8 7000                       		moveq	#0,d0
0000A0BA 1028 0023                  		move.b	$23(a0),d0
0000A0BE 6700                       		beq.s	loc_C028
0000A0C0 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000A0C6                            
0000A0C6                            loc_C028:
0000A0C6 6000 0000                  		bra.w	DeleteObject
0000A0CA                            ; ===========================================================================
0000A0CA                            
0000A0CA                            loc_C02C:				; XREF: Obj33_Index
0000A0CA 6100 0000                  		bsr.w	ChkObjOnScreen2
0000A0CE 6700                       		beq.s	locret_C044
0000A0D0 117C 0002 0024             		move.b	#2,$24(a0)
0000A0D6 4228 0032                  		clr.b	$32(a0)
0000A0DA 4268 0010                  		clr.w	$10(a0)
0000A0DE 4268 0012                  		clr.w	$12(a0)
0000A0E2                            
0000A0E2                            locret_C044:
0000A0E2 4E75                       		rts	
0000A0E4                            ; ===========================================================================
0000A0E4                            
0000A0E4                            loc_C046:				; XREF: loc_BF6E
0000A0E4 3F28 0008                  		move.w	8(a0),-(sp)
0000A0E8 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000A0EE 6400                       		bcc.s	loc_C056
0000A0F0 6100 0000                  		bsr.w	SpeedToPos
0000A0F4                            
0000A0F4                            loc_C056:
0000A0F4 0828 0001 0022             		btst	#1,$22(a0)
0000A0FA 6700                       		beq.s	loc_C0A0
0000A0FC 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A102 4EB9 0000 0000             		jsr	ObjHitFloor
0000A108 4A41                       		tst.w	d1
0000A10A 6A00 0000                  		bpl.w	loc_C09E
0000A112 4268 0012                  		clr.w	$12(a0)
0000A116 08A8 0001 0022             		bclr	#1,$22(a0)
0000A11C 3011                       		move.w	(a1),d0
0000A11E 0240 03FF                  		andi.w	#$3FF,d0
0000A122 0C40 016A                  		cmpi.w	#$16A,d0
0000A126 6500                       		bcs.s	loc_C09E
0000A128 3028 0030                  		move.w	$30(a0),d0
0000A12C E640                       		asr.w	#3,d0
0000A12E 3140 0010                  		move.w	d0,$10(a0)
0000A132 117C 0001 0032             		move.b	#1,$32(a0)
0000A138 4268 000E                  		clr.w	$E(a0)
0000A13C                            
0000A13C                            loc_C09E:
0000A13C 6000                       		bra.s	loc_C0E6
0000A13E                            ; ===========================================================================
0000A13E                            
0000A13E                            loc_C0A0:
0000A13E 4A68 0010                  		tst.w	$10(a0)
0000A142 6700 0000                  		beq.w	loc_C0D6
0000A146 6B00                       		bmi.s	loc_C0BC
0000A148 7600                       		moveq	#0,d3
0000A14A 1628 0019                  		move.b	$19(a0),d3
0000A14E 4EB9 0000 0000             		jsr	ObjHitWallRight
0000A154 4A41                       		tst.w	d1		; has block touched a wall?
0000A156 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000A158 6000                       		bra.s	loc_C0E6
0000A15A                            ; ===========================================================================
0000A15A                            
0000A15A                            loc_C0BC:
0000A15A 7600                       		moveq	#0,d3
0000A15C 1628 0019                  		move.b	$19(a0),d3
0000A160 4643                       		not.w	d3
0000A162 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000A168 4A41                       		tst.w	d1		; has block touched a wall?
0000A16A 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000A16C 6000                       		bra.s	loc_C0E6
0000A16E                            ; ===========================================================================
0000A16E                            
0000A16E                            Obj33_StopPush:
0000A16E 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000A172 6000                       		bra.s	loc_C0E6
0000A174                            ; ===========================================================================
0000A174                            
0000A174                            loc_C0D6:
0000A174 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000A17C 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000A182 6400                       		bcc.s	loc_C104
0000A184                            
0000A184                            loc_C0E6:
0000A184 7200                       		moveq	#0,d1
0000A186 1228 0019                  		move.b	$19(a0),d1
0000A18A 0641 000B                  		addi.w	#$B,d1
0000A18E 343C 0010                  		move.w	#$10,d2
0000A192 363C 0011                  		move.w	#$11,d3
0000A196 381F                       		move.w	(sp)+,d4
0000A198 6100 0000                  		bsr.w	loc_C186
0000A19C 6100                       		bsr.s	Obj33_ChkLava
0000A19E 6000 FEC4                  		bra.w	loc_BFC6
0000A1A2                            ; ===========================================================================
0000A1A2                            
0000A1A2                            loc_C104:
0000A1A2 381F                       		move.w	(sp)+,d4
0000A1A4 43F8 D000                  		lea	($FFFFD000).w,a1
0000A1A8 08A9 0003 0022             		bclr	#3,$22(a1)
0000A1AE 08A8 0003 0022             		bclr	#3,$22(a0)
0000A1B4 6000 FECE                  		bra.w	loc_BFE6
0000A1B8                            ; ===========================================================================
0000A1B8                            
0000A1B8                            Obj33_ChkLava:
0000A1B8 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000A1BE 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000A1C0 343C FFE0                  		move.w	#-$20,d2
0000A1C4 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000A1CA 6700                       		beq.s	Obj33_LoadLava
0000A1CC 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000A1D2 6700                       		beq.s	Obj33_LoadLava
0000A1D4 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000A1DA 6700                       		beq.s	Obj33_LoadLava
0000A1DC 4E75                       		rts	
0000A1DE                            ; ===========================================================================
0000A1DE                            
0000A1DE                            Obj33_ChkLava2:
0000A1DE 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000A1E4 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000A1E6 343C 0020                  		move.w	#$20,d2
0000A1EA 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000A1F0 6700                       		beq.s	Obj33_LoadLava
0000A1F2 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000A1F8 6700                       		beq.s	Obj33_LoadLava
0000A1FA                            
0000A1FA                            Obj33_NoLava:
0000A1FA 4E75                       		rts	
0000A1FC                            ; ===========================================================================
0000A1FC                            
0000A1FC                            Obj33_LoadLava:
0000A1FC 6100 0000                  		bsr.w	SingleObjLoad
0000A200 6600                       		bne.s	locret_C184
0000A202 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000A206 3368 0008 0008             		move.w	8(a0),8(a1)
0000A210 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A216 0669 0010 000C             		addi.w	#$10,$C(a1)
0000A21C 2348 003C                  		move.l	a0,$3C(a1)
0000A220                            
0000A220                            locret_C184:
0000A220 4E75                       		rts	
0000A222                            ; ===========================================================================
0000A222                            
0000A222                            loc_C186:				; XREF: loc_BF6E
0000A222 1028 0025                  		move.b	$25(a0),d0
0000A226 6700 0000                  		beq.w	loc_C218
0000A22A 5500                       		subq.b	#2,d0
0000A22C 6600                       		bne.s	loc_C1AA
0000A22E 6100 B4A6                  		bsr.w	ExitPlatform
0000A232 0829 0003 0022             		btst	#3,$22(a1)
0000A238 6600                       		bne.s	loc_C1A4
0000A23A 4228 0025                  		clr.b	$25(a0)
0000A23E 4E75                       		rts	
0000A240                            ; ===========================================================================
0000A240                            
0000A240                            loc_C1A4:
0000A240 3404                       		move.w	d4,d2
0000A242 6000 B9F0                  		bra.w	MvSonicOnPtfm
0000A246                            ; ===========================================================================
0000A246                            
0000A246                            loc_C1AA:
0000A246 5500                       		subq.b	#2,d0
0000A248 6600                       		bne.s	loc_C1F2
0000A24A 6100 0000                  		bsr.w	SpeedToPos
0000A24E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A254 4EB9 0000 0000             		jsr	ObjHitFloor
0000A25A 4A41                       		tst.w	d1
0000A25C 6A00 0000                  		bpl.w	locret_C1F0
0000A264 4268 0012                  		clr.w	$12(a0)
0000A268 4228 0025                  		clr.b	$25(a0)
0000A26C 3011                       		move.w	(a1),d0
0000A26E 0240 03FF                  		andi.w	#$3FF,d0
0000A272 0C40 016A                  		cmpi.w	#$16A,d0
0000A276 6500                       		bcs.s	locret_C1F0
0000A278 3028 0030                  		move.w	$30(a0),d0
0000A27C E640                       		asr.w	#3,d0
0000A27E 3140 0010                  		move.w	d0,$10(a0)
0000A282 117C 0001 0032             		move.b	#1,$32(a0)
0000A288 4268 000E                  		clr.w	$E(a0)
0000A28C                            
0000A28C                            locret_C1F0:
0000A28C 4E75                       		rts	
0000A28E                            ; ===========================================================================
0000A28E                            
0000A28E                            loc_C1F2:
0000A28E 6100 0000                  		bsr.w	SpeedToPos
0000A292 3028 0008                  		move.w	8(a0),d0
0000A296 0240 000C                  		andi.w	#$C,d0
0000A29A 6600 0000                  		bne.w	locret_C2E4
0000A29E 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000A2A4 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000A2AA 4268 0010                  		clr.w	$10(a0)
0000A2AE 5528 0025                  		subq.b	#2,$25(a0)
0000A2B2 4E75                       		rts	
0000A2B4                            ; ===========================================================================
0000A2B4                            
0000A2B4                            loc_C218:
0000A2B4 6100 0000                  		bsr.w	loc_FAC8
0000A2B8 4A44                       		tst.w	d4
0000A2BA 6700 0000                  		beq.w	locret_C2E4
0000A2BE 6B00 0000                  		bmi.w	locret_C2E4
0000A2C2 4A28 0032                  		tst.b	$32(a0)
0000A2C6 6700                       		beq.s	loc_C230
0000A2C8 6000 0000                  		bra.w	locret_C2E4
0000A2CC                            ; ===========================================================================
0000A2CC                            
0000A2CC                            loc_C230:
0000A2CC 4A40                       		tst.w	d0
0000A2CE 6700 0000                  		beq.w	locret_C2E4
0000A2D2 6B00                       		bmi.s	loc_C268
0000A2D4 0829 0000 0022             		btst	#0,$22(a1)
0000A2DA 6600 0000                  		bne.w	locret_C2E4
0000A2DE 3F00                       		move.w	d0,-(sp)
0000A2E0 7600                       		moveq	#0,d3
0000A2E2 1628 0019                  		move.b	$19(a0),d3
0000A2E6 4EB9 0000 0000             		jsr	ObjHitWallRight
0000A2EC 301F                       		move.w	(sp)+,d0
0000A2EE 4A41                       		tst.w	d1
0000A2F0 6B00 0000                  		bmi.w	locret_C2E4
0000A2F4 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000A2FC 7001                       		moveq	#1,d0
0000A2FE 323C 0040                  		move.w	#$40,d1
0000A302 6000                       		bra.s	loc_C294
0000A304                            ; ===========================================================================
0000A304                            
0000A304                            loc_C268:
0000A304 0829 0000 0022             		btst	#0,$22(a1)
0000A30A 6700                       		beq.s	locret_C2E4
0000A30C 3F00                       		move.w	d0,-(sp)
0000A30E 7600                       		moveq	#0,d3
0000A310 1628 0019                  		move.b	$19(a0),d3
0000A314 4643                       		not.w	d3
0000A316 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000A31C 301F                       		move.w	(sp)+,d0
0000A31E 4A41                       		tst.w	d1
0000A320 6B00                       		bmi.s	locret_C2E4
0000A322 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000A32A 70FF                       		moveq	#-1,d0
0000A32C 323C FFC0                  		move.w	#-$40,d1
0000A330                            
0000A330                            loc_C294:
0000A330 43F8 D000                  		lea	($FFFFD000).w,a1
0000A338 3341 0014                  		move.w	d1,$14(a1)
0000A33C 337C 0000 0010             		move.w	#0,$10(a1)
0000A342 3F00                       		move.w	d0,-(sp)
0000A344 303C 00A7                  		move.w	#$A7,d0
0000A348 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play pushing sound
0000A34E 301F                       		move.w	(sp)+,d0
0000A350 4A28 0028                  		tst.b	$28(a0)
0000A354 6B00                       		bmi.s	locret_C2E4
0000A356 3F00                       		move.w	d0,-(sp)
0000A358 4EB9 0000 0000             		jsr	ObjHitFloor
0000A35E 301F                       		move.w	(sp)+,d0
0000A360 0C41 0004                  		cmpi.w	#4,d1
0000A364 6F00                       		ble.s	loc_C2E0
0000A366 317C 0400 0010             		move.w	#$400,$10(a0)
0000A36C 4A40                       		tst.w	d0
0000A36E 6A00                       		bpl.s	loc_C2D8
0000A370 4468 0010                  		neg.w	$10(a0)
0000A374                            
0000A374                            loc_C2D8:
0000A374 117C 0006 0025             		move.b	#6,$25(a0)
0000A37A 6000                       		bra.s	locret_C2E4
0000A37C                            ; ===========================================================================
0000A37C                            
0000A37C                            loc_C2E0:
0000A380                            
0000A380                            locret_C2E4:
0000A380 4E75                       		rts	
0000A382                            ; ===========================================================================
0000A382                            ; ---------------------------------------------------------------------------
0000A382                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000A382                            ; ---------------------------------------------------------------------------
0000A382                            Map_obj33:
0000A382                            	include "_maps\obj33.asm"
0000A382                            ; ---------------------------------------------------------------------------
0000A382                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000A382                            ; ---------------------------------------------------------------------------
0000A382 0000                       		dc.w byte_C2EA-Map_obj33
0000A384 0000                       		dc.w byte_C2F0-Map_obj33
0000A386 01                         byte_C2EA:	dc.b 1
0000A387 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000A38C 04                         byte_C2F0:	dc.b 4
0000A38D F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000A392 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000A397 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000A39C F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000A3A2 00                         		even
0000A3A2 00                         		even
0000A3A2                            
0000A3A2                            ; ===========================================================================
0000A3A2                            ; ---------------------------------------------------------------------------
0000A3A2                            ; Object 34 - zone title cards
0000A3A2                            ; ---------------------------------------------------------------------------
0000A3A2                            
0000A3A2                            Obj34:					; XREF: Obj_Index
0000A3A2 7000                       		moveq	#0,d0
0000A3A4 1028 0024                  		move.b	$24(a0),d0
0000A3A8 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000A3AC 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000A3B0                            ; ===========================================================================
0000A3B0 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000A3B2 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000A3B4 0000                       		dc.w Obj34_Wait-Obj34_Index
0000A3B6 0000                       		dc.w Obj34_Wait-Obj34_Index
0000A3B8                            ; ===========================================================================
0000A3B8                            
0000A3B8                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000A3B8 2248                       		movea.l	a0,a1
0000A3BA 7000                       		moveq	#0,d0
0000A3BC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000A3C0 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000A3C6 6600                       		bne.s	Obj34_CheckFZ
0000A3C8 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000A3CA                            
0000A3CA                            Obj34_CheckFZ:
0000A3CA 3400                       		move.w	d0,d2
0000A3CC 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000A3D2 6600                       		bne.s	Obj34_LoadConfig
0000A3D4 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000A3D6 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000A3D8                            
0000A3D8                            Obj34_LoadConfig:
0000A3D8 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000A3DE E948                       		lsl.w	#4,d0
0000A3E0 D6C0                       		adda.w	d0,a3
0000A3E2 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000A3E8 7203                       		moveq	#3,d1
0000A3EA                            
0000A3EA                            Obj34_Loop:
0000A3EA 12BC 0034                  		move.b	#$34,0(a1)
0000A3EE 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000A3F2 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000A3F6 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000A3FA 335A 000A                  		move.w	(a2)+,$A(a1)
0000A3FE 135A 0024                  		move.b	(a2)+,$24(a1)
0000A402 101A                       		move.b	(a2)+,d0
0000A404 6600                       		bne.s	Obj34_ActNumber
0000A406 1002                       		move.b	d2,d0
0000A408                            
0000A408                            Obj34_ActNumber:
0000A408 0C00 0007                  		cmpi.b	#7,d0
0000A40C 6600                       		bne.s	Obj34_MakeSprite
0000A412 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000A418 6600                       		bne.s	Obj34_MakeSprite
0000A41A 5300                       		subq.b	#1,d0
0000A41C                            
0000A41C                            Obj34_MakeSprite:
0000A41C 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000A420 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000A428 337C 8580 0002             		move.w	#$8580,2(a1)
0000A42E 137C 0078 0019             		move.b	#$78,$19(a1)
0000A434 137C 0000 0001             		move.b	#0,1(a1)
0000A43A 137C 0000 0018             		move.b	#0,$18(a1)
0000A440 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000A446 43E9 0040                  		lea	$40(a1),a1	; next object
0000A44A 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000A44E                            
0000A44E                            Obj34_ChkPos:				; XREF: Obj34_Index
0000A44E 7210                       		moveq	#$10,d1		; set horizontal speed
0000A450 3028 0030                  		move.w	$30(a0),d0
0000A454 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000A458 6700                       		beq.s	loc_C3C8	; if yes, branch
0000A45A 6C00                       		bge.s	Obj34_Move
0000A45C 4441                       		neg.w	d1
0000A45E                            
0000A45E                            Obj34_Move:
0000A462                            
0000A462                            loc_C3C8:
0000A462 3028 0008                  		move.w	8(a0),d0
0000A466 6B00                       		bmi.s	locret_C3D8
0000A468 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000A46C 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000A46E 4E75                       		rts
0000A470 6000 0000                  		bra.w	DisplaySprite
0000A474                            ; ===========================================================================
0000A474                            
0000A474                            locret_C3D8:
0000A474 4E75                       		rts	
0000A476                            ; ===========================================================================
0000A476                            
0000A476                            Obj34_Wait:				; XREF: Obj34_Index
0000A476 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000A47A 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000A47C 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000A480 4E75                       		rts
0000A482 6000 0000                  		bra.w	DisplaySprite
0000A486                            ; ===========================================================================
0000A486                            
0000A486                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000A486 4A28 0001                  		tst.b	1(a0)
0000A48A 6A00                       		bpl.s	Obj34_ChangeArt
0000A48C 7220                       		moveq	#$20,d1
0000A48E 3028 0032                  		move.w	$32(a0),d0
0000A492 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000A496 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000A498 6C00                       		bge.s	Obj34_Move2
0000A49A 4441                       		neg.w	d1
0000A49C                            
0000A49C                            Obj34_Move2:
0000A4A0 3028 0008                  		move.w	8(a0),d0
0000A4A4 6B00                       		bmi.s	locret_C412
0000A4A6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000A4AA 6400                       		bcc.s	locret_C412	; if yes, branch
0000A4AC 4E75                       		rts
0000A4AE 6000 0000                  		bra.w	DisplaySprite
0000A4B2                            ; ===========================================================================
0000A4B2                            
0000A4B2                            locret_C412:
0000A4B2 4E75                       		rts	
0000A4B4                            ; ===========================================================================
0000A4B4                            
0000A4B4                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000A4B4 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000A4BA 6600                       		bne.s	Obj34_Delete
0000A4BC 7002                       		moveq	#2,d0
0000A4BE 4EB9 0000 128E             		jsr	(LoadPLC).l	; load explosion patterns
0000A4C4 7000                       		moveq	#0,d0
0000A4C6 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000A4CA 0640 0015                  		addi.w	#$15,d0
0000A4CE 4EB9 0000 128E             		jsr	(LoadPLC).l	; load animal patterns
0000A4D4                            
0000A4D4                            Obj34_Delete:
0000A4D4 6000 0000                  		bra.w	DeleteObject
0000A4D8                            ; ===========================================================================
0000A4D8 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000A4DA 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000A4DC 00E4                       		dc.w $E4
0000A4DE 0206                       		dc.b 2,	6
0000A4E0 00EA                       		dc.w $EA
0000A4E2 0207                       		dc.b 2,	7
0000A4E4 00E0                       		dc.w $E0
0000A4E6 020A                       		dc.b 2,	$A
0000A4E8                            ; ---------------------------------------------------------------------------
0000A4E8                            ; Title	card configuration data
0000A4E8                            ; Format:
0000A4E8                            ; 4 bytes per item (YYYY XXXX)
0000A4E8                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000A4E8                            ; ---------------------------------------------------------------------------
0000A4E8 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000A4F8 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000A508 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000A518 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000A528 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000A538 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000A548 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000A558                            ; ===========================================================================
0000A558                            ; ---------------------------------------------------------------------------
0000A558                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000A558                            ; ---------------------------------------------------------------------------
0000A558                            
0000A558                            Obj39:					; XREF: Obj_Index
0000A558 7000                       		moveq	#0,d0
0000A55A 1028 0024                  		move.b	$24(a0),d0
0000A55E 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000A562 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000A566                            ; ===========================================================================
0000A566 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000A568 0000                       		dc.w loc_C50C-Obj39_Index
0000A56A 0000                       		dc.w Obj39_Wait-Obj39_Index
0000A56C                            ; ===========================================================================
0000A56C                            
0000A56C                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000A56C 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000A570 6700                       		beq.s	Obj39_Main	; if yes, branch
0000A572 4E75                       		rts	
0000A574                            ; ===========================================================================
0000A574                            
0000A574                            Obj39_Main:
0000A574 5428 0024                  		addq.b	#2,$24(a0)
0000A578 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000A57E 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000A584 6700                       		beq.s	loc_C4EC	; if not, branch
0000A586 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000A58C                            
0000A58C                            loc_C4EC:
0000A58C 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000A592 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000A59A 317C 855E 0002             		move.w	#$855E,2(a0)
0000A5A0 117C 0000 0001             		move.b	#0,1(a0)
0000A5A6 117C 0000 0018             		move.b	#0,$18(a0)
0000A5AC                            
0000A5AC                            loc_C50C:				; XREF: Obj39_Index
0000A5AC 7210                       		moveq	#$10,d1		; set horizontal speed
0000A5AE 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000A5B4 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000A5B6 6500                       		bcs.s	Obj39_Move
0000A5B8 4441                       		neg.w	d1
0000A5BA                            
0000A5BA                            Obj39_Move:
0000A5BE 6000 0000                  		bra.w	DisplaySprite
0000A5C2                            ; ===========================================================================
0000A5C2                            
0000A5C2                            Obj39_SetWait:				; XREF: Obj39_Main
0000A5C2 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000A5C8 5428 0024                  		addq.b	#2,$24(a0)
0000A5CC 4E75                       		rts	
0000A5CE                            ; ===========================================================================
0000A5CE                            
0000A5CE                            Obj39_Wait:				; XREF: Obj39_Index
0000A5CE 1038 F605                  		move.b	($FFFFF605).w,d0
0000A5D2 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000A5D6 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000A5D8 0828 0000 001A             		btst	#0,$1A(a0)
0000A5DE 6600                       		bne.s	Obj39_Display
0000A5E0 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000A5E4 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000A5E6 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000A5EA 6000 0000                  		bra.w	DisplaySprite
0000A5EE                            ; ===========================================================================
0000A5EE                            
0000A5EE                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000A5EE 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000A5F2 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000A5F4 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000A5FA 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000A5FE 6600                       		bne.s	Obj39_Display	; if yes, branch
0000A600 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000A606 6000                       		bra.s	Obj39_Display
0000A608                            ; ===========================================================================
0000A608                            
0000A608                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000A608 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000A60E                            
0000A60E                            Obj39_Display:				; XREF: Obj39_ChgMode
0000A60E 6000 0000                  		bra.w	DisplaySprite
0000A612                            ; ===========================================================================
0000A612                            ; ---------------------------------------------------------------------------
0000A612                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000A612                            ; ---------------------------------------------------------------------------
0000A612                            
0000A612                            Obj3A:					; XREF: Obj_Index
0000A612 7000                       		moveq	#0,d0
0000A614 1028 0024                  		move.b	$24(a0),d0
0000A618 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000A61C 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000A620                            ; ===========================================================================
0000A620 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000A622 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000A624 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000A626 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000A628 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000A62A 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000A62C 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000A62E 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000A630 0000                       		dc.w loc_C766-Obj3A_Index
0000A632                            ; ===========================================================================
0000A632                            
0000A632                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000A632 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000A636 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000A638 4E75                       		rts	
0000A63A                            ; ===========================================================================
0000A63A                            
0000A63A                            Obj3A_Main:
0000A63A 2248                       		movea.l	a0,a1
0000A63C 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000A642 7206                       		moveq	#6,d1
0000A644                            
0000A644                            Obj3A_Loop:
0000A644 12BC 003A                  		move.b	#$3A,0(a1)
0000A648 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000A64C 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000A650 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000A654 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000A658 135A 0024                  		move.b	(a2)+,$24(a1)
0000A65C 101A                       		move.b	(a2)+,d0
0000A65E 0C00 0006                  		cmpi.b	#6,d0
0000A662 6600                       		bne.s	loc_C5CA
0000A668                            
0000A668                            loc_C5CA:
0000A668 1340 001A                  		move.b	d0,$1A(a1)
0000A66C 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000A674 337C 8580 0002             		move.w	#$8580,2(a1)
0000A67A 137C 0000 0001             		move.b	#0,1(a1)
0000A680 43E9 0040                  		lea	$40(a1),a1
0000A684 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000A688                            
0000A688                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000A688 7210                       		moveq	#$10,d1		; set horizontal speed
0000A68A 3028 0030                  		move.w	$30(a0),d0
0000A68E B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000A692 6700                       		beq.s	loc_C61A	; if yes, branch
0000A694 6C00                       		bge.s	Obj3A_Move
0000A696 4441                       		neg.w	d1
0000A698                            
0000A698                            Obj3A_Move:
0000A69C                            
0000A69C                            loc_C5FE:				; XREF: loc_C61A
0000A69C 3028 0008                  		move.w	8(a0),d0
0000A6A0 6B00                       		bmi.s	locret_C60E
0000A6A2 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000A6A6 6400                       		bcc.s	locret_C60E	; if yes, branch
0000A6A8 6000 0000                  		bra.w	DisplaySprite
0000A6AC                            ; ===========================================================================
0000A6AC                            
0000A6AC                            locret_C60E:
0000A6AC 4E75                       		rts	
0000A6AE                            ; ===========================================================================
0000A6AE                            
0000A6AE                            loc_C610:				; XREF: loc_C61A
0000A6AE 117C 000E 0024             		move.b	#$E,$24(a0)
0000A6B4 6000 0000                  		bra.w	Obj3A_ChkPos2
0000A6B8                            ; ===========================================================================
0000A6B8                            
0000A6B8                            loc_C61A:				; XREF: Obj3A_ChkPos
0000A6B8 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000A6BE 67EE                       		beq.s	loc_C610
0000A6C0 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000A6C6 66D4                       		bne.s	loc_C5FE
0000A6C8 5428 0024                  		addq.b	#2,$24(a0)
0000A6CC 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000A6D2                            
0000A6D2                            Obj3A_Wait:				; XREF: Obj3A_Index
0000A6D2 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000A6D6 6600                       		bne.s	Obj3A_Display
0000A6D8 5428 0024                  		addq.b	#2,$24(a0)
0000A6DC                            
0000A6DC                            Obj3A_Display:
0000A6DC 6000 0000                  		bra.w	DisplaySprite
0000A6E0                            ; ===========================================================================
0000A6E0                            
0000A6E0                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000A6E0 6100 0000                  		bsr.w	DisplaySprite
0000A6E4 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000A6EA 7000                       		moveq	#0,d0
0000A6EC 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000A6F0 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000A6F2 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000A6F6 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000A6FC                            
0000A6FC                            Obj3A_RingBonus:
0000A6FC 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000A700 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000A702 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000A706 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000A70C                            
0000A70C                            Obj3A_ChkBonus:
0000A70C 4A40                       		tst.w	d0		; is there any bonus?
0000A70E 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000A710 303C 00C5                  		move.w	#$C5,d0
0000A714 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000A71A 5428 0024                  		addq.b	#2,$24(a0)
0000A71E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000A724 6600                       		bne.s	Obj3A_SetDelay
0000A726 5828 0024                  		addq.b	#4,$24(a0)
0000A72A                            
0000A72A                            Obj3A_SetDelay:
0000A72A 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000A730                            
0000A730                            locret_C692:
0000A730 4E75                       		rts	
0000A732                            ; ===========================================================================
0000A732                            
0000A732                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000A732 4EB9 0000 0000             		jsr	AddPoints
0000A738 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A73C 0200 0003                  		andi.b	#3,d0
0000A740 66EE                       		bne.s	locret_C692
0000A742 303C 00CD                  		move.w	#$CD,d0
0000A746 4EF9 0000 1020             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000A74C                            ; ===========================================================================
0000A74C                            
0000A74C                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000A74C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000A750 0240 0007                  		andi.w	#7,d0
0000A754 E748                       		lsl.w	#3,d0
0000A756 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000A75A 0241 0003                  		andi.w	#3,d1
0000A762 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000A766 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000A76A 4A40                       		tst.w	d0
0000A76C 6600                       		bne.s	Obj3A_ChkSS
0000A76E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000A774 6000                       		bra.s	Obj3A_Display2
0000A776                            ; ===========================================================================
0000A776                            
0000A776                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000A776 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000A77A 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000A77E 6700                       		beq.s	loc_C6EA	; if not, branch
0000A780 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000A786 6000                       		bra.s	Obj3A_Display2
0000A788                            ; ===========================================================================
0000A788                            
0000A788                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000A788 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000A78E                            
0000A78E                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000A78E 6000 0000                  		bra.w	DisplaySprite
0000A792                            ; ===========================================================================
0000A792                            ; ---------------------------------------------------------------------------
0000A792                            ; Level	order array
0000A792                            ; ---------------------------------------------------------------------------
0000A792                            LevelOrder:	incbin	misc\lvl_ord.bin
0000A7C2                            		even
0000A7C2                            ; ===========================================================================
0000A7C2                            
0000A7C2                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000A7C2 7220                       		moveq	#$20,d1		; set horizontal speed
0000A7C4 3028 0032                  		move.w	$32(a0),d0
0000A7C8 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000A7CC 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000A7CE 6C00                       		bge.s	Obj3A_Move2
0000A7D0 4441                       		neg.w	d1
0000A7D2                            
0000A7D2                            Obj3A_Move2:
0000A7D6 3028 0008                  		move.w	8(a0),d0
0000A7DA 6B00                       		bmi.s	locret_C748
0000A7DC 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000A7E0 6400                       		bcc.s	locret_C748	; if yes, branch
0000A7E2 6000 0000                  		bra.w	DisplaySprite
0000A7E6                            ; ===========================================================================
0000A7E6                            
0000A7E6                            locret_C748:
0000A7E6 4E75                       		rts	
0000A7E8                            ; ===========================================================================
0000A7E8                            
0000A7E8                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000A7E8 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000A7EE 6600 0000                  		bne.w	DeleteObject
0000A7F2 5428 0024                  		addq.b	#2,$24(a0)
0000A7F6 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000A7FA 303C 008D                  		move.w	#$8D,d0
0000A7FE 4EF9 0000 101A             		jmp	(PlaySound).l	; play FZ music
0000A804                            ; ===========================================================================
0000A804                            
0000A804                            loc_C766:				; XREF: Obj3A_Index
0000A804 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000A808 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000A80E 6700 0000                  		beq.w	DeleteObject
0000A812 4E75                       		rts	
0000A814                            ; ===========================================================================
0000A814 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000A81A 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000A81C FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000A822 0201                       		dc.b 2,	1
0000A824 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000A82A 0206                       		dc.b 2,	6
0000A82C 0520 0120 00EC             		dc.w $520, $120, $EC
0000A832 0202                       		dc.b 2,	2
0000A834 0540 0120 00FC             		dc.w $540, $120, $FC
0000A83A 0203                       		dc.b 2,	3
0000A83C 0560 0120 010C             		dc.w $560, $120, $10C
0000A842 0204                       		dc.b 2,	4
0000A844 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000A84A 0205                       		dc.b 2,	5
0000A84C                            ; ===========================================================================
0000A84C                            ; ---------------------------------------------------------------------------
0000A84C                            ; Object 7E - special stage results screen
0000A84C                            ; ---------------------------------------------------------------------------
0000A84C                            
0000A84C                            Obj7E:					; XREF: Obj_Index
0000A84C 7000                       		moveq	#0,d0
0000A84E 1028 0024                  		move.b	$24(a0),d0
0000A852 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000A856 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000A85A                            ; ===========================================================================
0000A85A 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000A85C 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000A85E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000A860 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000A862 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000A864 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000A866 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000A868 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000A86A 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000A86C 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000A86E 0000                       		dc.w loc_C91A-Obj7E_Index
0000A870                            ; ===========================================================================
0000A870                            
0000A870                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000A870 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000A874 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000A876 4E75                       		rts	
0000A878                            ; ===========================================================================
0000A878                            
0000A878                            Obj7E_Main:
0000A878 2248                       		movea.l	a0,a1
0000A87A 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000A880 7203                       		moveq	#3,d1
0000A882 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000A888 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000A88A 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000A88C                            
0000A88C                            Obj7E_Loop:
0000A88C 12BC 007E                  		move.b	#$7E,0(a1)
0000A890 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000A894 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000A898 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000A89C 135A 0024                  		move.b	(a2)+,$24(a1)
0000A8A0 135A 001A                  		move.b	(a2)+,$1A(a1)
0000A8A4 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000A8AC 337C 8580 0002             		move.w	#$8580,2(a1)
0000A8B2 137C 0000 0001             		move.b	#0,1(a1)
0000A8B8 43E9 0040                  		lea	$40(a1),a1
0000A8BC 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000A8C0                            
0000A8C0 7007                       		moveq	#7,d0
0000A8C2 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000A8C6 6700                       		beq.s	loc_C842
0000A8C8 7000                       		moveq	#0,d0
0000A8CA 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000A8CE 6600                       		bne.s	loc_C842	; if not, branch
0000A8D0 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000A8D2 317C 0018 0008             		move.w	#$18,8(a0)
0000A8D8 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000A8DE                            
0000A8DE                            loc_C842:
0000A8DE 1140 001A                  		move.b	d0,$1A(a0)
0000A8E2                            
0000A8E2                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000A8E2 7210                       		moveq	#$10,d1		; set horizontal speed
0000A8E4 3028 0030                  		move.w	$30(a0),d0
0000A8E8 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000A8EC 6700                       		beq.s	loc_C86C	; if yes, branch
0000A8EE 6C00                       		bge.s	Obj7E_Move
0000A8F0 4441                       		neg.w	d1
0000A8F2                            
0000A8F2                            Obj7E_Move:
0000A8F6                            
0000A8F6                            loc_C85A:				; XREF: loc_C86C
0000A8F6 3028 0008                  		move.w	8(a0),d0
0000A8FA 6B00                       		bmi.s	locret_C86A
0000A8FC 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000A900 6400                       		bcc.s	locret_C86A	; if yes, branch
0000A902 6000 0000                  		bra.w	DisplaySprite
0000A906                            ; ===========================================================================
0000A906                            
0000A906                            locret_C86A:
0000A906 4E75                       		rts	
0000A908                            ; ===========================================================================
0000A908                            
0000A908                            loc_C86C:				; XREF: Obj7E_ChkPos
0000A908 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000A90E 66E6                       		bne.s	loc_C85A
0000A910 5428 0024                  		addq.b	#2,$24(a0)
0000A914 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000A91A 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000A920                            
0000A920                            Obj7E_Wait:				; XREF: Obj7E_Index
0000A920 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000A924 6600                       		bne.s	Obj7E_Display
0000A926 5428 0024                  		addq.b	#2,$24(a0)
0000A92A                            
0000A92A                            Obj7E_Display:
0000A92A 6000 0000                  		bra.w	DisplaySprite
0000A92E                            ; ===========================================================================
0000A92E                            
0000A92E                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000A92E 6100 0000                  		bsr.w	DisplaySprite
0000A932 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000A938 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000A93C 6700                       		beq.s	loc_C8C4	; if yes, branch
0000A93E 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000A944 700A                       		moveq	#10,d0		; add 10 to score
0000A946 4EB9 0000 0000             		jsr	AddPoints
0000A94C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A950 0200 0003                  		andi.b	#3,d0
0000A954 6600                       		bne.s	locret_C8EA
0000A956 303C 00CD                  		move.w	#$CD,d0
0000A95A 4EF9 0000 1020             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000A960                            ; ===========================================================================
0000A960                            
0000A960                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000A960 303C 00C5                  		move.w	#$C5,d0
0000A964 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000A96A 5428 0024                  		addq.b	#2,$24(a0)
0000A96E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000A974 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A97A 6500                       		bcs.s	locret_C8EA	; if not, branch
0000A97C 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000A982 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000A986                            
0000A986                            locret_C8EA:
0000A986 4E75                       		rts	
0000A988                            ; ===========================================================================
0000A988                            
0000A988                            Obj7E_Exit:				; XREF: Obj7E_Index
0000A988 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000A98E 6000 0000                  		bra.w	DisplaySprite
0000A992                            ; ===========================================================================
0000A992                            
0000A992                            Obj7E_Continue:				; XREF: Obj7E_Index
0000A992 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000A998 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000A99E 303C 00BF                  		move.w	#$BF,d0
0000A9A2 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play continues music
0000A9A8 5428 0024                  		addq.b	#2,$24(a0)
0000A9AC 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000A9B2 6000 0000                  		bra.w	DisplaySprite
0000A9B6                            ; ===========================================================================
0000A9B6                            
0000A9B6                            loc_C91A:				; XREF: Obj7E_Index
0000A9B6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A9BA 0200 000F                  		andi.b	#$F,d0
0000A9BE 6600                       		bne.s	Obj7E_Display2
0000A9C0 0868 0000 001A             		bchg	#0,$1A(a0)
0000A9C6                            
0000A9C6                            Obj7E_Display2:
0000A9C6 6000 0000                  		bra.w	DisplaySprite
0000A9CA                            ; ===========================================================================
0000A9CA 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000A9D0 0200                       		dc.b 2,	0		; rountine number, frame number
0000A9D2 0320 0120 0118             		dc.w $320, $120, $118
0000A9D8 0201                       		dc.b 2,	1
0000A9DA 0360 0120 0128             		dc.w $360, $120, $128
0000A9E0 0202                       		dc.b 2,	2
0000A9E2 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000A9E8 0203                       		dc.b 2,	3
0000A9EA 03A0 0120 0138             		dc.w $3A0, $120, $138
0000A9F0 0206                       		dc.b 2,	6
0000A9F2                            ; ===========================================================================
0000A9F2                            ; ---------------------------------------------------------------------------
0000A9F2                            ; Object 7F - chaos emeralds from the special stage results screen
0000A9F2                            ; ---------------------------------------------------------------------------
0000A9F2                            
0000A9F2                            Obj7F:					; XREF: Obj_Index
0000A9F2 7000                       		moveq	#0,d0
0000A9F4 1028 0024                  		move.b	$24(a0),d0
0000A9F8 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000A9FC 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000AA00                            ; ===========================================================================
0000AA00 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000AA02 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000AA04                            
0000AA04                            ; ---------------------------------------------------------------------------
0000AA04                            ; X-axis positions for chaos emeralds
0000AA04                            ; ---------------------------------------------------------------------------
0000AA04 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000AA10                            ; ===========================================================================
0000AA10                            
0000AA10                            Obj7F_Main:				; XREF: Obj7F_Index
0000AA10 2248                       		movea.l	a0,a1
0000AA12 45F9 0000 AA04             		lea	(Obj7F_PosData).l,a2
0000AA18 7400                       		moveq	#0,d2
0000AA1A 7200                       		moveq	#0,d1
0000AA1C 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000AA20 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000AA22 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000AA26                            
0000AA26                            Obj7F_Loop:
0000AA26 12BC 007F                  		move.b	#$7F,0(a1)
0000AA2A 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000AA2E 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000AA34 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000AA38 1633 2000                  		move.b	(a3,d2.w),d3
0000AA3C 1343 001A                  		move.b	d3,$1A(a1)
0000AA40 1343 001C                  		move.b	d3,$1C(a1)
0000AA44 5202                       		addq.b	#1,d2
0000AA46 5429 0024                  		addq.b	#2,$24(a1)
0000AA4A 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000AA52 337C 8541 0002             		move.w	#$8541,2(a1)
0000AA58 137C 0000 0001             		move.b	#0,1(a1)
0000AA5E 43E9 0040                  		lea	$40(a1),a1	; next object
0000AA62 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000AA66                            
0000AA66                            Obj7F_Flash:				; XREF: Obj7F_Index
0000AA66 1028 001A                  		move.b	$1A(a0),d0
0000AA6A 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000AA70 0C00 0006                  		cmpi.b	#6,d0
0000AA74 6600                       		bne.s	Obj7F_Display
0000AA76 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000AA7C                            
0000AA7C                            Obj7F_Display:
0000AA7C 6000 0000                  		bra.w	DisplaySprite
0000AA80                            ; ===========================================================================
0000AA80                            ; ---------------------------------------------------------------------------
0000AA80                            ; Sprite mappings - zone title cards
0000AA80                            ; ---------------------------------------------------------------------------
0000AA80 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000AA82 0000                       		dc.w byte_CA2C-Map_obj34
0000AA84 0000                       		dc.w byte_CA5A-Map_obj34
0000AA86 0000                       		dc.w byte_CA7A-Map_obj34
0000AA88 0000                       		dc.w byte_CAA8-Map_obj34
0000AA8A 0000                       		dc.w byte_CADC-Map_obj34
0000AA8C 0000                       		dc.w byte_CB10-Map_obj34
0000AA8E 0000                       		dc.w byte_CB26-Map_obj34
0000AA90 0000                       		dc.w byte_CB31-Map_obj34
0000AA92 0000                       		dc.w byte_CB3C-Map_obj34
0000AA94 0000                       		dc.w byte_CB47-Map_obj34
0000AA96 0000                       		dc.w byte_CB8A-Map_obj34
0000AA98 09                         byte_C9FE:	dc.b 9 			; GREEN HILL
0000AA99 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000AA9E F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000AAA3 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000AAA8 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000AAAD F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000AAB2 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000AAB7 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000AABC F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000AAC1 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000AAC6 09                         byte_CA2C:	dc.b 9			; LABYRINTH
0000AAC7 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000AACC F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000AAD1 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000AAD6 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000AADB F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000AAE0 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000AAE5 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000AAEA F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000AAEF F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000AAF4 06                         byte_CA5A:	dc.b 6			; MARBLE
0000AAF5 F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000AAFA F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000AAFF F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000AB04 F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000AB09 F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000AB0E F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000AB13 00                         		dc.b 0
0000AB14 09                         byte_CA7A:	dc.b 9			; STAR	LIGHT
0000AB15 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000AB1A F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000AB1F F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000AB24 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000AB29 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000AB2E F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000AB33 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000AB38 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000AB3D F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000AB42 0A                         byte_CAA8:	dc.b $A			; SPRING YARD
0000AB43 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000AB48 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000AB4D F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000AB52 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000AB57 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000AB5C F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000AB61 F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000AB66 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000AB6B F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000AB70 F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000AB75 00                         		dc.b 0
0000AB76 0A                         byte_CADC:	dc.b $A			; SCRAP BRAIN
0000AB77 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000AB7C F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000AB81 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000AB86 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000AB8B F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000AB90 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000AB95 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000AB9A F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000AB9F F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000ABA4 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000ABA9 00                         		dc.b 0
0000ABAA 04                         byte_CB10:	dc.b 4			; ZONE
0000ABAB F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000ABB0 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000ABB5 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000ABBA F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000ABBF 00                         		dc.b 0
0000ABC0 02                         byte_CB26:	dc.b 2			; ACT 1
0000ABC1 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000ABC6 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000ABCB 02                         byte_CB31:	dc.b 2			; ACT 2
0000ABCC 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000ABD1 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000ABD6 02                         byte_CB3C:	dc.b 2			; ACT 3
0000ABD7 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000ABDC F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000ABE1 0D                         byte_CB47:	dc.b $D			; Oval
0000ABE2 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000ABE7 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000ABEC EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000ABF1 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000ABF6 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000ABFB 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000AC00 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000AC05 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000AC0A EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000AC0F F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000AC14 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000AC19 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000AC1E 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000AC23 00                         		dc.b 0
0000AC24 05                         byte_CB8A:	dc.b 5			; FINAL
0000AC25 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000AC2A F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000AC2F F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000AC34 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000AC39 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000AC3E                            		even
0000AC3E                            ; ---------------------------------------------------------------------------
0000AC3E                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000AC3E                            ; ---------------------------------------------------------------------------
0000AC3E                            Map_obj39:
0000AC3E                            	include "_maps\obj39.asm"
0000AC3E                            ; ---------------------------------------------------------------------------
0000AC3E                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000AC3E                            ; ---------------------------------------------------------------------------
0000AC3E 0000                       		dc.w byte_CBAC-Map_obj39
0000AC40 0000                       		dc.w byte_CBB7-Map_obj39
0000AC42 0000                       		dc.w byte_CBC2-Map_obj39
0000AC44 0000                       		dc.w byte_CBCD-Map_obj39
0000AC46 02                         byte_CBAC:	dc.b 2
0000AC47 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000AC4C F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000AC51 02                         byte_CBB7:	dc.b 2
0000AC52 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000AC57 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000AC5C 02                         byte_CBC2:	dc.b 2
0000AC5D F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000AC62 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000AC67 02                         byte_CBCD:	dc.b 2
0000AC68 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000AC6D F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000AC72                            		even
0000AC72                            		even
0000AC72                            
0000AC72                            ; ---------------------------------------------------------------------------
0000AC72                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000AC72                            ; ---------------------------------------------------------------------------
0000AC72 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000AC74 0000                       		dc.w byte_CC13-Map_obj3A
0000AC76 0000                       		dc.w byte_CC32-Map_obj3A
0000AC78 0000                       		dc.w byte_CC51-Map_obj3A
0000AC7A 0000                       		dc.w byte_CC75-Map_obj3A
0000AC7C FF6F                       		dc.w byte_CB47-Map_obj3A
0000AC7E FF4E                       		dc.w byte_CB26-Map_obj3A
0000AC80 FF59                       		dc.w byte_CB31-Map_obj3A
0000AC82 FF64                       		dc.w byte_CB3C-Map_obj3A
0000AC84 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000AC85 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000AC8A F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000AC8F F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000AC94 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000AC99 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000AC9E F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000ACA3 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000ACA8 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000ACAD 06                         byte_CC13:	dc.b 6			; PASSED
0000ACAE F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000ACB3 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000ACB8 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000ACBD F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000ACC2 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000ACC7 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000ACCC 06                         byte_CC32:	dc.b 6			; SCORE
0000ACCD F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000ACD2 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000ACD7 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000ACDC F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000ACE1 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000ACE6 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000ACEB 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000ACEC F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000ACF1 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000ACF6 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000ACFB F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000AD00 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000AD05 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000AD0A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000AD0F 07                         byte_CC75:	dc.b 7			; RING BONUS
0000AD10 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000AD15 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000AD1A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000AD1F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000AD24 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000AD29 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000AD2E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000AD34 00                         		even
0000AD34                            ; ---------------------------------------------------------------------------
0000AD34                            ; Sprite mappings - special stage results screen
0000AD34                            ; ---------------------------------------------------------------------------
0000AD34 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000AD36 0000                       		dc.w byte_CCEE-Map_obj7E
0000AD38 0000                       		dc.w byte_CD0D-Map_obj7E
0000AD3A FEAD                       		dc.w byte_CB47-Map_obj7E
0000AD3C 0000                       		dc.w byte_CD31-Map_obj7E
0000AD3E 0000                       		dc.w byte_CD46-Map_obj7E
0000AD40 0000                       		dc.w byte_CD5B-Map_obj7E
0000AD42 0000                       		dc.w byte_CD6B-Map_obj7E
0000AD44 0000                       		dc.w byte_CDA8-Map_obj7E
0000AD46 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000AD47 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000AD4C F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000AD51 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000AD56 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000AD5B F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000AD60 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000AD65 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000AD6A F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000AD6F F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000AD74 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000AD79 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000AD7E F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000AD83 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000AD88 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000AD89 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000AD8E F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000AD93 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000AD98 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000AD9D F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000ADA2 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000ADA7 07                         byte_CD0D:	dc.b 7
0000ADA8 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000ADAD F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000ADB2 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000ADB7 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000ADBC FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000ADC1 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000ADC6 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000ADCB 04                         byte_CD31:	dc.b 4
0000ADCC F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000ADD1 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000ADD6 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000ADDB F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000ADE0 04                         byte_CD46:	dc.b 4
0000ADE1 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000ADE6 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000ADEB F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000ADF0 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000ADF5 03                         byte_CD5B:	dc.b 3
0000ADF6 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000ADFB F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000AE00 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000AE05 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000AE06 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000AE0B F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000AE10 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000AE15 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000AE1A F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000AE1F F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000AE24 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000AE29 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000AE2E F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000AE33 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000AE38 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000AE3D F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000AE42 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000AE43 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000AE48 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000AE4D F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000AE52 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000AE57 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000AE5C F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000AE61 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000AE66 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000AE6B F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000AE70 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000AE75 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000AE7A F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000AE7F F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000AE84 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000AE89 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000AE8E                            		even
0000AE8E                            ; ---------------------------------------------------------------------------
0000AE8E                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000AE8E                            ; ---------------------------------------------------------------------------
0000AE8E                            Map_obj7F:
0000AE8E                            	include "_maps\obj7F.asm"
0000AE8E                            ; ---------------------------------------------------------------------------
0000AE8E                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000AE8E                            ; ---------------------------------------------------------------------------
0000AE8E 0000                       		dc.w byte_CE02-Map_obj7F
0000AE90 0000                       		dc.w byte_CE08-Map_obj7F
0000AE92 0000                       		dc.w byte_CE0E-Map_obj7F
0000AE94 0000                       		dc.w byte_CE14-Map_obj7F
0000AE96 0000                       		dc.w byte_CE1A-Map_obj7F
0000AE98 0000                       		dc.w byte_CE20-Map_obj7F
0000AE9A 0000                       		dc.w byte_CE26-Map_obj7F
0000AE9C 01                         byte_CE02:	dc.b 1
0000AE9D F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000AEA2 01                         byte_CE08:	dc.b 1
0000AEA3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000AEA8 01                         byte_CE0E:	dc.b 1
0000AEA9 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000AEAE 01                         byte_CE14:	dc.b 1
0000AEAF F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000AEB4 01                         byte_CE1A:	dc.b 1
0000AEB5 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000AEBA 01                         byte_CE20:	dc.b 1
0000AEBB F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000AEC0 00                         byte_CE26:	dc.b 0			; Blank frame
0000AEC2 00                         		even
0000AEC2 00                         		even
0000AEC2                            
0000AEC2                            ; ===========================================================================
0000AEC2                            ; ---------------------------------------------------------------------------
0000AEC2                            ; Object 36 - spikes
0000AEC2                            ; ---------------------------------------------------------------------------
0000AEC2                            
0000AEC2                            Obj36:					; XREF: Obj_Index
0000AEC2 7000                       		moveq	#0,d0
0000AEC4 1028 0024                  		move.b	$24(a0),d0
0000AEC8 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000AECC 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000AED0                            ; ===========================================================================
0000AED0 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000AED2 0000                       		dc.w Obj36_Solid-Obj36_Index
0000AED4                            
0000AED4 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000AED6 0110                       		dc.b 1,	$10
0000AED8 0204                       		dc.b 2,	4
0000AEDA 031C                       		dc.b 3,	$1C
0000AEDC 0440                       		dc.b 4,	$40
0000AEDE 0510                       		dc.b 5,	$10
0000AEE0                            ; ===========================================================================
0000AEE0                            
0000AEE0                            Obj36_Main:				; XREF: Obj36_Index
0000AEE0 5428 0024                  		addq.b	#2,$24(a0)
0000AEE4 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000AEEC 317C 051B 0002             		move.w	#$51B,2(a0)
0000AEF2 0028 0004 0001             		ori.b	#4,1(a0)
0000AEF8 117C 0004 0018             		move.b	#4,$18(a0)
0000AEFE 1028 0028                  		move.b	$28(a0),d0
0000AF02 0228 000F 0028             		andi.b	#$F,$28(a0)
0000AF08 0240 00F0                  		andi.w	#$F0,d0
0000AF0C 43F9 0000 AED4             		lea	(Obj36_Var).l,a1
0000AF12 E648                       		lsr.w	#3,d0
0000AF14 D2C0                       		adda.w	d0,a1
0000AF16 1159 001A                  		move.b	(a1)+,$1A(a0)
0000AF1A 1159 0019                  		move.b	(a1)+,$19(a0)
0000AF1E 3168 0008 0030             		move.w	8(a0),$30(a0)
0000AF24 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000AF2A                            
0000AF2A                            Obj36_Solid:				; XREF: Obj36_Index
0000AF2A 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000AF2E 343C 0004                  		move.w	#4,d2
0000AF32 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000AF38 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000AF3A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000AF40 6600                       		bne.s	Obj36_Upright	; if not, branch
0000AF42 343C 0014                  		move.w	#$14,d2
0000AF46                            
0000AF46                            ; Spikes types $1x and $5x face	sideways
0000AF46                            
0000AF46                            Obj36_SideWays:				; XREF: Obj36_Solid
0000AF46 323C 001B                  		move.w	#$1B,d1
0000AF4A 3602                       		move.w	d2,d3
0000AF4C 5243                       		addq.w	#1,d3
0000AF4E 3828 0008                  		move.w	8(a0),d4
0000AF52 6100 0000                  		bsr.w	SolidObject
0000AF56 0828 0003 0022             		btst	#3,$22(a0)
0000AF5C 6600                       		bne.s	Obj36_Display
0000AF5E 0C44 0001                  		cmpi.w	#1,d4
0000AF62 6700                       		beq.s	Obj36_Hurt
0000AF64 6000                       		bra.s	Obj36_Display
0000AF66                            ; ===========================================================================
0000AF66                            
0000AF66                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000AF66                            
0000AF66                            Obj36_Upright:				; XREF: Obj36_Solid
0000AF66 7200                       		moveq	#0,d1
0000AF68 1228 0019                  		move.b	$19(a0),d1
0000AF6C 0641 000B                  		addi.w	#$B,d1
0000AF70 343C 0010                  		move.w	#$10,d2
0000AF74 363C 0011                  		move.w	#$11,d3
0000AF78 3828 0008                  		move.w	8(a0),d4
0000AF7C 6100 0000                  		bsr.w	SolidObject
0000AF80 0828 0003 0022             		btst	#3,$22(a0)
0000AF86 6600                       		bne.s	Obj36_Hurt
0000AF88 4A44                       		tst.w	d4
0000AF8A 6A00                       		bpl.s	Obj36_Display
0000AF8C                            
0000AF8C                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000AF8C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000AF90 6600                       		bne.s	Obj36_Display	; if yes, branch
0000AF92 2F08                       		move.l	a0,-(sp)
0000AF94 2448                       		movea.l	a0,a2
0000AF96 41F8 D000                  		lea	($FFFFD000).w,a0
0000AF9A 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000AFA0 6400                       		bcc.s	loc_CF20
0000AFA2 2628 000C                  		move.l	$C(a0),d3
0000AFA6 3028 0012                  		move.w	$12(a0),d0
0000AFAA 48C0                       		ext.l	d0
0000AFAC E180                       		asl.l	#8,d0
0000AFB0 2143 000C                  		move.l	d3,$C(a0)
0000AFB4 4EB9 0000 0000             		jsr	HurtSonic
0000AFBA                            
0000AFBA                            loc_CF20:
0000AFBA 205F                       		movea.l	(sp)+,a0
0000AFBC                            
0000AFBC                            Obj36_Display:
0000AFBC 6100 0000                  		bsr.w	DisplaySprite
0000AFC0 3028 0030                  		move.w	$30(a0),d0
0000AFC4 0240 FF80                  		andi.w	#$FF80,d0
0000AFC8 3238 F700                  		move.w	($FFFFF700).w,d1
0000AFCC 0441 0080                  		subi.w	#$80,d1
0000AFD0 0241 FF80                  		andi.w	#$FF80,d1
0000AFD6 0C40 0280                  		cmpi.w	#$280,d0
0000AFDA 6200 0000                  		bhi.w	DeleteObject
0000AFDE 4E75                       		rts	
0000AFE0                            ; ===========================================================================
0000AFE0                            
0000AFE0                            Obj36_Type0x:				; XREF: Obj36_Solid
0000AFE0 7000                       		moveq	#0,d0
0000AFE2 1028 0028                  		move.b	$28(a0),d0
0000AFE8 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000AFEC 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000AFF0                            ; ===========================================================================
0000AFF0 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000AFF2 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000AFF4 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000AFF6                            ; ===========================================================================
0000AFF6                            
0000AFF6                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000AFF6 4E75                       		rts			; don't move the object
0000AFF8                            ; ===========================================================================
0000AFF8                            
0000AFF8                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000AFF8 6100 0000                  		bsr.w	Obj36_Wait
0000AFFC 7000                       		moveq	#0,d0
0000AFFE 1028 0034                  		move.b	$34(a0),d0
0000B006 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000B00A 4E75                       		rts	
0000B00C                            ; ===========================================================================
0000B00C                            
0000B00C                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000B00C 6100 0000                  		bsr.w	Obj36_Wait
0000B010 7000                       		moveq	#0,d0
0000B012 1028 0034                  		move.b	$34(a0),d0
0000B01A 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000B01E 4E75                       		rts	
0000B020                            ; ===========================================================================
0000B020                            
0000B020                            Obj36_Wait:
0000B020 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000B024 6700                       		beq.s	loc_CFA4	; if yes, branch
0000B026 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000B02A 6600                       		bne.s	locret_CFE6
0000B02C 4A28 0001                  		tst.b	1(a0)
0000B030 6A00                       		bpl.s	locret_CFE6
0000B032 303C 00B6                  		move.w	#$B6,d0
0000B036 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000B03C 6000                       		bra.s	locret_CFE6
0000B03E                            ; ===========================================================================
0000B03E                            
0000B03E                            loc_CFA4:
0000B03E 4A68 0036                  		tst.w	$36(a0)
0000B042 6700                       		beq.s	loc_CFC6
0000B044 0468 0800 0034             		subi.w	#$800,$34(a0)
0000B04A 6400                       		bcc.s	locret_CFE6
0000B04C 317C 0000 0034             		move.w	#0,$34(a0)
0000B052 317C 0000 0036             		move.w	#0,$36(a0)
0000B058 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000B05E 6000                       		bra.s	locret_CFE6
0000B060                            ; ===========================================================================
0000B060                            
0000B060                            loc_CFC6:
0000B060 0668 0800 0034             		addi.w	#$800,$34(a0)
0000B066 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000B06C 6500                       		bcs.s	locret_CFE6
0000B06E 317C 2000 0034             		move.w	#$2000,$34(a0)
0000B074 317C 0001 0036             		move.w	#1,$36(a0)
0000B07A 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000B080                            
0000B080                            locret_CFE6:
0000B080 4E75                       		rts	
0000B082                            ; ===========================================================================
0000B082                            ; ---------------------------------------------------------------------------
0000B082                            ; Sprite mappings - spikes
0000B082                            ; ---------------------------------------------------------------------------
0000B082                            Map_obj36:
0000B082                            	include "_maps\obj36.asm"
0000B082                            ; ---------------------------------------------------------------------------
0000B082                            ; Sprite mappings - spikes
0000B082                            ; ---------------------------------------------------------------------------
0000B082 0000                       		dc.w byte_CFF4-Map_obj36
0000B084 0000                       		dc.w byte_D004-Map_obj36
0000B086 0000                       		dc.w byte_D014-Map_obj36
0000B088 0000                       		dc.w byte_D01A-Map_obj36
0000B08A 0000                       		dc.w byte_D02A-Map_obj36
0000B08C 0000                       		dc.w byte_D049-Map_obj36
0000B08E 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000B08F F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000B094 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000B099 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000B09E 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000B09F EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000B0A4 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000B0A9 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000B0AE 01                         byte_D014:	dc.b 1			; 1 spike
0000B0AF F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000B0B4 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000B0B5 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000B0BA F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000B0BF F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000B0C4 06                         byte_D02A:	dc.b 6			; 6 spikes
0000B0C5 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000B0CA F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000B0CF F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000B0D4 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000B0D9 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000B0DE F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000B0E3 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000B0E4 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000B0EA 00                         		even
0000B0EA 00                         		even
0000B0EA                            
0000B0EA                            ; ===========================================================================
0000B0EA                            ; ---------------------------------------------------------------------------
0000B0EA                            ; Object 3B - purple rock (GHZ)
0000B0EA                            ; ---------------------------------------------------------------------------
0000B0EA                            
0000B0EA                            Obj3B:					; XREF: Obj_Index
0000B0EA 7000                       		moveq	#0,d0
0000B0EC 1028 0024                  		move.b	$24(a0),d0
0000B0F0 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000B0F4 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000B0F8                            ; ===========================================================================
0000B0F8 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000B0FA 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000B0FC                            ; ===========================================================================
0000B0FC                            
0000B0FC                            Obj3B_Main:				; XREF: Obj3B_Index
0000B0FC 5428 0024                  		addq.b	#2,$24(a0)
0000B100 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000B108 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000B10E 117C 0004 0001             		move.b	#4,1(a0)
0000B114 117C 0013 0019             		move.b	#$13,$19(a0)
0000B11A 117C 0004 0018             		move.b	#4,$18(a0)
0000B120                            
0000B120                            Obj3B_Solid:				; XREF: Obj3B_Index
0000B120 323C 001B                  		move.w	#$1B,d1
0000B124 343C 0010                  		move.w	#$10,d2
0000B128 363C 0010                  		move.w	#$10,d3
0000B12C 3828 0008                  		move.w	8(a0),d4
0000B130 6100 0000                  		bsr.w	SolidObject
0000B134 6100 0000                  		bsr.w	DisplaySprite
0000B138 3028 0008                  		move.w	8(a0),d0
0000B13C 0240 FF80                  		andi.w	#$FF80,d0
0000B140 3238 F700                  		move.w	($FFFFF700).w,d1
0000B144 0441 0080                  		subi.w	#$80,d1
0000B148 0241 FF80                  		andi.w	#$FF80,d1
0000B14E 0C40 0280                  		cmpi.w	#$280,d0
0000B152 6200 0000                  		bhi.w	DeleteObject
0000B156 4E75                       		rts	
0000B158                            ; ===========================================================================
0000B158                            ; ---------------------------------------------------------------------------
0000B158                            ; Object 49 - waterfall	sound effect (GHZ)
0000B158                            ; ---------------------------------------------------------------------------
0000B158                            
0000B158                            Obj49:					; XREF: Obj_Index
0000B158 7000                       		moveq	#0,d0
0000B15A 1028 0024                  		move.b	$24(a0),d0
0000B15E 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000B162 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000B166                            ; ===========================================================================
0000B166 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000B168 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000B16A                            ; ===========================================================================
0000B16A                            
0000B16A                            Obj49_Main:				; XREF: Obj49_Index
0000B16A 5428 0024                  		addq.b	#2,$24(a0)
0000B16E 117C 0004 0001             		move.b	#4,1(a0)
0000B174                            
0000B174                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000B174 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B178 0200 003F                  		andi.b	#$3F,d0
0000B17C 6600                       		bne.s	Obj49_ChkDel
0000B17E 303C 00D0                  		move.w	#$D0,d0
0000B182 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000B188                            
0000B188                            Obj49_ChkDel:
0000B188 3028 0008                  		move.w	8(a0),d0
0000B18C 0240 FF80                  		andi.w	#$FF80,d0
0000B190 3238 F700                  		move.w	($FFFFF700).w,d1
0000B194 0441 0080                  		subi.w	#$80,d1
0000B198 0241 FF80                  		andi.w	#$FF80,d1
0000B19E 0C40 0280                  		cmpi.w	#$280,d0
0000B1A2 6200 0000                  		bhi.w	DeleteObject
0000B1A6 4E75                       		rts	
0000B1A8                            ; ===========================================================================
0000B1A8                            ; ---------------------------------------------------------------------------
0000B1A8                            ; Sprite mappings - purple rock	(GHZ)
0000B1A8                            ; ---------------------------------------------------------------------------
0000B1A8                            Map_obj3B:
0000B1A8                            	include "_maps\obj3B.asm"
0000B1A8                            ; ---------------------------------------------------------------------------
0000B1A8                            ; Sprite mappings - purple rock	(GHZ)
0000B1A8                            ; ---------------------------------------------------------------------------
0000B1A8 0000                       		dc.w byte_D110-Map_obj3B
0000B1AA 02                         byte_D110:	dc.b 2
0000B1AB F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000B1B0 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000B1B6 00                         		even
0000B1B6 00                         		even
0000B1B6                            
0000B1B6                            ; ===========================================================================
0000B1B6                            ; ---------------------------------------------------------------------------
0000B1B6                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000B1B6                            ; ---------------------------------------------------------------------------
0000B1B6                            
0000B1B6                            Obj3C:					; XREF: Obj_Index
0000B1B6 7000                       		moveq	#0,d0
0000B1B8 1028 0024                  		move.b	$24(a0),d0
0000B1BC 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000B1C0 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000B1C4 6000 0000                  		bra.w	MarkObjGone
0000B1C8                            ; ===========================================================================
0000B1C8 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000B1CA 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000B1CC 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000B1CE                            ; ===========================================================================
0000B1CE                            
0000B1CE                            Obj3C_Main:				; XREF: Obj3C_Index
0000B1CE 5428 0024                  		addq.b	#2,$24(a0)
0000B1D2 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000B1DA 317C 450F 0002             		move.w	#$450F,2(a0)
0000B1E0 117C 0004 0001             		move.b	#4,1(a0)
0000B1E6 117C 0010 0019             		move.b	#$10,$19(a0)
0000B1EC 117C 0004 0018             		move.b	#4,$18(a0)
0000B1F2 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000B1F8                            
0000B1F8                            Obj3C_Solid:				; XREF: Obj3C_Index
0000B1F8 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000B1FE 323C 001B                  		move.w	#$1B,d1
0000B202 343C 0020                  		move.w	#$20,d2
0000B206 363C 0020                  		move.w	#$20,d3
0000B20A 3828 0008                  		move.w	8(a0),d4
0000B20E 6100 0000                  		bsr.w	SolidObject
0000B212 0828 0005 0022             		btst	#5,$22(a0)
0000B218 6600                       		bne.s	Obj3C_ChkRoll
0000B21A                            
0000B21A                            locret_D180:
0000B21A 4E75                       		rts	
0000B21C                            ; ===========================================================================
0000B21C                            
0000B21C                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000B21C 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000B222 66F6                       		bne.s	locret_D180	; if not, branch
0000B224 3028 0030                  		move.w	$30(a0),d0
0000B228 6A00                       		bpl.s	Obj3C_ChkSpeed
0000B22A 4440                       		neg.w	d0
0000B22C                            
0000B22C                            Obj3C_ChkSpeed:
0000B22C 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000B230 65E8                       		bcs.s	locret_D180	; if not, branch
0000B232 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000B238 5869 0008                  		addq.w	#4,8(a1)
0000B23C 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000B242 3028 0008                  		move.w	8(a0),d0
0000B246 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000B24A 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000B24C 5169 0008                  		subq.w	#8,8(a1)
0000B250 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000B256                            
0000B256                            Obj3C_Smash:
0000B256 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000B25C 08A8 0005 0022             		bclr	#5,$22(a0)
0000B262 08A9 0005 0022             		bclr	#5,$22(a1)
0000B268 7207                       		moveq	#7,d1		; load 8 fragments
0000B26A 343C 0070                  		move.w	#$70,d2
0000B26E 6100                       		bsr.s	SmashObject
0000B270                            
0000B270                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000B270 6100 0000                  		bsr.w	SpeedToPos
0000B274 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000B27A 6100 0000                  		bsr.w	DisplaySprite
0000B27E 4A28 0001                  		tst.b	1(a0)
0000B282 6A00 0000                  		bpl.w	DeleteObject
0000B286 4E75                       		rts	
0000B288                            
0000B288                            ; ---------------------------------------------------------------------------
0000B288                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000B288                            ; ---------------------------------------------------------------------------
0000B288                            
0000B288                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B288                            
0000B288                            
0000B288                            SmashObject:				; XREF: Obj3C_Smash
0000B288 7000                       		moveq	#0,d0
0000B28A 1028 001A                  		move.b	$1A(a0),d0
0000B290 2668 0004                  		movea.l	4(a0),a3
0000B294 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000B298 524B                       		addq.w	#1,a3
0000B29A 08E8 0005 0001             		bset	#5,1(a0)
0000B2A0 1810                       		move.b	0(a0),d4
0000B2A2 1A28 0001                  		move.b	1(a0),d5
0000B2A6 2248                       		movea.l	a0,a1
0000B2A8 6000                       		bra.s	Smash_LoadFrag
0000B2AA                            ; ===========================================================================
0000B2AA                            
0000B2AA                            Smash_Loop:
0000B2AA 6100 0000                  		bsr.w	SingleObjLoad
0000B2AE 6600                       		bne.s	Smash_PlaySnd
0000B2B0 5A4B                       		addq.w	#5,a3
0000B2B2                            
0000B2B2                            Smash_LoadFrag:				; XREF: SmashObject
0000B2B2 137C 0004 0024             		move.b	#4,$24(a1)
0000B2B8 1284                       		move.b	d4,0(a1)
0000B2BA 234B 0004                  		move.l	a3,4(a1)
0000B2BE 1345 0001                  		move.b	d5,1(a1)
0000B2C2 3368 0008 0008             		move.w	8(a0),8(a1)
0000B2C8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B2CE 3368 0002 0002             		move.w	2(a0),2(a1)
0000B2D4 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000B2DA 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000B2E0 335C 0010                  		move.w	(a4)+,$10(a1)
0000B2E4 335C 0012                  		move.w	(a4)+,$12(a1)
0000B2E8 B3C8                       		cmpa.l	a0,a1
0000B2EA 6400                       		bcc.s	loc_D268
0000B2EC 2F08                       		move.l	a0,-(sp)
0000B2EE 2049                       		movea.l	a1,a0
0000B2F0 6100 0000                  		bsr.w	SpeedToPos
0000B2F8 205F                       		movea.l	(sp)+,a0
0000B2FA 6100 0000                  		bsr.w	DisplaySprite2
0000B2FE                            
0000B2FE                            loc_D268:
0000B2FE 51C9 FFAA                  		dbf	d1,Smash_Loop
0000B302                            
0000B302                            Smash_PlaySnd:
0000B302 303C 00CB                  		move.w	#$CB,d0
0000B306 4EF9 0000 1020             		jmp	(PlaySound_Special).l ;	play smashing sound
0000B30C                            ; End of function SmashObject
0000B30C                            
0000B30C                            ; ===========================================================================
0000B30C                            ; Smashed block	fragment speeds
0000B30C                            ;
0000B30C 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000B310 0600 FF00                  		dc.w $600, $FF00
0000B314 0600 0100                  		dc.w $600, $100
0000B318 0400 0500                  		dc.w $400, $500
0000B31C 0600 FA00                  		dc.w $600, $FA00
0000B320 0800 FE00                  		dc.w $800, $FE00
0000B324 0800 0200                  		dc.w $800, $200
0000B328 0600 0600                  		dc.w $600, $600
0000B32C                            
0000B32C FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000B330 F800 FE00                  		dc.w $F800, $FE00
0000B334 F800 0200                  		dc.w $F800, $200
0000B338 FA00 0600                  		dc.w $FA00, $600
0000B33C FC00 FB00                  		dc.w $FC00, $FB00
0000B340 FA00 FF00                  		dc.w $FA00, $FF00
0000B344 FA00 0100                  		dc.w $FA00, $100
0000B348 FC00 0500                  		dc.w $FC00, $500
0000B34C                            ; ---------------------------------------------------------------------------
0000B34C                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000B34C                            ; ---------------------------------------------------------------------------
0000B34C                            Map_obj3C:
0000B34C                            	include "_maps\obj3C.asm"
0000B34C                            ; ---------------------------------------------------------------------------
0000B34C                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000B34C                            ; ---------------------------------------------------------------------------
0000B34C 0000                       		dc.w byte_D2BC-Map_obj3C
0000B34E 0000                       		dc.w byte_D2E5-Map_obj3C
0000B350 0000                       		dc.w byte_D30E-Map_obj3C
0000B352 08                         byte_D2BC:	dc.b 8
0000B353 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000B358 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000B35D 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000B362 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000B367 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000B36C F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000B371 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000B376 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000B37B 08                         byte_D2E5:	dc.b 8
0000B37C E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000B381 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000B386 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000B38B 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000B390 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000B395 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000B39A 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000B39F 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000B3A4 08                         byte_D30E:	dc.b 8
0000B3A5 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000B3AA F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000B3AF 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000B3B4 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000B3B9 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000B3BE F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000B3C3 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000B3C8 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000B3CE 00                         		even
0000B3CE 00                         		even
0000B3CE                            
0000B3CE                            ; ---------------------------------------------------------------------------
0000B3CE                            ; Object code loading subroutine
0000B3CE                            ; ---------------------------------------------------------------------------
0000B3CE                            
0000B3CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B3CE                            
0000B3CE                            
0000B3CE                            ObjectsLoad:				; XREF: TitleScreen; et al
0000B3CE 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000B3D2 7E7F                       		moveq	#$7F,d7
0000B3D4 7000                       		moveq	#0,d0
0000B3D6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000B3DC 6400                       		bcc.s	loc_D362
0000B3DE                            
0000B3DE                            loc_D348:
0000B3DE 1010                       		move.b	(a0),d0		; load object number from RAM
0000B3E0 6700                       		beq.s	loc_D358
0000B3E6 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000B3EA 4E91                       		jsr	(a1)		; run the object's code
0000B3EC 7000                       		moveq	#0,d0
0000B3EE                            
0000B3EE                            loc_D358:
0000B3EE 41E8 0040                  		lea	$40(a0),a0	; next object
0000B3F2 51CF FFEA                  		dbf	d7,loc_D348
0000B3F6 4E75                       		rts	
0000B3F8                            ; ===========================================================================
0000B3F8                            
0000B3F8                            loc_D362:
0000B3F8 7E1F                       		moveq	#$1F,d7
0000B3FA 61E2                       		bsr.s	loc_D348
0000B3FC 7E5F                       		moveq	#$5F,d7
0000B3FE                            
0000B3FE                            loc_D368:
0000B3FE 7000                       		moveq	#0,d0
0000B400 1010                       		move.b	(a0),d0
0000B402 6700                       		beq.s	loc_D378
0000B404 4A28 0001                  		tst.b	1(a0)
0000B408 6A00                       		bpl.s	loc_D378
0000B40A 6100 0000                  		bsr.w	DisplaySprite
0000B40E                            
0000B40E                            loc_D378:
0000B40E 41E8 0040                  		lea	$40(a0),a0
0000B412                            
0000B412                            loc_D37C:
0000B412 51CF FFEA                  		dbf	d7,loc_D368
0000B416 4E75                       		rts	
0000B418                            ; End of function ObjectsLoad
0000B418                            
0000B418                            ; ===========================================================================
0000B418                            ; ---------------------------------------------------------------------------
0000B418                            ; Object pointers
0000B418                            ; ---------------------------------------------------------------------------
0000B418                            Obj_Index:
0000B418                            	include "_inc\Object pointers.asm"
0000B418                            ; ---------------------------------------------------------------------------
0000B418                            ; Object pointers
0000B418                            ; ---------------------------------------------------------------------------
0000B418 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjPowerUp,	ObjGreenBubble, ObjectFall
0000B428 0000 0000 0000 0000 0000+  	dc.l SpinDash_dust, ObjectFall, ObjectFall, Obj08
0000B438 0000 0000 0000 0000 0000+  	dc.l ObjectFall, Obj0A, Obj0B, Obj0C
0000B448 0000 0000 0000 86C4 0000+  	dc.l Obj0D, Obj0E, Obj0F, ObjectFall
0000B458 0000 5442 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000B468 0000 5A68 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000B478 0000 0000 0000 62DA 0000+  	dc.l ObjectFall, Obj1A, Obj1B, Obj1C
0000B488 0000 6924 0000 6C12 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000B498 0000 0000 0000 7896 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000B4A8 0000 7BD8 0000 81C4 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000B4B8 0000 74CE 0000 69FA 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000B4C8 0000 8D4C 0000 83AA 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000B4D8 0000 971E 0000 9DCC 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000B4E8 0000 9282 0000 AEC2 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000B4F8 0000 A558 0000 A612 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000B508 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000B518 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000B528 0000 9A3A 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000B538 0000 B158 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000B548 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000B558 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000B568 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000B578 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000B588 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000B598 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000B5A8 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000B5B8 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000B5C8 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000B5D8 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000B5E8 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000B5F8 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000B608 0000 0000 0000 A84C 0000+  	dc.l Obj7D, Obj7E, Obj7F, ObjectFall
0000B618 0000 0000 0000 0000 0000+  	dc.l ObjectFall, Obj82, Obj83, Obj84
0000B628 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, ObjectFall, ObjectFall
0000B638 0000 0000 0000 0000 0000+  	dc.l ObjectFall, Obj8A, ObjectFall, ObjectFall
0000B638 0000 0000 0000 0000 0000+  	dc.l ObjectFall, Obj8A, ObjectFall, ObjectFall
0000B648                            
0000B648                            ; ---------------------------------------------------------------------------
0000B648                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000B648                            ; ---------------------------------------------------------------------------
0000B648                            
0000B648                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B648                            
0000B648                            
0000B648                            ObjectFall:
0000B648 2428 0008                  		move.l	8(a0),d2
0000B64C 2628 000C                  		move.l	$C(a0),d3
0000B650 3028 0010                  		move.w	$10(a0),d0
0000B654 48C0                       		ext.l	d0
0000B656 E180                       		asl.l	#8,d0
0000B65A 3028 0012                  		move.w	$12(a0),d0
0000B65E 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000B664 48C0                       		ext.l	d0
0000B666 E180                       		asl.l	#8,d0
0000B66A 2142 0008                  		move.l	d2,8(a0)
0000B66E 2143 000C                  		move.l	d3,$C(a0)
0000B672 4E75                       		rts	
0000B674                            ; End of function ObjectFall
0000B674                            
0000B674                            ; ---------------------------------------------------------------------------
0000B674                            ; Subroutine translating object	speed to update	object position
0000B674                            ; ---------------------------------------------------------------------------
0000B674                            
0000B674                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B674                            
0000B674                            
0000B674                            SpeedToPos:
0000B674 2428 0008                  		move.l	8(a0),d2
0000B678 2628 000C                  		move.l	$C(a0),d3
0000B67C 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000B680 48C0                       		ext.l	d0
0000B682 E180                       		asl.l	#8,d0		; multiply speed by $100
0000B686 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000B68A 48C0                       		ext.l	d0
0000B68C E180                       		asl.l	#8,d0		; multiply by $100
0000B690 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000B694 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000B698 4E75                       		rts	
0000B69A                            ; End of function SpeedToPos
0000B69A                            
0000B69A                            ; ---------------------------------------------------------------------------
0000B69A                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000B69A                            ; ---------------------------------------------------------------------------
0000B69A                            
0000B69A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B69A                            
0000B69A                            
0000B69A                            DisplaySprite:
0000B69A 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000B69E 3028 0018                  		move.w	$18(a0),d0
0000B6A2 E248                       		lsr.w	#1,d0
0000B6A4 0240 0380                  		andi.w	#$380,d0
0000B6A8 D2C0                       		adda.w	d0,a1
0000B6AA 0C51 007E                  		cmpi.w	#$7E,(a1)
0000B6AE 6400                       		bcc.s	locret_D620
0000B6B0 5451                       		addq.w	#2,(a1)
0000B6B2 D2D1                       		adda.w	(a1),a1
0000B6B4 3288                       		move.w	a0,(a1)
0000B6B6                            
0000B6B6                            locret_D620:
0000B6B6 4E75                       		rts	
0000B6B8                            ; End of function DisplaySprite
0000B6B8                            
0000B6B8                            ; ---------------------------------------------------------------------------
0000B6B8                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000B6B8                            ; ---------------------------------------------------------------------------
0000B6B8                            
0000B6B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B6B8                            
0000B6B8                            
0000B6B8                            DisplaySprite2:
0000B6B8 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000B6BC 3029 0018                  		move.w	$18(a1),d0
0000B6C0 E248                       		lsr.w	#1,d0
0000B6C2 0240 0380                  		andi.w	#$380,d0
0000B6C6 D4C0                       		adda.w	d0,a2
0000B6C8 0C52 007E                  		cmpi.w	#$7E,(a2)
0000B6CC 6400                       		bcc.s	locret_D63E
0000B6CE 5452                       		addq.w	#2,(a2)
0000B6D0 D4D2                       		adda.w	(a2),a2
0000B6D2 3489                       		move.w	a1,(a2)
0000B6D4                            
0000B6D4                            locret_D63E:
0000B6D4 4E75                       		rts	
0000B6D6                            ; End of function DisplaySprite2
0000B6D6                            
0000B6D6                            ; ---------------------------------------------------------------------------
0000B6D6                            ; Subroutine to	delete an object
0000B6D6                            ; ---------------------------------------------------------------------------
0000B6D6                            
0000B6D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B6D6                            
0000B6D6                            
0000B6D6                            DeleteObject:
0000B6D6 2248                       		movea.l	a0,a1
0000B6D8                            
0000B6D8                            DeleteObject2:
0000B6D8 7200                       		moveq	#0,d1
0000B6DA 700F                       		moveq	#$F,d0
0000B6DC                            
0000B6DC                            loc_D646:
0000B6DC 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000B6DE 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000B6E2 4E75                       		rts	
0000B6E4                            ; End of function DeleteObject
0000B6E4                            
0000B6E4                            ; ===========================================================================
0000B6E4 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000B6E8 00FF F700                  		dc.l $FFF700		; main screen x-position
0000B6EC 00FF F708                  		dc.l $FFF708		; background x-position	1
0000B6F0 00FF F718                  		dc.l $FFF718		; background x-position	2
0000B6F4                            ; ---------------------------------------------------------------------------
0000B6F4                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000B6F4                            ; ---------------------------------------------------------------------------
0000B6F4                            
0000B6F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B6F4                            
0000B6F4                            
0000B6F4                            BuildSprites:				; XREF: TitleScreen; et al
0000B6F4 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000B6F8 7A00                       		moveq	#0,d5
0000B6FA 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000B6FE 7E07                       		moveq	#7,d7
0000B700                            
0000B700                            loc_D66A:
0000B700 4A54                       		tst.w	(a4)
0000B702 6700 0000                  		beq.w	loc_D72E
0000B706 7C02                       		moveq	#2,d6
0000B708                            
0000B708                            loc_D672:
0000B708 3074 6000                  		movea.w	(a4,d6.w),a0
0000B70C 4A10                       		tst.b	(a0)
0000B70E 6700 0000                  		beq.w	loc_D726
0000B712 08A8 0007 0001             		bclr	#7,1(a0)
0000B718 1028 0001                  		move.b	1(a0),d0
0000B71C 1800                       		move.b	d0,d4
0000B71E 0240 000C                  		andi.w	#$C,d0
0000B722 6700                       		beq.s	loc_D6DE
0000B724 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000B728 7000                       		moveq	#0,d0
0000B72A 1028 0019                  		move.b	$19(a0),d0
0000B72E 3628 0008                  		move.w	8(a0),d3
0000B734 3203                       		move.w	d3,d1
0000B738 6B00 0000                  		bmi.w	loc_D726
0000B73C 3203                       		move.w	d3,d1
0000B740 0C41 0140                  		cmpi.w	#$140,d1
0000B744 6C00                       		bge.s	loc_D726
0000B746 0643 0080                  		addi.w	#$80,d3
0000B74A 0804 0004                  		btst	#4,d4
0000B74E 6700                       		beq.s	loc_D6E8
0000B750 7000                       		moveq	#0,d0
0000B752 1028 0016                  		move.b	$16(a0),d0
0000B756 3428 000C                  		move.w	$C(a0),d2
0000B75E 3202                       		move.w	d2,d1
0000B762 6B00                       		bmi.s	loc_D726
0000B764 3202                       		move.w	d2,d1
0000B768 0C41 00E0                  		cmpi.w	#$E0,d1
0000B76C 6C00                       		bge.s	loc_D726
0000B76E 0642 0080                  		addi.w	#$80,d2
0000B772 6000                       		bra.s	loc_D700
0000B774                            ; ===========================================================================
0000B774                            
0000B774                            loc_D6DE:
0000B774 3428 000A                  		move.w	$A(a0),d2
0000B778 3628 0008                  		move.w	8(a0),d3
0000B77C 6000                       		bra.s	loc_D700
0000B77E                            ; ===========================================================================
0000B77E                            
0000B77E                            loc_D6E8:
0000B77E 3428 000C                  		move.w	$C(a0),d2
0000B786 0642 0080                  		addi.w	#$80,d2
0000B78A 0C42 0060                  		cmpi.w	#$60,d2
0000B78E 6500                       		bcs.s	loc_D726
0000B790 0C42 0180                  		cmpi.w	#$180,d2
0000B794 6400                       		bcc.s	loc_D726
0000B796                            
0000B796                            loc_D700:
0000B796 2268 0004                  		movea.l	4(a0),a1
0000B79A 7200                       		moveq	#0,d1
0000B79C 0804 0005                  		btst	#5,d4
0000B7A0 6600                       		bne.s	loc_D71C
0000B7A2 1228 001A                  		move.b	$1A(a0),d1
0000B7A8 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000B7AC 1219                       		move.b	(a1)+,d1
0000B7AE 5301                       		subq.b	#1,d1
0000B7B0 6B00                       		bmi.s	loc_D720
0000B7B2                            
0000B7B2                            loc_D71C:
0000B7B2 6100 0000                  		bsr.w	sub_D750
0000B7B6                            
0000B7B6                            loc_D720:
0000B7B6 08E8 0007 0001             		bset	#7,1(a0)
0000B7BC                            
0000B7BC                            loc_D726:
0000B7BC 5446                       		addq.w	#2,d6
0000B7BE 5554                       		subq.w	#2,(a4)
0000B7C0 6600 FF46                  		bne.w	loc_D672
0000B7C4                            
0000B7C4                            loc_D72E:
0000B7C4 49EC 0080                  		lea	$80(a4),a4
0000B7C8 51CF FF36                  		dbf	d7,loc_D66A
0000B7CC 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000B7D0 0C05 0050                  		cmpi.b	#$50,d5
0000B7D4 6700                       		beq.s	loc_D748
0000B7D6 24BC 0000 0000             		move.l	#0,(a2)
0000B7DC 4E75                       		rts	
0000B7DE                            ; ===========================================================================
0000B7DE                            
0000B7DE                            loc_D748:
0000B7DE 157C 0000 FFFB             		move.b	#0,-5(a2)
0000B7E4 4E75                       		rts	
0000B7E6                            ; End of function BuildSprites
0000B7E6                            
0000B7E6                            
0000B7E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B7E6                            
0000B7E6                            
0000B7E6                            sub_D750:				; XREF: BuildSprites
0000B7E6 3668 0002                  		movea.w	2(a0),a3
0000B7EA 0804 0000                  		btst	#0,d4
0000B7EE 6600                       		bne.s	loc_D796
0000B7F0 0804 0001                  		btst	#1,d4
0000B7F4 6600 0000                  		bne.w	loc_D7E4
0000B7F8                            ; End of function sub_D750
0000B7F8                            
0000B7F8                            
0000B7F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B7F8                            
0000B7F8                            
0000B7F8                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000B7F8 0C05 0050                  		cmpi.b	#$50,d5
0000B7FC 6700                       		beq.s	locret_D794
0000B7FE 1019                       		move.b	(a1)+,d0
0000B800 4880                       		ext.w	d0
0000B804 34C0                       		move.w	d0,(a2)+
0000B806 14D9                       		move.b	(a1)+,(a2)+
0000B808 5205                       		addq.b	#1,d5
0000B80A 14C5                       		move.b	d5,(a2)+
0000B80C 1019                       		move.b	(a1)+,d0
0000B80E E148                       		lsl.w	#8,d0
0000B810 1019                       		move.b	(a1)+,d0
0000B814 34C0                       		move.w	d0,(a2)+
0000B816 1019                       		move.b	(a1)+,d0
0000B818 4880                       		ext.w	d0
0000B81C 0240 01FF                  		andi.w	#$1FF,d0
0000B820 6600                       		bne.s	loc_D78E
0000B822 5240                       		addq.w	#1,d0
0000B824                            
0000B824                            loc_D78E:
0000B824 34C0                       		move.w	d0,(a2)+
0000B826 51C9 FFD0                  		dbf	d1,sub_D762
0000B82A                            
0000B82A                            locret_D794:
0000B82A 4E75                       		rts	
0000B82C                            ; End of function sub_D762
0000B82C                            
0000B82C                            ; ===========================================================================
0000B82C                            
0000B82C                            loc_D796:
0000B82C 0804 0001                  		btst	#1,d4
0000B830 6600 0000                  		bne.w	loc_D82A
0000B834                            
0000B834                            loc_D79E:
0000B834 0C05 0050                  		cmpi.b	#$50,d5
0000B838 6700                       		beq.s	locret_D7E2
0000B83A 1019                       		move.b	(a1)+,d0
0000B83C 4880                       		ext.w	d0
0000B840 34C0                       		move.w	d0,(a2)+
0000B842 1819                       		move.b	(a1)+,d4
0000B844 14C4                       		move.b	d4,(a2)+
0000B846 5205                       		addq.b	#1,d5
0000B848 14C5                       		move.b	d5,(a2)+
0000B84A 1019                       		move.b	(a1)+,d0
0000B84C E148                       		lsl.w	#8,d0
0000B84E 1019                       		move.b	(a1)+,d0
0000B852 0A40 0800                  		eori.w	#$800,d0
0000B856 34C0                       		move.w	d0,(a2)+
0000B858 1019                       		move.b	(a1)+,d0
0000B85A 4880                       		ext.w	d0
0000B85C 4440                       		neg.w	d0
0000B860 0244 0018                  		andi.w	#$18,d4
0000B864 5044                       		addq.w	#8,d4
0000B86A 0240 01FF                  		andi.w	#$1FF,d0
0000B86E 6600                       		bne.s	loc_D7DC
0000B870 5240                       		addq.w	#1,d0
0000B872                            
0000B872                            loc_D7DC:
0000B872 34C0                       		move.w	d0,(a2)+
0000B874 51C9 FFBE                  		dbf	d1,loc_D79E
0000B878                            
0000B878                            locret_D7E2:
0000B878 4E75                       		rts	
0000B87A                            ; ===========================================================================
0000B87A                            
0000B87A                            loc_D7E4:				; XREF: sub_D750
0000B87A 0C05 0050                  		cmpi.b	#$50,d5
0000B87E 6700                       		beq.s	locret_D828
0000B880 1019                       		move.b	(a1)+,d0
0000B882 1811                       		move.b	(a1),d4
0000B884 4880                       		ext.w	d0
0000B886 4440                       		neg.w	d0
0000B888 E70C                       		lsl.b	#3,d4
0000B88A 0244 0018                  		andi.w	#$18,d4
0000B88E 5044                       		addq.w	#8,d4
0000B894 34C0                       		move.w	d0,(a2)+
0000B896 14D9                       		move.b	(a1)+,(a2)+
0000B898 5205                       		addq.b	#1,d5
0000B89A 14C5                       		move.b	d5,(a2)+
0000B89C 1019                       		move.b	(a1)+,d0
0000B89E E148                       		lsl.w	#8,d0
0000B8A0 1019                       		move.b	(a1)+,d0
0000B8A4 0A40 1000                  		eori.w	#$1000,d0
0000B8A8 34C0                       		move.w	d0,(a2)+
0000B8AA 1019                       		move.b	(a1)+,d0
0000B8AC 4880                       		ext.w	d0
0000B8B0 0240 01FF                  		andi.w	#$1FF,d0
0000B8B4 6600                       		bne.s	loc_D822
0000B8B6 5240                       		addq.w	#1,d0
0000B8B8                            
0000B8B8                            loc_D822:
0000B8B8 34C0                       		move.w	d0,(a2)+
0000B8BA 51C9 FFBE                  		dbf	d1,loc_D7E4
0000B8BE                            
0000B8BE                            locret_D828:
0000B8BE 4E75                       		rts	
0000B8C0                            ; ===========================================================================
0000B8C0                            
0000B8C0                            loc_D82A:
0000B8C0 0C05 0050                  		cmpi.b	#$50,d5
0000B8C4 6700                       		beq.s	locret_D87C
0000B8C6 1019                       		move.b	(a1)+,d0
0000B8C8 1811                       		move.b	(a1),d4
0000B8CA 4880                       		ext.w	d0
0000B8CC 4440                       		neg.w	d0
0000B8CE E70C                       		lsl.b	#3,d4
0000B8D0 0244 0018                  		andi.w	#$18,d4
0000B8D4 5044                       		addq.w	#8,d4
0000B8DA 34C0                       		move.w	d0,(a2)+
0000B8DC 1819                       		move.b	(a1)+,d4
0000B8DE 14C4                       		move.b	d4,(a2)+
0000B8E0 5205                       		addq.b	#1,d5
0000B8E2 14C5                       		move.b	d5,(a2)+
0000B8E4 1019                       		move.b	(a1)+,d0
0000B8E6 E148                       		lsl.w	#8,d0
0000B8E8 1019                       		move.b	(a1)+,d0
0000B8EC 0A40 1800                  		eori.w	#$1800,d0
0000B8F0 34C0                       		move.w	d0,(a2)+
0000B8F2 1019                       		move.b	(a1)+,d0
0000B8F4 4880                       		ext.w	d0
0000B8F6 4440                       		neg.w	d0
0000B8FA 0244 0018                  		andi.w	#$18,d4
0000B8FE 5044                       		addq.w	#8,d4
0000B904 0240 01FF                  		andi.w	#$1FF,d0
0000B908 6600                       		bne.s	loc_D876
0000B90A 5240                       		addq.w	#1,d0
0000B90C                            
0000B90C                            loc_D876:
0000B90C 34C0                       		move.w	d0,(a2)+
0000B90E 51C9 FFB0                  		dbf	d1,loc_D82A
0000B912                            
0000B912                            locret_D87C:
0000B912 4E75                       		rts	
0000B914                            ; ---------------------------------------------------------------------------
0000B914                            ; Subroutine to	check if an object is on the screen
0000B914                            ; ---------------------------------------------------------------------------
0000B914                            
0000B914                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B914                            
0000B914                            
0000B914                            ChkObjOnScreen:
0000B914 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000B91C 6B00                       		bmi.s	NotOnScreen
0000B91E 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000B922 6C00                       		bge.s	NotOnScreen	; if not, branch
0000B924                            
0000B924 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000B92C 6B00                       		bmi.s	NotOnScreen
0000B92E 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000B932 6C00                       		bge.s	NotOnScreen	; if not, branch
0000B934                            
0000B934 7000                       		moveq	#0,d0		; set flag to 0
0000B936 4E75                       		rts	
0000B938                            ; ===========================================================================
0000B938                            
0000B938                            NotOnScreen:				; XREF: ChkObjOnScreen
0000B938 7001                       		moveq	#1,d0		; set flag to 1
0000B93A 4E75                       		rts	
0000B93C                            ; End of function ChkObjOnScreen
0000B93C                            
0000B93C                            
0000B93C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B93C                            
0000B93C                            
0000B93C                            ChkObjOnScreen2:
0000B93C 7200                       		moveq	#0,d1
0000B93E 1228 0019                  		move.b	$19(a0),d1
0000B942 3028 0008                  		move.w	8(a0),d0
0000B94C 6B00                       		bmi.s	NotOnScreen2
0000B952 0C40 0140                  		cmpi.w	#320,d0
0000B956 6C00                       		bge.s	NotOnScreen2
0000B958                            
0000B958 3228 000C                  		move.w	$C(a0),d1
0000B960 6B00                       		bmi.s	NotOnScreen2
0000B962 0C41 00E0                  		cmpi.w	#224,d1
0000B966 6C00                       		bge.s	NotOnScreen2
0000B968                            
0000B968 7000                       		moveq	#0,d0
0000B96A 4E75                       		rts	
0000B96C                            ; ===========================================================================
0000B96C                            
0000B96C                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000B96C 7001                       		moveq	#1,d0
0000B96E 4E75                       		rts	
0000B970                            ; End of function ChkObjOnScreen2
0000B970                            
0000B970                            ; ---------------------------------------------------------------------------
0000B970                            ; Subroutine to	load a level's objects
0000B970                            ; ---------------------------------------------------------------------------
0000B970                            
0000B970                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B970                            
0000B970                            
0000B970                            ObjPosLoad:				; XREF: Level; et al
0000B970 7000                       		moveq	#0,d0
0000B972 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000B976 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000B97A 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000B97E                            ; End of function ObjPosLoad
0000B97E                            
0000B97E                            ; ===========================================================================
0000B97E 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000B980 0000                       		dc.w OPL_Next-OPL_Index
0000B982                            ; ===========================================================================
0000B982                            
0000B982                            OPL_Main:				; XREF: OPL_Index
0000B982 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000B986 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000B98A ED08                       		lsl.b	#6,d0
0000B98C E848                       		lsr.w	#4,d0
0000B98E 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000B994 2248                       		movea.l	a0,a1
0000B996 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000B99A 21C8 F770                  		move.l	a0,($FFFFF770).w
0000B99E 21C8 F774                  		move.l	a0,($FFFFF774).w
0000B9A2 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000B9A6 21C9 F778                  		move.l	a1,($FFFFF778).w
0000B9AA 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000B9AE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B9B2 34FC 0101                  		move.w	#$101,(a2)+
0000B9B6 303C 005E                  		move.w	#$5E,d0
0000B9BA                            
0000B9BA                            OPL_ClrList:
0000B9BA 429A                       		clr.l	(a2)+
0000B9BC 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000B9C0                            
0000B9C0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B9C4 7400                       		moveq	#0,d2
0000B9C6 3C38 F700                  		move.w	($FFFFF700).w,d6
0000B9CA 0446 0080                  		subi.w	#$80,d6
0000B9CE 6400                       		bcc.s	loc_D93C
0000B9D0 7C00                       		moveq	#0,d6
0000B9D2                            
0000B9D2                            loc_D93C:
0000B9D2 0246 FF80                  		andi.w	#$FF80,d6
0000B9D6 2078 F770                  		movea.l	($FFFFF770).w,a0
0000B9DA                            
0000B9DA                            loc_D944:
0000B9DA BC50                       		cmp.w	(a0),d6
0000B9DC 6300                       		bls.s	loc_D956
0000B9DE 4A28 0004                  		tst.b	4(a0)
0000B9E2 6A00                       		bpl.s	loc_D952
0000B9E4 1412                       		move.b	(a2),d2
0000B9E6 5212                       		addq.b	#1,(a2)
0000B9E8                            
0000B9E8                            loc_D952:
0000B9E8 5C48                       		addq.w	#6,a0
0000B9EA 60EE                       		bra.s	loc_D944
0000B9EC                            ; ===========================================================================
0000B9EC                            
0000B9EC                            loc_D956:
0000B9EC 21C8 F770                  		move.l	a0,($FFFFF770).w
0000B9F0 2078 F774                  		movea.l	($FFFFF774).w,a0
0000B9F4 0446 0080                  		subi.w	#$80,d6
0000B9F8 6500                       		bcs.s	loc_D976
0000B9FA                            
0000B9FA                            loc_D964:
0000B9FA BC50                       		cmp.w	(a0),d6
0000B9FC 6300                       		bls.s	loc_D976
0000B9FE 4A28 0004                  		tst.b	4(a0)
0000BA02 6A00                       		bpl.s	loc_D972
0000BA04 522A 0001                  		addq.b	#1,1(a2)
0000BA08                            
0000BA08                            loc_D972:
0000BA08 5C48                       		addq.w	#6,a0
0000BA0A 60EE                       		bra.s	loc_D964
0000BA0C                            ; ===========================================================================
0000BA0C                            
0000BA0C                            loc_D976:
0000BA0C 21C8 F774                  		move.l	a0,($FFFFF774).w
0000BA10 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000BA16                            
0000BA16                            OPL_Next:				; XREF: OPL_Index
0000BA16 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000BA1A 7400                       		moveq	#0,d2
0000BA1C 3C38 F700                  		move.w	($FFFFF700).w,d6
0000BA20 0246 FF80                  		andi.w	#$FF80,d6
0000BA24 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000BA28 6700 0000                  		beq.w	locret_DA3A
0000BA2C 6C00                       		bge.s	loc_D9F6
0000BA2E 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000BA32 2078 F774                  		movea.l	($FFFFF774).w,a0
0000BA36 0446 0080                  		subi.w	#$80,d6
0000BA3A 6500                       		bcs.s	loc_D9D2
0000BA3C                            
0000BA3C                            loc_D9A6:
0000BA3C BC68 FFFA                  		cmp.w	-6(a0),d6
0000BA40 6C00                       		bge.s	loc_D9D2
0000BA42 5D48                       		subq.w	#6,a0
0000BA44 4A28 0004                  		tst.b	4(a0)
0000BA48 6A00                       		bpl.s	loc_D9BC
0000BA4A 532A 0001                  		subq.b	#1,1(a2)
0000BA4E 142A 0001                  		move.b	1(a2),d2
0000BA52                            
0000BA52                            loc_D9BC:
0000BA52 6100 0000                  		bsr.w	loc_DA3C
0000BA56 6600                       		bne.s	loc_D9C6
0000BA58 5D48                       		subq.w	#6,a0
0000BA5A 60E0                       		bra.s	loc_D9A6
0000BA5C                            ; ===========================================================================
0000BA5C                            
0000BA5C                            loc_D9C6:
0000BA5C 4A28 0004                  		tst.b	4(a0)
0000BA60 6A00                       		bpl.s	loc_D9D0
0000BA62 522A 0001                  		addq.b	#1,1(a2)
0000BA66                            
0000BA66                            loc_D9D0:
0000BA66 5C48                       		addq.w	#6,a0
0000BA68                            
0000BA68                            loc_D9D2:
0000BA68 21C8 F774                  		move.l	a0,($FFFFF774).w
0000BA6C 2078 F770                  		movea.l	($FFFFF770).w,a0
0000BA70 0646 0300                  		addi.w	#$300,d6
0000BA74                            
0000BA74                            loc_D9DE:
0000BA74 BC68 FFFA                  		cmp.w	-6(a0),d6
0000BA78 6E00                       		bgt.s	loc_D9F0
0000BA7A 4A28 FFFE                  		tst.b	-2(a0)
0000BA7E 6A00                       		bpl.s	loc_D9EC
0000BA80 5312                       		subq.b	#1,(a2)
0000BA82                            
0000BA82                            loc_D9EC:
0000BA82 5D48                       		subq.w	#6,a0
0000BA84 60EE                       		bra.s	loc_D9DE
0000BA86                            ; ===========================================================================
0000BA86                            
0000BA86                            loc_D9F0:
0000BA86 21C8 F770                  		move.l	a0,($FFFFF770).w
0000BA8A 4E75                       		rts	
0000BA8C                            ; ===========================================================================
0000BA8C                            
0000BA8C                            loc_D9F6:
0000BA8C 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000BA90 2078 F770                  		movea.l	($FFFFF770).w,a0
0000BA94 0646 0280                  		addi.w	#$280,d6
0000BA98                            
0000BA98                            loc_DA02:
0000BA98 BC50                       		cmp.w	(a0),d6
0000BA9A 6300                       		bls.s	loc_DA16
0000BA9C 4A28 0004                  		tst.b	4(a0)
0000BAA0 6A00                       		bpl.s	loc_DA10
0000BAA2 1412                       		move.b	(a2),d2
0000BAA4 5212                       		addq.b	#1,(a2)
0000BAA6                            
0000BAA6                            loc_DA10:
0000BAA6 6100 0000                  		bsr.w	loc_DA3C
0000BAAA 67EC                       		beq.s	loc_DA02
0000BAAC                            
0000BAAC                            loc_DA16:
0000BAAC 21C8 F770                  		move.l	a0,($FFFFF770).w
0000BAB0 2078 F774                  		movea.l	($FFFFF774).w,a0
0000BAB4 0446 0300                  		subi.w	#$300,d6
0000BAB8 6500                       		bcs.s	loc_DA36
0000BABA                            
0000BABA                            loc_DA24:
0000BABA BC50                       		cmp.w	(a0),d6
0000BABC 6300                       		bls.s	loc_DA36
0000BABE 4A28 0004                  		tst.b	4(a0)
0000BAC2 6A00                       		bpl.s	loc_DA32
0000BAC4 522A 0001                  		addq.b	#1,1(a2)
0000BAC8                            
0000BAC8                            loc_DA32:
0000BAC8 5C48                       		addq.w	#6,a0
0000BACA 60EE                       		bra.s	loc_DA24
0000BACC                            ; ===========================================================================
0000BACC                            
0000BACC                            loc_DA36:
0000BACC 21C8 F774                  		move.l	a0,($FFFFF774).w
0000BAD0                            
0000BAD0                            locret_DA3A:
0000BAD0 4E75                       		rts	
0000BAD2                            ; ===========================================================================
0000BAD2                            
0000BAD2                            loc_DA3C:
0000BAD2 4A28 0004                  		tst.b	4(a0)
0000BAD6 6A00                       		bpl.s	OPL_MakeItem
0000BAD8 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000BADE 6700                       		beq.s	OPL_MakeItem
0000BAE0 5C48                       		addq.w	#6,a0
0000BAE2 7000                       		moveq	#0,d0
0000BAE4 4E75                       		rts	
0000BAE6                            ; ===========================================================================
0000BAE6                            
0000BAE6                            OPL_MakeItem:
0000BAE6 6100 0000                  		bsr.w	SingleObjLoad
0000BAEA 6600                       		bne.s	locret_DA8A
0000BAEC 3358 0008                  		move.w	(a0)+,8(a1)
0000BAF0 3018                       		move.w	(a0)+,d0
0000BAF2 3200                       		move.w	d0,d1
0000BAF4 0240 0FFF                  		andi.w	#$FFF,d0
0000BAF8 3340 000C                  		move.w	d0,$C(a1)
0000BAFC E559                       		rol.w	#2,d1
0000BAFE 0201 0003                  		andi.b	#3,d1
0000BB02 1341 0001                  		move.b	d1,1(a1)
0000BB06 1341 0022                  		move.b	d1,$22(a1)
0000BB0A 1018                       		move.b	(a0)+,d0
0000BB0C 6A00                       		bpl.s	loc_DA80
0000BB0E 0200 007F                  		andi.b	#$7F,d0
0000BB12 1342 0023                  		move.b	d2,$23(a1)
0000BB16                            
0000BB16                            loc_DA80:
0000BB16 1280                       		move.b	d0,0(a1)
0000BB18 1358 0028                  		move.b	(a0)+,$28(a1)
0000BB1C 7000                       		moveq	#0,d0
0000BB1E                            
0000BB1E                            locret_DA8A:
0000BB1E 4E75                       		rts	
0000BB20                            ; ---------------------------------------------------------------------------
0000BB20                            ; Single object	loading	subroutine
0000BB20                            ; ---------------------------------------------------------------------------
0000BB20                            
0000BB20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB20                            
0000BB20                            
0000BB20                            SingleObjLoad:
0000BB20 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000BB24 303C 005F                  		move.w	#$5F,d0
0000BB28                            
0000BB28                            loc_DA94:
0000BB28 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000BB2A 6700                       		beq.s	locret_DAA0	; if yes, branch
0000BB2C 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000BB30 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000BB34                            
0000BB34                            locret_DAA0:
0000BB34 4E75                       		rts	
0000BB36                            ; End of function SingleObjLoad
0000BB36                            
0000BB36                            
0000BB36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB36                            
0000BB36                            
0000BB36                            SingleObjLoad2:
0000BB36 2248                       		movea.l	a0,a1
0000BB38 303C F000                  		move.w	#-$1000,d0
0000BB3E EC48                       		lsr.w	#6,d0
0000BB40 5340                       		subq.w	#1,d0
0000BB42 6500                       		bcs.s	locret_DABC
0000BB44                            
0000BB44                            loc_DAB0:
0000BB44 4A11                       		tst.b	(a1)
0000BB46 6700                       		beq.s	locret_DABC
0000BB48 43E9 0040                  		lea	$40(a1),a1
0000BB4C 51C8 FFF6                  		dbf	d0,loc_DAB0
0000BB50                            
0000BB50                            locret_DABC:
0000BB50 4E75                       		rts	
0000BB52                            ; End of function SingleObjLoad2
0000BB52                            
0000BB52                            ; ===========================================================================
0000BB52                            ; ---------------------------------------------------------------------------
0000BB52                            ; Object 41 - springs
0000BB52                            ; ---------------------------------------------------------------------------
0000BB52                            
0000BB52                            Obj41:					; XREF: Obj_Index
0000BB52 7000                       		moveq	#0,d0
0000BB54 1028 0024                  		move.b	$24(a0),d0
0000BB58 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000BB5C 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000BB60 6100 FB38                  		bsr.w	DisplaySprite
0000BB64 3028 0008                  		move.w	8(a0),d0
0000BB68 0240 FF80                  		andi.w	#$FF80,d0
0000BB6C 3238 F700                  		move.w	($FFFFF700).w,d1
0000BB70 0441 0080                  		subi.w	#$80,d1
0000BB74 0241 FF80                  		andi.w	#$FF80,d1
0000BB7A 0C40 0280                  		cmpi.w	#$280,d0
0000BB7E 6200 FB56                  		bhi.w	DeleteObject
0000BB82 4E75                       		rts	
0000BB84                            ; ===========================================================================
0000BB84 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000BB86 0000                       		dc.w Obj41_Up-Obj41_Index
0000BB88 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000BB8A 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000BB8C 0000                       		dc.w Obj41_LR-Obj41_Index
0000BB8E 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000BB90 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000BB92 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000BB94 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000BB96 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000BB98                            
0000BB98 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000BB9A F600                       		dc.w -$A00		; power	of yellow spring
0000BB9C                            ; ===========================================================================
0000BB9C                            
0000BB9C                            Obj41_Main:				; XREF: Obj41_Index
0000BB9C 5428 0024                  		addq.b	#2,$24(a0)
0000BBA0 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000BBA8 317C 0523 0002             		move.w	#$523,2(a0)
0000BBAE 0028 0004 0001             		ori.b	#4,1(a0)
0000BBB4 117C 0010 0019             		move.b	#$10,$19(a0)
0000BBBA 117C 0004 0018             		move.b	#4,$18(a0)
0000BBC0 1028 0028                  		move.b	$28(a0),d0
0000BBC4 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000BBC8 6700                       		beq.s	loc_DB54	; if not, branch
0000BBCA 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000BBD0 117C 0001 001C             		move.b	#1,$1C(a0)
0000BBD6 117C 0003 001A             		move.b	#3,$1A(a0)
0000BBDC 317C 0533 0002             		move.w	#$533,2(a0)
0000BBE2 117C 0008 0019             		move.b	#8,$19(a0)
0000BBE8                            
0000BBE8                            loc_DB54:
0000BBE8 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000BBEC 6700                       		beq.s	loc_DB66	; if not, branch
0000BBEE 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000BBF4 08E8 0001 0022             		bset	#1,$22(a0)
0000BBFA                            
0000BBFA                            loc_DB66:
0000BBFA 0800 0001                  		btst	#1,d0
0000BBFE 6700                       		beq.s	loc_DB72
0000BC00 08E8 0005 0002             		bset	#5,2(a0)
0000BC06                            
0000BC06                            loc_DB72:
0000BC06 0240 000F                  		andi.w	#$F,d0
0000BC0A 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000BC10 4E75                       		rts	
0000BC12                            ; ===========================================================================
0000BC12                            
0000BC12                            Obj41_Up:				; XREF: Obj41_Index
0000BC12 323C 001B                  		move.w	#$1B,d1
0000BC16 343C 0008                  		move.w	#8,d2
0000BC1A 363C 0010                  		move.w	#$10,d3
0000BC1E 3828 0008                  		move.w	8(a0),d4
0000BC22 6100 0000                  		bsr.w	SolidObject
0000BC26 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000BC2A 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000BC2C 4E75                       		rts	
0000BC2E                            ; ===========================================================================
0000BC2E                            
0000BC2E                            Obj41_BounceUp:				; XREF: Obj41_Up
0000BC2E 5428 0024                  		addq.b	#2,$24(a0)
0000BC32 5069 000C                  		addq.w	#8,$C(a1)
0000BC36 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000BC3C 08E9 0001 0022             		bset	#1,$22(a1)
0000BC42 08A9 0003 0022             		bclr	#3,$22(a1)
0000BC48 137C 0002 001C             		move.b	#2,$1C(a1)	; use "bouncing" animation
0000BC4E 137C 0002 0024             		move.b	#2,$24(a1)
0000BC54 08A8 0003 0022             		bclr	#3,$22(a0)
0000BC5A 4228 0025                  		clr.b	$25(a0)
0000BC5E 303C 00CC                  		move.w	#$CC,d0
0000BC62 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play spring sound
0000BC68                            
0000BC68                            Obj41_AniUp:				; XREF: Obj41_Index
0000BC68 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000BC6E 6000 CB50                  		bra.w	AnimateSprite
0000BC72                            ; ===========================================================================
0000BC72                            
0000BC72                            Obj41_ResetUp:				; XREF: Obj41_Index
0000BC72 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000BC78 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000BC7C 4E75                       		rts	
0000BC7E                            ; ===========================================================================
0000BC7E                            
0000BC7E                            Obj41_LR:				; XREF: Obj41_Index
0000BC7E 323C 0013                  		move.w	#$13,d1
0000BC82 343C 000E                  		move.w	#$E,d2
0000BC86 363C 000F                  		move.w	#$F,d3
0000BC8A 3828 0008                  		move.w	8(a0),d4
0000BC8E 6100 0000                  		bsr.w	SolidObject
0000BC92 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000BC98 6600                       		bne.s	loc_DC0C
0000BC9A 117C 0008 0024             		move.b	#8,$24(a0)
0000BCA0                            
0000BCA0                            loc_DC0C:
0000BCA0 0828 0005 0022             		btst	#5,$22(a0)
0000BCA6 6600                       		bne.s	Obj41_BounceLR
0000BCA8 4E75                       		rts	
0000BCAA                            ; ===========================================================================
0000BCAA                            
0000BCAA                            Obj41_BounceLR:				; XREF: Obj41_LR
0000BCAA 5428 0024                  		addq.b	#2,$24(a0)
0000BCAE 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000BCB4 5069 0008                  		addq.w	#8,8(a1)
0000BCB8 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000BCBE 6600                       		bne.s	loc_DC36	; if yes, branch
0000BCC0 0469 0010 0008             		subi.w	#$10,8(a1)
0000BCC6 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000BCCA                            
0000BCCA                            loc_DC36:
0000BCCA 337C 000F 003E             		move.w	#$F,$3E(a1)
0000BCD0 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000BCD6 0869 0000 0022             		bchg	#0,$22(a1)
0000BCDC 0829 0002 0022             		btst	#2,$22(a1)
0000BCE2 6600                       		bne.s	loc_DC56
0000BCE4 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000BCEA                            
0000BCEA                            loc_DC56:
0000BCEA 08A8 0005 0022             		bclr	#5,$22(a0)
0000BCF0 08A9 0005 0022             		bclr	#5,$22(a1)
0000BCF6 303C 00CC                  		move.w	#$CC,d0
0000BCFA 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play spring sound
0000BD00                            
0000BD00                            Obj41_AniLR:				; XREF: Obj41_Index
0000BD00 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000BD06 6000 CAB8                  		bra.w	AnimateSprite
0000BD0A                            ; ===========================================================================
0000BD0A                            
0000BD0A                            Obj41_ResetLR:				; XREF: Obj41_Index
0000BD0A 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000BD10 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000BD14 4E75                       		rts	
0000BD16                            ; ===========================================================================
0000BD16                            
0000BD16                            Obj41_Dwn:				; XREF: Obj41_Index
0000BD16 323C 001B                  		move.w	#$1B,d1
0000BD1A 343C 0008                  		move.w	#8,d2
0000BD1E 363C 0010                  		move.w	#$10,d3
0000BD22 3828 0008                  		move.w	8(a0),d4
0000BD26 6100 0000                  		bsr.w	SolidObject
0000BD2A 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000BD30 6600                       		bne.s	loc_DCA4
0000BD32 117C 000E 0024             		move.b	#$E,$24(a0)
0000BD38                            
0000BD38                            loc_DCA4:
0000BD38 4A28 0025                  		tst.b	$25(a0)
0000BD3C 6600                       		bne.s	locret_DCAE
0000BD3E 4A44                       		tst.w	d4
0000BD40 6B00                       		bmi.s	Obj41_BounceDwn
0000BD42                            
0000BD42                            locret_DCAE:
0000BD42 4E75                       		rts	
0000BD44                            ; ===========================================================================
0000BD44                            
0000BD44                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000BD44 5428 0024                  		addq.b	#2,$24(a0)
0000BD48 5169 000C                  		subq.w	#8,$C(a1)
0000BD4C 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000BD52 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000BD56 08E9 0001 0022             		bset	#1,$22(a1)
0000BD5C 08A9 0003 0022             		bclr	#3,$22(a1)
0000BD62 137C 0002 0024             		move.b	#2,$24(a1)
0000BD68 08A8 0003 0022             		bclr	#3,$22(a0)
0000BD6E 4228 0025                  		clr.b	$25(a0)
0000BD72 303C 00CC                  		move.w	#$CC,d0
0000BD76 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play spring sound
0000BD7C                            
0000BD7C                            Obj41_AniDwn:				; XREF: Obj41_Index
0000BD7C 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000BD82 6000 CA3C                  		bra.w	AnimateSprite
0000BD86                            ; ===========================================================================
0000BD86                            
0000BD86                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000BD86 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000BD8C 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000BD90 4E75                       		rts	
0000BD92                            ; ===========================================================================
0000BD92                            Ani_obj41:
0000BD92                            	include "_anim\obj41.asm"
0000BD92                            ; ---------------------------------------------------------------------------
0000BD92                            ; Animation script - springs
0000BD92                            ; ---------------------------------------------------------------------------
0000BD92 0000                       		dc.w byte_DD02-Ani_obj41
0000BD94 0000                       		dc.w byte_DD0E-Ani_obj41
0000BD96 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000BDA2 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000BDAE                            		even
0000BDAE                            		even
0000BDAE                            
0000BDAE                            ; ---------------------------------------------------------------------------
0000BDAE                            ; Sprite mappings - springs
0000BDAE                            ; ---------------------------------------------------------------------------
0000BDAE                            Map_obj41:
0000BDAE                            	include "_maps\obj41.asm"
0000BDAE                            ; ---------------------------------------------------------------------------
0000BDAE                            ; Sprite mappings - springs
0000BDAE                            ; ---------------------------------------------------------------------------
0000BDAE 0000                       		dc.w byte_DD26-Map_obj41
0000BDB0 0000                       		dc.w byte_DD31-Map_obj41
0000BDB2 0000                       		dc.w byte_DD37-Map_obj41
0000BDB4 0000                       		dc.w byte_DD47-Map_obj41
0000BDB6 0000                       		dc.w byte_DD4D-Map_obj41
0000BDB8 0000                       		dc.w byte_DD53-Map_obj41
0000BDBA 02                         byte_DD26:	dc.b 2
0000BDBB F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000BDC0 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000BDC5 01                         byte_DD31:	dc.b 1
0000BDC6 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000BDCB 03                         byte_DD37:	dc.b 3
0000BDCC E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000BDD1 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000BDD6 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000BDDB 01                         byte_DD47:	dc.b 1
0000BDDC F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000BDE1 01                         byte_DD4D:	dc.b 1
0000BDE2 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000BDE7 04                         byte_DD53:	dc.b 4
0000BDE8 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000BDED F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000BDF2 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000BDF7 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000BDFC                            		even
0000BDFC                            		even
0000BDFC                            
0000BDFC                            ; ===========================================================================
0000BDFC                            ; ---------------------------------------------------------------------------
0000BDFC                            ; Object 42 - Newtron enemy (GHZ)
0000BDFC                            ; ---------------------------------------------------------------------------
0000BDFC                            
0000BDFC                            Obj42:					; XREF: Obj_Index
0000BDFC 7000                       		moveq	#0,d0
0000BDFE 1028 0024                  		move.b	$24(a0),d0
0000BE02 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000BE06 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000BE0A                            ; ===========================================================================
0000BE0A 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000BE0C 0000                       		dc.w Obj42_Action-Obj42_Index
0000BE0E 0000                       		dc.w Obj42_Delete-Obj42_Index
0000BE10                            ; ===========================================================================
0000BE10                            
0000BE10                            Obj42_Main:				; XREF: Obj42_Index
0000BE10 5428 0024                  		addq.b	#2,$24(a0)
0000BE14 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000BE1C 317C 049B 0002             		move.w	#$49B,2(a0)
0000BE22 117C 0004 0001             		move.b	#4,1(a0)
0000BE28 117C 0004 0018             		move.b	#4,$18(a0)
0000BE2E 117C 0014 0019             		move.b	#$14,$19(a0)
0000BE34 117C 0010 0016             		move.b	#$10,$16(a0)
0000BE3A 117C 0008 0017             		move.b	#8,$17(a0)
0000BE40                            
0000BE40                            Obj42_Action:				; XREF: Obj42_Index
0000BE40 7000                       		moveq	#0,d0
0000BE42 1028 0025                  		move.b	$25(a0),d0
0000BE46 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000BE4A 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000BE4E 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000BE54 6100 C96A                  		bsr.w	AnimateSprite
0000BE58 6000 0000                  		bra.w	MarkObjGone
0000BE5C                            ; ===========================================================================
0000BE5C 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000BE5E 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000BE60 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000BE62 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000BE64 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000BE66                            ; ===========================================================================
0000BE66                            
0000BE66                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000BE66 08E8 0000 0022             		bset	#0,$22(a0)
0000BE6C 3038 D008                  		move.w	($FFFFD008).w,d0
0000BE74 6400                       		bcc.s	loc_DDEA
0000BE76 4440                       		neg.w	d0
0000BE78 08A8 0000 0022             		bclr	#0,$22(a0)
0000BE7E                            
0000BE7E                            loc_DDEA:
0000BE7E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000BE82 6400                       		bcc.s	locret_DE12	; if not, branch
0000BE84 5428 0025                  		addq.b	#2,$25(a0)
0000BE88 117C 0001 001C             		move.b	#1,$1C(a0)
0000BE8E 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000BE92 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000BE94 317C 249B 0002             		move.w	#$249B,2(a0)
0000BE9A 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000BEA0 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000BEA6                            
0000BEA6                            locret_DE12:
0000BEA6 4E75                       		rts	
0000BEA8                            ; ===========================================================================
0000BEA8                            
0000BEA8                            Obj42_Type00:				; XREF: Obj42_Index2
0000BEA8 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000BEAE 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000BEB0 08E8 0000 0022             		bset	#0,$22(a0)
0000BEB6 3038 D008                  		move.w	($FFFFD008).w,d0
0000BEBE 6400                       		bcc.s	locret_DE32
0000BEC0 08A8 0000 0022             		bclr	#0,$22(a0)
0000BEC6                            
0000BEC6                            locret_DE32:
0000BEC6 4E75                       		rts	
0000BEC8                            ; ===========================================================================
0000BEC8                            
0000BEC8                            Obj42_Fall:				; XREF: Obj42_Type00
0000BEC8 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000BECE 6600                       		bne.s	loc_DE42
0000BED0 117C 000C 0020             		move.b	#$C,$20(a0)
0000BED6                            
0000BED6                            loc_DE42:
0000BED6 6100 F770                  		bsr.w	ObjectFall
0000BEDA 6100 0000                  		bsr.w	ObjHitFloor
0000BEDE 4A41                       		tst.w	d1		; has newtron hit the floor?
0000BEE0 6A00                       		bpl.s	locret_DE86	; if not, branch
0000BEE6 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000BEEC 5428 0025                  		addq.b	#2,$25(a0)
0000BEF0 117C 0002 001C             		move.b	#2,$1C(a0)
0000BEF6 0828 0005 0002             		btst	#5,2(a0)
0000BEFC 6700                       		beq.s	Obj42_Move
0000BEFE 5228 001C                  		addq.b	#1,$1C(a0)
0000BF02                            
0000BF02                            Obj42_Move:
0000BF02 117C 000D 0020             		move.b	#$D,$20(a0)
0000BF08 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000BF0E 0828 0000 0022             		btst	#0,$22(a0)
0000BF14 6600                       		bne.s	locret_DE86
0000BF16 4468 0010                  		neg.w	$10(a0)
0000BF1A                            
0000BF1A                            locret_DE86:
0000BF1A 4E75                       		rts	
0000BF1C                            ; ===========================================================================
0000BF1C                            
0000BF1C                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000BF1C 6100 F756                  		bsr.w	SpeedToPos
0000BF20 6100 0000                  		bsr.w	ObjHitFloor
0000BF24 0C41 FFF8                  		cmpi.w	#-8,d1
0000BF28 6D00                       		blt.s	loc_DEA2
0000BF2A 0C41 000C                  		cmpi.w	#$C,d1
0000BF2E 6C00                       		bge.s	loc_DEA2
0000BF34 4E75                       		rts	
0000BF36                            ; ===========================================================================
0000BF36                            
0000BF36                            loc_DEA2:
0000BF36 5428 0025                  		addq.b	#2,$25(a0)
0000BF3A 4E75                       		rts	
0000BF3C                            ; ===========================================================================
0000BF3C                            
0000BF3C                            Obj42_Speed:				; XREF: Obj42_Index2
0000BF3C 6100 F736                  		bsr.w	SpeedToPos
0000BF40 4E75                       		rts	
0000BF42                            ; ===========================================================================
0000BF42                            
0000BF42                            Obj42_Type01:				; XREF: Obj42_Index2
0000BF42 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000BF48 6600                       		bne.s	Obj42_FireMissile
0000BF4A 117C 000C 0020             		move.b	#$C,$20(a0)
0000BF50                            
0000BF50                            Obj42_FireMissile:
0000BF50 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000BF56 6600                       		bne.s	locret_DF14
0000BF58 4A28 0032                  		tst.b	$32(a0)
0000BF5C 6600                       		bne.s	locret_DF14
0000BF5E 117C 0001 0032             		move.b	#1,$32(a0)
0000BF64 6100 FBBA                  		bsr.w	SingleObjLoad
0000BF68 6600                       		bne.s	locret_DF14
0000BF6A 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000BF6E 3368 0008 0008             		move.w	8(a0),8(a1)
0000BF74 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BF7A 5169 000C                  		subq.w	#8,$C(a1)
0000BF7E 337C 0200 0010             		move.w	#$200,$10(a1)
0000BF84 303C 0014                  		move.w	#$14,d0
0000BF88 0828 0000 0022             		btst	#0,$22(a0)
0000BF8E 6600                       		bne.s	loc_DF04
0000BF90 4440                       		neg.w	d0
0000BF92 4469 0010                  		neg.w	$10(a1)
0000BF96                            
0000BF96                            loc_DF04:
0000BF9A 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000BFA0 137C 0001 0028             		move.b	#1,$28(a1)
0000BFA6                            
0000BFA6                            locret_DF14:
0000BFA6 4E75                       		rts	
0000BFA8                            ; ===========================================================================
0000BFA8                            
0000BFA8                            Obj42_Delete:				; XREF: Obj42_Index
0000BFA8 6000 F72C                  		bra.w	DeleteObject
0000BFAC                            ; ===========================================================================
0000BFAC                            Ani_obj42:
0000BFAC                            	include "_anim\obj42.asm"
0000BFAC                            ; ---------------------------------------------------------------------------
0000BFAC                            ; Animation script - Newtron enemy
0000BFAC                            ; ---------------------------------------------------------------------------
0000BFAC 0000                       		dc.w byte_DF24-Ani_obj42
0000BFAE 0000                       		dc.w byte_DF28-Ani_obj42
0000BFB0 0000                       		dc.w byte_DF30-Ani_obj42
0000BFB2 0000                       		dc.w byte_DF34-Ani_obj42
0000BFB4 0000                       		dc.w byte_DF38-Ani_obj42
0000BFB6 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000BFBA 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000BFC2 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000BFC6 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000BFCA 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000BFD4                            		even
0000BFD4                            		even
0000BFD4                            
0000BFD4                            ; ---------------------------------------------------------------------------
0000BFD4                            ; Sprite mappings - Newtron enemy (GHZ)
0000BFD4                            ; ---------------------------------------------------------------------------
0000BFD4                            Map_obj42:
0000BFD4                            	include "_maps\obj42.asm"
0000BFD4                            ; ---------------------------------------------------------------------------
0000BFD4                            ; Sprite mappings - Newtron enemy (GHZ)
0000BFD4                            ; ---------------------------------------------------------------------------
0000BFD4 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000BFD8 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000BFDC 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000BFE0 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000BFE4 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000BFE8 0000                       		dc.w byte_DFF8-Map_obj42
0000BFEA 03                         byte_DF58:	dc.b 3
0000BFEB EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000BFF0 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000BFF5 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000BFFA 03                         byte_DF68:	dc.b 3
0000BFFB EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000C000 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000C005 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000C00A 03                         byte_DF78:	dc.b 3
0000C00B EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000C010 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000C015 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000C01A 04                         byte_DF88:	dc.b 4
0000C01B EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000C020 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000C025 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000C02A 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000C02F 03                         byte_DF9D:	dc.b 3
0000C030 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000C035 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000C03A 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000C03F 02                         byte_DFAD:	dc.b 2
0000C040 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000C045 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000C04A 03                         byte_DFB8:	dc.b 3
0000C04B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000C050 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000C055 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000C05A 03                         byte_DFC8:	dc.b 3
0000C05B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000C060 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000C065 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000C06A 03                         byte_DFD8:	dc.b 3
0000C06B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000C070 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000C075 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000C07A 03                         byte_DFE8:	dc.b 3
0000C07B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000C080 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000C085 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000C08A 00                         byte_DFF8:	dc.b 0
0000C08C 00                         		even
0000C08C 00                         		even
0000C08C                            
0000C08C                            ; ===========================================================================
0000C08C                            ; ---------------------------------------------------------------------------
0000C08C                            ; Object 43 - Roller enemy (SYZ)
0000C08C                            ; ---------------------------------------------------------------------------
0000C08C                            
0000C08C                            Obj43:					; XREF: Obj_Index
0000C08C 7000                       		moveq	#0,d0
0000C08E 1028 0024                  		move.b	$24(a0),d0
0000C092 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000C096 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000C09A                            ; ===========================================================================
0000C09A 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000C09C 0000                       		dc.w Obj43_Action-Obj43_Index
0000C09E                            ; ===========================================================================
0000C09E                            
0000C09E                            Obj43_Main:				; XREF: Obj43_Index
0000C09E 117C 000E 0016             		move.b	#$E,$16(a0)
0000C0A4 117C 0008 0017             		move.b	#8,$17(a0)
0000C0AA 6100 F59C                  		bsr.w	ObjectFall
0000C0AE 6100 0000                  		bsr.w	ObjHitFloor
0000C0B2 4A41                       		tst.w	d1
0000C0B4 6A00                       		bpl.s	locret_E052
0000C0BA 317C 0000 0012             		move.w	#0,$12(a0)
0000C0C0 5428 0024                  		addq.b	#2,$24(a0)
0000C0C4 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000C0CC 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000C0D2 117C 0004 0001             		move.b	#4,1(a0)
0000C0D8 117C 0004 0018             		move.b	#4,$18(a0)
0000C0DE 117C 0010 0019             		move.b	#$10,$19(a0)
0000C0E4                            
0000C0E4                            locret_E052:
0000C0E4 4E75                       		rts	
0000C0E6                            ; ===========================================================================
0000C0E6                            
0000C0E6                            Obj43_Action:				; XREF: Obj43_Index
0000C0E6 7000                       		moveq	#0,d0
0000C0E8 1028 0025                  		move.b	$25(a0),d0
0000C0EC 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000C0F0 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000C0F4 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000C0FA 6100 C6C4                  		bsr.w	AnimateSprite
0000C0FE 3028 0008                  		move.w	8(a0),d0
0000C102 0240 FF80                  		andi.w	#$FF80,d0
0000C106 3238 F700                  		move.w	($FFFFF700).w,d1
0000C10A 0441 0080                  		subi.w	#$80,d1
0000C10E 0241 FF80                  		andi.w	#$FF80,d1
0000C114 0C40 0280                  		cmpi.w	#$280,d0
0000C118 6E00 0000                  		bgt.w	Obj43_ChkGone
0000C11C 6000 F57C                  		bra.w	DisplaySprite
0000C120                            ; ===========================================================================
0000C120                            
0000C120                            Obj43_ChkGone:				; XREF: Obj43_Action
0000C120 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C124 7000                       		moveq	#0,d0
0000C126 1028 0023                  		move.b	$23(a0),d0
0000C12A 6700                       		beq.s	Obj43_Delete
0000C12C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C132                            
0000C132                            Obj43_Delete:
0000C132 6000 F5A2                  		bra.w	DeleteObject
0000C136                            ; ===========================================================================
0000C136 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000C138 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000C13A 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000C13C 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000C13E                            ; ===========================================================================
0000C13E                            
0000C13E                            Obj43_RollChk:				; XREF: Obj43_Index2
0000C13E 3038 D008                  		move.w	($FFFFD008).w,d0
0000C142 0440 0100                  		subi.w	#$100,d0
0000C146 6500                       		bcs.s	loc_E0D2
0000C14C 6500                       		bcs.s	loc_E0D2
0000C14E 5828 0025                  		addq.b	#4,$25(a0)
0000C152 117C 0002 001C             		move.b	#2,$1C(a0)
0000C158 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000C15E 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000C164                            
0000C164                            loc_E0D2:
0000C164 588F                       		addq.l	#4,sp
0000C166 4E75                       		rts	
0000C168                            ; ===========================================================================
0000C168                            
0000C168                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000C168 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000C16E 6700                       		beq.s	loc_E0F8
0000C170 5368 0030                  		subq.w	#1,$30(a0)
0000C174 6A00                       		bpl.s	locret_E0F6
0000C176 117C 0001 001C             		move.b	#1,$1C(a0)
0000C17C 317C 0700 0010             		move.w	#$700,$10(a0)
0000C182 117C 008E 0020             		move.b	#$8E,$20(a0)
0000C188                            
0000C188                            locret_E0F6:
0000C188 4E75                       		rts	
0000C18A                            ; ===========================================================================
0000C18A                            
0000C18A                            loc_E0F8:
0000C18A 5428 0025                  		addq.b	#2,$25(a0)
0000C18E 4E75                       		rts	
0000C190                            ; ===========================================================================
0000C190                            
0000C190                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000C190 6100 0000                  		bsr.w	Obj43_Stop
0000C194 6100 F4DE                  		bsr.w	SpeedToPos
0000C198 6100 0000                  		bsr.w	ObjHitFloor
0000C19C 0C41 FFF8                  		cmpi.w	#-8,d1
0000C1A0 6D00                       		blt.s	Obj43_Jump
0000C1A2 0C41 000C                  		cmpi.w	#$C,d1
0000C1A6 6C00                       		bge.s	Obj43_Jump
0000C1AC 4E75                       		rts	
0000C1AE                            ; ===========================================================================
0000C1AE                            
0000C1AE                            Obj43_Jump:
0000C1AE 5428 0025                  		addq.b	#2,$25(a0)
0000C1B2 08E8 0000 0032             		bset	#0,$32(a0)
0000C1B8 6700                       		beq.s	locret_E12E
0000C1BA 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000C1C0                            
0000C1C0                            locret_E12E:
0000C1C0 4E75                       		rts	
0000C1C2                            ; ===========================================================================
0000C1C2                            
0000C1C2                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000C1C2 6100 F484                  		bsr.w	ObjectFall
0000C1C6 4A68 0012                  		tst.w	$12(a0)
0000C1CA 6B00                       		bmi.s	locret_E150
0000C1CC 6100 0000                  		bsr.w	ObjHitFloor
0000C1D0 4A41                       		tst.w	d1
0000C1D2 6A00                       		bpl.s	locret_E150
0000C1D8 5528 0025                  		subq.b	#2,$25(a0)
0000C1DC 317C 0000 0012             		move.w	#0,$12(a0)
0000C1E2                            
0000C1E2                            locret_E150:
0000C1E2 4E75                       		rts	
0000C1E4                            
0000C1E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C1E4                            
0000C1E4                            
0000C1E4                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000C1E4 4A28 0032                  		tst.b	$32(a0)
0000C1E8 6B00                       		bmi.s	locret_E188
0000C1EA 3038 D008                  		move.w	($FFFFD008).w,d0
0000C1EE 0440 0030                  		subi.w	#$30,d0
0000C1F6 6400                       		bcc.s	locret_E188
0000C1F8 117C 0000 001C             		move.b	#0,$1C(a0)
0000C1FE 117C 000E 0020             		move.b	#$E,$20(a0)
0000C204 4268 0010                  		clr.w	$10(a0)
0000C208 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000C20E 117C 0002 0025             		move.b	#2,$25(a0)
0000C214 08E8 0007 0032             		bset	#7,$32(a0)
0000C21A                            
0000C21A                            locret_E188:
0000C21A 4E75                       		rts	
0000C21C                            ; End of function Obj43_Stop
0000C21C                            
0000C21C                            ; ===========================================================================
0000C21C                            Ani_obj43:
0000C21C                            	include "_anim\obj43.asm"
0000C21C                            ; ---------------------------------------------------------------------------
0000C21C                            ; Animation script - Roller enemy
0000C21C                            ; ---------------------------------------------------------------------------
0000C21C 0000                       		dc.w byte_E190-Ani_obj43
0000C21E 0000                       		dc.w byte_E196-Ani_obj43
0000C220 0000                       		dc.w byte_E19C-Ani_obj43
0000C222 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000C228 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000C22E 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000C234 00                         		even
0000C234 00                         		even
0000C234                            
0000C234                            ; ---------------------------------------------------------------------------
0000C234                            ; Sprite mappings - Roller enemy (SYZ)
0000C234                            ; ---------------------------------------------------------------------------
0000C234                            Map_obj43:
0000C234                            	include "_maps\obj43.asm"
0000C234                            ; ---------------------------------------------------------------------------
0000C234                            ; Sprite mappings - Roller enemy (SYZ)
0000C234                            ; ---------------------------------------------------------------------------
0000C234 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000C238 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000C23C 0000                       		dc.w byte_E1CE-Map_obj43
0000C23E 02                         byte_E1AC:	dc.b 2
0000C23F DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000C244 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000C249 02                         byte_E1B7:	dc.b 2
0000C24A E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000C24F FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000C254 01                         byte_E1C2:	dc.b 1
0000C255 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000C25A 01                         byte_E1C8:	dc.b 1
0000C25B F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000C260 01                         byte_E1CE:	dc.b 1
0000C261 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000C266                            		even
0000C266                            		even
0000C266                            
0000C266                            ; ===========================================================================
0000C266                            ; ---------------------------------------------------------------------------
0000C266                            ; Object 44 - walls (GHZ)
0000C266                            ; ---------------------------------------------------------------------------
0000C266                            
0000C266                            Obj44:					; XREF: Obj_Index
0000C266 7000                       		moveq	#0,d0
0000C268 1028 0024                  		move.b	$24(a0),d0
0000C26C 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000C270 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000C274                            ; ===========================================================================
0000C274 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000C276 0000                       		dc.w Obj44_Solid-Obj44_Index
0000C278 0000                       		dc.w Obj44_Display-Obj44_Index
0000C27A                            ; ===========================================================================
0000C27A                            
0000C27A                            Obj44_Main:				; XREF: Obj44_Index
0000C27A 5428 0024                  		addq.b	#2,$24(a0)
0000C27E 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000C286 317C 434C 0002             		move.w	#$434C,2(a0)
0000C28C 0028 0004 0001             		ori.b	#4,1(a0)
0000C292 117C 0008 0019             		move.b	#8,$19(a0)
0000C298 117C 0006 0018             		move.b	#6,$18(a0)
0000C29E 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000C2A4 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000C2AA 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000C2AC 5428 0024                  		addq.b	#2,$24(a0)
0000C2B0 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000C2B2                            ; ===========================================================================
0000C2B2                            
0000C2B2                            Obj44_Solid:				; XREF: Obj44_Index
0000C2B2 323C 0013                  		move.w	#$13,d1
0000C2B6 343C 0028                  		move.w	#$28,d2
0000C2BA 6100 A86C                  		bsr.w	Obj44_SolidWall
0000C2BE                            
0000C2BE                            Obj44_Display:				; XREF: Obj44_Index
0000C2BE 6100 F3DA                  		bsr.w	DisplaySprite
0000C2C2 3028 0008                  		move.w	8(a0),d0
0000C2C6 0240 FF80                  		andi.w	#$FF80,d0
0000C2CA 3238 F700                  		move.w	($FFFFF700).w,d1
0000C2CE 0441 0080                  		subi.w	#$80,d1
0000C2D2 0241 FF80                  		andi.w	#$FF80,d1
0000C2D8 0C40 0280                  		cmpi.w	#$280,d0
0000C2DC 6200 F3F8                  		bhi.w	DeleteObject
0000C2E0 4E75                       		rts	
0000C2E2                            ; ===========================================================================
0000C2E2                            ; ---------------------------------------------------------------------------
0000C2E2                            ; Sprite mappings - walls (GHZ)
0000C2E2                            ; ---------------------------------------------------------------------------
0000C2E2                            Map_obj44:
0000C2E2                            	include "_maps\obj44.asm"
0000C2E2                            ; ---------------------------------------------------------------------------
0000C2E2                            ; Sprite mappings - walls (GHZ)
0000C2E2                            ; ---------------------------------------------------------------------------
0000C2E2 0000                       		dc.w byte_E256-Map_obj44
0000C2E4 0000                       		dc.w byte_E26B-Map_obj44
0000C2E6 0000                       		dc.w byte_E280-Map_obj44
0000C2E8 04                         byte_E256:	dc.b 4
0000C2E9 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000C2EE F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000C2F3 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000C2F8 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000C2FD 04                         byte_E26B:	dc.b 4
0000C2FE E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000C303 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000C308 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000C30D 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000C312 04                         byte_E280:	dc.b 4
0000C313 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000C318 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000C31D 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000C322 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000C328 00                         		even
0000C328 00                         		even
0000C328                            
0000C328                            ; ===========================================================================
0000C328                            ; ---------------------------------------------------------------------------
0000C328                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000C328                            ; ---------------------------------------------------------------------------
0000C328                            
0000C328                            Obj13:					; XREF: Obj_Index
0000C328 7000                       		moveq	#0,d0
0000C32A 1028 0024                  		move.b	$24(a0),d0
0000C32E 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000C332 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000C336 6000 0000                  		bra.w	Obj14_ChkDel
0000C33A                            ; ===========================================================================
0000C33A 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000C33C 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000C33E                            ; ---------------------------------------------------------------------------
0000C33E                            ;
0000C33E                            ; Lava ball production rates
0000C33E                            ;
0000C33E 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000C344                            ; ===========================================================================
0000C344                            
0000C344                            Obj13_Main:				; XREF: Obj13_Index
0000C344 5428 0024                  		addq.b	#2,$24(a0)
0000C348 1028 0028                  		move.b	$28(a0),d0
0000C34C E848                       		lsr.w	#4,d0
0000C34E 0240 000F                  		andi.w	#$F,d0
0000C352 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000C358 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000C35E 0228 000F 0028             		andi.b	#$F,$28(a0)
0000C364                            
0000C364                            Obj13_MakeLava:				; XREF: Obj13_Index
0000C364 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000C368 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000C36A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000C370 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000C374 6600                       		bne.s	locret_E302
0000C376 6100 F7A8                  		bsr.w	SingleObjLoad
0000C37A 6600                       		bne.s	locret_E302
0000C37C 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000C380 3368 0008 0008             		move.w	8(a0),8(a1)
0000C386 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C38C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C392                            
0000C392                            locret_E302:
0000C392 4E75                       		rts	
0000C394                            ; ===========================================================================
0000C394                            ; ---------------------------------------------------------------------------
0000C394                            ; Object 14 - lava balls (MZ, SLZ)
0000C394                            ; ---------------------------------------------------------------------------
0000C394                            
0000C394                            Obj14:					; XREF: Obj_Index
0000C394 7000                       		moveq	#0,d0
0000C396 1028 0024                  		move.b	$24(a0),d0
0000C39A 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000C39E 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000C3A2 6000 F2F6                  		bra.w	DisplaySprite
0000C3A6                            ; ===========================================================================
0000C3A6 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000C3A8 0000                       		dc.w Obj14_Action-Obj14_Index
0000C3AA 0000                       		dc.w Obj14_Delete-Obj14_Index
0000C3AC                            
0000C3AC FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000C3B6 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000C3BE                            ; ===========================================================================
0000C3BE                            
0000C3BE                            Obj14_Main:				; XREF: Obj14_Index
0000C3BE 5428 0024                  		addq.b	#2,$24(a0)
0000C3C2 117C 0008 0016             		move.b	#8,$16(a0)
0000C3C8 117C 0008 0017             		move.b	#8,$17(a0)
0000C3CE 217C 0000 9412 0004        		move.l	#Map_obj14,4(a0)
0000C3D6 317C 0345 0002             		move.w	#$345,2(a0)
0000C3DC 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000C3E2 6600                       		bne.s	loc_E35A
0000C3E4 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000C3EA                            
0000C3EA                            loc_E35A:
0000C3EA 117C 0004 0001             		move.b	#4,1(a0)
0000C3F0 117C 0003 0018             		move.b	#3,$18(a0)
0000C3F6 117C 008B 0020             		move.b	#$8B,$20(a0)
0000C3FC 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000C402 4A28 0029                  		tst.b	$29(a0)
0000C406 6700                       		beq.s	Obj14_SetSpeed
0000C408 5428 0018                  		addq.b	#2,$18(a0)
0000C40C                            
0000C40C                            Obj14_SetSpeed:
0000C40C 7000                       		moveq	#0,d0
0000C40E 1028 0028                  		move.b	$28(a0),d0
0000C414 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000C41A 117C 0008 0019             		move.b	#8,$19(a0)
0000C420 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000C426 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000C428 117C 0010 0019             		move.b	#$10,$19(a0)
0000C42E 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000C434 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000C43A 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000C440                            
0000C440                            Obj14_PlaySnd:
0000C440 303C 00AE                  		move.w	#$AE,d0
0000C444 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000C44A                            
0000C44A                            Obj14_Action:				; XREF: Obj14_Index
0000C44A 7000                       		moveq	#0,d0
0000C44C 1028 0028                  		move.b	$28(a0),d0
0000C452 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000C456 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000C45A 6100 F218                  		bsr.w	SpeedToPos
0000C45E 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000C464 6100 C35A                  		bsr.w	AnimateSprite
0000C468                            
0000C468                            Obj14_ChkDel:				; XREF: Obj13
0000C468 3028 0008                  		move.w	8(a0),d0
0000C46C 0240 FF80                  		andi.w	#$FF80,d0
0000C470 3238 F700                  		move.w	($FFFFF700).w,d1
0000C474 0441 0080                  		subi.w	#$80,d1
0000C478 0241 FF80                  		andi.w	#$FF80,d1
0000C47E 0C40 0280                  		cmpi.w	#$280,d0
0000C482 6200 F252                  		bhi.w	DeleteObject
0000C486 4E75                       		rts	
0000C488                            ; ===========================================================================
0000C488 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000C48C 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000C490 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000C494 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000C498 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000C49A                            ; ===========================================================================
0000C49A                            ; lavaball types 00-03 fly up and fall back down
0000C49A                            
0000C49A                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000C49A 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000C4A0 3028 0030                  		move.w	$30(a0),d0
0000C4A4 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000C4A8 6400                       		bcc.s	loc_E41E	; if not, branch
0000C4AA 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000C4AE                            
0000C4AE                            loc_E41E:
0000C4AE 08A8 0001 0022             		bclr	#1,$22(a0)
0000C4B4 4A68 0012                  		tst.w	$12(a0)
0000C4B8 6A00                       		bpl.s	locret_E430
0000C4BA 08E8 0001 0022             		bset	#1,$22(a0)
0000C4C0                            
0000C4C0                            locret_E430:
0000C4C0 4E75                       		rts	
0000C4C2                            ; ===========================================================================
0000C4C2                            ; lavaball type	04 flies up until it hits the ceiling
0000C4C2                            
0000C4C2                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000C4C2 08E8 0001 0022             		bset	#1,$22(a0)
0000C4C8 6100 0000                  		bsr.w	ObjHitCeiling
0000C4CC 4A41                       		tst.w	d1
0000C4CE 6A00                       		bpl.s	locret_E452
0000C4D0 117C 0008 0028             		move.b	#8,$28(a0)
0000C4D6 117C 0001 001C             		move.b	#1,$1C(a0)
0000C4DC 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000C4E2                            
0000C4E2                            locret_E452:
0000C4E2 4E75                       		rts	
0000C4E4                            ; ===========================================================================
0000C4E4                            ; lavaball type	05 falls down until it hits the	floor
0000C4E4                            
0000C4E4                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000C4E4 08A8 0001 0022             		bclr	#1,$22(a0)
0000C4EA 6100 0000                  		bsr.w	ObjHitFloor
0000C4EE 4A41                       		tst.w	d1
0000C4F0 6A00                       		bpl.s	locret_E474
0000C4F2 117C 0008 0028             		move.b	#8,$28(a0)
0000C4F8 117C 0001 001C             		move.b	#1,$1C(a0)
0000C4FE 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000C504                            
0000C504                            locret_E474:
0000C504 4E75                       		rts	
0000C506                            ; ===========================================================================
0000C506                            ; lavaball types 06-07 move sideways
0000C506                            
0000C506                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000C506 08E8 0000 0022             		bset	#0,$22(a0)
0000C50C 76F8                       		moveq	#-8,d3
0000C50E 6100 0000                  		bsr.w	ObjHitWallLeft
0000C512 4A41                       		tst.w	d1
0000C514 6A00                       		bpl.s	locret_E498
0000C516 117C 0008 0028             		move.b	#8,$28(a0)
0000C51C 117C 0003 001C             		move.b	#3,$1C(a0)
0000C522 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000C528                            
0000C528                            locret_E498:
0000C528 4E75                       		rts	
0000C52A                            ; ===========================================================================
0000C52A                            
0000C52A                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000C52A 08A8 0000 0022             		bclr	#0,$22(a0)
0000C530 7608                       		moveq	#8,d3
0000C532 6100 0000                  		bsr.w	ObjHitWallRight
0000C536 4A41                       		tst.w	d1
0000C538 6A00                       		bpl.s	locret_E4BC
0000C53A 117C 0008 0028             		move.b	#8,$28(a0)
0000C540 117C 0003 001C             		move.b	#3,$1C(a0)
0000C546 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000C54C                            
0000C54C                            locret_E4BC:
0000C54C 4E75                       		rts	
0000C54E                            ; ===========================================================================
0000C54E                            
0000C54E                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000C54E 4E75                       		rts	
0000C550                            ; ===========================================================================
0000C550                            
0000C550                            Obj14_Delete:				; XREF: Obj14_Index
0000C550 6000 F184                  		bra.w	DeleteObject
0000C554                            ; ===========================================================================
0000C554                            Ani_obj14:
0000C554                            	include "_anim\obj14.asm"
0000C554                            ; ---------------------------------------------------------------------------
0000C554                            ; Animation script - lava balls
0000C554                            ; ---------------------------------------------------------------------------
0000C554 0000                       		dc.w byte_E4CC-Ani_obj14
0000C556 0000                       		dc.w byte_E4D2-Ani_obj14
0000C558 0000                       		dc.w byte_E4D6-Ani_obj14
0000C55A 0000                       		dc.w byte_E4DC-Ani_obj14
0000C55C 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000C562 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000C566 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000C56C 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000C570                            		even
0000C570                            		even
0000C570                            
0000C570                            ; ===========================================================================
0000C570                            ; ---------------------------------------------------------------------------
0000C570                            ; Object 6D - flame thrower (SBZ)
0000C570                            ; ---------------------------------------------------------------------------
0000C570                            
0000C570                            Obj6D:					; XREF: Obj_Index
0000C570 7000                       		moveq	#0,d0
0000C572 1028 0024                  		move.b	$24(a0),d0
0000C576 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000C57A 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000C57E                            ; ===========================================================================
0000C57E 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000C580 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000C582                            ; ===========================================================================
0000C582                            
0000C582                            Obj6D_Main:				; XREF: Obj6D_Index
0000C582 5428 0024                  		addq.b	#2,$24(a0)
0000C586 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000C58E 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000C594 0028 0004 0001             		ori.b	#4,1(a0)
0000C59A 117C 0001 0018             		move.b	#1,$18(a0)
0000C5A0 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000C5A6 117C 000C 0019             		move.b	#$C,$19(a0)
0000C5AC 1028 0028                  		move.b	$28(a0),d0
0000C5B0 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000C5B6 3140 0030                  		move.w	d0,$30(a0)
0000C5BA 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000C5BE 1028 0028                  		move.b	$28(a0),d0
0000C5C2 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000C5C6 EB48                       		lsl.w	#5,d0		; multiply by $20
0000C5C8 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000C5CC 117C 000A 0036             		move.b	#$A,$36(a0)
0000C5D2 0828 0001 0022             		btst	#1,$22(a0)
0000C5D8 6700                       		beq.s	Obj6D_Action
0000C5DA 117C 0002 001C             		move.b	#2,$1C(a0)
0000C5E0 117C 0015 0036             		move.b	#$15,$36(a0)
0000C5E6                            
0000C5E6                            Obj6D_Action:				; XREF: Obj6D_Index
0000C5E6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000C5EA 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000C5EC 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000C5F2 0868 0000 001C             		bchg	#0,$1C(a0)
0000C5F8 6700                       		beq.s	loc_E57A
0000C5FA 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000C600 303C 00B3                  		move.w	#$B3,d0
0000C604 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play flame sound
0000C60A                            
0000C60A                            loc_E57A:
0000C60A 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000C610 6100 C1AE                  		bsr.w	AnimateSprite
0000C614 117C 0000 0020             		move.b	#0,$20(a0)
0000C61A 1028 0036                  		move.b	$36(a0),d0
0000C61E B028 001A                  		cmp.b	$1A(a0),d0
0000C622 6600                       		bne.s	Obj6D_ChkDel
0000C624 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000C62A                            
0000C62A                            Obj6D_ChkDel:
0000C62A 3028 0008                  		move.w	8(a0),d0
0000C62E 0240 FF80                  		andi.w	#$FF80,d0
0000C632 3238 F700                  		move.w	($FFFFF700).w,d1
0000C636 0441 0080                  		subi.w	#$80,d1
0000C63A 0241 FF80                  		andi.w	#$FF80,d1
0000C640 0C40 0280                  		cmpi.w	#$280,d0
0000C644 6200 F090                  		bhi.w	DeleteObject
0000C648 6000 F050                  		bra.w	DisplaySprite
0000C64C                            ; ===========================================================================
0000C64C                            Ani_obj6D:
0000C64C                            	include "_anim\obj6D.asm"
0000C64C                            ; ---------------------------------------------------------------------------
0000C64C                            ; Animation script - flamethrower (SBZ)
0000C64C                            ; ---------------------------------------------------------------------------
0000C64C 0000                       		dc.w byte_E5C4-Ani_obj6D
0000C64E 0000                       		dc.w byte_E5D2-Ani_obj6D
0000C650 0000                       		dc.w byte_E5DC-Ani_obj6D
0000C652 0000                       		dc.w byte_E5EA-Ani_obj6D
0000C654 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000C662 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000C66C 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000C67A 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000C684                            		even
0000C684                            		even
0000C684                            
0000C684                            ; ---------------------------------------------------------------------------
0000C684                            ; Sprite mappings - flame thrower (SBZ)
0000C684                            ; ---------------------------------------------------------------------------
0000C684                            Map_obj6D:
0000C684                            	include "_maps\obj6D.asm"
0000C684                            ; ---------------------------------------------------------------------------
0000C684                            ; Sprite mappings - flame thrower (SBZ)
0000C684                            ; ---------------------------------------------------------------------------
0000C684 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000C688 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000C68C 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000C690 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000C694 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000C698 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000C69C 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000C6A0 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000C6A4 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000C6A8 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000C6AC 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000C6B0 01                         byte_E620:	dc.b 1
0000C6B1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000C6B6 02                         byte_E626:	dc.b 2
0000C6B7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000C6BC 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000C6C1 02                         byte_E631:	dc.b 2
0000C6C2 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000C6C7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000C6CC 03                         byte_E63C:	dc.b 3
0000C6CD 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000C6D2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000C6D7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000C6DC 03                         byte_E64C:	dc.b 3
0000C6DD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000C6E2 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000C6E7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000C6EC 04                         byte_E65C:	dc.b 4
0000C6ED 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000C6F2 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000C6F7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000C6FC 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000C701 04                         byte_E671:	dc.b 4
0000C702 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000C707 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000C70C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000C711 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000C716 05                         byte_E686:	dc.b 5
0000C717 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000C71C 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000C721 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000C726 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000C72B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000C730 05                         byte_E6A0:	dc.b 5
0000C731 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000C736 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000C73B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000C740 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000C745 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000C74A 06                         byte_E6BA:	dc.b 6
0000C74B E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000C750 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000C755 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000C75A 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000C75F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000C764 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000C769 06                         byte_E6D9:	dc.b 6
0000C76A E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000C76F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000C774 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000C779 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000C77E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000C783 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000C788 01                         byte_E6F8:	dc.b 1
0000C789 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000C78E 02                         byte_E6FE:	dc.b 2
0000C78F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000C794 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000C799 02                         byte_E709:	dc.b 2
0000C79A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000C79F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000C7A4 03                         byte_E714:	dc.b 3
0000C7A5 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000C7AA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000C7AF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000C7B4 03                         byte_E724:	dc.b 3
0000C7B5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000C7BA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000C7BF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000C7C4 04                         byte_E734:	dc.b 4
0000C7C5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000C7CA 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000C7CF 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000C7D4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000C7D9 04                         byte_E749:	dc.b 4
0000C7DA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000C7DF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000C7E4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000C7E9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000C7EE 05                         byte_E75E:	dc.b 5
0000C7EF F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000C7F4 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000C7F9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000C7FE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000C803 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000C808 05                         byte_E778:	dc.b 5
0000C809 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000C80E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000C813 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000C818 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000C81D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000C822 06                         byte_E792:	dc.b 6
0000C823 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000C828 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000C82D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000C832 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000C837 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000C83C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000C841 06                         byte_E7B1:	dc.b 6
0000C842 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000C847 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000C84C 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000C851 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000C856 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000C85B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000C860                            		even
0000C860                            		even
0000C860                            
0000C860                            ; ===========================================================================
0000C860                            ; ---------------------------------------------------------------------------
0000C860                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000C860                            ; ---------------------------------------------------------------------------
0000C860                            
0000C860                            Obj46:					; XREF: Obj_Index
0000C860 7000                       		moveq	#0,d0
0000C862 1028 0024                  		move.b	$24(a0),d0
0000C866 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000C86A 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000C86E                            ; ===========================================================================
0000C86E 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000C870 0000                       		dc.w Obj46_Action-Obj46_Index
0000C872                            ; ===========================================================================
0000C872                            
0000C872                            Obj46_Main:				; XREF: Obj46_Index
0000C872 5428 0024                  		addq.b	#2,$24(a0)
0000C876 117C 000F 0016             		move.b	#$F,$16(a0)
0000C87C 117C 000F 0017             		move.b	#$F,$17(a0)
0000C882 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000C88A 317C 4000 0002             		move.w	#$4000,2(a0)
0000C890 117C 0004 0001             		move.b	#4,1(a0)
0000C896 117C 0003 0018             		move.b	#3,$18(a0)
0000C89C 117C 0010 0019             		move.b	#$10,$19(a0)
0000C8A2 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000C8A8 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000C8AE                            
0000C8AE                            Obj46_Action:				; XREF: Obj46_Index
0000C8AE 4A28 0001                  		tst.b	1(a0)
0000C8B2 6A00                       		bpl.s	Obj46_ChkDel
0000C8B4 7000                       		moveq	#0,d0
0000C8B6 1028 0028                  		move.b	$28(a0),d0	; get object type
0000C8BA 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000C8C0 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000C8C4 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000C8C8 323C 001B                  		move.w	#$1B,d1
0000C8CC 343C 0010                  		move.w	#$10,d2
0000C8D0 363C 0011                  		move.w	#$11,d3
0000C8D4 3828 0008                  		move.w	8(a0),d4
0000C8D8 6100 0000                  		bsr.w	SolidObject
0000C8DC                            
0000C8DC                            Obj46_ChkDel:
0000C8DC 6100 EDBC                  		bsr.w	DisplaySprite
0000C8E0 3028 0008                  		move.w	8(a0),d0
0000C8E4 0240 FF80                  		andi.w	#$FF80,d0
0000C8E8 3238 F700                  		move.w	($FFFFF700).w,d1
0000C8EC 0441 0080                  		subi.w	#$80,d1
0000C8F0 0241 FF80                  		andi.w	#$FF80,d1
0000C8F6 0C40 0280                  		cmpi.w	#$280,d0
0000C8FA 6200 EDDA                  		bhi.w	DeleteObject
0000C8FE 4E75                       		rts	
0000C900                            ; ===========================================================================
0000C900 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000C902 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000C904 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000C906 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000C908 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000C90A                            ; ===========================================================================
0000C90A                            
0000C90A                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000C90A 4E75                       		rts	
0000C90C                            ; ===========================================================================
0000C90C                            
0000C90C                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000C90C 3038 D008                  		move.w	($FFFFD008).w,d0
0000C914 6400                       		bcc.s	loc_E888
0000C916 4440                       		neg.w	d0
0000C918                            
0000C918                            loc_E888:
0000C918 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000C91C 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000C91E 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000C924                            
0000C924                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000C924 7000                       		moveq	#0,d0
0000C926 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000C92A 0828 0003 0028             		btst	#3,$28(a0)
0000C930 6700                       		beq.s	loc_E8A8
0000C932 4440                       		neg.w	d0
0000C934 0640 0010                  		addi.w	#$10,d0
0000C938                            
0000C938                            loc_E8A8:
0000C938 3228 0030                  		move.w	$30(a0),d1
0000C93E 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000C942 4E75                       		rts	
0000C944                            ; ===========================================================================
0000C944                            
0000C944                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000C944 6100 ED2E                  		bsr.w	SpeedToPos
0000C948 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000C94E 6100 0000                  		bsr.w	ObjHitFloor
0000C952 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000C954 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000C95C 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000C960 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000C966 117C 0004 0028             		move.b	#4,$28(a0)
0000C96C 3011                       		move.w	(a1),d0
0000C96E 0240 03FF                  		andi.w	#$3FF,d0
0000C972 0C40 02E8                  		cmpi.w	#$2E8,d0
0000C976 6400                       		bcc.s	locret_E8EE
0000C978 117C 0000 0028             		move.b	#0,$28(a0)
0000C97E                            
0000C97E                            locret_E8EE:
0000C97E 4E75                       		rts	
0000C980                            ; ===========================================================================
0000C980                            
0000C980                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000C980 7000                       		moveq	#0,d0
0000C982 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C986 E648                       		lsr.w	#3,d0
0000C988 3228 0030                  		move.w	$30(a0),d1
0000C98E 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000C992 4E75                       		rts	
0000C994                            ; ===========================================================================
0000C994                            ; ---------------------------------------------------------------------------
0000C994                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000C994                            ; ---------------------------------------------------------------------------
0000C994                            Map_obj46:
0000C994                            	include "_maps\obj46.asm"
0000C994                            ; ---------------------------------------------------------------------------
0000C994                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000C994                            ; ---------------------------------------------------------------------------
0000C994 0000                       		dc.w byte_E906-Map_obj46
0000C996 01                         byte_E906:	dc.b 1
0000C997 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000C99C                            		even
0000C99C                            		even
0000C99C                            
0000C99C                            ; ===========================================================================
0000C99C                            ; ---------------------------------------------------------------------------
0000C99C                            ; Object 12 - lamp (SYZ)
0000C99C                            ; ---------------------------------------------------------------------------
0000C99C                            
0000C99C                            Obj12:					; XREF: Obj_Index
0000C99C 7000                       		moveq	#0,d0
0000C99E 1028 0024                  		move.b	$24(a0),d0
0000C9A2 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000C9A6 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000C9AA                            ; ===========================================================================
0000C9AA 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000C9AC 0000                       		dc.w Obj12_Animate-Obj12_Index
0000C9AE                            ; ===========================================================================
0000C9AE                            
0000C9AE                            Obj12_Main:				; XREF: Obj12_Index
0000C9AE 5428 0024                  		addq.b	#2,$24(a0)
0000C9B2 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000C9BA 317C 0000 0002             		move.w	#0,2(a0)
0000C9C0 117C 0004 0001             		move.b	#4,1(a0)
0000C9C6 117C 0010 0019             		move.b	#$10,$19(a0)
0000C9CC 117C 0006 0018             		move.b	#6,$18(a0)
0000C9D2                            
0000C9D2                            Obj12_Animate:				; XREF: Obj12_Index
0000C9D2 5328 001E                  		subq.b	#1,$1E(a0)
0000C9D6 6A00                       		bpl.s	Obj12_ChkDel
0000C9D8 117C 0007 001E             		move.b	#7,$1E(a0)
0000C9DE 5228 001A                  		addq.b	#1,$1A(a0)
0000C9E2 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000C9E8 6500                       		bcs.s	Obj12_ChkDel
0000C9EA 117C 0000 001A             		move.b	#0,$1A(a0)
0000C9F0                            
0000C9F0                            Obj12_ChkDel:
0000C9F0 3028 0008                  		move.w	8(a0),d0
0000C9F4 0240 FF80                  		andi.w	#$FF80,d0
0000C9F8 3238 F700                  		move.w	($FFFFF700).w,d1
0000C9FC 0441 0080                  		subi.w	#$80,d1
0000CA00 0241 FF80                  		andi.w	#$FF80,d1
0000CA06 0C40 0280                  		cmpi.w	#$280,d0
0000CA0A 6200 ECCA                  		bhi.w	DeleteObject
0000CA0E 6000 EC8A                  		bra.w	DisplaySprite
0000CA12                            ; ===========================================================================
0000CA12                            ; ---------------------------------------------------------------------------
0000CA12                            ; Sprite mappings - lamp (SYZ)
0000CA12                            ; ---------------------------------------------------------------------------
0000CA12                            Map_obj12:
0000CA12                            	include "_maps\obj12.asm"
0000CA12                            ; ---------------------------------------------------------------------------
0000CA12                            ; Sprite mappings - lamp (SYZ)
0000CA12                            ; ---------------------------------------------------------------------------
0000CA12 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000CA16 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000CA1A 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000CA1E 02                         byte_E98E:	dc.b 2
0000CA1F F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000CA24 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000CA29 02                         byte_E999:	dc.b 2
0000CA2A F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000CA2F 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000CA34 02                         byte_E9A4:	dc.b 2
0000CA35 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000CA3A 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000CA3F 02                         byte_E9AF:	dc.b 2
0000CA40 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000CA45 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000CA4A 02                         byte_E9BA:	dc.b 2
0000CA4B F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000CA50 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000CA55 02                         byte_E9C5:	dc.b 2
0000CA56 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000CA5B 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000CA60                            		even
0000CA60                            		even
0000CA60                            
0000CA60                            ; ===========================================================================
0000CA60                            ; ---------------------------------------------------------------------------
0000CA60                            ; Object 47 - pinball bumper (SYZ)
0000CA60                            ; ---------------------------------------------------------------------------
0000CA60                            
0000CA60                            Obj47:					; XREF: Obj_Index
0000CA60 7000                       		moveq	#0,d0
0000CA62 1028 0024                  		move.b	$24(a0),d0
0000CA66 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000CA6A 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000CA6E                            ; ===========================================================================
0000CA6E 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000CA70 0000                       		dc.w Obj47_Hit-Obj47_Index
0000CA72                            ; ===========================================================================
0000CA72                            
0000CA72                            Obj47_Main:				; XREF: Obj47_Index
0000CA72 5428 0024                  		addq.b	#2,$24(a0)
0000CA76 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000CA7E 317C 0380 0002             		move.w	#$380,2(a0)
0000CA84 117C 0004 0001             		move.b	#4,1(a0)
0000CA8A 117C 0010 0019             		move.b	#$10,$19(a0)
0000CA90 117C 0001 0018             		move.b	#1,$18(a0)
0000CA96 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000CA9C                            
0000CA9C                            Obj47_Hit:				; XREF: Obj47_Index
0000CA9C 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000CAA0 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000CAA4 4228 0021                  		clr.b	$21(a0)
0000CAA8 43F8 D000                  		lea	($FFFFD000).w,a1
0000CAAC 3228 0008                  		move.w	8(a0),d1
0000CAB0 3428 000C                  		move.w	$C(a0),d2
0000CABC 4EB9 0000 2824             		jsr	(CalcAngle).l
0000CAC2 4EB9 0000 2556             		jsr	(CalcSine).l
0000CAC8 C3FC F900                  		muls.w	#-$700,d1
0000CACC E081                       		asr.l	#8,d1
0000CACE 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000CAD2 C1FC F900                  		muls.w	#-$700,d0
0000CAD6 E080                       		asr.l	#8,d0
0000CAD8 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000CADC 08E9 0001 0022             		bset	#1,$22(a1)
0000CAE2 08A9 0004 0022             		bclr	#4,$22(a1)
0000CAE8 08A9 0005 0022             		bclr	#5,$22(a1)
0000CAEE 4229 003C                  		clr.b	$3C(a1)
0000CAF2 117C 0001 001C             		move.b	#1,$1C(a0)
0000CAF8 303C 00B4                  		move.w	#$B4,d0
0000CAFC 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play bumper sound
0000CB02 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CB06 7000                       		moveq	#0,d0
0000CB08 1028 0023                  		move.b	$23(a0),d0
0000CB0C 6700                       		beq.s	Obj47_Score
0000CB0E 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000CB14 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000CB16 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000CB1A                            
0000CB1A                            Obj47_Score:
0000CB1A 7001                       		moveq	#1,d0
0000CB1C 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000CB22 6100 EFFC                  		bsr.w	SingleObjLoad
0000CB26 6600                       		bne.s	Obj47_Display
0000CB28 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000CB2C 3368 0008 0008             		move.w	8(a0),8(a1)
0000CB32 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CB38 137C 0004 001A             		move.b	#4,$1A(a1)
0000CB3E                            
0000CB3E                            Obj47_Display:
0000CB3E 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000CB44 6100 BC7A                  		bsr.w	AnimateSprite
0000CB48 3028 0008                  		move.w	8(a0),d0
0000CB4C 0240 FF80                  		andi.w	#$FF80,d0
0000CB50 3238 F700                  		move.w	($FFFFF700).w,d1
0000CB54 0441 0080                  		subi.w	#$80,d1
0000CB58 0241 FF80                  		andi.w	#$FF80,d1
0000CB5E 0C40 0280                  		cmpi.w	#$280,d0
0000CB62 6200                       		bhi.s	Obj47_ChkHit
0000CB64 6000 EB34                  		bra.w	DisplaySprite
0000CB68                            ; ===========================================================================
0000CB68                            
0000CB68                            Obj47_ChkHit:				; XREF: Obj47_Display
0000CB68 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CB6C 7000                       		moveq	#0,d0
0000CB6E 1028 0023                  		move.b	$23(a0),d0
0000CB72 6700                       		beq.s	Obj47_Delete
0000CB74 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000CB7A                            
0000CB7A                            Obj47_Delete:
0000CB7A 6000 EB5A                  		bra.w	DeleteObject
0000CB7E                            ; ===========================================================================
0000CB7E                            Ani_obj47:
0000CB7E                            	include "_anim\obj47.asm"
0000CB7E                            ; ---------------------------------------------------------------------------
0000CB7E                            ; Animation script - flamethrower (SBZ)
0000CB7E                            ; ---------------------------------------------------------------------------
0000CB7E 0000                       		dc.w byte_EAF4-Ani_obj47
0000CB80 0000                       		dc.w byte_EAF8-Ani_obj47
0000CB82 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000CB86 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000CB8E                            		even
0000CB8E                            		even
0000CB8E                            
0000CB8E                            ; ---------------------------------------------------------------------------
0000CB8E                            ; Sprite mappings - pinball bumper (SYZ)
0000CB8E                            ; ---------------------------------------------------------------------------
0000CB8E                            Map_obj47:
0000CB8E                            	include "_maps\obj47.asm"
0000CB8E                            ; ---------------------------------------------------------------------------
0000CB8E                            ; Sprite mappings - pinball bumper (SYZ)
0000CB8E                            ; ---------------------------------------------------------------------------
0000CB8E 0000                       		dc.w byte_EB06-Map_obj47
0000CB90 0000                       		dc.w byte_EB11-Map_obj47
0000CB92 0000                       		dc.w byte_EB1C-Map_obj47
0000CB94 02                         byte_EB06:	dc.b 2
0000CB95 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000CB9A F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000CB9F 02                         byte_EB11:	dc.b 2
0000CBA0 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000CBA5 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000CBAA 02                         byte_EB1C:	dc.b 2
0000CBAB F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000CBB0 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000CBB6 00                         		even
0000CBB6 00                         		even
0000CBB6                            
0000CBB6                            ; ===========================================================================
0000CBB6                            ; ---------------------------------------------------------------------------
0000CBB6                            ; Object 0D - signpost at the end of a level
0000CBB6                            ; ---------------------------------------------------------------------------
0000CBB6                            
0000CBB6                            Obj0D:					; XREF: Obj_Index
0000CBB6 7000                       		moveq	#0,d0
0000CBB8 1028 0024                  		move.b	$24(a0),d0
0000CBBC 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000CBC0 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000CBC4 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000CBCA 6100 BBF4                  		bsr.w	AnimateSprite
0000CBCE 6100 EACA                  		bsr.w	DisplaySprite
0000CBD2 3028 0008                  		move.w	8(a0),d0
0000CBD6 0240 FF80                  		andi.w	#$FF80,d0
0000CBDA 3238 F700                  		move.w	($FFFFF700).w,d1
0000CBDE 0441 0080                  		subi.w	#$80,d1
0000CBE2 0241 FF80                  		andi.w	#$FF80,d1
0000CBE8 0C40 0280                  		cmpi.w	#$280,d0
0000CBEC 6200 EAE8                  		bhi.w	DeleteObject
0000CBF0 4E75                       		rts	
0000CBF2                            ; ===========================================================================
0000CBF2 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000CBF4 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000CBF6 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000CBF8 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000CBFA 0000                       		dc.w locret_ED1A-Obj0D_Index
0000CBFC                            ; ===========================================================================
0000CBFC                            
0000CBFC                            Obj0D_Main:				; XREF: Obj0D_Index
0000CBFC 5428 0024                  		addq.b	#2,$24(a0)
0000CC00 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000CC08 317C 0680 0002             		move.w	#$680,2(a0)
0000CC0E 117C 0004 0001             		move.b	#4,1(a0)
0000CC14 117C 0018 0019             		move.b	#$18,$19(a0)
0000CC1A 117C 0004 0018             		move.b	#4,$18(a0)
0000CC20                            
0000CC20                            Obj0D_Touch:				; XREF: Obj0D_Index
0000CC20 3038 D008                  		move.w	($FFFFD008).w,d0
0000CC28 6500                       		bcs.s	locret_EBBA
0000CC2A 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000CC2E 6400                       		bcc.s	locret_EBBA	; if not, branch
0000CC30 303C 00CF                  		move.w	#$CF,d0
0000CC34 4EB9 0000 101A             		jsr	(PlaySound).l	; play signpost	sound
0000CC3A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000CC3E 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000CC44 5428 0024                  		addq.b	#2,$24(a0)
0000CC48                            
0000CC48                            locret_EBBA:
0000CC48 4E75                       		rts	
0000CC4A                            ; ===========================================================================
0000CC4A                            
0000CC4A                            Obj0D_Spin:				; XREF: Obj0D_Index
0000CC4A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000CC4E 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000CC50 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000CC56 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000CC5A 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000CC60 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000CC62 5428 0024                  		addq.b	#2,$24(a0)
0000CC66                            
0000CC66                            Obj0D_Sparkle:
0000CC66 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000CC6A 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000CC6C 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000CC72 7000                       		moveq	#0,d0
0000CC74 1028 0034                  		move.b	$34(a0),d0
0000CC78 5428 0034                  		addq.b	#2,$34(a0)
0000CC7C 0228 000E 0034             		andi.b	#$E,$34(a0)
0000CC82 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000CC86 6100 EE98                  		bsr.w	SingleObjLoad
0000CC8A 6600                       		bne.s	locret_EC42
0000CC8C 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000CC90 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000CC96 101A                       		move.b	(a2)+,d0
0000CC98 4880                       		ext.w	d0
0000CC9E 3340 0008                  		move.w	d0,8(a1)
0000CCA2 101A                       		move.b	(a2)+,d0
0000CCA4 4880                       		ext.w	d0
0000CCAA 3340 000C                  		move.w	d0,$C(a1)
0000CCAE 237C 0000 803E 0004        		move.l	#Map_obj25,4(a1)
0000CCB6 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000CCBC 137C 0004 0001             		move.b	#4,1(a1)
0000CCC2 137C 0002 0018             		move.b	#2,$18(a1)
0000CCC8 137C 0008 0019             		move.b	#8,$19(a1)
0000CCCE                            
0000CCCE                            locret_EC42:
0000CCCE 4E75                       		rts	
0000CCD0                            ; ===========================================================================
0000CCD0 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000CCD2 0808                       		dc.b	8,   8
0000CCD4 F000                       		dc.b -$10,   0
0000CCD6 18F8                       		dc.b  $18,  -8
0000CCD8 00F8                       		dc.b	0,  -8
0000CCDA 1000                       		dc.b  $10,   0
0000CCDC E808                       		dc.b -$18,   8
0000CCDE 1810                       		dc.b  $18, $10
0000CCE0                            ; ===========================================================================
0000CCE0                            
0000CCE0                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000CCE0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000CCE4 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000CCE8 0838 0001 D022             		btst	#1,($FFFFD022).w
0000CCEE 6600                       		bne.s	loc_EC70
0000CCF0 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000CCF6 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000CCFC                            
0000CCFC                            loc_EC70:
0000CCFC 4A38 D000                  		tst.b	($FFFFD000).w
0000CD00 6700                       		beq.s	loc_EC86
0000CD02 3038 D008                  		move.w	($FFFFD008).w,d0
0000CD06 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000CD0A 0641 0128                  		addi.w	#$128,d1
0000CD0E B041                       		cmp.w	d1,d0
0000CD10 6500                       		bcs.s	locret_ECEE
0000CD12                            
0000CD12                            loc_EC86:
0000CD12 5428 0024                  		addq.b	#2,$24(a0)
0000CD16                            
0000CD16                            ; ---------------------------------------------------------------------------
0000CD16                            ; Subroutine to	set up bonuses at the end of an	act
0000CD16                            ; ---------------------------------------------------------------------------
0000CD16                            
0000CD16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CD16                            
0000CD16                            
0000CD16                            GotThroughAct:				; XREF: Obj3E_EndAct
0000CD16 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000CD1A 6600                       		bne.s	locret_ECEE
0000CD1C 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000CD22 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000CD26 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000CD2A 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000CD30 7010                       		moveq	#$10,d0
0000CD32 4EB9 0000 12C0             		jsr	(LoadPLC2).l	; load title card patterns
0000CD38 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000CD3E 7000                       		moveq	#0,d0
0000CD40 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000CD44 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000CD48 7200                       		moveq	#0,d1
0000CD4A 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000CD50 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000CD54 7214                       		moveq	#$14,d1
0000CD56 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000CD58 6500                       		bcs.s	loc_ECD0	; if not, branch
0000CD5A 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000CD5C                            
0000CD5C                            loc_ECD0:
0000CD5E 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000CD64 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000CD68 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000CD6C 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000CD70 303C 008E                  		move.w	#$8E,d0
0000CD74 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000CD7A                            
0000CD7A                            locret_ECEE:
0000CD7A 4E75                       		rts	
0000CD7C                            ; End of function GotThroughAct
0000CD7C                            
0000CD7C                            ; ===========================================================================
0000CD7C 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000CD90 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000CDA6                            ; ===========================================================================
0000CDA6                            
0000CDA6                            locret_ED1A:				; XREF: Obj0D_Index
0000CDA6 4E75                       		rts	
0000CDA8                            ; ===========================================================================
0000CDA8                            Ani_obj0D:
0000CDA8                            	include "_anim\obj0D.asm"
0000CDA8                            ; ---------------------------------------------------------------------------
0000CDA8                            ; Animation script - signpost
0000CDA8                            ; ---------------------------------------------------------------------------
0000CDA8 0000                       		dc.w byte_ED24-Ani_obj0D
0000CDAA 0000                       		dc.w byte_ED28-Ani_obj0D
0000CDAC 0000                       		dc.w byte_ED2E-Ani_obj0D
0000CDAE 0000                       		dc.w byte_ED34-Ani_obj0D
0000CDB0 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000CDB4 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000CDBA 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000CDC0 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000CDC4 00                         		even
0000CDC4 00                         		even
0000CDC4                            
0000CDC4                            ; ---------------------------------------------------------------------------
0000CDC4                            ; Sprite mappings - signpost
0000CDC4                            ; ---------------------------------------------------------------------------
0000CDC4                            Map_obj0D:
0000CDC4                            	include "_maps\obj0D.asm"
0000CDC4                            ; ---------------------------------------------------------------------------
0000CDC4                            ; Sprite mappings - signpost
0000CDC4                            ; ---------------------------------------------------------------------------
0000CDC4 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000CDC8 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000CDCC 0000                       		dc.w byte_ED73-Map_obj0D
0000CDCE 03                         byte_ED42:	dc.b 3
0000CDCF F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000CDD4 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000CDD9 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000CDDE 02                         byte_ED52:	dc.b 2
0000CDDF F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000CDE4 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000CDE9 02                         byte_ED5D:	dc.b 2
0000CDEA F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000CDEF 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000CDF4 02                         byte_ED68:	dc.b 2
0000CDF5 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000CDFA 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000CDFF 03                         byte_ED73:	dc.b 3
0000CE00 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000CE05 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000CE0A 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000CE10 00                         		even
0000CE10 00                         		even
0000CE10                            
0000CE10                            ; ===========================================================================
0000CE10                            ; ---------------------------------------------------------------------------
0000CE10                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000CE10                            ; ---------------------------------------------------------------------------
0000CE10                            
0000CE10                            Obj4C:					; XREF: Obj_Index
0000CE10 7000                       		moveq	#0,d0
0000CE12 1028 0024                  		move.b	$24(a0),d0
0000CE16 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000CE1A 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000CE1E 6000 0000                  		bra.w	Obj4D_ChkDel
0000CE22                            ; ===========================================================================
0000CE22 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000CE24 0000                       		dc.w loc_EDCC-Obj4C_Index
0000CE26 0000                       		dc.w loc_EE3E-Obj4C_Index
0000CE28 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000CE2A 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000CE2C 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000CE2E                            ; ===========================================================================
0000CE2E                            
0000CE2E                            Obj4C_Main:				; XREF: Obj4C_Index
0000CE2E 5428 0024                  		addq.b	#2,$24(a0)
0000CE32 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000CE3A 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000CE40 117C 0004 0001             		move.b	#4,1(a0)
0000CE46 117C 0001 0018             		move.b	#1,$18(a0)
0000CE4C 117C 0038 0019             		move.b	#$38,$19(a0)
0000CE52 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000CE58                            
0000CE58                            loc_EDCC:				; XREF: Obj4C_Index
0000CE58 5368 0032                  		subq.w	#1,$32(a0)
0000CE5C 6A00                       		bpl.s	locret_EDF0
0000CE5E 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000CE64 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000CE68 3228 000C                  		move.w	$C(a0),d1
0000CE6C B041                       		cmp.w	d1,d0
0000CE6E 6400                       		bcc.s	locret_EDF0
0000CE70 0441 0170                  		subi.w	#$170,d1
0000CE74 B041                       		cmp.w	d1,d0
0000CE76 6500                       		bcs.s	locret_EDF0
0000CE78 5428 0024                  		addq.b	#2,$24(a0)
0000CE7C                            
0000CE7C                            locret_EDF0:
0000CE7C 4E75                       		rts	
0000CE7E                            ; ===========================================================================
0000CE7E                            
0000CE7E                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000CE7E 5428 0024                  		addq.b	#2,$24(a0)
0000CE82 6100 ECB2                  		bsr.w	SingleObjLoad2
0000CE86 6600                       		bne.s	loc_EE18
0000CE88 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000CE8C 3368 0008 0008             		move.w	8(a0),8(a1)
0000CE92 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CE98 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CE9E 2348 003C                  		move.l	a0,$3C(a1)
0000CEA2                            
0000CEA2                            loc_EE18:
0000CEA2 117C 0001 001C             		move.b	#1,$1C(a0)
0000CEA8 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000CEAC 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000CEAE 117C 0004 001C             		move.b	#4,$1C(a0)
0000CEB4 6000                       		bra.s	Obj4C_Display
0000CEB6                            ; ===========================================================================
0000CEB6                            
0000CEB6                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000CEB6 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000CEBA 08E9 0001 0022             		bset	#1,$22(a1)
0000CEC0 337C FA80 0012             		move.w	#-$580,$12(a1)
0000CEC6 6000                       		bra.s	Obj4C_Display
0000CEC8                            ; ===========================================================================
0000CEC8                            
0000CEC8                            loc_EE3E:				; XREF: Obj4C_Index
0000CEC8 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000CECC 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000CECE 5428 0024                  		addq.b	#2,$24(a0)
0000CED2 4E75                       		rts	
0000CED4                            ; ===========================================================================
0000CED4                            
0000CED4                            Obj4C_Display:				; XREF: Obj4C_Index
0000CED4 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000CEDA 6100 B8E4                  		bsr.w	AnimateSprite
0000CEDE 6100 E7BA                  		bsr.w	DisplaySprite
0000CEE2 4E75                       		rts	
0000CEE4                            ; ===========================================================================
0000CEE4                            
0000CEE4                            Obj4C_Delete:				; XREF: Obj4C_Index
0000CEE4 117C 0000 001C             		move.b	#0,$1C(a0)
0000CEEA 117C 0002 0024             		move.b	#2,$24(a0)
0000CEF0 4A28 0028                  		tst.b	$28(a0)
0000CEF4 6700 E7E0                  		beq.w	DeleteObject
0000CEF8 4E75                       		rts	
0000CEFA                            ; ===========================================================================
0000CEFA                            ; ---------------------------------------------------------------------------
0000CEFA                            ; Object 4D - lava geyser / lavafall (MZ)
0000CEFA                            ; ---------------------------------------------------------------------------
0000CEFA                            
0000CEFA                            Obj4D:					; XREF: Obj_Index
0000CEFA 7000                       		moveq	#0,d0
0000CEFC 1028 0024                  		move.b	$24(a0),d0
0000CF00 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000CF04 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000CF08 6000 E790                  		bra.w	DisplaySprite
0000CF0C                            ; ===========================================================================
0000CF0C 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000CF0E 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000CF10 0000                       		dc.w loc_EFFC-Obj4D_Index
0000CF12 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000CF14                            
0000CF14 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000CF18                            ; ===========================================================================
0000CF18                            
0000CF18                            Obj4D_Main:				; XREF: Obj4D_Index
0000CF18 5428 0024                  		addq.b	#2,$24(a0)
0000CF1C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000CF22 4A28 0028                  		tst.b	$28(a0)
0000CF26 6700                       		beq.s	loc_EEA4
0000CF28 0468 0250 000C             		subi.w	#$250,$C(a0)
0000CF2E                            
0000CF2E                            loc_EEA4:
0000CF2E 7000                       		moveq	#0,d0
0000CF30 1028 0028                  		move.b	$28(a0),d0
0000CF36 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000CF3C 2248                       		movea.l	a0,a1
0000CF3E 7201                       		moveq	#1,d1
0000CF40 6100                       		bsr.s	Obj4D_MakeLava
0000CF42 6000                       		bra.s	loc_EF10
0000CF44                            ; ===========================================================================
0000CF44                            
0000CF44                            Obj4D_Loop:
0000CF44 6100 EBF0                  		bsr.w	SingleObjLoad2
0000CF48 6600                       		bne.s	loc_EF0A
0000CF4A                            
0000CF4A                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000CF4A 12BC 004D                  		move.b	#$4D,0(a1)
0000CF4E 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000CF56 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000CF5C 137C 0004 0001             		move.b	#4,1(a1)
0000CF62 137C 0020 0019             		move.b	#$20,$19(a1)
0000CF68 3368 0008 0008             		move.w	8(a0),8(a1)
0000CF6E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CF74 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CF7A 137C 0001 0018             		move.b	#1,$18(a1)
0000CF80 137C 0005 001C             		move.b	#5,$1C(a1)
0000CF86 4A28 0028                  		tst.b	$28(a0)
0000CF8A 6700                       		beq.s	loc_EF0A
0000CF8C 137C 0002 001C             		move.b	#2,$1C(a1)
0000CF92                            
0000CF92                            loc_EF0A:
0000CF92 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000CF96 4E75                       		rts	
0000CF98                            ; ===========================================================================
0000CF98                            
0000CF98                            loc_EF10:				; XREF: Obj4D_Main
0000CF98 0669 0060 000C             		addi.w	#$60,$C(a1)
0000CF9E 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000CFA4 0669 0060 0030             		addi.w	#$60,$30(a1)
0000CFAA 137C 0093 0020             		move.b	#$93,$20(a1)
0000CFB0 137C 0080 0016             		move.b	#$80,$16(a1)
0000CFB6 08E9 0004 0001             		bset	#4,1(a1)
0000CFBC 5829 0024                  		addq.b	#4,$24(a1)
0000CFC0 2348 003C                  		move.l	a0,$3C(a1)
0000CFC4 4A28 0028                  		tst.b	$28(a0)
0000CFC8 6700                       		beq.s	Obj4D_PlaySnd
0000CFCA 7200                       		moveq	#0,d1
0000CFCC 6100 FF76                  		bsr.w	Obj4D_Loop
0000CFD0 5429 0024                  		addq.b	#2,$24(a1)
0000CFD4 08E9 0004 0002             		bset	#4,2(a1)
0000CFDA 0669 0100 000C             		addi.w	#$100,$C(a1)
0000CFE0 137C 0000 0018             		move.b	#0,$18(a1)
0000CFE6 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000CFEC 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000CFF2 117C 0000 0028             		move.b	#0,$28(a0)
0000CFF8                            
0000CFF8                            Obj4D_PlaySnd:
0000CFF8 303C 00C8                  		move.w	#$C8,d0
0000CFFC 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play flame sound
0000D002                            
0000D002                            Obj4D_Action:				; XREF: Obj4D_Index
0000D002 7000                       		moveq	#0,d0
0000D004 1028 0028                  		move.b	$28(a0),d0
0000D00A 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000D00E 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000D012 6100 E660                  		bsr.w	SpeedToPos
0000D016 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000D01C 6100 B7A2                  		bsr.w	AnimateSprite
0000D020                            
0000D020                            Obj4D_ChkDel:				; XREF: Obj4C
0000D020 3028 0008                  		move.w	8(a0),d0
0000D024 0240 FF80                  		andi.w	#$FF80,d0
0000D028 3238 F700                  		move.w	($FFFFF700).w,d1
0000D02C 0441 0080                  		subi.w	#$80,d1
0000D030 0241 FF80                  		andi.w	#$FF80,d1
0000D036 0C40 0280                  		cmpi.w	#$280,d0
0000D03A 6200 E69A                  		bhi.w	DeleteObject
0000D03E 4E75                       		rts	
0000D040                            ; ===========================================================================
0000D040 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000D042 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000D044                            ; ===========================================================================
0000D044                            
0000D044                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000D044 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000D04A 3028 0030                  		move.w	$30(a0),d0
0000D04E B068 000C                  		cmp.w	$C(a0),d0
0000D052 6400                       		bcc.s	locret_EFDA
0000D054 5828 0024                  		addq.b	#4,$24(a0)
0000D058 2268 003C                  		movea.l	$3C(a0),a1
0000D05C 137C 0003 001C             		move.b	#3,$1C(a1)
0000D062                            
0000D062                            locret_EFDA:
0000D062 4E75                       		rts	
0000D064                            ; ===========================================================================
0000D064                            
0000D064                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000D064 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000D06A 3028 0030                  		move.w	$30(a0),d0
0000D06E B068 000C                  		cmp.w	$C(a0),d0
0000D072 6400                       		bcc.s	locret_EFFA
0000D074 5828 0024                  		addq.b	#4,$24(a0)
0000D078 2268 003C                  		movea.l	$3C(a0),a1
0000D07C 137C 0001 001C             		move.b	#1,$1C(a1)
0000D082                            
0000D082                            locret_EFFA:
0000D082 4E75                       		rts	
0000D084                            ; ===========================================================================
0000D084                            
0000D084                            loc_EFFC:				; XREF: Obj4D_Index
0000D084 2268 003C                  		movea.l	$3C(a0),a1
0000D088 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000D08E 6700 0000                  		beq.w	Obj4D_Delete
0000D092 3029 000C                  		move.w	$C(a1),d0
0000D096 0640 0060                  		addi.w	#$60,d0
0000D09A 3140 000C                  		move.w	d0,$C(a0)
0000D0A2 4440                       		neg.w	d0
0000D0A4 7208                       		moveq	#8,d1
0000D0A6 0C40 0040                  		cmpi.w	#$40,d0
0000D0AA 6C00                       		bge.s	loc_F026
0000D0AC 720B                       		moveq	#$B,d1
0000D0AE                            
0000D0AE                            loc_F026:
0000D0AE 0C40 0080                  		cmpi.w	#$80,d0
0000D0B2 6F00                       		ble.s	loc_F02E
0000D0B4 720E                       		moveq	#$E,d1
0000D0B6                            
0000D0B6                            loc_F02E:
0000D0B6 5328 001E                  		subq.b	#1,$1E(a0)
0000D0BA 6A00                       		bpl.s	loc_F04C
0000D0BC 117C 0007 001E             		move.b	#7,$1E(a0)
0000D0C2 5228 001B                  		addq.b	#1,$1B(a0)
0000D0C6 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000D0CC 6500                       		bcs.s	loc_F04C
0000D0CE 117C 0000 001B             		move.b	#0,$1B(a0)
0000D0D4                            
0000D0D4                            loc_F04C:
0000D0D4 1028 001B                  		move.b	$1B(a0),d0
0000D0DA 1140 001A                  		move.b	d0,$1A(a0)
0000D0DE 6000 FF40                  		bra.w	Obj4D_ChkDel
0000D0E2                            ; ===========================================================================
0000D0E2                            
0000D0E2                            Obj4D_Delete:				; XREF: Obj4D_Index
0000D0E2 6000 E5F2                  		bra.w	DeleteObject
0000D0E6                            ; ===========================================================================
0000D0E6                            ; ---------------------------------------------------------------------------
0000D0E6                            ; Object 4E - advancing	wall of	lava (MZ)
0000D0E6                            ; ---------------------------------------------------------------------------
0000D0E6                            
0000D0E6                            Obj4E:					; XREF: Obj_Index
0000D0E6 7000                       		moveq	#0,d0
0000D0E8 1028 0024                  		move.b	$24(a0),d0
0000D0EC 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000D0F0 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000D0F4                            ; ===========================================================================
0000D0F4 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000D0F6 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000D0F8 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000D0FA 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000D0FC 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000D0FE                            ; ===========================================================================
0000D0FE                            
0000D0FE                            Obj4E_Main:				; XREF: Obj4E_Index
0000D0FE 5828 0024                  		addq.b	#4,$24(a0)
0000D102 2248                       		movea.l	a0,a1
0000D104 7201                       		moveq	#1,d1
0000D106 6000                       		bra.s	Obj4E_Main2
0000D108                            ; ===========================================================================
0000D108                            
0000D108                            Obj4E_Loop:
0000D108 6100 EA2C                  		bsr.w	SingleObjLoad2
0000D10C 6600                       		bne.s	loc_F0C8
0000D10E                            
0000D10E                            Obj4E_Main2:				; XREF: Obj4E_Main
0000D10E 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000D112 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000D11A 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000D120 137C 0004 0001             		move.b	#4,1(a1)
0000D126 137C 0050 0019             		move.b	#$50,$19(a1)
0000D12C 3368 0008 0008             		move.w	8(a0),8(a1)
0000D132 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D138 137C 0001 0018             		move.b	#1,$18(a1)
0000D13E 137C 0000 001C             		move.b	#0,$1C(a1)
0000D144 137C 0094 0020             		move.b	#$94,$20(a1)
0000D14A 2348 003C                  		move.l	a0,$3C(a1)
0000D14E                            
0000D14E                            loc_F0C8:
0000D14E 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000D152                            
0000D152 5C29 0024                  		addq.b	#6,$24(a1)
0000D156 137C 0004 001A             		move.b	#4,$1A(a1)
0000D15C                            
0000D15C                            Obj4E_Action:				; XREF: Obj4E_Index
0000D15C 3038 D008                  		move.w	($FFFFD008).w,d0
0000D164 6400                       		bcc.s	Obj4E_ChkSonic
0000D166 4440                       		neg.w	d0
0000D168                            
0000D168                            Obj4E_ChkSonic:
0000D168 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000D16C 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000D16E 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000D176 6400                       		bcc.s	loc_F0F4
0000D178 4440                       		neg.w	d0
0000D17A                            
0000D17A                            loc_F0F4:
0000D17A 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000D17E 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000D180 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000D186 6000                       		bra.s	Obj4E_Solid
0000D188                            ; ===========================================================================
0000D188                            
0000D188                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000D188 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000D18C 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000D18E 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000D194 5528 0024                  		subq.b	#2,$24(a0)
0000D198                            
0000D198                            Obj4E_Solid:				; XREF: Obj4E_Index
0000D198 323C 002B                  		move.w	#$2B,d1
0000D19C 343C 0018                  		move.w	#$18,d2
0000D1A0 3602                       		move.w	d2,d3
0000D1A2 5243                       		addq.w	#1,d3
0000D1A4 3828 0008                  		move.w	8(a0),d4
0000D1A8 1028 0024                  		move.b	$24(a0),d0
0000D1AC 3F00                       		move.w	d0,-(sp)
0000D1AE 6100 0000                  		bsr.w	SolidObject
0000D1B2 301F                       		move.w	(sp)+,d0
0000D1B4 1140 0024                  		move.b	d0,$24(a0)
0000D1B8 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000D1BE 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000D1C0 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000D1C4 4228 0036                  		clr.b	$36(a0)
0000D1C8                            
0000D1C8                            Obj4E_Animate:
0000D1C8 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000D1CE 6100 B5F0                  		bsr.w	AnimateSprite
0000D1D2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000D1D8 6400                       		bcc.s	Obj4E_ChkDel
0000D1DA 6100 E498                  		bsr.w	SpeedToPos
0000D1DE                            
0000D1DE                            Obj4E_ChkDel:
0000D1DE 6100 E4BA                  		bsr.w	DisplaySprite
0000D1E2 4A28 0036                  		tst.b	$36(a0)
0000D1E6 6600                       		bne.s	locret_F17E
0000D1E8 3028 0008                  		move.w	8(a0),d0
0000D1EC 0240 FF80                  		andi.w	#$FF80,d0
0000D1F0 3238 F700                  		move.w	($FFFFF700).w,d1
0000D1F4 0441 0080                  		subi.w	#$80,d1
0000D1F8 0241 FF80                  		andi.w	#$FF80,d1
0000D1FE 0C40 0280                  		cmpi.w	#$280,d0
0000D202 6200                       		bhi.s	Obj4E_ChkGone
0000D204                            
0000D204                            locret_F17E:
0000D204 4E75                       		rts	
0000D206                            ; ===========================================================================
0000D206                            
0000D206                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000D206 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D20A 7000                       		moveq	#0,d0
0000D20C 1028 0023                  		move.b	$23(a0),d0
0000D210 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000D216 117C 0008 0024             		move.b	#8,$24(a0)
0000D21C 4E75                       		rts	
0000D21E                            ; ===========================================================================
0000D21E                            
0000D21E                            Obj4E_Move2:				; XREF: Obj4E_Index
0000D21E 2268 003C                  		movea.l	$3C(a0),a1
0000D222 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000D228 6700                       		beq.s	Obj4E_Delete
0000D22A 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000D230 0468 0080 0008             		subi.w	#$80,8(a0)
0000D236 6000 E462                  		bra.w	DisplaySprite
0000D23A                            ; ===========================================================================
0000D23A                            
0000D23A                            Obj4E_Delete:				; XREF: Obj4E_Index
0000D23A 6000 E49A                  		bra.w	DeleteObject
0000D23E                            ; ===========================================================================
0000D23E                            ; ---------------------------------------------------------------------------
0000D23E                            ; Object 54 - invisible	lava tag (MZ)
0000D23E                            ; ---------------------------------------------------------------------------
0000D23E                            
0000D23E                            Obj54:					; XREF: Obj_Index
0000D23E 7000                       		moveq	#0,d0
0000D240 1028 0024                  		move.b	$24(a0),d0
0000D244 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000D248 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000D24C                            ; ===========================================================================
0000D24C 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000D24E 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000D250                            
0000D250 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000D254                            ; ===========================================================================
0000D254                            
0000D254                            Obj54_Main:				; XREF: Obj54_Index
0000D254 5428 0024                  		addq.b	#2,$24(a0)
0000D258 7000                       		moveq	#0,d0
0000D25A 1028 0028                  		move.b	$28(a0),d0
0000D25E 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000D264 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000D26C 117C 0084 0001             		move.b	#$84,1(a0)
0000D272                            
0000D272                            Obj54_ChkDel:				; XREF: Obj54_Index
0000D272 3028 0008                  		move.w	8(a0),d0
0000D276 0240 FF80                  		andi.w	#$FF80,d0
0000D27A 3238 F700                  		move.w	($FFFFF700).w,d1
0000D27E 0441 0080                  		subi.w	#$80,d1
0000D282 0241 FF80                  		andi.w	#$FF80,d1
0000D288 6B00 E44C                  		bmi.w	DeleteObject
0000D28C 0C40 0280                  		cmpi.w	#$280,d0
0000D290 6200 E444                  		bhi.w	DeleteObject
0000D294 4E75                       		rts	
0000D296                            ; ===========================================================================
0000D296                            ; ---------------------------------------------------------------------------
0000D296                            ; Sprite mappings - invisible lava tag (MZ)
0000D296                            ; ---------------------------------------------------------------------------
0000D296                            Map_obj54:
0000D296                            	include "_maps\obj54.asm"
0000D296                            ; ---------------------------------------------------------------------------
0000D296                            ; Sprite mappings - invisible lava tag (MZ)
0000D296                            ; ---------------------------------------------------------------------------
0000D296 0000                       		dc.w byte_F212-Map_obj54
0000D298 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000D29A 00                         		even
0000D29A 00                         		even
0000D29A                            
0000D29A                            Ani_obj4C:
0000D29A                            	include "_anim\obj4C.asm"
0000D29A                            ; ---------------------------------------------------------------------------
0000D29A                            ; Animation script - geyser of lava (MZ)
0000D29A                            ; ---------------------------------------------------------------------------
0000D29A 0000                       		dc.w byte_F220-Ani_obj4C
0000D29C 0000                       		dc.w byte_F22A-Ani_obj4C
0000D29E 0000                       		dc.w byte_F22E-Ani_obj4C
0000D2A0 0000                       		dc.w byte_F232-Ani_obj4C
0000D2A2 0000                       		dc.w byte_F23A-Ani_obj4C
0000D2A4 0000                       		dc.w byte_F23E-Ani_obj4C
0000D2A6 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000D2B0 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000D2B4 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000D2B8 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000D2C0 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000D2C4 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000D2C8                            		even
0000D2C8                            		even
0000D2C8                            
0000D2C8                            Ani_obj4E:
0000D2C8                            	include "_anim\obj4E.asm"
0000D2C8                            ; ---------------------------------------------------------------------------
0000D2C8                            ; Animation script - advancing wall of lava (MZ)
0000D2C8                            ; ---------------------------------------------------------------------------
0000D2C8 0000                       		dc.w byte_F244-Ani_obj4E
0000D2CA 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000D2D0                            		even
0000D2D0                            		even
0000D2D0                            
0000D2D0                            ; ---------------------------------------------------------------------------
0000D2D0                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000D2D0                            ; ---------------------------------------------------------------------------
0000D2D0                            Map_obj4C:
0000D2D0                            	include "_maps\obj4C.asm"
0000D2D0                            ; ---------------------------------------------------------------------------
0000D2D0                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000D2D0                            ; ---------------------------------------------------------------------------
0000D2D0 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000D2D4 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000D2D8 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000D2DC 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000D2E0 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000D2E4 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000D2E8 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000D2EC 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000D2F0 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000D2F4 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000D2F8 02                         byte_F272:	dc.b 2
0000D2F9 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000D2FE EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000D303 02                         byte_F27D:	dc.b 2
0000D304 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000D309 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000D30E 04                         byte_F288:	dc.b 4
0000D30F EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000D314 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000D319 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000D31E EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000D323 04                         byte_F29D:	dc.b 4
0000D324 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000D329 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000D32E F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000D333 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000D338 06                         byte_F2B2:	dc.b 6
0000D339 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000D33E F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000D343 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000D348 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000D34D E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000D352 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000D357 06                         byte_F2D1:	dc.b 6
0000D358 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000D35D F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000D362 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000D367 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000D36C E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000D371 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000D376 02                         byte_F2F0:	dc.b 2
0000D377 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000D37C E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000D381 02                         byte_F2FB:	dc.b 2
0000D382 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000D387 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000D38C 0A                         byte_F306:	dc.b $A
0000D38D 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000D392 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000D397 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000D39C B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000D3A1 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000D3A6 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000D3AB F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000D3B0 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000D3B5 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000D3BA 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000D3BF 0A                         byte_F339:	dc.b $A
0000D3C0 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000D3C5 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000D3CA B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000D3CF B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000D3D4 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000D3D9 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000D3DE F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000D3E3 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000D3E8 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000D3ED 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000D3F2 0A                         byte_F36C:	dc.b $A
0000D3F3 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000D3F8 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000D3FD B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000D402 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000D407 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000D40C D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000D411 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000D416 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000D41B 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000D420 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000D425 06                         byte_F39F:	dc.b 6
0000D426 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000D42B 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000D430 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000D435 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000D43A D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000D43F D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000D444 06                         byte_F3BE:	dc.b 6
0000D445 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000D44A 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000D44F B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000D454 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000D459 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000D45E D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000D463 06                         byte_F3DD:	dc.b 6
0000D464 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000D469 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000D46E B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000D473 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000D478 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000D47D D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000D482 10                         byte_F3FC:	dc.b $10
0000D483 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000D488 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000D48D B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000D492 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000D497 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000D49C D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000D4A1 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000D4A6 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000D4AB 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000D4B0 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000D4B5 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000D4BA 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000D4BF 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000D4C4 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000D4C9 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000D4CE 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000D4D3 10                         byte_F44D:	dc.b $10
0000D4D4 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000D4D9 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000D4DE B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000D4E3 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000D4E8 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000D4ED D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000D4F2 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000D4F7 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000D4FC 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000D501 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000D506 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000D50B 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000D510 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000D515 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000D51A 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000D51F 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000D524 10                         byte_F49E:	dc.b $10
0000D525 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000D52A 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000D52F B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000D534 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000D539 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000D53E D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000D543 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000D548 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000D54D 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000D552 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000D557 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000D55C 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000D561 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000D566 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000D56B 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000D570 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000D575 06                         byte_F4EF:	dc.b 6
0000D576 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000D57B E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000D580 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000D585 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000D58A D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000D58F D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000D594 06                         byte_F50E:	dc.b 6
0000D595 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000D59A E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000D59F E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000D5A4 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000D5A9 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000D5AE D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000D5B3 00                         byte_F52D:	dc.b 0
0000D5B4                            		even
0000D5B4                            		even
0000D5B4                            
0000D5B4                            ; ---------------------------------------------------------------------------
0000D5B4                            ; Sprite mappings - advancing wall of lava (MZ)
0000D5B4                            ; ---------------------------------------------------------------------------
0000D5B4                            Map_obj4E:
0000D5B4                            	include "_maps\obj4E.asm"
0000D5B4                            ; ---------------------------------------------------------------------------
0000D5B4                            ; Sprite mappings - advancing wall of lava (MZ)
0000D5B4                            ; ---------------------------------------------------------------------------
0000D5B4 0000                       		dc.w byte_F538-Map_obj4E
0000D5B6 0000                       		dc.w byte_F566-Map_obj4E
0000D5B8 0000                       		dc.w byte_F594-Map_obj4E
0000D5BA 0000                       		dc.w byte_F5C2-Map_obj4E
0000D5BC 0000                       		dc.w byte_F5F0-Map_obj4E
0000D5BE 09                         byte_F538:	dc.b 9
0000D5BF E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000D5C4 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000D5C9 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000D5CE E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000D5D3 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000D5D8 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000D5DD 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000D5E2 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000D5E7 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000D5EC 09                         byte_F566:	dc.b 9
0000D5ED E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000D5F2 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000D5F7 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000D5FC E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000D601 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000D606 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000D60B 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000D610 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000D615 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000D61A 09                         byte_F594:	dc.b 9
0000D61B E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000D620 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000D625 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000D62A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000D62F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000D634 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000D639 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000D63E E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000D643 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000D648 09                         byte_F5C2:	dc.b 9
0000D649 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000D64E 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000D653 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000D658 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000D65D 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000D662 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000D667 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000D66C E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000D671 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000D676 08                         byte_F5F0:	dc.b 8
0000D677 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000D67C 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000D681 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000D686 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000D68B E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000D690 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000D695 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000D69A 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000D6A0 00                         		even
0000D6A0 00                         		even
0000D6A0                            
0000D6A0                            ; ===========================================================================
0000D6A0                            ; ---------------------------------------------------------------------------
0000D6A0                            ; Object 40 - Moto Bug enemy (GHZ)
0000D6A0                            ; ---------------------------------------------------------------------------
0000D6A0                            
0000D6A0                            Obj40:					; XREF: Obj_Index
0000D6A0 7000                       		moveq	#0,d0
0000D6A2 1028 0024                  		move.b	$24(a0),d0
0000D6A6 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000D6AA 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000D6AE                            ; ===========================================================================
0000D6AE 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000D6B0 0000                       		dc.w Obj40_Action-Obj40_Index
0000D6B2 0000                       		dc.w Obj40_Animate-Obj40_Index
0000D6B4 0000                       		dc.w Obj40_Delete-Obj40_Index
0000D6B6                            ; ===========================================================================
0000D6B6                            
0000D6B6                            Obj40_Main:				; XREF: Obj40_Index
0000D6B6 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000D6BE 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000D6C4 117C 0004 0001             		move.b	#4,1(a0)
0000D6CA 117C 0004 0018             		move.b	#4,$18(a0)
0000D6D0 117C 0014 0019             		move.b	#$14,$19(a0)
0000D6D6 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000D6DA 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000D6DC 117C 000E 0016             		move.b	#$E,$16(a0)
0000D6E2 117C 0008 0017             		move.b	#8,$17(a0)
0000D6E8 117C 000C 0020             		move.b	#$C,$20(a0)
0000D6EE 6100 DF58                  		bsr.w	ObjectFall
0000D6F2 4EB9 0000 0000             		jsr	ObjHitFloor
0000D6F8 4A41                       		tst.w	d1
0000D6FA 6A00                       		bpl.s	locret_F68A
0000D700 317C 0000 0012             		move.w	#0,$12(a0)
0000D706 5428 0024                  		addq.b	#2,$24(a0)
0000D70A 0868 0000 0022             		bchg	#0,$22(a0)
0000D710                            
0000D710                            locret_F68A:
0000D710 4E75                       		rts	
0000D712                            ; ===========================================================================
0000D712                            
0000D712                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000D712 5828 0024                  		addq.b	#4,$24(a0)
0000D716 6000 0000                  		bra.w	Obj40_Animate
0000D71A                            ; ===========================================================================
0000D71A                            
0000D71A                            Obj40_Action:				; XREF: Obj40_Index
0000D71A 7000                       		moveq	#0,d0
0000D71C 1028 0025                  		move.b	$25(a0),d0
0000D720 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000D724 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000D728 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000D72E 6100 B090                  		bsr.w	AnimateSprite
0000D732                            
0000D732                            ; ---------------------------------------------------------------------------
0000D732                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000D732                            ; ---------------------------------------------------------------------------
0000D732                            
0000D732                            MarkObjGone:
0000D732 3028 0008                  		move.w	8(a0),d0
0000D736 0240 FF80                  		andi.w	#$FF80,d0
0000D73A 3238 F700                  		move.w	($FFFFF700).w,d1
0000D73E 0441 0080                  		subi.w	#$80,d1
0000D742 0241 FF80                  		andi.w	#$FF80,d1
0000D748 0C40 0280                  		cmpi.w	#$280,d0
0000D74C 6200 0000                  		bhi.w	Mark_ChkGone
0000D750 6000 DF48                  		bra.w	DisplaySprite
0000D754                            ; ===========================================================================
0000D754                            
0000D754                            Mark_ChkGone:
0000D754 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D758 7000                       		moveq	#0,d0
0000D75A 1028 0023                  		move.b	$23(a0),d0
0000D75E 6700                       		beq.s	Mark_Delete
0000D760 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000D766                            
0000D766                            Mark_Delete:
0000D766 6000 DF6E                  		bra.w	DeleteObject
0000D76A                            
0000D76A                            ; ===========================================================================
0000D76A 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000D76C 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000D76E                            ; ===========================================================================
0000D76E                            
0000D76E                            Obj40_Move:				; XREF: Obj40_Index2
0000D76E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000D772 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000D774 5428 0025                  		addq.b	#2,$25(a0)
0000D778 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000D77E 117C 0001 001C             		move.b	#1,$1C(a0)
0000D784 0868 0000 0022             		bchg	#0,$22(a0)
0000D78A 6600                       		bne.s	locret_F70A
0000D78C 4468 0010                  		neg.w	$10(a0)		; change direction
0000D790                            
0000D790                            locret_F70A:
0000D790 4E75                       		rts	
0000D792                            ; ===========================================================================
0000D792                            
0000D792                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000D792 6100 DEE0                  		bsr.w	SpeedToPos
0000D796 4EB9 0000 0000             		jsr	ObjHitFloor
0000D79C 0C41 FFF8                  		cmpi.w	#-8,d1
0000D7A0 6D00                       		blt.s	Obj40_Pause
0000D7A2 0C41 000C                  		cmpi.w	#$C,d1
0000D7A6 6C00                       		bge.s	Obj40_Pause
0000D7AC 5328 0033                  		subq.b	#1,$33(a0)
0000D7B0 6A00                       		bpl.s	locret_F756
0000D7B2 117C 000F 0033             		move.b	#$F,$33(a0)
0000D7B8 6100 E366                  		bsr.w	SingleObjLoad
0000D7BC 6600                       		bne.s	locret_F756
0000D7BE 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000D7C2 3368 0008 0008             		move.w	8(a0),8(a1)
0000D7C8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D7CE 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000D7D4 137C 0002 001C             		move.b	#2,$1C(a1)
0000D7DA                            
0000D7DA                            locret_F756:
0000D7DA 4E75                       		rts	
0000D7DC                            ; ===========================================================================
0000D7DC                            
0000D7DC                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000D7DC 5528 0025                  		subq.b	#2,$25(a0)
0000D7E0 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000D7E6 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000D7EC 117C 0000 001C             		move.b	#0,$1C(a0)
0000D7F2 4E75                       		rts	
0000D7F4                            ; ===========================================================================
0000D7F4                            
0000D7F4                            Obj40_Animate:				; XREF: Obj40_Index
0000D7F4 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000D7FA 6100 AFC4                  		bsr.w	AnimateSprite
0000D7FE 6000 DE9A                  		bra.w	DisplaySprite
0000D802                            ; ===========================================================================
0000D802                            
0000D802                            Obj40_Delete:				; XREF: Obj40_Index
0000D802 6000 DED2                  		bra.w	DeleteObject
0000D806                            ; ===========================================================================
0000D806                            Ani_obj40:
0000D806                            	include "_anim\obj40.asm"
0000D806                            ; ---------------------------------------------------------------------------
0000D806                            ; Animation script - Motobug enemy
0000D806                            ; ---------------------------------------------------------------------------
0000D806 0000                       		dc.w byte_F788-Ani_obj40
0000D808 0000                       		dc.w byte_F78C-Ani_obj40
0000D80A 0000                       		dc.w byte_F792-Ani_obj40
0000D80C 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000D810 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000D816 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000D824                            		even
0000D824                            		even
0000D824                            
0000D824                            ; ---------------------------------------------------------------------------
0000D824                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000D824                            ; ---------------------------------------------------------------------------
0000D824                            Map_obj40:
0000D824                            	include "_maps\obj40.asm"
0000D824                            ; ---------------------------------------------------------------------------
0000D824                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000D824                            ; ---------------------------------------------------------------------------
0000D824 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
0000D828 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
0000D82C 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
0000D830 0000                       		dc.w byte_F804-Map_obj40
0000D832 04                         byte_F7AE:	dc.b 4
0000D833 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0000D838 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
0000D83D F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0000D842 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
0000D847 04                         byte_F7C3:	dc.b 4
0000D848 F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
0000D84D 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
0000D852 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
0000D857 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
0000D85C 05                         byte_F7D8:	dc.b 5
0000D85D F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0000D862 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
0000D867 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0000D86C 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
0000D871 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
0000D876 01                         byte_F7F2:	dc.b 1
0000D877 FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
0000D87C 01                         byte_F7F8:	dc.b 1
0000D87D FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
0000D882 01                         byte_F7FE:	dc.b 1
0000D883 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
0000D888 00                         byte_F804:	dc.b 0
0000D88A 00                         		even
0000D88A 00                         		even
0000D88A                            
0000D88A                            ; ===========================================================================
0000D88A                            ; ---------------------------------------------------------------------------
0000D88A                            ; Object 4F - blank
0000D88A                            ; ---------------------------------------------------------------------------
0000D88A                            
0000D88A                            Obj4F:					; XREF: Obj_Index
0000D88A 4E75                       		rts	
0000D88C                            
0000D88C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D88C                            
0000D88C                            
0000D88C                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000D88C 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000D892 0240 0003                  		andi.w	#3,d0
0000D896 6600                       		bne.s	loc_F836
0000D898 7600                       		moveq	#0,d3
0000D89A 1628 0019                  		move.b	$19(a0),d3
0000D89E 4A68 0010                  		tst.w	$10(a0)
0000D8A2 6B00                       		bmi.s	loc_F82C
0000D8A4 6100 0000                  		bsr.w	ObjHitWallRight
0000D8A8 4A41                       		tst.w	d1
0000D8AA 6A00                       		bpl.s	loc_F836
0000D8AC                            
0000D8AC                            loc_F828:
0000D8AC 7001                       		moveq	#1,d0
0000D8AE 4E75                       		rts	
0000D8B0                            ; ===========================================================================
0000D8B0                            
0000D8B0                            loc_F82C:
0000D8B0 4643                       		not.w	d3
0000D8B2 6100 0000                  		bsr.w	ObjHitWallLeft
0000D8B6 4A41                       		tst.w	d1
0000D8B8 6BF2                       		bmi.s	loc_F828
0000D8BA                            
0000D8BA                            loc_F836:
0000D8BA 7000                       		moveq	#0,d0
0000D8BC 4E75                       		rts	
0000D8BE                            ; End of function Obj50_ChkWall
0000D8BE                            
0000D8BE                            ; ===========================================================================
0000D8BE                            ; ---------------------------------------------------------------------------
0000D8BE                            ; Object 50 - Yadrin enemy (SYZ)
0000D8BE                            ; ---------------------------------------------------------------------------
0000D8BE                            
0000D8BE                            Obj50:					; XREF: Obj_Index
0000D8BE 7000                       		moveq	#0,d0
0000D8C0 1028 0024                  		move.b	$24(a0),d0
0000D8C4 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000D8C8 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000D8CC                            ; ===========================================================================
0000D8CC 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000D8CE 0000                       		dc.w Obj50_Action-Obj50_Index
0000D8D0                            ; ===========================================================================
0000D8D0                            
0000D8D0                            Obj50_Main:				; XREF: Obj50_Index
0000D8D0 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000D8D8 317C 247B 0002             		move.w	#$247B,2(a0)
0000D8DE 117C 0004 0001             		move.b	#4,1(a0)
0000D8E4 117C 0004 0018             		move.b	#4,$18(a0)
0000D8EA 117C 0014 0019             		move.b	#$14,$19(a0)
0000D8F0 117C 0011 0016             		move.b	#$11,$16(a0)
0000D8F6 117C 0008 0017             		move.b	#8,$17(a0)
0000D8FC 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000D902 6100 DD44                  		bsr.w	ObjectFall
0000D906 6100 0000                  		bsr.w	ObjHitFloor
0000D90A 4A41                       		tst.w	d1
0000D90C 6A00                       		bpl.s	locret_F89E
0000D912 317C 0000 0012             		move.w	#0,$12(a0)
0000D918 5428 0024                  		addq.b	#2,$24(a0)
0000D91C 0868 0000 0022             		bchg	#0,$22(a0)
0000D922                            
0000D922                            locret_F89E:
0000D922 4E75                       		rts	
0000D924                            ; ===========================================================================
0000D924                            
0000D924                            Obj50_Action:				; XREF: Obj50_Index
0000D924 7000                       		moveq	#0,d0
0000D926 1028 0025                  		move.b	$25(a0),d0
0000D92A 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000D92E 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000D932 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000D938 6100 AE86                  		bsr.w	AnimateSprite
0000D93C 6000 FDF4                  		bra.w	MarkObjGone
0000D940                            ; ===========================================================================
0000D940 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000D942 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000D944                            ; ===========================================================================
0000D944                            
0000D944                            Obj50_Move:				; XREF: Obj50_Index2
0000D944 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000D948 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000D94A 5428 0025                  		addq.b	#2,$25(a0)
0000D94E 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000D954 117C 0001 001C             		move.b	#1,$1C(a0)
0000D95A 0868 0000 0022             		bchg	#0,$22(a0)
0000D960 6600                       		bne.s	locret_F8E2
0000D962 4468 0010                  		neg.w	$10(a0)		; change direction
0000D966                            
0000D966                            locret_F8E2:
0000D966 4E75                       		rts	
0000D968                            ; ===========================================================================
0000D968                            
0000D968                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000D968 6100 DD0A                  		bsr.w	SpeedToPos
0000D96C 6100 0000                  		bsr.w	ObjHitFloor
0000D970 0C41 FFF8                  		cmpi.w	#-8,d1
0000D974 6D00                       		blt.s	Obj50_Pause
0000D976 0C41 000C                  		cmpi.w	#$C,d1
0000D97A 6C00                       		bge.s	Obj50_Pause
0000D980 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000D984 6600                       		bne.s	Obj50_Pause
0000D986 4E75                       		rts	
0000D988                            ; ===========================================================================
0000D988                            
0000D988                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000D988 5528 0025                  		subq.b	#2,$25(a0)
0000D98C 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000D992 317C 0000 0010             		move.w	#0,$10(a0)
0000D998 117C 0000 001C             		move.b	#0,$1C(a0)
0000D99E 4E75                       		rts	
0000D9A0                            ; ===========================================================================
0000D9A0                            Ani_obj50:
0000D9A0                            	include "_anim\obj50.asm"
0000D9A0                            ; ---------------------------------------------------------------------------
0000D9A0                            ; Animation script - Yadrin enemy
0000D9A0                            ; ---------------------------------------------------------------------------
0000D9A0 0000                       		dc.w byte_F920-Ani_obj50
0000D9A2 0000                       		dc.w byte_F924-Ani_obj50
0000D9A4 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000D9A8 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000D9B2                            		even
0000D9B2                            		even
0000D9B2                            
0000D9B2                            ; ---------------------------------------------------------------------------
0000D9B2                            ; Sprite mappings - Yadrin enemy (SYZ)
0000D9B2                            ; ---------------------------------------------------------------------------
0000D9B2                            Map_obj50:
0000D9B2                            	include "_maps\obj50.asm"
0000D9B2                            ; ---------------------------------------------------------------------------
0000D9B2                            ; Sprite mappings - Yadrin enemy (SYZ)
0000D9B2                            ; ---------------------------------------------------------------------------
0000D9B2 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000D9B6 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000D9BA 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000D9BE 05                         byte_F93A:	dc.b 5
0000D9BF F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000D9C4 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000D9C9 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000D9CE F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000D9D3 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000D9D8 05                         byte_F954:	dc.b 5
0000D9D9 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000D9DE FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000D9E3 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000D9E8 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000D9ED 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000D9F2 05                         byte_F96E:	dc.b 5
0000D9F3 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000D9F8 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000D9FD EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000DA02 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000DA07 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000DA0C 05                         byte_F988:	dc.b 5
0000DA0D F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000DA12 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000DA17 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000DA1C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000DA21 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000DA26 05                         byte_F9A2:	dc.b 5
0000DA27 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000DA2C FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000DA31 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000DA36 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000DA3B 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000DA40 05                         byte_F9BC:	dc.b 5
0000DA41 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000DA46 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000DA4B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000DA50 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000DA55 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000DA5A                            		even
0000DA5A                            		even
0000DA5A                            
0000DA5A                            ; ---------------------------------------------------------------------------
0000DA5A                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000DA5A                            ;
0000DA5A                            ; variables:
0000DA5A                            ; d1 = width
0000DA5A                            ; d2 = height /	2 (when	jumping)
0000DA5A                            ; d3 = height /	2 (when	walking)
0000DA5A                            ; d4 = x-axis position
0000DA5A                            ; ---------------------------------------------------------------------------
0000DA5A                            
0000DA5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA5A                            
0000DA5A                            
0000DA5A                            SolidObject:
0000DA5A 4A28 0025                  		tst.b	$25(a0)
0000DA5E 6700 0000                  		beq.w	loc_FAC8
0000DA62 3401                       		move.w	d1,d2
0000DA66 43F8 D000                  		lea	($FFFFD000).w,a1
0000DA6A 0829 0001 0022             		btst	#1,$22(a1)
0000DA70 6600                       		bne.s	loc_F9FE
0000DA72 3029 0008                  		move.w	8(a1),d0
0000DA7C 6B00                       		bmi.s	loc_F9FE
0000DA7E B042                       		cmp.w	d2,d0
0000DA80 6500                       		bcs.s	loc_FA12
0000DA82                            
0000DA82                            loc_F9FE:
0000DA82 08A9 0003 0022             		bclr	#3,$22(a1)
0000DA88 08A8 0003 0022             		bclr	#3,$22(a0)
0000DA8E 4228 0025                  		clr.b	$25(a0)
0000DA92 7800                       		moveq	#0,d4
0000DA94 4E75                       		rts	
0000DA96                            ; ===========================================================================
0000DA96                            
0000DA96                            loc_FA12:
0000DA96 3404                       		move.w	d4,d2
0000DA98 6100 819A                  		bsr.w	MvSonicOnPtfm
0000DA9C 7800                       		moveq	#0,d4
0000DA9E 4E75                       		rts	
0000DAA0                            ; ===========================================================================
0000DAA0                            
0000DAA0                            SolidObject71:				; XREF: Obj71_Solid
0000DAA0 4A28 0025                  		tst.b	$25(a0)
0000DAA4 6700 0000                  		beq.w	loc_FAD0
0000DAA8 3401                       		move.w	d1,d2
0000DAAC 43F8 D000                  		lea	($FFFFD000).w,a1
0000DAB0 0829 0001 0022             		btst	#1,$22(a1)
0000DAB6 6600                       		bne.s	loc_FA44
0000DAB8 3029 0008                  		move.w	8(a1),d0
0000DAC2 6B00                       		bmi.s	loc_FA44
0000DAC4 B042                       		cmp.w	d2,d0
0000DAC6 6500                       		bcs.s	loc_FA58
0000DAC8                            
0000DAC8                            loc_FA44:
0000DAC8 08A9 0003 0022             		bclr	#3,$22(a1)
0000DACE 08A8 0003 0022             		bclr	#3,$22(a0)
0000DAD4 4228 0025                  		clr.b	$25(a0)
0000DAD8 7800                       		moveq	#0,d4
0000DADA 4E75                       		rts	
0000DADC                            ; ===========================================================================
0000DADC                            
0000DADC                            loc_FA58:
0000DADC 3404                       		move.w	d4,d2
0000DADE 6100 8154                  		bsr.w	MvSonicOnPtfm
0000DAE2 7800                       		moveq	#0,d4
0000DAE4 4E75                       		rts	
0000DAE6                            ; ===========================================================================
0000DAE6                            
0000DAE6                            SolidObject2F:				; XREF: Obj2F_Solid
0000DAE6 43F8 D000                  		lea	($FFFFD000).w,a1
0000DAEA 4A28 0001                  		tst.b	1(a0)
0000DAEE 6A00 0000                  		bpl.w	loc_FB92
0000DAF2 3029 0008                  		move.w	8(a1),d0
0000DAFC 6B00 0000                  		bmi.w	loc_FB92
0000DB00 3601                       		move.w	d1,d3
0000DB04 B043                       		cmp.w	d3,d0
0000DB06 6200 0000                  		bhi.w	loc_FB92
0000DB0A 3A00                       		move.w	d0,d5
0000DB0C 0828 0000 0001             		btst	#0,1(a0)
0000DB12 6700                       		beq.s	loc_FA94
0000DB14 4645                       		not.w	d5
0000DB18                            
0000DB18                            loc_FA94:
0000DB18 E24D                       		lsr.w	#1,d5
0000DB1A 7600                       		moveq	#0,d3
0000DB1C 1632 5000                  		move.b	(a2,d5.w),d3
0000DB22 3A28 000C                  		move.w	$C(a0),d5
0000DB28 1629 0016                  		move.b	$16(a1),d3
0000DB2C 4883                       		ext.w	d3
0000DB30 3629 000C                  		move.w	$C(a1),d3
0000DB36 5843                       		addq.w	#4,d3
0000DB3A 6B00 0000                  		bmi.w	loc_FB92
0000DB3E 3802                       		move.w	d2,d4
0000DB42 B644                       		cmp.w	d4,d3
0000DB44 6400 0000                  		bcc.w	loc_FB92
0000DB48 6000 0000                  		bra.w	loc_FB0E
0000DB4C                            ; ===========================================================================
0000DB4C                            
0000DB4C                            loc_FAC8:
0000DB4C 4A28 0001                  		tst.b	1(a0)
0000DB50 6A00 0000                  		bpl.w	loc_FB92
0000DB54                            
0000DB54                            loc_FAD0:
0000DB54 43F8 D000                  		lea	($FFFFD000).w,a1
0000DB58 3029 0008                  		move.w	8(a1),d0
0000DB62 6B00 0000                  		bmi.w	loc_FB92
0000DB66 3601                       		move.w	d1,d3
0000DB6A B043                       		cmp.w	d3,d0
0000DB6C 6200 0000                  		bhi.w	loc_FB92
0000DB70 1629 0016                  		move.b	$16(a1),d3
0000DB74 4883                       		ext.w	d3
0000DB78 3629 000C                  		move.w	$C(a1),d3
0000DB80 5843                       		addq.w	#4,d3
0000DB84 6B00 0000                  		bmi.w	loc_FB92
0000DB88 3802                       		move.w	d2,d4
0000DB8C B644                       		cmp.w	d4,d3
0000DB8E 6400 0000                  		bcc.w	loc_FB92
0000DB92                            
0000DB92                            loc_FB0E:
0000DB92 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000DB96 6B00 0000                  		bmi.w	loc_FB92
0000DB9A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DBA0 6400 0000                  		bcc.w	loc_FB92
0000DBA4 4A78 FE08                  		tst.w	($FFFFFE08).w
0000DBA8 6600 0000                  		bne.w	loc_FBAC
0000DBAC 3A00                       		move.w	d0,d5
0000DBAE B240                       		cmp.w	d0,d1
0000DBB0 6400                       		bcc.s	loc_FB36
0000DBB6 3A00                       		move.w	d0,d5
0000DBB8 4445                       		neg.w	d5
0000DBBA                            
0000DBBA                            loc_FB36:
0000DBBA 3203                       		move.w	d3,d1
0000DBBC B443                       		cmp.w	d3,d2
0000DBBE 6400                       		bcc.s	loc_FB44
0000DBC0 5943                       		subq.w	#4,d3
0000DBC4 3203                       		move.w	d3,d1
0000DBC6 4441                       		neg.w	d1
0000DBC8                            
0000DBC8                            loc_FB44:
0000DBC8 BA41                       		cmp.w	d1,d5
0000DBCA 6200 0000                  		bhi.w	loc_FBB0
0000DBCE 0C41 0004                  		cmpi.w	#4,d1
0000DBD2 6300                       		bls.s	loc_FB8C
0000DBD4 4A40                       		tst.w	d0
0000DBD6 6700                       		beq.s	loc_FB70
0000DBD8 6B00                       		bmi.s	loc_FB5E
0000DBDA 4A69 0010                  		tst.w	$10(a1)
0000DBDE 6B00                       		bmi.s	loc_FB70
0000DBE0 6000                       		bra.s	loc_FB64
0000DBE2                            ; ===========================================================================
0000DBE2                            
0000DBE2                            loc_FB5E:
0000DBE2 4A69 0010                  		tst.w	$10(a1)
0000DBE6 6A00                       		bpl.s	loc_FB70
0000DBE8                            
0000DBE8                            loc_FB64:
0000DBE8 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0000DBEE 337C 0000 0010             		move.w	#0,$10(a1)
0000DBF4                            
0000DBF4                            loc_FB70:
0000DBF8 0829 0001 0022             		btst	#1,$22(a1)
0000DBFE 6600                       		bne.s	loc_FB8C
0000DC00 08E9 0005 0022             		bset	#5,$22(a1)
0000DC06 08E8 0005 0022             		bset	#5,$22(a0)
0000DC0C 7801                       		moveq	#1,d4
0000DC0E 4E75                       		rts	
0000DC10                            ; ===========================================================================
0000DC10                            
0000DC10                            loc_FB8C:
0000DC10 6100                       		bsr.s	loc_FBA0
0000DC12 7801                       		moveq	#1,d4
0000DC14 4E75                       		rts	
0000DC16                            ; ===========================================================================
0000DC16                            
0000DC16                            loc_FB92:
0000DC16 0828 0005 0022             		btst	#5,$22(a0)
0000DC1C 6700                       		beq.s	loc_FBAC
0000DC1E 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0000DC24                            
0000DC24                            loc_FBA0:
0000DC24 08A8 0005 0022             		bclr	#5,$22(a0)
0000DC2A 08A9 0005 0022             		bclr	#5,$22(a1)
0000DC30                            
0000DC30                            loc_FBAC:
0000DC30 7800                       		moveq	#0,d4
0000DC32 4E75                       		rts	
0000DC34                            ; ===========================================================================
0000DC34                            
0000DC34                            loc_FBB0:
0000DC34 4A43                       		tst.w	d3
0000DC36 6B00                       		bmi.s	loc_FBBC
0000DC38 0C43 0010                  		cmpi.w	#$10,d3
0000DC3C 6500                       		bcs.s	loc_FBEE
0000DC3E 60D6                       		bra.s	loc_FB92
0000DC40                            ; ===========================================================================
0000DC40                            
0000DC40                            loc_FBBC:
0000DC40 4A69 0012                  		tst.w	$12(a1)
0000DC44 6700                       		beq.s	loc_FBD6
0000DC46 6A00                       		bpl.s	loc_FBD2
0000DC48 4A43                       		tst.w	d3
0000DC4A 6A00                       		bpl.s	loc_FBD2
0000DC50 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0000DC56                            
0000DC56                            loc_FBD2:
0000DC56 78FF                       		moveq	#-1,d4
0000DC58 4E75                       		rts	
0000DC5A                            ; ===========================================================================
0000DC5A                            
0000DC5A                            loc_FBD6:
0000DC5A 0829 0001 0022             		btst	#1,$22(a1)
0000DC60 66F4                       		bne.s	loc_FBD2
0000DC62 2F08                       		move.l	a0,-(sp)
0000DC64 2049                       		movea.l	a1,a0
0000DC66 4EB9 0000 0000             		jsr	KillSonic
0000DC6C 205F                       		movea.l	(sp)+,a0
0000DC6E 78FF                       		moveq	#-1,d4
0000DC70 4E75                       		rts	
0000DC72                            ; ===========================================================================
0000DC72                            
0000DC72                            loc_FBEE:
0000DC72 5943                       		subq.w	#4,d3
0000DC74 7200                       		moveq	#0,d1
0000DC76 1228 0019                  		move.b	$19(a0),d1
0000DC7A 3401                       		move.w	d1,d2
0000DC86 6B00                       		bmi.s	loc_FC28
0000DC88 B242                       		cmp.w	d2,d1
0000DC8A 6400                       		bcc.s	loc_FC28
0000DC8C 4A69 0012                  		tst.w	$12(a1)
0000DC90 6B00                       		bmi.s	loc_FC28
0000DC96 5369 000C                  		subq.w	#1,$C(a1)
0000DC9A 6100                       		bsr.s	sub_FC2C
0000DC9C 117C 0002 0025             		move.b	#2,$25(a0)
0000DCA2 08E8 0003 0022             		bset	#3,$22(a0)
0000DCA8 78FF                       		moveq	#-1,d4
0000DCAA 4E75                       		rts	
0000DCAC                            ; ===========================================================================
0000DCAC                            
0000DCAC                            loc_FC28:
0000DCAC 7800                       		moveq	#0,d4
0000DCAE 4E75                       		rts	
0000DCB0                            ; End of function SolidObject
0000DCB0                            
0000DCB0                            
0000DCB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCB0                            
0000DCB0                            
0000DCB0                            sub_FC2C:				; XREF: SolidObject
0000DCB0 0829 0003 0022             		btst	#3,$22(a1)
0000DCB6 6700                       		beq.s	loc_FC4E
0000DCB8 7000                       		moveq	#0,d0
0000DCBA 1029 003D                  		move.b	$3D(a1),d0
0000DCBE ED48                       		lsl.w	#6,d0
0000DCC0 0680 00FF D000             		addi.l	#$FFD000,d0
0000DCC6 2440                       		movea.l	d0,a2
0000DCC8 08AA 0003 0022             		bclr	#3,$22(a2)
0000DCCE 422A 0025                  		clr.b	$25(a2)
0000DCD2                            
0000DCD2                            loc_FC4E:
0000DCD2 3008                       		move.w	a0,d0
0000DCD4 0440 D000                  		subi.w	#-$3000,d0
0000DCD8 EC48                       		lsr.w	#6,d0
0000DCDA 0240 007F                  		andi.w	#$7F,d0
0000DCDE 1340 003D                  		move.b	d0,$3D(a1)
0000DCE2 137C 0000 0026             		move.b	#0,$26(a1)
0000DCE8 337C 0000 0012             		move.w	#0,$12(a1)
0000DCEE 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DCF4 0829 0001 0022             		btst	#1,$22(a1)
0000DCFA 6700                       		beq.s	loc_FC84
0000DCFC 2F08                       		move.l	a0,-(sp)
0000DCFE 2049                       		movea.l	a1,a0
0000DD00 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000DD06 205F                       		movea.l	(sp)+,a0
0000DD08                            
0000DD08                            loc_FC84:
0000DD08 08E9 0003 0022             		bset	#3,$22(a1)
0000DD0E 08E8 0003 0022             		bset	#3,$22(a0)
0000DD14 4E75                       		rts	
0000DD16                            ; End of function sub_FC2C
0000DD16                            
0000DD16                            ; ===========================================================================
0000DD16                            ; ---------------------------------------------------------------------------
0000DD16                            ; Object 51 - smashable	green block (MZ)
0000DD16                            ; ---------------------------------------------------------------------------
0000DD16                            
0000DD16                            Obj51:					; XREF: Obj_Index
0000DD16 7000                       		moveq	#0,d0
0000DD18 1028 0024                  		move.b	$24(a0),d0
0000DD1C 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0000DD20 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0000DD24 6000 FA0C                  		bra.w	MarkObjGone
0000DD28                            ; ===========================================================================
0000DD28 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
0000DD2A 0000                       		dc.w Obj51_Solid-Obj51_Index
0000DD2C 0000                       		dc.w Obj51_Display-Obj51_Index
0000DD2E                            ; ===========================================================================
0000DD2E                            
0000DD2E                            Obj51_Main:				; XREF: Obj51_Index
0000DD2E 5428 0024                  		addq.b	#2,$24(a0)
0000DD32 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
0000DD3A 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000DD40 117C 0004 0001             		move.b	#4,1(a0)
0000DD46 117C 0010 0019             		move.b	#$10,$19(a0)
0000DD4C 117C 0004 0018             		move.b	#4,$18(a0)
0000DD52 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000DD58                            
0000DD58                            Obj51_Solid:				; XREF: Obj51_Index
0000DD58 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0000DD5E 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0000DD64 323C 001B                  		move.w	#$1B,d1
0000DD68 343C 0010                  		move.w	#$10,d2
0000DD6C 363C 0011                  		move.w	#$11,d3
0000DD70 3828 0008                  		move.w	8(a0),d4
0000DD74 6100 FCE4                  		bsr.w	SolidObject
0000DD78 0828 0003 0022             		btst	#3,$22(a0)
0000DD7E 6600                       		bne.s	Obj51_Smash
0000DD80                            
0000DD80                            locret_FCFC:
0000DD80 4E75                       		rts	
0000DD82                            ; ===========================================================================
0000DD82                            
0000DD82                            Obj51_Smash:				; XREF: Obj51_Solid
0000DD82 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0000DD88 66F6                       		bne.s	locret_FCFC	; if not, branch
0000DD8A 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
0000DD90 08E9 0002 0022             		bset	#2,$22(a1)
0000DD96 137C 000E 0016             		move.b	#$E,$16(a1)
0000DD9C 137C 0007 0017             		move.b	#7,$17(a1)
0000DDA2 137C 0002 001C             		move.b	#2,$1C(a1)
0000DDA8 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0000DDAE 08E9 0001 0022             		bset	#1,$22(a1)
0000DDB4 08A9 0003 0022             		bclr	#3,$22(a1)
0000DDBA 137C 0002 0024             		move.b	#2,$24(a1)
0000DDC0 08A8 0003 0022             		bclr	#3,$22(a0)
0000DDC6 4228 0025                  		clr.b	$25(a0)
0000DDCA 117C 0001 001A             		move.b	#1,$1A(a0)
0000DDD0 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0000DDD6 7203                       		moveq	#3,d1		; set number of	fragments to 4
0000DDD8 343C 0038                  		move.w	#$38,d2
0000DDDC 6100 D4AA                  		bsr.w	SmashObject
0000DDE0 6100 DD3E                  		bsr.w	SingleObjLoad
0000DDE4 6600                       		bne.s	Obj51_Display
0000DDE6 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000DDEA 3368 0008 0008             		move.w	8(a0),8(a1)
0000DDF0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DDF6 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
0000DDFA 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0000DDFE 0C42 0006                  		cmpi.w	#6,d2
0000DE02 6500                       		bcs.s	Obj51_Bonus
0000DE04 7406                       		moveq	#6,d2
0000DE06                            
0000DE06                            Obj51_Bonus:
0000DE06 7000                       		moveq	#0,d0
0000DE08 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
0000DE0C 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0000DE12 6500                       		bcs.s	loc_FD98	; if not, branch
0000DE14 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0000DE18 740A                       		moveq	#10,d2
0000DE1A                            
0000DE1A                            loc_FD98:
0000DE1A 4EB9 0000 0000             		jsr	AddPoints
0000DE20 E24A                       		lsr.w	#1,d2
0000DE22 1342 001A                  		move.b	d2,$1A(a1)
0000DE26                            
0000DE26                            Obj51_Display:				; XREF: Obj51_Index
0000DE26 6100 D84C                  		bsr.w	SpeedToPos
0000DE2A 0668 0038 0012             		addi.w	#$38,$12(a0)
0000DE30 6100 D868                  		bsr.w	DisplaySprite
0000DE34 4A28 0001                  		tst.b	1(a0)
0000DE38 6A00 D89C                  		bpl.w	DeleteObject
0000DE3C 4E75                       		rts	
0000DE3E                            ; ===========================================================================
0000DE3E FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
0000DE42 FF00 FF00                  		dc.w $FF00, $FF00
0000DE46 0200 FE00                  		dc.w $200, $FE00
0000DE4A 0100 FF00                  		dc.w $100, $FF00
0000DE4E                            
0000DE4E 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0000DE56                            ; ---------------------------------------------------------------------------
0000DE56                            ; Sprite mappings - smashable green block (MZ)
0000DE56                            ; ---------------------------------------------------------------------------
0000DE56                            Map_obj51:
0000DE56                            	include "_maps\obj51.asm"
0000DE56                            ; ---------------------------------------------------------------------------
0000DE56                            ; Sprite mappings - smashable green block (MZ)
0000DE56                            ; ---------------------------------------------------------------------------
0000DE56 0000                       		dc.w byte_FDD8-Map_obj51
0000DE58 0000                       		dc.w byte_FDE3-Map_obj51
0000DE5A 02                         byte_FDD8:	dc.b 2
0000DE5B F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
0000DE60 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0000DE65 04                         byte_FDE3:	dc.b 4
0000DE66 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
0000DE6B 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
0000DE70 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0000DE75 0005 8000 00               		dc.b 0,	5, $80,	0, 0
0000DE7A                            		even
0000DE7A                            		even
0000DE7A                            
0000DE7A                            ; ===========================================================================
0000DE7A                            ; ---------------------------------------------------------------------------
0000DE7A                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
0000DE7A                            ; ---------------------------------------------------------------------------
0000DE7A                            
0000DE7A                            Obj52:					; XREF: Obj_Index
0000DE7A 7000                       		moveq	#0,d0
0000DE7C 1028 0024                  		move.b	$24(a0),d0
0000DE80 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0000DE84 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0000DE88                            ; ===========================================================================
0000DE88 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
0000DE8A 0000                       		dc.w Obj52_Platform-Obj52_Index
0000DE8C 0000                       		dc.w Obj52_StandOn-Obj52_Index
0000DE8E                            
0000DE8E 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
0000DE90 2001                       		dc.b $20, 1
0000DE92 2002                       		dc.b $20, 2
0000DE94 4003                       		dc.b $40, 3
0000DE96 3004                       		dc.b $30, 4
0000DE98                            ; ===========================================================================
0000DE98                            
0000DE98                            Obj52_Main:				; XREF: Obj52_Index
0000DE98 5428 0024                  		addq.b	#2,$24(a0)
0000DE9C 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0000DEA4 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000DEAA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000DEB0 6600                       		bne.s	loc_FE44
0000DEB2 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
0000DEBA 317C 43BC 0002             		move.w	#$43BC,2(a0)
0000DEC0 117C 0007 0016             		move.b	#7,$16(a0)
0000DEC6                            
0000DEC6                            loc_FE44:
0000DEC6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000DECC 6600                       		bne.s	loc_FE60
0000DECE 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0000DED4 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
0000DEDA 6700                       		beq.s	loc_FE60	; if yes, branch
0000DEDC 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0000DEE2                            
0000DEE2                            loc_FE60:
0000DEE2 117C 0004 0001             		move.b	#4,1(a0)
0000DEE8 7000                       		moveq	#0,d0
0000DEEA 1028 0028                  		move.b	$28(a0),d0
0000DEEE E648                       		lsr.w	#3,d0
0000DEF0 0240 001E                  		andi.w	#$1E,d0
0000DEF4 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0000DEF8 115A 0019                  		move.b	(a2)+,$19(a0)
0000DEFC 115A 001A                  		move.b	(a2)+,$1A(a0)
0000DF00 117C 0004 0018             		move.b	#4,$18(a0)
0000DF06 3168 0008 0030             		move.w	8(a0),$30(a0)
0000DF0C 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000DF12 0228 000F 0028             		andi.b	#$F,$28(a0)
0000DF18                            
0000DF18                            Obj52_Platform:				; XREF: Obj52_Index
0000DF18 6100 0000                  		bsr.w	Obj52_Move
0000DF1C 7200                       		moveq	#0,d1
0000DF1E 1228 0019                  		move.b	$19(a0),d1
0000DF22 4EB9 0000 5562             		jsr	(PlatformObject).l
0000DF28 6000                       		bra.s	Obj52_ChkDel
0000DF2A                            ; ===========================================================================
0000DF2A                            
0000DF2A                            Obj52_StandOn:				; XREF: Obj52_Index
0000DF2A 7200                       		moveq	#0,d1
0000DF2C 1228 0019                  		move.b	$19(a0),d1
0000DF30 4EB9 0000 56D6             		jsr	(ExitPlatform).l
0000DF36 3F28 0008                  		move.w	8(a0),-(sp)
0000DF3A 6100 0000                  		bsr.w	Obj52_Move
0000DF3E 341F                       		move.w	(sp)+,d2
0000DF40 4EB9 0000 5C40             		jsr	(MvSonicOnPtfm2).l
0000DF46                            
0000DF46                            Obj52_ChkDel:				; XREF: Obj52_Platform
0000DF46 3028 0030                  		move.w	$30(a0),d0
0000DF4A 0240 FF80                  		andi.w	#$FF80,d0
0000DF4E 3238 F700                  		move.w	($FFFFF700).w,d1
0000DF52 0441 0080                  		subi.w	#$80,d1
0000DF56 0241 FF80                  		andi.w	#$FF80,d1
0000DF5C 0C40 0280                  		cmpi.w	#$280,d0
0000DF60 6200 D774                  		bhi.w	DeleteObject
0000DF64 6000 D734                  		bra.w	DisplaySprite
0000DF68                            ; ===========================================================================
0000DF68                            
0000DF68                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0000DF68 7000                       		moveq	#0,d0
0000DF6A 1028 0028                  		move.b	$28(a0),d0
0000DF6E 0240 000F                  		andi.w	#$F,d0
0000DF74 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0000DF78 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
0000DF7C                            ; ===========================================================================
0000DF7C 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
0000DF80 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0000DF84 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0000DF88 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
0000DF8C 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
0000DF90 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
0000DF92                            ; ===========================================================================
0000DF92                            
0000DF92                            Obj52_Type00:				; XREF: Obj52_TypeIndex
0000DF92 4E75                       		rts	
0000DF94                            ; ===========================================================================
0000DF94                            
0000DF94                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0000DF94 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000DF98 323C 0060                  		move.w	#$60,d1
0000DF9C 0828 0000 0022             		btst	#0,$22(a0)
0000DFA2 6700                       		beq.s	loc_FF26
0000DFA4 4440                       		neg.w	d0
0000DFA8                            
0000DFA8                            loc_FF26:
0000DFA8 3228 0030                  		move.w	$30(a0),d1
0000DFAE 3141 0008                  		move.w	d1,8(a0)
0000DFB2 4E75                       		rts	
0000DFB4                            ; ===========================================================================
0000DFB4                            
0000DFB4                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0000DFB4 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
0000DFBA 6600                       		bne.s	Obj52_02_Wait
0000DFBC 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0000DFC0                            
0000DFC0                            Obj52_02_Wait:
0000DFC0 4E75                       		rts	
0000DFC2                            ; ===========================================================================
0000DFC2                            
0000DFC2                            Obj52_Type03:				; XREF: Obj52_TypeIndex
0000DFC2 7600                       		moveq	#0,d3
0000DFC4 1628 0019                  		move.b	$19(a0),d3
0000DFC8 6100 0000                  		bsr.w	ObjHitWallRight
0000DFCC 4A41                       		tst.w	d1		; has the platform hit a wall?
0000DFCE 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
0000DFD0 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0000DFD4 3168 0008 0030             		move.w	8(a0),$30(a0)
0000DFDA 4E75                       		rts	
0000DFDC                            ; ===========================================================================
0000DFDC                            
0000DFDC                            Obj52_03_End:
0000DFDC 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
0000DFE0 4E75                       		rts	
0000DFE2                            ; ===========================================================================
0000DFE2                            
0000DFE2                            Obj52_Type05:				; XREF: Obj52_TypeIndex
0000DFE2 7600                       		moveq	#0,d3
0000DFE4 1628 0019                  		move.b	$19(a0),d3
0000DFE8 6100 0000                  		bsr.w	ObjHitWallRight
0000DFEC 4A41                       		tst.w	d1		; has the platform hit a wall?
0000DFEE 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
0000DFF0 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0000DFF4 3168 0008 0030             		move.w	8(a0),$30(a0)
0000DFFA 4E75                       		rts	
0000DFFC                            ; ===========================================================================
0000DFFC                            
0000DFFC                            Obj52_05_End:
0000DFFC 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
0000E000 4E75                       		rts	
0000E002                            ; ===========================================================================
0000E002                            
0000E002                            Obj52_Type06:				; XREF: Obj52_TypeIndex
0000E002 6100 D670                  		bsr.w	SpeedToPos
0000E006 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
0000E00C 6100 0000                  		bsr.w	ObjHitFloor
0000E010 4A41                       		tst.w	d1		; has platform hit the floor?
0000E012 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0000E01A 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
0000E01E 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
0000E022                            
0000E022                            locret_FFA0:
0000E022 4E75                       		rts	
0000E024                            ; ===========================================================================
0000E024                            
0000E024                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0000E024 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
0000E028 6700                       		beq.s	Obj52_07_ChkDel
0000E02A 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
0000E02E                            
0000E02E                            Obj52_07_ChkDel:
0000E02E 588F                       		addq.l	#4,sp
0000E030 3028 0030                  		move.w	$30(a0),d0
0000E034 0240 FF80                  		andi.w	#$FF80,d0
0000E038 3238 F700                  		move.w	($FFFFF700).w,d1
0000E03C 0441 0080                  		subi.w	#$80,d1
0000E040 0241 FF80                  		andi.w	#$FF80,d1
0000E046 0C40 0280                  		cmpi.w	#$280,d0
0000E04A 6200 D68A                  		bhi.w	DeleteObject
0000E04E 4E75                       		rts	
0000E050                            ; ===========================================================================
0000E050                            
0000E050                            Obj52_Type08:				; XREF: Obj52_TypeIndex
0000E050 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0000E054 323C 0080                  		move.w	#$80,d1
0000E058 0828 0000 0022             		btst	#0,$22(a0)
0000E05E 6700                       		beq.s	loc_FFE2
0000E060 4440                       		neg.w	d0
0000E064                            
0000E064                            loc_FFE2:
0000E064 3228 0032                  		move.w	$32(a0),d1
0000E06A 3141 000C                  		move.w	d1,$C(a0)
0000E06E 4E75                       		rts	
0000E070                            ; ===========================================================================
0000E070                            
0000E070                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
0000E070 7600                       		moveq	#0,d3
0000E072 1628 0019                  		move.b	$19(a0),d3
0000E078 7208                       		moveq	#8,d1
0000E07A 0828 0000 0022             		btst	#0,$22(a0)
0000E080 6700                       		beq.s	loc_10004
0000E082 4441                       		neg.w	d1
0000E084 4443                       		neg.w	d3
0000E086                            
0000E086                            loc_10004:
0000E086 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
0000E08A 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
0000E08C 3028 0008                  		move.w	8(a0),d0
0000E094 B043                       		cmp.w	d3,d0
0000E096 6700                       		beq.s	Obj52_0A_Wait
0000E09C 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
0000E0A2 4E75                       		rts	
0000E0A4                            ; ===========================================================================
0000E0A4                            
0000E0A4                            Obj52_0A_Wait:
0000E0A4 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
0000E0A8 6600                       		bne.s	locret_1002E	; if time remains, branch
0000E0AA 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
0000E0B0                            
0000E0B0                            locret_1002E:
0000E0B0 4E75                       		rts	
0000E0B2                            ; ===========================================================================
0000E0B2                            
0000E0B2                            Obj52_0A_Back:
0000E0B2 3028 0008                  		move.w	8(a0),d0
0000E0BA 6700                       		beq.s	Obj52_0A_Reset
0000E0C0 4E75                       		rts	
0000E0C2                            ; ===========================================================================
0000E0C2                            
0000E0C2                            Obj52_0A_Reset:
0000E0C2 4268 0036                  		clr.w	$36(a0)
0000E0C6 5328 0028                  		subq.b	#1,$28(a0)
0000E0CA 4E75                       		rts	
0000E0CC                            ; ===========================================================================
0000E0CC                            ; ---------------------------------------------------------------------------
0000E0CC                            ; Sprite mappings - moving blocks (MZ, SBZ)
0000E0CC                            ; ---------------------------------------------------------------------------
0000E0CC                            Map_obj52:
0000E0CC                            	include "_maps\obj52mz.asm"
0000E0CC                            ; ---------------------------------------------------------------------------
0000E0CC                            ; Sprite mappings - moving blocks (MZ, SBZ)
0000E0CC                            ; ---------------------------------------------------------------------------
0000E0CC 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
0000E0D0 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
0000E0D4 0000                       		dc.w byte_1008F-Map_obj52
0000E0D6 01                         byte_10054:	dc.b 1
0000E0D7 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0000E0DC 02                         byte_1005A:	dc.b 2
0000E0DD F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0000E0E2 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
0000E0E7 04                         byte_10065:	dc.b 4
0000E0E8 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
0000E0ED 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
0000E0F2 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0000E0F7 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
0000E0FC 04                         byte_1007A:	dc.b 4
0000E0FD F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
0000E102 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0000E107 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
0000E10C F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
0000E111 03                         byte_1008F:	dc.b 3
0000E112 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
0000E117 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0000E11C F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0000E122 00                         		even
0000E122 00                         		even
0000E122                            
0000E122                            ; ---------------------------------------------------------------------------
0000E122                            ; Sprite mappings - moving block (LZ)
0000E122                            ; ---------------------------------------------------------------------------
0000E122                            Map_obj52a:
0000E122                            	include "_maps\obj52lz.asm"
0000E122                            ; ---------------------------------------------------------------------------
0000E122                            ; Sprite mappings - moving block (LZ)
0000E122                            ; ---------------------------------------------------------------------------
0000E122 0000                       		dc.w byte_100A2-Map_obj52a
0000E124 01                         byte_100A2:	dc.b 1
0000E125 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
0000E12A                            		even
0000E12A                            		even
0000E12A                            
0000E12A                            ; ===========================================================================
0000E12A                            ; ---------------------------------------------------------------------------
0000E12A                            ; Object 55 - Basaran enemy (MZ)
0000E12A                            ; ---------------------------------------------------------------------------
0000E12A                            
0000E12A                            Obj55:					; XREF: Obj_Index
0000E12A 7000                       		moveq	#0,d0
0000E12C 1028 0024                  		move.b	$24(a0),d0
0000E130 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
0000E134 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
0000E138                            ; ===========================================================================
0000E138 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
0000E13A 0000                       		dc.w Obj55_Action-Obj55_Index
0000E13C                            ; ===========================================================================
0000E13C                            
0000E13C                            Obj55_Main:				; XREF: Obj55_Index
0000E13C 5428 0024                  		addq.b	#2,$24(a0)
0000E140 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
0000E148 317C 84B8 0002             		move.w	#$84B8,2(a0)
0000E14E 117C 0004 0001             		move.b	#4,1(a0)
0000E154 117C 000C 0016             		move.b	#$C,$16(a0)
0000E15A 117C 0002 0018             		move.b	#2,$18(a0)
0000E160 117C 000B 0020             		move.b	#$B,$20(a0)
0000E166 117C 0010 0019             		move.b	#$10,$19(a0)
0000E16C                            
0000E16C                            Obj55_Action:				; XREF: Obj55_Index
0000E16C 7000                       		moveq	#0,d0
0000E16E 1028 0025                  		move.b	$25(a0),d0
0000E172 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
0000E176 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
0000E17A 43F9 0000 0000             		lea	(Ani_obj55).l,a1
0000E180 6100 A63E                  		bsr.w	AnimateSprite
0000E184 6000 F5AC                  		bra.w	MarkObjGone
0000E188                            ; ===========================================================================
0000E188 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
0000E18A 0000                       		dc.w Obj55_DropFly-Obj55_Index2
0000E18C 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
0000E18E 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
0000E190                            ; ===========================================================================
0000E190                            
0000E190                            Obj55_ChkDrop:				; XREF: Obj55_Index2
0000E190 343C 0080                  		move.w	#$80,d2
0000E194 6100 0000                  		bsr.w	Obj55_ChkSonic
0000E198 6400                       		bcc.s	Obj55_NoDrop
0000E19A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000E19E 3140 0036                  		move.w	d0,$36(a0)
0000E1A6 6500                       		bcs.s	Obj55_NoDrop
0000E1A8 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
0000E1AC 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
0000E1AE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000E1B2 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
0000E1B4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E1BA 0200 0007                  		andi.b	#7,d0
0000E1BE 6600                       		bne.s	Obj55_NoDrop
0000E1C0 117C 0001 001C             		move.b	#1,$1C(a0)
0000E1C6 5428 0025                  		addq.b	#2,$25(a0)
0000E1CA                            
0000E1CA                            Obj55_NoDrop:
0000E1CA 4E75                       		rts	
0000E1CC                            ; ===========================================================================
0000E1CC                            
0000E1CC                            Obj55_DropFly:				; XREF: Obj55_Index2
0000E1CC 6100 D4A6                  		bsr.w	SpeedToPos
0000E1D0 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
0000E1D6 343C 0080                  		move.w	#$80,d2
0000E1DA 6100 0000                  		bsr.w	Obj55_ChkSonic
0000E1DE 3028 0036                  		move.w	$36(a0),d0
0000E1E6 6500                       		bcs.s	Obj55_ChkDel
0000E1E8 0C40 0010                  		cmpi.w	#$10,d0
0000E1EC 6400                       		bcc.s	locret_10180
0000E1EE 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
0000E1F2 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
0000E1F8 117C 0002 001C             		move.b	#2,$1C(a0)
0000E1FE 5428 0025                  		addq.b	#2,$25(a0)
0000E202                            
0000E202                            locret_10180:
0000E202 4E75                       		rts	
0000E204                            ; ===========================================================================
0000E204                            
0000E204                            Obj55_ChkDel:				; XREF: Obj55_DropFly
0000E204 4A28 0001                  		tst.b	1(a0)
0000E208 6A00 D4CC                  		bpl.w	DeleteObject
0000E20C 4E75                       		rts	
0000E20E                            ; ===========================================================================
0000E20E                            
0000E20E                            Obj55_PlaySnd:				; XREF: Obj55_Index2
0000E20E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E212 0200 000F                  		andi.b	#$F,d0
0000E216 6600                       		bne.s	loc_101A0
0000E218 303C 00C0                  		move.w	#$C0,d0
0000E21C 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play flapping sound
0000E222                            
0000E222                            loc_101A0:
0000E222 6100 D450                  		bsr.w	SpeedToPos
0000E226 3038 D008                  		move.w	($FFFFD008).w,d0
0000E22E 6400                       		bcc.s	loc_101B0
0000E230 4440                       		neg.w	d0
0000E232                            
0000E232                            loc_101B0:
0000E232 0C40 0080                  		cmpi.w	#$80,d0
0000E236 6500                       		bcs.s	locret_101C6
0000E238 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E23E 0200 0007                  		andi.b	#7,d0
0000E242 6600                       		bne.s	locret_101C6
0000E244 5428 0025                  		addq.b	#2,$25(a0)
0000E248                            
0000E248                            locret_101C6:
0000E248 4E75                       		rts	
0000E24A                            ; ===========================================================================
0000E24A                            
0000E24A                            Obj55_FlyUp:				; XREF: Obj55_Index2
0000E24A 6100 D428                  		bsr.w	SpeedToPos
0000E24E 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
0000E254 6100 0000                  		bsr.w	ObjHitCeiling
0000E258 4A41                       		tst.w	d1		; has basaran hit the ceiling?
0000E25A 6A00                       		bpl.s	locret_101F4	; if not, branch
0000E260 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
0000E266 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
0000E26A 4268 0012                  		clr.w	$12(a0)
0000E26E 4228 001C                  		clr.b	$1C(a0)
0000E272 4228 0025                  		clr.b	$25(a0)
0000E276                            
0000E276                            locret_101F4:
0000E276 4E75                       		rts	
0000E278                            ; ===========================================================================
0000E278                            
0000E278                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
0000E278 323C 0100                  		move.w	#$100,d1
0000E27C 08E8 0000 0022             		bset	#0,$22(a0)
0000E282 3038 D008                  		move.w	($FFFFD008).w,d0
0000E28A 6400                       		bcc.s	loc_10214
0000E28C 4440                       		neg.w	d0
0000E28E 4441                       		neg.w	d1
0000E290 08A8 0000 0022             		bclr	#0,$22(a0)
0000E296                            
0000E296                            loc_10214:
0000E296 B042                       		cmp.w	d2,d0
0000E298 4E75                       		rts	
0000E29A                            ; ===========================================================================
0000E29A 6100 D3D8                  		bsr.w	SpeedToPos
0000E29E 6100 D3FA                  		bsr.w	DisplaySprite
0000E2A2 4A28 0001                  		tst.b	1(a0)
0000E2A6 6A00 D42E                  		bpl.w	DeleteObject
0000E2AA 4E75                       		rts	
0000E2AC                            ; ===========================================================================
0000E2AC                            Ani_obj55:
0000E2AC                            	include "_anim\obj55.asm"
0000E2AC                            ; ---------------------------------------------------------------------------
0000E2AC                            ; Animation script - Basaran enemy
0000E2AC                            ; ---------------------------------------------------------------------------
0000E2AC 0000                       		dc.w byte_10230-Ani_obj55
0000E2AE 0000                       		dc.w byte_10234-Ani_obj55
0000E2B0 0000                       		dc.w byte_10238-Ani_obj55
0000E2B2 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
0000E2B6 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
0000E2BA 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
0000E2C0                            		even
0000E2C0                            		even
0000E2C0                            
0000E2C0                            ; ---------------------------------------------------------------------------
0000E2C0                            ; Sprite mappings - Basaran enemy (MZ)
0000E2C0                            ; ---------------------------------------------------------------------------
0000E2C0                            Map_obj55:
0000E2C0                            	include "_maps\obj55.asm"
0000E2C0                            ; ---------------------------------------------------------------------------
0000E2C0                            ; Sprite mappings - Basaran enemy (MZ)
0000E2C0                            ; ---------------------------------------------------------------------------
0000E2C0 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
0000E2C4 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
0000E2C8 01                         byte_10246:	dc.b 1
0000E2C9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000E2CE 03                         byte_1024C:	dc.b 3
0000E2CF F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
0000E2D4 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
0000E2D9 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
0000E2DE 04                         byte_1025C:	dc.b 4
0000E2DF F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
0000E2E4 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
0000E2E9 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
0000E2EE 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
0000E2F3 04                         byte_10271:	dc.b 4
0000E2F4 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
0000E2F9 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
0000E2FE 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
0000E303 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
0000E308                            		even
0000E308                            		even
0000E308                            
0000E308                            ; ===========================================================================
0000E308                            ; ---------------------------------------------------------------------------
0000E308                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
0000E308                            ; ---------------------------------------------------------------------------
0000E308                            
0000E308                            Obj56:					; XREF: Obj_Index
0000E308 7000                       		moveq	#0,d0
0000E30A 1028 0024                  		move.b	$24(a0),d0
0000E30E 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
0000E312 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
0000E316                            ; ===========================================================================
0000E316 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
0000E318 0000                       		dc.w Obj56_Action-Obj56_Index
0000E31A                            
0000E31A 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
0000E31C 2020                       		dc.b  $20, $20
0000E31E 1020                       		dc.b  $10, $20
0000E320 201A                       		dc.b  $20, $1A
0000E322 1027                       		dc.b  $10, $27
0000E324 1010                       		dc.b  $10, $10
0000E326 0820                       		dc.b	8, $20
0000E328 4010                       		dc.b  $40, $10
0000E32A                            ; ===========================================================================
0000E32A                            
0000E32A                            Obj56_Main:				; XREF: Obj56_Index
0000E32A 5428 0024                  		addq.b	#2,$24(a0)
0000E32E 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
0000E336 317C 4000 0002             		move.w	#$4000,2(a0)
0000E33C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000E342 6600                       		bne.s	loc_102C8
0000E344 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
0000E34A                            
0000E34A                            loc_102C8:
0000E34A 117C 0004 0001             		move.b	#4,1(a0)
0000E350 117C 0003 0018             		move.b	#3,$18(a0)
0000E356 7000                       		moveq	#0,d0
0000E358 1028 0028                  		move.b	$28(a0),d0
0000E35C E648                       		lsr.w	#3,d0
0000E35E 0240 000E                  		andi.w	#$E,d0
0000E362 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
0000E366 115A 0019                  		move.b	(a2)+,$19(a0)
0000E36A 1152 0016                  		move.b	(a2),$16(a0)
0000E36E E248                       		lsr.w	#1,d0
0000E370 1140 001A                  		move.b	d0,$1A(a0)
0000E374 3168 0008 0034             		move.w	8(a0),$34(a0)
0000E37A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E380 7000                       		moveq	#0,d0
0000E382 1012                       		move.b	(a2),d0
0000E386 3140 003A                  		move.w	d0,$3A(a0)
0000E38A 7000                       		moveq	#0,d0
0000E38C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000E392 6700                       		beq.s	loc_10332
0000E394 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
0000E398 0240 000F                  		andi.w	#$F,d0
0000E39C 5140                       		subq.w	#8,d0
0000E39E 6500                       		bcs.s	loc_10332
0000E3A0 E548                       		lsl.w	#2,d0
0000E3A2 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
0000E3A6 45F2 0000                  		lea	(a2,d0.w),a2
0000E3AA 4A52                       		tst.w	(a2)
0000E3AC 6A00                       		bpl.s	loc_10332
0000E3AE 0868 0000 0022             		bchg	#0,$22(a0)
0000E3B4                            
0000E3B4                            loc_10332:
0000E3B4 1028 0028                  		move.b	$28(a0),d0
0000E3B8 6A00                       		bpl.s	Obj56_Action
0000E3BA 0200 000F                  		andi.b	#$F,d0
0000E3BE 1140 003C                  		move.b	d0,$3C(a0)
0000E3C2 117C 0005 0028             		move.b	#5,$28(a0)
0000E3C8 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
0000E3CE 6600                       		bne.s	Obj56_ChkGone
0000E3D0 117C 000C 0028             		move.b	#$C,$28(a0)
0000E3D6 317C 0080 003A             		move.w	#$80,$3A(a0)
0000E3DC                            
0000E3DC                            Obj56_ChkGone:
0000E3DC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E3E0 7000                       		moveq	#0,d0
0000E3E2 1028 0023                  		move.b	$23(a0),d0
0000E3E6 6700                       		beq.s	Obj56_Action
0000E3E8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E3EE 0832 0000 0002             		btst	#0,2(a2,d0.w)
0000E3F4 6700                       		beq.s	Obj56_Action
0000E3F6 5228 0028                  		addq.b	#1,$28(a0)
0000E3FA 4268 003A                  		clr.w	$3A(a0)
0000E3FE                            
0000E3FE                            Obj56_Action:				; XREF: Obj56_Index
0000E3FE 3F28 0008                  		move.w	8(a0),-(sp)
0000E402 7000                       		moveq	#0,d0
0000E404 1028 0028                  		move.b	$28(a0),d0	; get object type
0000E408 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0000E40E 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
0000E412 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
0000E416 381F                       		move.w	(sp)+,d4
0000E418 4A28 0001                  		tst.b	1(a0)
0000E41C 6A00                       		bpl.s	Obj56_ChkDel
0000E41E 7200                       		moveq	#0,d1
0000E420 1228 0019                  		move.b	$19(a0),d1
0000E424 0641 000B                  		addi.w	#$B,d1
0000E428 7400                       		moveq	#0,d2
0000E42A 1428 0016                  		move.b	$16(a0),d2
0000E42E 3602                       		move.w	d2,d3
0000E430 5243                       		addq.w	#1,d3
0000E432 6100 F626                  		bsr.w	SolidObject
0000E436                            
0000E436                            Obj56_ChkDel:
0000E436 3028 0034                  		move.w	$34(a0),d0
0000E43A 0240 FF80                  		andi.w	#$FF80,d0
0000E43E 3238 F700                  		move.w	($FFFFF700).w,d1
0000E442 0441 0080                  		subi.w	#$80,d1
0000E446 0241 FF80                  		andi.w	#$FF80,d1
0000E44C 0C40 0280                  		cmpi.w	#$280,d0
0000E450 6200 D284                  		bhi.w	DeleteObject
0000E454 6000 D244                  		bra.w	DisplaySprite
0000E458                            ; ===========================================================================
0000E458 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
0000E45C 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
0000E460 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
0000E464 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
0000E468 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
0000E46C 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
0000E470 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
0000E474                            ; ===========================================================================
0000E474                            
0000E474                            Obj56_Type00:				; XREF: Obj56_TypeIndex
0000E474 4E75                       		rts	
0000E476                            ; ===========================================================================
0000E476                            
0000E476                            Obj56_Type01:				; XREF: Obj56_TypeIndex
0000E476 323C 0040                  		move.w	#$40,d1
0000E47A 7000                       		moveq	#0,d0
0000E47C 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000E480 6000                       		bra.s	Obj56_Move_LR
0000E482                            ; ===========================================================================
0000E482                            
0000E482                            Obj56_Type02:				; XREF: Obj56_TypeIndex
0000E482 323C 0080                  		move.w	#$80,d1
0000E486 7000                       		moveq	#0,d0
0000E488 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0000E48C                            
0000E48C                            Obj56_Move_LR:
0000E48C 0828 0000 0022             		btst	#0,$22(a0)
0000E492 6700                       		beq.s	loc_10416
0000E494 4440                       		neg.w	d0
0000E498                            
0000E498                            loc_10416:
0000E498 3228 0034                  		move.w	$34(a0),d1
0000E49E 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0000E4A2 4E75                       		rts	
0000E4A4                            ; ===========================================================================
0000E4A4                            
0000E4A4                            Obj56_Type03:				; XREF: Obj56_TypeIndex
0000E4A4 323C 0040                  		move.w	#$40,d1
0000E4A8 7000                       		moveq	#0,d0
0000E4AA 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000E4AE 6000                       		bra.s	Obj56_Move_UD
0000E4B0                            ; ===========================================================================
0000E4B0                            
0000E4B0                            Obj56_Type04:				; XREF: Obj56_TypeIndex
0000E4B0 323C 0080                  		move.w	#$80,d1
0000E4B4 7000                       		moveq	#0,d0
0000E4B6 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0000E4BA                            
0000E4BA                            Obj56_Move_UD:
0000E4BA 0828 0000 0022             		btst	#0,$22(a0)
0000E4C0 6700                       		beq.s	loc_10444
0000E4C2 4440                       		neg.w	d0
0000E4C6                            
0000E4C6                            loc_10444:
0000E4C6 3228 0030                  		move.w	$30(a0),d1
0000E4CC 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0000E4D0 4E75                       		rts	
0000E4D2                            ; ===========================================================================
0000E4D2                            
0000E4D2                            Obj56_Type05:				; XREF: Obj56_TypeIndex
0000E4D2 4A28 0038                  		tst.b	$38(a0)
0000E4D6 6600                       		bne.s	loc_104A4
0000E4D8 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
0000E4DE 6600                       		bne.s	loc_1047A	; if not, branch
0000E4E0 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
0000E4E6 6600                       		bne.s	loc_1047A
0000E4E8 4238 F7C9                  		clr.b	($FFFFF7C9).w
0000E4EC 3038 D008                  		move.w	($FFFFD008).w,d0
0000E4F0 B068 0008                  		cmp.w	8(a0),d0
0000E4F4 6400                       		bcc.s	loc_1047A
0000E4F6 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
0000E4FC                            
0000E4FC                            loc_1047A:
0000E4FC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000E500 7000                       		moveq	#0,d0
0000E502 1028 003C                  		move.b	$3C(a0),d0
0000E506 0832 0000 0000             		btst	#0,(a2,d0.w)
0000E50C 6700                       		beq.s	loc_104AE
0000E50E 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
0000E514 6600                       		bne.s	loc_1049E	; if not, branch
0000E516 0C00 0003                  		cmpi.b	#3,d0
0000E51A 6600                       		bne.s	loc_1049E
0000E51C 4238 F7C9                  		clr.b	($FFFFF7C9).w
0000E520                            
0000E520                            loc_1049E:
0000E520 117C 0001 0038             		move.b	#1,$38(a0)
0000E526                            
0000E526                            loc_104A4:
0000E526 4A68 003A                  		tst.w	$3A(a0)
0000E52A 6700                       		beq.s	loc_104C8
0000E52C 5568 003A                  		subq.w	#2,$3A(a0)
0000E530                            
0000E530                            loc_104AE:
0000E530 3028 003A                  		move.w	$3A(a0),d0
0000E534 0828 0000 0022             		btst	#0,$22(a0)
0000E53A 6700                       		beq.s	loc_104BC
0000E53C 4440                       		neg.w	d0
0000E53E                            
0000E53E                            loc_104BC:
0000E53E 3228 0030                  		move.w	$30(a0),d1
0000E544 3141 000C                  		move.w	d1,$C(a0)
0000E548 4E75                       		rts	
0000E54A                            ; ===========================================================================
0000E54A                            
0000E54A                            loc_104C8:
0000E54A 5228 0028                  		addq.b	#1,$28(a0)
0000E54E 4228 0038                  		clr.b	$38(a0)
0000E552 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E556 7000                       		moveq	#0,d0
0000E558 1028 0023                  		move.b	$23(a0),d0
0000E55C 67D2                       		beq.s	loc_104AE
0000E55E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000E564 60CA                       		bra.s	loc_104AE
0000E566                            ; ===========================================================================
0000E566                            
0000E566                            Obj56_Type06:				; XREF: Obj56_TypeIndex
0000E566 4A28 0038                  		tst.b	$38(a0)
0000E56A 6600                       		bne.s	loc_10500
0000E56C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000E570 7000                       		moveq	#0,d0
0000E572 1028 003C                  		move.b	$3C(a0),d0
0000E576 4A32 0000                  		tst.b	(a2,d0.w)
0000E57A 6A00                       		bpl.s	loc_10512
0000E57C 117C 0001 0038             		move.b	#1,$38(a0)
0000E582                            
0000E582                            loc_10500:
0000E582 7000                       		moveq	#0,d0
0000E584 1028 0016                  		move.b	$16(a0),d0
0000E58A B068 003A                  		cmp.w	$3A(a0),d0
0000E58E 6700                       		beq.s	loc_1052C
0000E590 5468 003A                  		addq.w	#2,$3A(a0)
0000E594                            
0000E594                            loc_10512:
0000E594 3028 003A                  		move.w	$3A(a0),d0
0000E598 0828 0000 0022             		btst	#0,$22(a0)
0000E59E 6700                       		beq.s	loc_10520
0000E5A0 4440                       		neg.w	d0
0000E5A2                            
0000E5A2                            loc_10520:
0000E5A2 3228 0030                  		move.w	$30(a0),d1
0000E5A8 3141 000C                  		move.w	d1,$C(a0)
0000E5AC 4E75                       		rts	
0000E5AE                            ; ===========================================================================
0000E5AE                            
0000E5AE                            loc_1052C:
0000E5AE 5328 0028                  		subq.b	#1,$28(a0)
0000E5B2 4228 0038                  		clr.b	$38(a0)
0000E5B6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E5BA 7000                       		moveq	#0,d0
0000E5BC 1028 0023                  		move.b	$23(a0),d0
0000E5C0 67D2                       		beq.s	loc_10512
0000E5C2 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000E5C8 60CA                       		bra.s	loc_10512
0000E5CA                            ; ===========================================================================
0000E5CA                            
0000E5CA                            Obj56_Type07:				; XREF: Obj56_TypeIndex
0000E5CA 4A28 0038                  		tst.b	$38(a0)
0000E5CE 6600                       		bne.s	loc_1055E
0000E5D0 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
0000E5D4 6700                       		beq.s	locret_10578
0000E5D6 117C 0001 0038             		move.b	#1,$38(a0)
0000E5DC 4268 003A                  		clr.w	$3A(a0)
0000E5E0                            
0000E5E0                            loc_1055E:
0000E5E0 5268 0008                  		addq.w	#1,8(a0)
0000E5E4 3168 0008 0034             		move.w	8(a0),$34(a0)
0000E5EA 5268 003A                  		addq.w	#1,$3A(a0)
0000E5EE 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
0000E5F4 6600                       		bne.s	locret_10578
0000E5F6 4228 0028                  		clr.b	$28(a0)
0000E5FA                            
0000E5FA                            locret_10578:
0000E5FA 4E75                       		rts	
0000E5FC                            ; ===========================================================================
0000E5FC                            
0000E5FC                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
0000E5FC 4A28 0038                  		tst.b	$38(a0)
0000E600 6600                       		bne.s	loc_10598
0000E602 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000E606 7000                       		moveq	#0,d0
0000E608 1028 003C                  		move.b	$3C(a0),d0
0000E60C 0832 0000 0000             		btst	#0,(a2,d0.w)
0000E612 6700                       		beq.s	loc_105A2
0000E614 117C 0001 0038             		move.b	#1,$38(a0)
0000E61A                            
0000E61A                            loc_10598:
0000E61A 4A68 003A                  		tst.w	$3A(a0)
0000E61E 6700                       		beq.s	loc_105C0
0000E620 5568 003A                  		subq.w	#2,$3A(a0)
0000E624                            
0000E624                            loc_105A2:
0000E624 3028 003A                  		move.w	$3A(a0),d0
0000E628 0828 0000 0022             		btst	#0,$22(a0)
0000E62E 6700                       		beq.s	loc_105B4
0000E630 4440                       		neg.w	d0
0000E632 0640 0080                  		addi.w	#$80,d0
0000E636                            
0000E636                            loc_105B4:
0000E636 3228 0034                  		move.w	$34(a0),d1
0000E63C 3141 0008                  		move.w	d1,8(a0)
0000E640 4E75                       		rts	
0000E642                            ; ===========================================================================
0000E642                            
0000E642                            loc_105C0:
0000E642 5228 0028                  		addq.b	#1,$28(a0)
0000E646 4228 0038                  		clr.b	$38(a0)
0000E64A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E64E 7000                       		moveq	#0,d0
0000E650 1028 0023                  		move.b	$23(a0),d0
0000E654 67CE                       		beq.s	loc_105A2
0000E656 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000E65C 60C6                       		bra.s	loc_105A2
0000E65E                            ; ===========================================================================
0000E65E                            
0000E65E                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
0000E65E 4A28 0038                  		tst.b	$38(a0)
0000E662 6600                       		bne.s	loc_105F8
0000E664 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000E668 7000                       		moveq	#0,d0
0000E66A 1028 003C                  		move.b	$3C(a0),d0
0000E66E 4A32 0000                  		tst.b	(a2,d0.w)
0000E672 6A00                       		bpl.s	loc_10606
0000E674 117C 0001 0038             		move.b	#1,$38(a0)
0000E67A                            
0000E67A                            loc_105F8:
0000E67A 303C 0080                  		move.w	#$80,d0
0000E67E B068 003A                  		cmp.w	$3A(a0),d0
0000E682 6700                       		beq.s	loc_10624
0000E684 5468 003A                  		addq.w	#2,$3A(a0)
0000E688                            
0000E688                            loc_10606:
0000E688 3028 003A                  		move.w	$3A(a0),d0
0000E68C 0828 0000 0022             		btst	#0,$22(a0)
0000E692 6700                       		beq.s	loc_10618
0000E694 4440                       		neg.w	d0
0000E696 0640 0080                  		addi.w	#$80,d0
0000E69A                            
0000E69A                            loc_10618:
0000E69A 3228 0034                  		move.w	$34(a0),d1
0000E6A0 3141 0008                  		move.w	d1,8(a0)
0000E6A4 4E75                       		rts	
0000E6A6                            ; ===========================================================================
0000E6A6                            
0000E6A6                            loc_10624:
0000E6A6 5328 0028                  		subq.b	#1,$28(a0)
0000E6AA 4228 0038                  		clr.b	$38(a0)
0000E6AE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E6B2 7000                       		moveq	#0,d0
0000E6B4 1028 0023                  		move.b	$23(a0),d0
0000E6B8 67CE                       		beq.s	loc_10606
0000E6BA 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000E6C0 60C6                       		bra.s	loc_10606
0000E6C2                            ; ===========================================================================
0000E6C2                            
0000E6C2                            Obj56_Type08:				; XREF: Obj56_TypeIndex
0000E6C2 323C 0010                  		move.w	#$10,d1
0000E6C6 7000                       		moveq	#0,d0
0000E6C8 1038 FE88                  		move.b	($FFFFFE88).w,d0
0000E6CC E248                       		lsr.w	#1,d0
0000E6CE 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
0000E6D2 6000                       		bra.s	Obj56_Move_Sqr
0000E6D4                            ; ===========================================================================
0000E6D4                            
0000E6D4                            Obj56_Type09:				; XREF: Obj56_TypeIndex
0000E6D4 323C 0030                  		move.w	#$30,d1
0000E6D8 7000                       		moveq	#0,d0
0000E6DA 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
0000E6DE 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
0000E6E2 6000                       		bra.s	Obj56_Move_Sqr
0000E6E4                            ; ===========================================================================
0000E6E4                            
0000E6E4                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
0000E6E4 323C 0050                  		move.w	#$50,d1
0000E6E8 7000                       		moveq	#0,d0
0000E6EA 1038 FE90                  		move.b	($FFFFFE90).w,d0
0000E6EE 3638 FE92                  		move.w	($FFFFFE92).w,d3
0000E6F2 6000                       		bra.s	Obj56_Move_Sqr
0000E6F4                            ; ===========================================================================
0000E6F4                            
0000E6F4                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
0000E6F4 323C 0070                  		move.w	#$70,d1
0000E6F8 7000                       		moveq	#0,d0
0000E6FA 1038 FE94                  		move.b	($FFFFFE94).w,d0
0000E6FE 3638 FE96                  		move.w	($FFFFFE96).w,d3
0000E702                            
0000E702                            Obj56_Move_Sqr:
0000E702 4A43                       		tst.w	d3
0000E704 6600                       		bne.s	loc_1068E
0000E706 5228 0022                  		addq.b	#1,$22(a0)
0000E70A 0228 0003 0022             		andi.b	#3,$22(a0)
0000E710                            
0000E710                            loc_1068E:
0000E710 1428 0022                  		move.b	$22(a0),d2
0000E714 0202 0003                  		andi.b	#3,d2
0000E718 6600                       		bne.s	loc_106AE
0000E720 3140 0008                  		move.w	d0,8(a0)
0000E724 4441                       		neg.w	d1
0000E72A 3141 000C                  		move.w	d1,$C(a0)
0000E72E 4E75                       		rts	
0000E730                            ; ===========================================================================
0000E730                            
0000E730                            loc_106AE:
0000E730 5302                       		subq.b	#1,d2
0000E732 6600                       		bne.s	loc_106CC
0000E734 5341                       		subq.w	#1,d1
0000E738 4440                       		neg.w	d0
0000E73E 3140 000C                  		move.w	d0,$C(a0)
0000E742 5241                       		addq.w	#1,d1
0000E748 3141 0008                  		move.w	d1,8(a0)
0000E74C 4E75                       		rts	
0000E74E                            ; ===========================================================================
0000E74E                            
0000E74E                            loc_106CC:
0000E74E 5302                       		subq.b	#1,d2
0000E750 6600                       		bne.s	loc_106EA
0000E752 5341                       		subq.w	#1,d1
0000E756 4440                       		neg.w	d0
0000E75C 3140 0008                  		move.w	d0,8(a0)
0000E760 5241                       		addq.w	#1,d1
0000E766 3141 000C                  		move.w	d1,$C(a0)
0000E76A 4E75                       		rts	
0000E76C                            ; ===========================================================================
0000E76C                            
0000E76C                            loc_106EA:
0000E772 3140 000C                  		move.w	d0,$C(a0)
0000E776 4441                       		neg.w	d1
0000E77C 3141 0008                  		move.w	d1,8(a0)
0000E780 4E75                       		rts	
0000E782                            ; ===========================================================================
0000E782                            ; ---------------------------------------------------------------------------
0000E782                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0000E782                            ; ---------------------------------------------------------------------------
0000E782                            Map_obj56:
0000E782                            	include "_maps\obj56.asm"
0000E782                            ; ---------------------------------------------------------------------------
0000E782                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0000E782                            ; ---------------------------------------------------------------------------
0000E782 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
0000E786 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
0000E78A 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
0000E78E 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
0000E792 01                         byte_10710:	dc.b 1
0000E793 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
0000E798 04                         byte_10716:	dc.b 4
0000E799 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
0000E79E E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
0000E7A3 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0000E7A8 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
0000E7AD 02                         byte_1072B:	dc.b 2
0000E7AE E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
0000E7B3 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
0000E7B8 04                         byte_10736:	dc.b 4
0000E7B9 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
0000E7BE E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
0000E7C3 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
0000E7C8 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
0000E7CD 03                         byte_1074B:	dc.b 3
0000E7CE D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
0000E7D3 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
0000E7D8 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
0000E7DD 01                         byte_1075B:	dc.b 1
0000E7DE F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0000E7E3 02                         byte_10761:	dc.b 2
0000E7E4 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0000E7E9 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0000E7EE 04                         byte_1076C:	dc.b 4
0000E7EF F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
0000E7F4 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
0000E7F9 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
0000E7FE F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
0000E804 00                         		even
0000E804 00                         		even
0000E804                            
0000E804                            ; ===========================================================================
0000E804                            ; ---------------------------------------------------------------------------
0000E804                            ; Object 57 - spiked balls (SYZ, LZ)
0000E804                            ; ---------------------------------------------------------------------------
0000E804                            
0000E804                            Obj57:					; XREF: Obj_Index
0000E804 7000                       		moveq	#0,d0
0000E806 1028 0024                  		move.b	$24(a0),d0
0000E80A 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
0000E80E 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
0000E812                            ; ===========================================================================
0000E812 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
0000E814 0000                       		dc.w Obj57_Move-Obj57_Index
0000E816 0000                       		dc.w Obj57_Display-Obj57_Index
0000E818                            ; ===========================================================================
0000E818                            
0000E818                            Obj57_Main:				; XREF: Obj57_Index
0000E818 5428 0024                  		addq.b	#2,$24(a0)
0000E81C 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
0000E824 317C 03BA 0002             		move.w	#$3BA,2(a0)
0000E82A 117C 0004 0001             		move.b	#4,1(a0)
0000E830 117C 0004 0018             		move.b	#4,$18(a0)
0000E836 117C 0008 0019             		move.b	#8,$19(a0)
0000E83C 3168 0008 003A             		move.w	8(a0),$3A(a0)
0000E842 3168 000C 0038             		move.w	$C(a0),$38(a0)
0000E848 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
0000E84E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000E854 6600                       		bne.s	loc_107E8
0000E856 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
0000E85C 317C 0310 0002             		move.w	#$310,2(a0)
0000E862 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
0000E86A                            
0000E86A                            loc_107E8:
0000E86A 1228 0028                  		move.b	$28(a0),d1	; get object type
0000E86E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0000E872 4881                       		ext.w	d1
0000E874 E741                       		asl.w	#3,d1		; multiply by 8
0000E876 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
0000E87A 1028 0022                  		move.b	$22(a0),d0
0000E87E E418                       		ror.b	#2,d0
0000E880 0200 00C0                  		andi.b	#-$40,d0
0000E884 1140 0026                  		move.b	d0,$26(a0)
0000E888 45E8 0029                  		lea	$29(a0),a2
0000E88C 1228 0028                  		move.b	$28(a0),d1	; get object type
0000E890 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
0000E894 14FC 0000                  		move.b	#0,(a2)+
0000E898 3601                       		move.w	d1,d3
0000E89A E94B                       		lsl.w	#4,d3
0000E89C 1143 003C                  		move.b	d3,$3C(a0)
0000E8A0 5341                       		subq.w	#1,d1		; set chain length (type-1)
0000E8A2 6500                       		bcs.s	loc_10894
0000E8A4 0828 0003 0028             		btst	#3,$28(a0)
0000E8AA 6700                       		beq.s	Obj57_MakeChain
0000E8AC 5341                       		subq.w	#1,d1
0000E8AE 6500                       		bcs.s	loc_10894
0000E8B0                            
0000E8B0                            Obj57_MakeChain:
0000E8B0 6100 D26E                  		bsr.w	SingleObjLoad
0000E8B4 6600                       		bne.s	loc_10894
0000E8B6 5228 0029                  		addq.b	#1,$29(a0)
0000E8BA 3A09                       		move.w	a1,d5
0000E8BC 0445 D000                  		subi.w	#-$3000,d5
0000E8C0 EC4D                       		lsr.w	#6,d5
0000E8C2 0245 007F                  		andi.w	#$7F,d5
0000E8C6 14C5                       		move.b	d5,(a2)+
0000E8C8 137C 0004 0024             		move.b	#4,$24(a1)
0000E8CE 1290                       		move.b	0(a0),0(a1)
0000E8D0 2368 0004 0004             		move.l	4(a0),4(a1)
0000E8D6 3368 0002 0002             		move.w	2(a0),2(a1)
0000E8DC 1368 0001 0001             		move.b	1(a0),1(a1)
0000E8E2 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000E8E8 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000E8EE 1368 0020 0020             		move.b	$20(a0),$20(a1)
0000E8F4 0403 0010                  		subi.b	#$10,d3
0000E8F8 1343 003C                  		move.b	d3,$3C(a1)
0000E8FC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000E902 6600                       		bne.s	loc_10890
0000E904 4A03                       		tst.b	d3
0000E906 6600                       		bne.s	loc_10890
0000E908 137C 0002 001A             		move.b	#2,$1A(a1)
0000E90E                            
0000E90E                            loc_10890:
0000E90E 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
0000E912                            
0000E912                            loc_10894:
0000E912 3A08                       		move.w	a0,d5
0000E914 0445 D000                  		subi.w	#-$3000,d5
0000E918 EC4D                       		lsr.w	#6,d5
0000E91A 0245 007F                  		andi.w	#$7F,d5
0000E91E 14C5                       		move.b	d5,(a2)+
0000E920 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000E926 6600                       		bne.s	Obj57_Move
0000E928 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
0000E92E 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
0000E934                            
0000E934                            Obj57_Move:				; XREF: Obj57_Index
0000E934 6100 0000                  		bsr.w	Obj57_MoveSub
0000E938 6000 0000                  		bra.w	Obj57_ChkDel
0000E93C                            ; ===========================================================================
0000E93C                            
0000E93C                            Obj57_MoveSub:				; XREF: Obj57_Move
0000E93C 3028 003E                  		move.w	$3E(a0),d0
0000E944 1028 0026                  		move.b	$26(a0),d0
0000E948 4EB9 0000 2556             		jsr	(CalcSine).l
0000E94E 3428 0038                  		move.w	$38(a0),d2
0000E952 3628 003A                  		move.w	$3A(a0),d3
0000E956 45E8 0029                  		lea	$29(a0),a2
0000E95A 7C00                       		moveq	#0,d6
0000E95C 1C1A                       		move.b	(a2)+,d6
0000E95E                            
0000E95E                            Obj57_MoveLoop:
0000E95E 7800                       		moveq	#0,d4
0000E960 181A                       		move.b	(a2)+,d4
0000E962 ED4C                       		lsl.w	#6,d4
0000E964 0684 00FF D000             		addi.l	#$FFD000,d4
0000E96A 2244                       		movea.l	d4,a1
0000E96C 7800                       		moveq	#0,d4
0000E96E 1829 003C                  		move.b	$3C(a1),d4
0000E972 2A04                       		move.l	d4,d5
0000E974 C9C0                       		muls.w	d0,d4
0000E976 E084                       		asr.l	#8,d4
0000E978 CBC1                       		muls.w	d1,d5
0000E97A E085                       		asr.l	#8,d5
0000E980 3344 000C                  		move.w	d4,$C(a1)
0000E984 3345 0008                  		move.w	d5,8(a1)
0000E988 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
0000E98C 4E75                       		rts	
0000E98E                            ; ===========================================================================
0000E98E                            
0000E98E                            Obj57_ChkDel:				; XREF: Obj57_Move
0000E98E 3028 003A                  		move.w	$3A(a0),d0
0000E992 0240 FF80                  		andi.w	#$FF80,d0
0000E996 3238 F700                  		move.w	($FFFFF700).w,d1
0000E99A 0441 0080                  		subi.w	#$80,d1
0000E99E 0241 FF80                  		andi.w	#$FF80,d1
0000E9A4 0C40 0280                  		cmpi.w	#$280,d0
0000E9A8 6200 0000                  		bhi.w	Obj57_Delete
0000E9AC 6000 CCEC                  		bra.w	DisplaySprite
0000E9B0                            ; ===========================================================================
0000E9B0                            
0000E9B0                            Obj57_Delete:				; XREF: Obj57_ChkDel
0000E9B0 7400                       		moveq	#0,d2
0000E9B2 45E8 0029                  		lea	$29(a0),a2
0000E9B6 141A                       		move.b	(a2)+,d2
0000E9B8                            
0000E9B8                            Obj57_DelLoop:
0000E9B8 7000                       		moveq	#0,d0
0000E9BA 101A                       		move.b	(a2)+,d0
0000E9BC ED48                       		lsl.w	#6,d0
0000E9BE 0680 00FF D000             		addi.l	#$FFD000,d0
0000E9C4 2240                       		movea.l	d0,a1
0000E9C6 6100 CD10                  		bsr.w	DeleteObject2
0000E9CA 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
0000E9CE                            
0000E9CE 4E75                       		rts	
0000E9D0                            ; ===========================================================================
0000E9D0                            
0000E9D0                            Obj57_Display:				; XREF: Obj57_Index
0000E9D0 6000 CCC8                  		bra.w	DisplaySprite
0000E9D4                            ; ===========================================================================
0000E9D4                            ; ---------------------------------------------------------------------------
0000E9D4                            ; Sprite mappings - chain of spiked balls (SYZ)
0000E9D4                            ; ---------------------------------------------------------------------------
0000E9D4                            Map_obj57:
0000E9D4                            	include "_maps\obj57syz.asm"
0000E9D4                            ; ---------------------------------------------------------------------------
0000E9D4                            ; Sprite mappings - chain of spiked balls (SYZ)
0000E9D4                            ; ---------------------------------------------------------------------------
0000E9D4 0000                       		dc.w byte_10958-Map_obj57
0000E9D6 01                         byte_10958:	dc.b 1
0000E9D7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000E9DC                            		even
0000E9DC                            		even
0000E9DC                            
0000E9DC                            ; ---------------------------------------------------------------------------
0000E9DC                            ; Sprite mappings - spiked ball	on a chain (LZ)
0000E9DC                            ; ---------------------------------------------------------------------------
0000E9DC                            Map_obj57a:
0000E9DC                            	include "_maps\obj57lz.asm"
0000E9DC                            ; ---------------------------------------------------------------------------
0000E9DC                            ; Sprite mappings - spiked ball	on a chain (LZ)
0000E9DC                            ; ---------------------------------------------------------------------------
0000E9DC 0000                       		dc.w byte_10964-Map_obj57a
0000E9DE 0000                       		dc.w byte_1096A-Map_obj57a
0000E9E0 0000                       		dc.w byte_10970-Map_obj57a
0000E9E2 01                         byte_10964:	dc.b 1
0000E9E3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000E9E8 01                         byte_1096A:	dc.b 1
0000E9E9 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
0000E9EE 01                         byte_10970:	dc.b 1
0000E9EF F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
0000E9F4                            		even
0000E9F4                            		even
0000E9F4                            
0000E9F4                            ; ===========================================================================
0000E9F4                            ; ---------------------------------------------------------------------------
0000E9F4                            ; Object 58 - giant spiked balls (SYZ)
0000E9F4                            ; ---------------------------------------------------------------------------
0000E9F4                            
0000E9F4                            Obj58:					; XREF: Obj_Index
0000E9F4 7000                       		moveq	#0,d0
0000E9F6 1028 0024                  		move.b	$24(a0),d0
0000E9FA 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
0000E9FE 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
0000EA02                            ; ===========================================================================
0000EA02 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
0000EA04 0000                       		dc.w Obj58_Move-Obj58_Index
0000EA06                            ; ===========================================================================
0000EA06                            
0000EA06                            Obj58_Main:				; XREF: Obj58_Index
0000EA06 5428 0024                  		addq.b	#2,$24(a0)
0000EA0A 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
0000EA12 317C 0396 0002             		move.w	#$396,2(a0)
0000EA18 117C 0004 0001             		move.b	#4,1(a0)
0000EA1E 117C 0004 0018             		move.b	#4,$18(a0)
0000EA24 117C 0018 0019             		move.b	#$18,$19(a0)
0000EA2A 3168 0008 003A             		move.w	8(a0),$3A(a0)
0000EA30 3168 000C 0038             		move.w	$C(a0),$38(a0)
0000EA36 117C 0086 0020             		move.b	#$86,$20(a0)
0000EA3C 1228 0028                  		move.b	$28(a0),d1	; get object type
0000EA40 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0000EA44 4881                       		ext.w	d1
0000EA46 E741                       		asl.w	#3,d1		; multiply by 8
0000EA48 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
0000EA4C 1028 0022                  		move.b	$22(a0),d0
0000EA50 E418                       		ror.b	#2,d0
0000EA52 0200 00C0                  		andi.b	#$C0,d0
0000EA56 1140 0026                  		move.b	d0,$26(a0)
0000EA5A 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
0000EA60                            
0000EA60                            Obj58_Move:				; XREF: Obj58_Index
0000EA60 7000                       		moveq	#0,d0
0000EA62 1028 0028                  		move.b	$28(a0),d0	; get object type
0000EA66 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
0000EA6C 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
0000EA70 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
0000EA74 3028 003A                  		move.w	$3A(a0),d0
0000EA78 0240 FF80                  		andi.w	#$FF80,d0
0000EA7C 3238 F700                  		move.w	($FFFFF700).w,d1
0000EA80 0441 0080                  		subi.w	#$80,d1
0000EA84 0241 FF80                  		andi.w	#$FF80,d1
0000EA8A 0C40 0280                  		cmpi.w	#$280,d0
0000EA8E 6200 CC46                  		bhi.w	DeleteObject
0000EA92 6000 CC06                  		bra.w	DisplaySprite
0000EA96                            ; ===========================================================================
0000EA96 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
0000EA98 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
0000EA9A 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
0000EA9C 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
0000EA9E                            ; ===========================================================================
0000EA9E                            
0000EA9E                            Obj58_Type00:				; XREF: Obj58_TypeIndex
0000EA9E 4E75                       		rts	
0000EAA0                            ; ===========================================================================
0000EAA0                            
0000EAA0                            Obj58_Type01:				; XREF: Obj58_TypeIndex
0000EAA0 323C 0060                  		move.w	#$60,d1
0000EAA4 7000                       		moveq	#0,d0
0000EAA6 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000EAAA 0828 0000 0022             		btst	#0,$22(a0)
0000EAB0 6700                       		beq.s	loc_10A38
0000EAB2 4440                       		neg.w	d0
0000EAB6                            
0000EAB6                            loc_10A38:
0000EAB6 3228 003A                  		move.w	$3A(a0),d1
0000EABC 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0000EAC0 4E75                       		rts	
0000EAC2                            ; ===========================================================================
0000EAC2                            
0000EAC2                            Obj58_Type02:				; XREF: Obj58_TypeIndex
0000EAC2 323C 0060                  		move.w	#$60,d1
0000EAC6 7000                       		moveq	#0,d0
0000EAC8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000EACC 0828 0000 0022             		btst	#0,$22(a0)
0000EAD2 6700                       		beq.s	loc_10A5C
0000EAD4 4440                       		neg.w	d0
0000EAD6 0640 0080                  		addi.w	#$80,d0
0000EADA                            
0000EADA                            loc_10A5C:
0000EADA 3228 0038                  		move.w	$38(a0),d1
0000EAE0 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0000EAE4 4E75                       		rts	
0000EAE6                            ; ===========================================================================
0000EAE6                            
0000EAE6                            Obj58_Type03:				; XREF: Obj58_TypeIndex
0000EAE6 3028 003E                  		move.w	$3E(a0),d0
0000EAEE 1028 0026                  		move.b	$26(a0),d0
0000EAF2 4EB9 0000 2556             		jsr	(CalcSine).l
0000EAF8 3428 0038                  		move.w	$38(a0),d2
0000EAFC 3628 003A                  		move.w	$3A(a0),d3
0000EB00 7800                       		moveq	#0,d4
0000EB02 1828 003C                  		move.b	$3C(a0),d4
0000EB06 2A04                       		move.l	d4,d5
0000EB08 C9C0                       		muls.w	d0,d4
0000EB0A E084                       		asr.l	#8,d4
0000EB0C CBC1                       		muls.w	d1,d5
0000EB0E E085                       		asr.l	#8,d5
0000EB14 3144 000C                  		move.w	d4,$C(a0)
0000EB18 3145 0008                  		move.w	d5,8(a0)
0000EB1C 4E75                       		rts	
0000EB1E                            ; ===========================================================================
0000EB1E                            ; ---------------------------------------------------------------------------
0000EB1E                            ; Sprite mappings - SBZ	spiked ball on a chain
0000EB1E                            ; ---------------------------------------------------------------------------
0000EB1E                            Map_obj15b:
0000EB1E                            	include "_maps\obj15sbz.asm"
0000EB1E                            ; ---------------------------------------------------------------------------
0000EB1E                            ; Sprite mappings - spiked ball on a chain (SBZ)
0000EB1E                            ; ---------------------------------------------------------------------------
0000EB1E 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
0000EB22 0000                       		dc.w byte_10AC6-Map_obj15b
0000EB24 05                         byte_10AA6:	dc.b 5
0000EB25 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
0000EB2A F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
0000EB2F F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
0000EB34 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
0000EB39 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
0000EB3E 01                         byte_10AC0:	dc.b 1
0000EB3F F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
0000EB44 02                         byte_10AC6:	dc.b 2
0000EB45 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
0000EB4A E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
0000EB50 00                         		even
0000EB50 00                         		even
0000EB50                            
0000EB50                            ; ===========================================================================
0000EB50                            ; ---------------------------------------------------------------------------
0000EB50                            ; Object 59 - platforms	that move when you stand on them (SLZ)
0000EB50                            ; ---------------------------------------------------------------------------
0000EB50                            
0000EB50                            Obj59:					; XREF: Obj_Index
0000EB50 7000                       		moveq	#0,d0
0000EB52 1028 0024                  		move.b	$24(a0),d0
0000EB56 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
0000EB5A 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
0000EB5E 3028 0032                  		move.w	$32(a0),d0
0000EB62 0240 FF80                  		andi.w	#$FF80,d0
0000EB66 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB6A 0441 0080                  		subi.w	#$80,d1
0000EB6E 0241 FF80                  		andi.w	#$FF80,d1
0000EB74 0C40 0280                  		cmpi.w	#$280,d0
0000EB78 6200 CB5C                  		bhi.w	DeleteObject
0000EB7C 6000 CB1C                  		bra.w	DisplaySprite
0000EB80                            ; ===========================================================================
0000EB80 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
0000EB82 0000                       		dc.w Obj59_Platform-Obj59_Index
0000EB84 0000                       		dc.w Obj59_Action-Obj59_Index
0000EB86 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
0000EB88                            
0000EB88 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
0000EB8A                            
0000EB8A 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
0000EB8C 2001                       		dc.b $20, 1
0000EB8E 3401                       		dc.b $34, 1
0000EB90 1003                       		dc.b $10, 3
0000EB92 2003                       		dc.b $20, 3
0000EB94 3403                       		dc.b $34, 3
0000EB96 1401                       		dc.b $14, 1
0000EB98 2401                       		dc.b $24, 1
0000EB9A 2C01                       		dc.b $2C, 1
0000EB9C 1403                       		dc.b $14, 3
0000EB9E 2403                       		dc.b $24, 3
0000EBA0 2C03                       		dc.b $2C, 3
0000EBA2 2005                       		dc.b $20, 5
0000EBA4 2007                       		dc.b $20, 7
0000EBA6 3009                       		dc.b $30, 9
0000EBA8                            ; ===========================================================================
0000EBA8                            
0000EBA8                            Obj59_Main:				; XREF: Obj59_Index
0000EBA8 5428 0024                  		addq.b	#2,$24(a0)
0000EBAC 7000                       		moveq	#0,d0
0000EBAE 1028 0028                  		move.b	$28(a0),d0
0000EBB2 6A00                       		bpl.s	Obj59_Main2
0000EBB4 5828 0024                  		addq.b	#4,$24(a0)
0000EBB8 0240 007F                  		andi.w	#$7F,d0
0000EBBC C0FC 0006                  		mulu.w	#6,d0
0000EBC0 3140 003C                  		move.w	d0,$3C(a0)
0000EBC4 3140 003E                  		move.w	d0,$3E(a0)
0000EBC8 588F                       		addq.l	#4,sp
0000EBCA 4E75                       		rts	
0000EBCC                            ; ===========================================================================
0000EBCC                            
0000EBCC                            Obj59_Main2:
0000EBCC E648                       		lsr.w	#3,d0
0000EBCE 0240 001E                  		andi.w	#$1E,d0
0000EBD2 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
0000EBD6 115A 0019                  		move.b	(a2)+,$19(a0)
0000EBDA 115A 001A                  		move.b	(a2)+,$1A(a0)
0000EBDE 7000                       		moveq	#0,d0
0000EBE0 1028 0028                  		move.b	$28(a0),d0
0000EBE6 0240 001E                  		andi.w	#$1E,d0
0000EBEA 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
0000EBEE 101A                       		move.b	(a2)+,d0
0000EBF0 E548                       		lsl.w	#2,d0
0000EBF2 3140 003C                  		move.w	d0,$3C(a0)
0000EBF6 115A 0028                  		move.b	(a2)+,$28(a0)
0000EBFA 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
0000EC02 317C 4000 0002             		move.w	#$4000,2(a0)
0000EC08 117C 0004 0001             		move.b	#4,1(a0)
0000EC0E 117C 0004 0018             		move.b	#4,$18(a0)
0000EC14 3168 0008 0032             		move.w	8(a0),$32(a0)
0000EC1A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EC20                            
0000EC20                            Obj59_Platform:				; XREF: Obj59_Index
0000EC20 7200                       		moveq	#0,d1
0000EC22 1228 0019                  		move.b	$19(a0),d1
0000EC26 4EB9 0000 5562             		jsr	(PlatformObject).l
0000EC2C 6000 0000                  		bra.w	Obj59_Types
0000EC30                            ; ===========================================================================
0000EC30                            
0000EC30                            Obj59_Action:				; XREF: Obj59_Index
0000EC30 7200                       		moveq	#0,d1
0000EC32 1228 0019                  		move.b	$19(a0),d1
0000EC36 4EB9 0000 56D6             		jsr	(ExitPlatform).l
0000EC3C 3F28 0008                  		move.w	8(a0),-(sp)
0000EC40 6100 0000                  		bsr.w	Obj59_Types
0000EC44 341F                       		move.w	(sp)+,d2
0000EC46 4A10                       		tst.b	0(a0)
0000EC48 6700                       		beq.s	locret_10BD4
0000EC4A 4EF9 0000 5C40             		jmp	(MvSonicOnPtfm2).l
0000EC50                            ; ===========================================================================
0000EC50                            
0000EC50                            locret_10BD4:
0000EC50 4E75                       		rts	
0000EC52                            ; ===========================================================================
0000EC52                            
0000EC52                            Obj59_Types:
0000EC52 7000                       		moveq	#0,d0
0000EC54 1028 0028                  		move.b	$28(a0),d0
0000EC58 0240 000F                  		andi.w	#$F,d0
0000EC5E 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
0000EC62 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
0000EC66                            ; ===========================================================================
0000EC66 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0000EC6A 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0000EC6E 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0000EC72 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0000EC76 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
0000EC7A                            ; ===========================================================================
0000EC7A                            
0000EC7A                            Obj59_Type00:				; XREF: Obj59_TypeIndex
0000EC7A 4E75                       		rts	
0000EC7C                            ; ===========================================================================
0000EC7C                            
0000EC7C                            Obj59_Type01:				; XREF: Obj59_TypeIndex
0000EC7C 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
0000EC82 6600                       		bne.s	locret_10C0C
0000EC84 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0000EC88                            
0000EC88                            locret_10C0C:
0000EC88 4E75                       		rts	
0000EC8A                            ; ===========================================================================
0000EC8A                            
0000EC8A                            Obj59_Type02:				; XREF: Obj59_TypeIndex
0000EC8A 6100 0000                  		bsr.w	Obj59_Move
0000EC8E 3028 0034                  		move.w	$34(a0),d0
0000EC92 4440                       		neg.w	d0
0000EC98 3140 000C                  		move.w	d0,$C(a0)
0000EC9C 4E75                       		rts	
0000EC9E                            ; ===========================================================================
0000EC9E                            
0000EC9E                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0000EC9E 6100 0000                  		bsr.w	Obj59_Move
0000ECA2 3028 0034                  		move.w	$34(a0),d0
0000ECAA 3140 000C                  		move.w	d0,$C(a0)
0000ECAE 4E75                       		rts	
0000ECB0                            ; ===========================================================================
0000ECB0                            
0000ECB0                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0000ECB0 6100 0000                  		bsr.w	Obj59_Move
0000ECB4 3028 0034                  		move.w	$34(a0),d0
0000ECB8 E240                       		asr.w	#1,d0
0000ECBA 4440                       		neg.w	d0
0000ECC0 3140 000C                  		move.w	d0,$C(a0)
0000ECC4 3028 0034                  		move.w	$34(a0),d0
0000ECCC 3140 0008                  		move.w	d0,8(a0)
0000ECD0 4E75                       		rts	
0000ECD2                            ; ===========================================================================
0000ECD2                            
0000ECD2                            Obj59_Type08:				; XREF: Obj59_TypeIndex
0000ECD2 6100 0000                  		bsr.w	Obj59_Move
0000ECD6 3028 0034                  		move.w	$34(a0),d0
0000ECDA E240                       		asr.w	#1,d0
0000ECE0 3140 000C                  		move.w	d0,$C(a0)
0000ECE4 3028 0034                  		move.w	$34(a0),d0
0000ECE8 4440                       		neg.w	d0
0000ECEE 3140 0008                  		move.w	d0,8(a0)
0000ECF2 4E75                       		rts	
0000ECF4                            ; ===========================================================================
0000ECF4                            
0000ECF4                            Obj59_Type09:				; XREF: Obj59_TypeIndex
0000ECF4 6100 0000                  		bsr.w	Obj59_Move
0000ECF8 3028 0034                  		move.w	$34(a0),d0
0000ECFC 4440                       		neg.w	d0
0000ED02 3140 000C                  		move.w	d0,$C(a0)
0000ED06 4A28 0028                  		tst.b	$28(a0)
0000ED0A 6700 0000                  		beq.w	loc_10C94
0000ED0E 4E75                       		rts	
0000ED10                            ; ===========================================================================
0000ED10                            
0000ED10                            loc_10C94:
0000ED10 0828 0003 0022             		btst	#3,$22(a0)
0000ED16 6700                       		beq.s	Obj59_Delete
0000ED18 08E9 0001 0022             		bset	#1,$22(a1)
0000ED1E 08A9 0003 0022             		bclr	#3,$22(a1)
0000ED24 137C 0002 0024             		move.b	#2,$24(a1)
0000ED2A                            
0000ED2A                            Obj59_Delete:
0000ED2A 6000 C9AA                  		bra.w	DeleteObject
0000ED2E                            
0000ED2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ED2E                            
0000ED2E                            
0000ED2E                            Obj59_Move:				; XREF: Obj59_Type02; et al
0000ED2E 3028 0038                  		move.w	$38(a0),d0
0000ED32 4A28 003A                  		tst.b	$3A(a0)
0000ED36 6600                       		bne.s	loc_10CC8
0000ED38 0C40 0800                  		cmpi.w	#$800,d0
0000ED3C 6400                       		bcc.s	loc_10CD0
0000ED3E 0640 0010                  		addi.w	#$10,d0
0000ED42 6000                       		bra.s	loc_10CD0
0000ED44                            ; ===========================================================================
0000ED44                            
0000ED44                            loc_10CC8:
0000ED44 4A40                       		tst.w	d0
0000ED46 6700                       		beq.s	loc_10CD0
0000ED48 0440 0010                  		subi.w	#$10,d0
0000ED4C                            
0000ED4C                            loc_10CD0:
0000ED4C 3140 0038                  		move.w	d0,$38(a0)
0000ED50 48C0                       		ext.l	d0
0000ED52 E180                       		asl.l	#8,d0
0000ED58 2140 0034                  		move.l	d0,$34(a0)
0000ED5C 4840                       		swap	d0
0000ED5E 3428 003C                  		move.w	$3C(a0),d2
0000ED62 B042                       		cmp.w	d2,d0
0000ED64 6300                       		bls.s	loc_10CF0
0000ED66 117C 0001 003A             		move.b	#1,$3A(a0)
0000ED6C                            
0000ED6C                            loc_10CF0:
0000ED6E B042                       		cmp.w	d2,d0
0000ED70 6600                       		bne.s	locret_10CFA
0000ED72 4228 0028                  		clr.b	$28(a0)
0000ED76                            
0000ED76                            locret_10CFA:
0000ED76 4E75                       		rts	
0000ED78                            ; End of function Obj59_Move
0000ED78                            
0000ED78                            ; ===========================================================================
0000ED78                            
0000ED78                            Obj59_MakeMulti:			; XREF: Obj59_Index
0000ED78 5368 003C                  		subq.w	#1,$3C(a0)
0000ED7C 6600                       		bne.s	Obj59_ChkDel
0000ED7E 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
0000ED84 6100 CD9A                  		bsr.w	SingleObjLoad
0000ED88 6600                       		bne.s	Obj59_ChkDel
0000ED8A 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
0000ED8E 3368 0008 0008             		move.w	8(a0),8(a1)
0000ED94 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ED9A 137C 000E 0028             		move.b	#$E,$28(a1)
0000EDA0                            
0000EDA0                            Obj59_ChkDel:
0000EDA0 588F                       		addq.l	#4,sp
0000EDA2 3028 0008                  		move.w	8(a0),d0
0000EDA6 0240 FF80                  		andi.w	#$FF80,d0
0000EDAA 3238 F700                  		move.w	($FFFFF700).w,d1
0000EDAE 0441 0080                  		subi.w	#$80,d1
0000EDB2 0241 FF80                  		andi.w	#$FF80,d1
0000EDB8 0C40 0280                  		cmpi.w	#$280,d0
0000EDBC 6200 C918                  		bhi.w	DeleteObject
0000EDC0 4E75                       		rts	
0000EDC2                            ; ===========================================================================
0000EDC2                            ; ---------------------------------------------------------------------------
0000EDC2                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0000EDC2                            ; ---------------------------------------------------------------------------
0000EDC2                            Map_obj59:
0000EDC2                            	include "_maps\obj59.asm"
0000EDC2                            ; ---------------------------------------------------------------------------
0000EDC2                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0000EDC2                            ; ---------------------------------------------------------------------------
0000EDC2 0000                       		dc.w byte_10D4A-Map_obj59
0000EDC4 03                         byte_10D4A:	dc.b 3
0000EDC5 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
0000EDCA F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0000EDCF F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0000EDD4                            		even
0000EDD4                            		even
0000EDD4                            
0000EDD4                            ; ===========================================================================
0000EDD4                            ; ---------------------------------------------------------------------------
0000EDD4                            ; Object 5A - platforms	moving in circles (SLZ)
0000EDD4                            ; ---------------------------------------------------------------------------
0000EDD4                            
0000EDD4                            Obj5A:					; XREF: Obj_Index
0000EDD4 7000                       		moveq	#0,d0
0000EDD6 1028 0024                  		move.b	$24(a0),d0
0000EDDA 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
0000EDDE 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
0000EDE2 3028 0032                  		move.w	$32(a0),d0
0000EDE6 0240 FF80                  		andi.w	#$FF80,d0
0000EDEA 3238 F700                  		move.w	($FFFFF700).w,d1
0000EDEE 0441 0080                  		subi.w	#$80,d1
0000EDF2 0241 FF80                  		andi.w	#$FF80,d1
0000EDF8 0C40 0280                  		cmpi.w	#$280,d0
0000EDFC 6200 C8D8                  		bhi.w	DeleteObject
0000EE00 6000 C898                  		bra.w	DisplaySprite
0000EE04                            ; ===========================================================================
0000EE04 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
0000EE06 0000                       		dc.w Obj5A_Platform-Obj5A_Index
0000EE08 0000                       		dc.w Obj5A_Action-Obj5A_Index
0000EE0A                            ; ===========================================================================
0000EE0A                            
0000EE0A                            Obj5A_Main:				; XREF: Obj5A_Index
0000EE0A 5428 0024                  		addq.b	#2,$24(a0)
0000EE0E 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
0000EE16 317C 4000 0002             		move.w	#$4000,2(a0)
0000EE1C 117C 0004 0001             		move.b	#4,1(a0)
0000EE22 117C 0004 0018             		move.b	#4,$18(a0)
0000EE28 117C 0018 0019             		move.b	#$18,$19(a0)
0000EE2E 3168 0008 0032             		move.w	8(a0),$32(a0)
0000EE34 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE3A                            
0000EE3A                            Obj5A_Platform:				; XREF: Obj5A_Index
0000EE3A 7200                       		moveq	#0,d1
0000EE3C 1228 0019                  		move.b	$19(a0),d1
0000EE40 4EB9 0000 5562             		jsr	(PlatformObject).l
0000EE46 6000 0000                  		bra.w	Obj5A_Types
0000EE4A                            ; ===========================================================================
0000EE4A                            
0000EE4A                            Obj5A_Action:				; XREF: Obj5A_Index
0000EE4A 7200                       		moveq	#0,d1
0000EE4C 1228 0019                  		move.b	$19(a0),d1
0000EE50 4EB9 0000 56D6             		jsr	(ExitPlatform).l
0000EE56 3F28 0008                  		move.w	8(a0),-(sp)
0000EE5A 6100 0000                  		bsr.w	Obj5A_Types
0000EE5E 341F                       		move.w	(sp)+,d2
0000EE60 4EF9 0000 5C40             		jmp	(MvSonicOnPtfm2).l
0000EE66                            ; ===========================================================================
0000EE66                            
0000EE66                            Obj5A_Types:
0000EE66 7000                       		moveq	#0,d0
0000EE68 1028 0028                  		move.b	$28(a0),d0
0000EE6C 0240 000C                  		andi.w	#$C,d0
0000EE70 E248                       		lsr.w	#1,d0
0000EE72 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
0000EE76 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
0000EE7A                            ; ===========================================================================
0000EE7A 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
0000EE7C 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
0000EE7E                            ; ===========================================================================
0000EE7E                            
0000EE7E                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
0000EE7E 1238 FE80                  		move.b	($FFFFFE80).w,d1
0000EE82 0401 0050                  		subi.b	#$50,d1
0000EE86 4881                       		ext.w	d1
0000EE88 1438 FE84                  		move.b	($FFFFFE84).w,d2
0000EE8C 0402 0050                  		subi.b	#$50,d2
0000EE90 4882                       		ext.w	d2
0000EE92 0828 0000 0028             		btst	#0,$28(a0)
0000EE98 6700                       		beq.s	loc_10E24
0000EE9A 4441                       		neg.w	d1
0000EE9C 4442                       		neg.w	d2
0000EE9E                            
0000EE9E                            loc_10E24:
0000EE9E 0828 0001 0028             		btst	#1,$28(a0)
0000EEA4 6700                       		beq.s	loc_10E30
0000EEA6 4441                       		neg.w	d1
0000EEA8 C342                       		exg	d1,d2
0000EEAA                            
0000EEAA                            loc_10E30:
0000EEAE 3141 0008                  		move.w	d1,8(a0)
0000EEB6 3142 000C                  		move.w	d2,$C(a0)
0000EEBA 4E75                       		rts	
0000EEBC                            ; ===========================================================================
0000EEBC                            
0000EEBC                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
0000EEBC 1238 FE80                  		move.b	($FFFFFE80).w,d1
0000EEC0 0401 0050                  		subi.b	#$50,d1
0000EEC4 4881                       		ext.w	d1
0000EEC6 1438 FE84                  		move.b	($FFFFFE84).w,d2
0000EECA 0402 0050                  		subi.b	#$50,d2
0000EECE 4882                       		ext.w	d2
0000EED0 0828 0000 0028             		btst	#0,$28(a0)
0000EED6 6700                       		beq.s	loc_10E62
0000EED8 4441                       		neg.w	d1
0000EEDA 4442                       		neg.w	d2
0000EEDC                            
0000EEDC                            loc_10E62:
0000EEDC 0828 0001 0028             		btst	#1,$28(a0)
0000EEE2 6700                       		beq.s	loc_10E6E
0000EEE4 4441                       		neg.w	d1
0000EEE6 C342                       		exg	d1,d2
0000EEE8                            
0000EEE8                            loc_10E6E:
0000EEE8 4441                       		neg.w	d1
0000EEEE 3141 0008                  		move.w	d1,8(a0)
0000EEF6 3142 000C                  		move.w	d2,$C(a0)
0000EEFA 4E75                       		rts	
0000EEFC                            ; ===========================================================================
0000EEFC                            ; ---------------------------------------------------------------------------
0000EEFC                            ; Sprite mappings - platforms that move	in circles (SLZ)
0000EEFC                            ; ---------------------------------------------------------------------------
0000EEFC                            Map_obj5A:
0000EEFC                            	include "_maps\obj5A.asm"
0000EEFC                            ; ---------------------------------------------------------------------------
0000EEFC                            ; Sprite mappings - platforms that move	in circles (SLZ)
0000EEFC                            ; ---------------------------------------------------------------------------
0000EEFC 0000                       		dc.w byte_10E84-Map_obj5A
0000EEFE 02                         byte_10E84:	dc.b 2
0000EEFF F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0000EF04 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
0000EF0A 00                         		even
0000EF0A 00                         		even
0000EF0A                            
0000EF0A                            ; ===========================================================================
0000EF0A                            ; ---------------------------------------------------------------------------
0000EF0A                            ; Object 5B - blocks that form a staircase (SLZ)
0000EF0A                            ; ---------------------------------------------------------------------------
0000EF0A                            
0000EF0A                            Obj5B:					; XREF: Obj_Index
0000EF0A 7000                       		moveq	#0,d0
0000EF0C 1028 0024                  		move.b	$24(a0),d0
0000EF10 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0000EF14 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
0000EF18 3028 0030                  		move.w	$30(a0),d0
0000EF1C 0240 FF80                  		andi.w	#$FF80,d0
0000EF20 3238 F700                  		move.w	($FFFFF700).w,d1
0000EF24 0441 0080                  		subi.w	#$80,d1
0000EF28 0241 FF80                  		andi.w	#$FF80,d1
0000EF2E 0C40 0280                  		cmpi.w	#$280,d0
0000EF32 6200 C7A2                  		bhi.w	DeleteObject
0000EF36 6000 C762                  		bra.w	DisplaySprite
0000EF3A                            ; ===========================================================================
0000EF3A 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
0000EF3C 0000                       		dc.w Obj5B_Move-Obj5B_Index
0000EF3E 0000                       		dc.w Obj5B_Solid-Obj5B_Index
0000EF40                            ; ===========================================================================
0000EF40                            
0000EF40                            Obj5B_Main:				; XREF: Obj5B_Index
0000EF40 5428 0024                  		addq.b	#2,$24(a0)
0000EF44 7638                       		moveq	#$38,d3
0000EF46 7801                       		moveq	#1,d4
0000EF48 0828 0000 0022             		btst	#0,$22(a0)
0000EF4E 6700                       		beq.s	loc_10EDA
0000EF50 763B                       		moveq	#$3B,d3
0000EF52 78FF                       		moveq	#-1,d4
0000EF54                            
0000EF54                            loc_10EDA:
0000EF54 3428 0008                  		move.w	8(a0),d2
0000EF58 2248                       		movea.l	a0,a1
0000EF5A 7203                       		moveq	#3,d1
0000EF5C 6000                       		bra.s	Obj5B_MakeBlocks
0000EF5E                            ; ===========================================================================
0000EF5E                            
0000EF5E                            Obj5B_Loop:
0000EF5E 6100 CBD6                  		bsr.w	SingleObjLoad2
0000EF62 6600 0000                  		bne.w	Obj5B_Move
0000EF66 137C 0004 0024             		move.b	#4,$24(a1)
0000EF6C                            
0000EF6C                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
0000EF6C 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
0000EF70 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
0000EF78 337C 4000 0002             		move.w	#$4000,2(a1)
0000EF7E 137C 0004 0001             		move.b	#4,1(a1)
0000EF84 137C 0003 0018             		move.b	#3,$18(a1)
0000EF8A 137C 0010 0019             		move.b	#$10,$19(a1)
0000EF90 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EF96 3342 0008                  		move.w	d2,8(a1)
0000EF9A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EFA0 3368 0008 0030             		move.w	8(a0),$30(a1)
0000EFA6 3369 000C 0032             		move.w	$C(a1),$32(a1)
0000EFAC 0642 0020                  		addi.w	#$20,d2
0000EFB0 1343 0037                  		move.b	d3,$37(a1)
0000EFB4 2348 003C                  		move.l	a0,$3C(a1)
0000EFBA 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
0000EFBE                            
0000EFBE                            Obj5B_Move:				; XREF: Obj5B_Index
0000EFBE 7000                       		moveq	#0,d0
0000EFC0 1028 0028                  		move.b	$28(a0),d0
0000EFC4 0240 0007                  		andi.w	#7,d0
0000EFCA 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
0000EFCE 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
0000EFD2                            
0000EFD2                            Obj5B_Solid:				; XREF: Obj5B_Index
0000EFD2 2468 003C                  		movea.l	$3C(a0),a2
0000EFD6 7000                       		moveq	#0,d0
0000EFD8 1028 0037                  		move.b	$37(a0),d0
0000EFDC 1032 0000                  		move.b	(a2,d0.w),d0
0000EFE4 3140 000C                  		move.w	d0,$C(a0)
0000EFE8 7200                       		moveq	#0,d1
0000EFEA 1228 0019                  		move.b	$19(a0),d1
0000EFEE 0641 000B                  		addi.w	#$B,d1
0000EFF2 343C 0010                  		move.w	#$10,d2
0000EFF6 363C 0011                  		move.w	#$11,d3
0000EFFA 3828 0008                  		move.w	8(a0),d4
0000EFFE 6100 EA5A                  		bsr.w	SolidObject
0000F002 4A04                       		tst.b	d4
0000F004 6A00                       		bpl.s	loc_10F92
0000F006 1544 0036                  		move.b	d4,$36(a2)
0000F00A                            
0000F00A                            loc_10F92:
0000F00A 0828 0003 0022             		btst	#3,$22(a0)
0000F010 6700                       		beq.s	locret_10FA0
0000F012 157C 0001 0036             		move.b	#1,$36(a2)
0000F018                            
0000F018                            locret_10FA0:
0000F018 4E75                       		rts	
0000F01A                            ; ===========================================================================
0000F01A 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
0000F01C 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0000F01E 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
0000F020 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0000F022                            ; ===========================================================================
0000F022                            
0000F022                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
0000F022 4A68 0034                  		tst.w	$34(a0)
0000F026 6600                       		bne.s	loc_10FC0
0000F028 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0000F02E 6600                       		bne.s	locret_10FBE
0000F030 317C 001E 0034             		move.w	#$1E,$34(a0)
0000F036                            
0000F036                            locret_10FBE:
0000F036 4E75                       		rts	
0000F038                            ; ===========================================================================
0000F038                            
0000F038                            loc_10FC0:
0000F038 5368 0034                  		subq.w	#1,$34(a0)
0000F03C 66F8                       		bne.s	locret_10FBE
0000F03E 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0000F042 4E75                       		rts	
0000F044                            ; ===========================================================================
0000F044                            
0000F044                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
0000F044 4A68 0034                  		tst.w	$34(a0)
0000F048 6600                       		bne.s	loc_10FE0
0000F04A 4A28 0036                  		tst.b	$36(a0)
0000F04E 6A00                       		bpl.s	locret_10FDE
0000F050 317C 003C 0034             		move.w	#$3C,$34(a0)
0000F056                            
0000F056                            locret_10FDE:
0000F056 4E75                       		rts	
0000F058                            ; ===========================================================================
0000F058                            
0000F058                            loc_10FE0:
0000F058 5368 0034                  		subq.w	#1,$34(a0)
0000F05C 6600                       		bne.s	loc_10FEC
0000F05E 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0000F062 4E75                       		rts	
0000F064                            ; ===========================================================================
0000F064                            
0000F064                            loc_10FEC:
0000F064 43E8 0038                  		lea	$38(a0),a1
0000F068 3028 0034                  		move.w	$34(a0),d0
0000F06C E408                       		lsr.b	#2,d0
0000F06E 0200 0001                  		andi.b	#1,d0
0000F072 12C0                       		move.b	d0,(a1)+
0000F074 0A00 0001                  		eori.b	#1,d0
0000F078 12C0                       		move.b	d0,(a1)+
0000F07A 0A00 0001                  		eori.b	#1,d0
0000F07E 12C0                       		move.b	d0,(a1)+
0000F080 0A00 0001                  		eori.b	#1,d0
0000F084 12C0                       		move.b	d0,(a1)+
0000F086 4E75                       		rts	
0000F088                            ; ===========================================================================
0000F088                            
0000F088                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
0000F088 43E8 0038                  		lea	$38(a0),a1
0000F08C 0C11 0080                  		cmpi.b	#$80,(a1)
0000F090 6700                       		beq.s	locret_11038
0000F092 5211                       		addq.b	#1,(a1)
0000F094 7200                       		moveq	#0,d1
0000F096 1219                       		move.b	(a1)+,d1
0000F098 4841                       		swap	d1
0000F09A E289                       		lsr.l	#1,d1
0000F09C 2401                       		move.l	d1,d2
0000F09E E289                       		lsr.l	#1,d1
0000F0A0 2601                       		move.l	d1,d3
0000F0A4 4841                       		swap	d1
0000F0A6 4842                       		swap	d2
0000F0A8 4843                       		swap	d3
0000F0AA 12C3                       		move.b	d3,(a1)+
0000F0AC 12C2                       		move.b	d2,(a1)+
0000F0AE 12C1                       		move.b	d1,(a1)+
0000F0B0                            
0000F0B0                            locret_11038:
0000F0B0 4E75                       		rts	
0000F0B2 4E75                       		rts	
0000F0B4                            ; ===========================================================================
0000F0B4                            ; ---------------------------------------------------------------------------
0000F0B4                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0000F0B4                            ; ---------------------------------------------------------------------------
0000F0B4                            Map_obj5B:
0000F0B4                            	include "_maps\obj5B.asm"
0000F0B4                            ; ---------------------------------------------------------------------------
0000F0B4                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0000F0B4                            ; ---------------------------------------------------------------------------
0000F0B4 0000                       		dc.w byte_1103E-Map_obj5B
0000F0B6 01                         byte_1103E:	dc.b 1
0000F0B7 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0000F0BC                            		even
0000F0BC                            		even
0000F0BC                            
0000F0BC                            ; ===========================================================================
0000F0BC                            ; ---------------------------------------------------------------------------
0000F0BC                            ; Object 5C - metal girders in foreground (SLZ)
0000F0BC                            ; ---------------------------------------------------------------------------
0000F0BC                            
0000F0BC                            Obj5C:					; XREF: Obj_Index
0000F0BC 7000                       		moveq	#0,d0
0000F0BE 1028 0024                  		move.b	$24(a0),d0
0000F0C2 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
0000F0C6 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
0000F0CA                            ; ===========================================================================
0000F0CA 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
0000F0CC 0000                       		dc.w Obj5C_Display-Obj5C_Index
0000F0CE                            ; ===========================================================================
0000F0CE                            
0000F0CE                            Obj5C_Main:				; XREF: Obj5C_Index
0000F0CE 5428 0024                  		addq.b	#2,$24(a0)
0000F0D2 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
0000F0DA 317C 83CC 0002             		move.w	#$83CC,2(a0)
0000F0E0 117C 0010 0019             		move.b	#$10,$19(a0)
0000F0E6                            
0000F0E6                            Obj5C_Display:				; XREF: Obj5C_Index
0000F0E6 2238 F700                  		move.l	($FFFFF700).w,d1
0000F0EC 4841                       		swap	d1
0000F0EE 4441                       		neg.w	d1
0000F0F0 3141 0008                  		move.w	d1,8(a0)
0000F0F4 2238 F704                  		move.l	($FFFFF704).w,d1
0000F0FA 4841                       		swap	d1
0000F0FC 0241 003F                  		andi.w	#$3F,d1
0000F100 4441                       		neg.w	d1
0000F102 0641 0100                  		addi.w	#$100,d1
0000F106 3141 000A                  		move.w	d1,$A(a0)
0000F10A 6000 C58E                  		bra.w	DisplaySprite
0000F10E                            ; ===========================================================================
0000F10E                            ; ---------------------------------------------------------------------------
0000F10E                            ; Sprite mappings - metal girders in foreground	(SLZ)
0000F10E                            ; ---------------------------------------------------------------------------
0000F10E                            Map_obj5C:
0000F10E                            	include "_maps\obj5C.asm"
0000F10E                            ; ---------------------------------------------------------------------------
0000F10E                            ; Sprite mappings - metal girders in foreground	(SLZ)
0000F10E                            ; ---------------------------------------------------------------------------
0000F10E 0000                       		dc.w byte_11098-Map_obj5C
0000F110 09                         byte_11098:	dc.b 9
0000F111 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
0000F116 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
0000F11B C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
0000F120 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0000F125 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
0000F12A 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0000F12F 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
0000F134 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
0000F139 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0000F13E                            		even
0000F13E                            		even
0000F13E                            
0000F13E                            ; ===========================================================================
0000F13E                            ; ---------------------------------------------------------------------------
0000F13E                            ; Object 1B - water surface (LZ)
0000F13E                            ; ---------------------------------------------------------------------------
0000F13E                            
0000F13E                            Obj1B:					; XREF: Obj_Index
0000F13E 7000                       		moveq	#0,d0
0000F140 1028 0024                  		move.b	$24(a0),d0
0000F144 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
0000F148 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
0000F14C                            ; ===========================================================================
0000F14C 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
0000F14E 0000                       		dc.w Obj1B_Action-Obj1B_Index
0000F150                            ; ===========================================================================
0000F150                            
0000F150                            Obj1B_Main:				; XREF: Obj1B_Index
0000F150 5428 0024                  		addq.b	#2,$24(a0)
0000F154 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
0000F15C 317C C300 0002             		move.w	#$C300,2(a0)
0000F162 117C 0004 0001             		move.b	#4,1(a0)
0000F168 117C 0080 0019             		move.b	#$80,$19(a0)
0000F16E 3168 0008 0030             		move.w	8(a0),$30(a0)
0000F174                            
0000F174                            Obj1B_Action:				; XREF: Obj1B_Index
0000F174 3238 F700                  		move.w	($FFFFF700).w,d1
0000F178 0241 FFE0                  		andi.w	#$FFE0,d1
0000F180 0838 0000 FE05             		btst	#0,($FFFFFE05).w
0000F186 6700                       		beq.s	loc_11114
0000F188 0641 0020                  		addi.w	#$20,d1
0000F18C                            
0000F18C                            loc_11114:
0000F18C 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
0000F190 3238 F646                  		move.w	($FFFFF646).w,d1
0000F194 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
0000F198 4A28 0032                  		tst.b	$32(a0)
0000F19C 6600                       		bne.s	Obj1B_Animate
0000F19E 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0000F1A4 6700                       		beq.s	loc_1114A	; if not, branch
0000F1A6 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
0000F1AA 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
0000F1B0 6000                       		bra.s	Obj1B_Display
0000F1B2                            ; ===========================================================================
0000F1B2                            
0000F1B2                            Obj1B_Animate:				; XREF: loc_11114
0000F1B2 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0000F1B6 6600                       		bne.s	Obj1B_Display	; if yes, branch
0000F1B8 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
0000F1BE 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
0000F1C2                            
0000F1C2                            loc_1114A:				; XREF: loc_11114
0000F1C2 5328 001E                  		subq.b	#1,$1E(a0)
0000F1C6 6A00                       		bpl.s	Obj1B_Display
0000F1C8 117C 0007 001E             		move.b	#7,$1E(a0)
0000F1CE 5228 001A                  		addq.b	#1,$1A(a0)
0000F1D2 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
0000F1D8 6500                       		bcs.s	Obj1B_Display
0000F1DA 117C 0000 001A             		move.b	#0,$1A(a0)
0000F1E0                            
0000F1E0                            Obj1B_Display:
0000F1E0 6000 C4B8                  		bra.w	DisplaySprite
0000F1E4                            ; ===========================================================================
0000F1E4                            ; ---------------------------------------------------------------------------
0000F1E4                            ; Sprite mappings - water surface (LZ)
0000F1E4                            ; ---------------------------------------------------------------------------
0000F1E4                            Map_obj1B:
0000F1E4                            	include "_maps\obj1B.asm"
0000F1E4                            ; ---------------------------------------------------------------------------
0000F1E4                            ; Sprite mappings - water surface (LZ)
0000F1E4                            ; ---------------------------------------------------------------------------
0000F1E4 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
0000F1E8 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
0000F1EC 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
0000F1F0 03                         byte_11178:	dc.b 3
0000F1F1 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0000F1F6 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0000F1FB FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0000F200 03                         byte_11188:	dc.b 3
0000F201 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0000F206 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0000F20B FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0000F210 03                         byte_11198:	dc.b 3
0000F211 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0000F216 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0000F21B FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0000F220 06                         byte_111A8:	dc.b 6
0000F221 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0000F226 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
0000F22B FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0000F230 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
0000F235 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0000F23A FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
0000F23F 06                         byte_111C7:	dc.b 6
0000F240 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0000F245 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
0000F24A FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0000F24F FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
0000F254 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0000F259 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
0000F25E 06                         byte_111E6:	dc.b 6
0000F25F FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0000F264 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
0000F269 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0000F26E FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
0000F273 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0000F278 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
0000F27E 00                         		even
0000F27E 00                         		even
0000F27E                            
0000F27E                            ; ===========================================================================
0000F27E                            ; ---------------------------------------------------------------------------
0000F27E                            ; Object 0B - pole that	breaks (LZ)
0000F27E                            ; ---------------------------------------------------------------------------
0000F27E                            
0000F27E                            Obj0B:					; XREF: Obj_Index
0000F27E 7000                       		moveq	#0,d0
0000F280 1028 0024                  		move.b	$24(a0),d0
0000F284 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
0000F288 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
0000F28C                            ; ===========================================================================
0000F28C 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
0000F28E 0000                       		dc.w Obj0B_Action-Obj0B_Index
0000F290 0000                       		dc.w Obj0B_Display-Obj0B_Index
0000F292                            ; ===========================================================================
0000F292                            
0000F292                            Obj0B_Main:				; XREF: Obj0B_Index
0000F292 5428 0024                  		addq.b	#2,$24(a0)
0000F296 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
0000F29E 317C 43DE 0002             		move.w	#$43DE,2(a0)
0000F2A4 117C 0004 0001             		move.b	#4,1(a0)
0000F2AA 117C 0008 0019             		move.b	#8,$19(a0)
0000F2B0 117C 0004 0018             		move.b	#4,$18(a0)
0000F2B6 117C 00E1 0020             		move.b	#$E1,$20(a0)
0000F2BC 7000                       		moveq	#0,d0
0000F2BE 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F2C2 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0000F2C6 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
0000F2CA                            
0000F2CA                            Obj0B_Action:				; XREF: Obj0B_Index
0000F2CA 4A28 0032                  		tst.b	$32(a0)
0000F2CE 6700                       		beq.s	Obj0B_Grab
0000F2D0 4A68 0030                  		tst.w	$30(a0)
0000F2D4 6700                       		beq.s	Obj0B_MoveUp
0000F2D6 5368 0030                  		subq.w	#1,$30(a0)
0000F2DA 6600                       		bne.s	Obj0B_MoveUp
0000F2DC 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
0000F2E2 6000                       		bra.s	Obj0B_Release
0000F2E4                            ; ===========================================================================
0000F2E4                            
0000F2E4                            Obj0B_MoveUp:				; XREF: Obj0B_Action
0000F2E4 43F8 D000                  		lea	($FFFFD000).w,a1
0000F2E8 3028 000C                  		move.w	$C(a0),d0
0000F2EC 0440 0018                  		subi.w	#$18,d0
0000F2F0 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
0000F2F6 6700                       		beq.s	Obj0B_MoveDown
0000F2F8 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0000F2FC B069 000C                  		cmp.w	$C(a1),d0
0000F300 6500                       		bcs.s	Obj0B_MoveDown
0000F302 3340 000C                  		move.w	d0,$C(a1)
0000F306                            
0000F306                            Obj0B_MoveDown:
0000F306 0640 0024                  		addi.w	#$24,d0
0000F30A 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
0000F310 6700                       		beq.s	Obj0B_LetGo
0000F312 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000F316 B069 000C                  		cmp.w	$C(a1),d0
0000F31A 6400                       		bcc.s	Obj0B_LetGo
0000F31C 3340 000C                  		move.w	d0,$C(a1)
0000F320                            
0000F320                            Obj0B_LetGo:
0000F320 1038 F603                  		move.b	($FFFFF603).w,d0
0000F324 0240 0070                  		andi.w	#$70,d0
0000F328 6700                       		beq.s	Obj0B_Display
0000F32A                            
0000F32A                            Obj0B_Release:				; XREF: Obj0B_Action
0000F32A 4228 0020                  		clr.b	$20(a0)
0000F32E 5428 0024                  		addq.b	#2,$24(a0)
0000F332 4238 F7C8                  		clr.b	($FFFFF7C8).w
0000F336 4238 F7C9                  		clr.b	($FFFFF7C9).w
0000F33A 4228 0032                  		clr.b	$32(a0)
0000F33E 6000                       		bra.s	Obj0B_Display
0000F340                            ; ===========================================================================
0000F340                            
0000F340                            Obj0B_Grab:				; XREF: Obj0B_Action
0000F340 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
0000F344 6700                       		beq.s	Obj0B_Display	; if not, branch
0000F346 43F8 D000                  		lea	($FFFFD000).w,a1
0000F34A 3028 0008                  		move.w	8(a0),d0
0000F34E 0640 0014                  		addi.w	#$14,d0
0000F352 B069 0008                  		cmp.w	8(a1),d0
0000F356 6400                       		bcc.s	Obj0B_Display
0000F358 4228 0021                  		clr.b	$21(a0)
0000F35C 0C29 0004 0024             		cmpi.b	#4,$24(a1)
0000F362 6400                       		bcc.s	Obj0B_Display
0000F364 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
0000F368 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
0000F36C 3028 0008                  		move.w	8(a0),d0
0000F370 0640 0014                  		addi.w	#$14,d0
0000F374 3340 0008                  		move.w	d0,8(a1)
0000F378 08A9 0000 0022             		bclr	#0,$22(a1)
0000F37E 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
0000F384 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0000F38A 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
0000F390 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
0000F396                            
0000F396                            Obj0B_Display:				; XREF: Obj0B_Index
0000F396 6000 E39A                  		bra.w	MarkObjGone
0000F39A                            ; ===========================================================================
0000F39A                            ; ---------------------------------------------------------------------------
0000F39A                            ; Sprite mappings - pole that breaks (LZ)
0000F39A                            ; ---------------------------------------------------------------------------
0000F39A                            Map_obj0B:
0000F39A                            	include "_maps\obj0B.asm"
0000F39A                            ; ---------------------------------------------------------------------------
0000F39A                            ; Sprite mappings - pole that breaks (LZ)
0000F39A                            ; ---------------------------------------------------------------------------
0000F39A 0000                       		dc.w byte_11326-Map_obj0B
0000F39C 0000                       		dc.w byte_11331-Map_obj0B
0000F39E 02                         byte_11326:	dc.b 2			; normal pole
0000F39F E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
0000F3A4 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
0000F3A9 04                         byte_11331:	dc.b 4			; broken pole
0000F3AA E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
0000F3AF F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
0000F3B4 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
0000F3B9 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
0000F3BE                            		even
0000F3BE                            		even
0000F3BE                            
0000F3BE                            ; ===========================================================================
0000F3BE                            ; ---------------------------------------------------------------------------
0000F3BE                            ; Object 0C - flapping door (LZ)
0000F3BE                            ; ---------------------------------------------------------------------------
0000F3BE                            
0000F3BE                            Obj0C:					; XREF: Obj_Index
0000F3BE 7000                       		moveq	#0,d0
0000F3C0 1028 0024                  		move.b	$24(a0),d0
0000F3C4 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
0000F3C8 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
0000F3CC                            ; ===========================================================================
0000F3CC 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
0000F3CE 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
0000F3D0                            ; ===========================================================================
0000F3D0                            
0000F3D0                            Obj0C_Main:				; XREF: Obj0C_Index
0000F3D0 5428 0024                  		addq.b	#2,$24(a0)
0000F3D4 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
0000F3DC 317C 4328 0002             		move.w	#$4328,2(a0)
0000F3E2 0028 0004 0001             		ori.b	#4,1(a0)
0000F3E8 117C 0028 0019             		move.b	#$28,$19(a0)
0000F3EE 7000                       		moveq	#0,d0
0000F3F0 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F3F4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0000F3F8 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
0000F3FC                            
0000F3FC                            Obj0C_OpenClose:			; XREF: Obj0C_Index
0000F3FC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000F400 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
0000F402 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
0000F408 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
0000F40E 4A28 0001                  		tst.b	1(a0)
0000F412 6A00                       		bpl.s	Obj0C_Solid
0000F414 303C 00BB                  		move.w	#$BB,d0
0000F418 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play door sound
0000F41E                            
0000F41E                            Obj0C_Solid:
0000F41E 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
0000F424 6100 939A                  		bsr.w	AnimateSprite
0000F428 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
0000F42C 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000F430 6600                       		bne.s	Obj0C_Display	; if yes, branch
0000F432 3038 D008                  		move.w	($FFFFD008).w,d0
0000F436 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
0000F43A 6400                       		bcc.s	Obj0C_Display	; if yes, branch
0000F43C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
0000F442 323C 0013                  		move.w	#$13,d1
0000F446 343C 0020                  		move.w	#$20,d2
0000F44A 3602                       		move.w	d2,d3
0000F44C 5243                       		addq.w	#1,d3
0000F44E 3828 0008                  		move.w	8(a0),d4
0000F452 6100 E606                  		bsr.w	SolidObject	; make the door	solid
0000F456                            
0000F456                            Obj0C_Display:
0000F456 6000 E2DA                  		bra.w	MarkObjGone
0000F45A                            ; ===========================================================================
0000F45A                            Ani_obj0C:
0000F45A                            	include "_anim\obj0C.asm"
0000F45A                            ; ---------------------------------------------------------------------------
0000F45A                            ; Animation script - flapping door (LZ)
0000F45A                            ; ---------------------------------------------------------------------------
0000F45A 0000                       		dc.w byte_113E6-Ani_obj0C
0000F45C 0000                       		dc.w byte_113EC-Ani_obj0C
0000F45E 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
0000F464 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
0000F46A                            		even
0000F46A                            		even
0000F46A                            
0000F46A                            ; ---------------------------------------------------------------------------
0000F46A                            ; Sprite mappings - flapping door (LZ)
0000F46A                            ; ---------------------------------------------------------------------------
0000F46A                            Map_obj0C:
0000F46A                            	include "_maps\obj0C.asm"
0000F46A                            ; ---------------------------------------------------------------------------
0000F46A                            ; Sprite mappings - flapping door (LZ)
0000F46A                            ; ---------------------------------------------------------------------------
0000F46A 0000                       		dc.w byte_113F8-Map_obj0C
0000F46C 0000                       		dc.w byte_11403-Map_obj0C
0000F46E 0000                       		dc.w byte_1140E-Map_obj0C
0000F470 02                         byte_113F8:	dc.b 2
0000F471 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0000F476 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0000F47B 02                         byte_11403:	dc.b 2
0000F47C DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
0000F481 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
0000F486 02                         byte_1140E:	dc.b 2
0000F487 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
0000F48C 180D 1018 00               		dc.b $18, $D, $10, $18,	0
0000F492 00                         		even
0000F492 00                         		even
0000F492                            
0000F492                            ; ===========================================================================
0000F492                            ; ---------------------------------------------------------------------------
0000F492                            ; Object 71 - invisible	solid blocks
0000F492                            ; ---------------------------------------------------------------------------
0000F492                            
0000F492                            Obj71:					; XREF: Obj_Index
0000F492 7000                       		moveq	#0,d0
0000F494 1028 0024                  		move.b	$24(a0),d0
0000F498 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
0000F49C 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
0000F4A0                            ; ===========================================================================
0000F4A0 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
0000F4A2 0000                       		dc.w Obj71_Solid-Obj71_Index
0000F4A4                            ; ===========================================================================
0000F4A4                            
0000F4A4                            Obj71_Main:				; XREF: Obj71_Index
0000F4A4 5428 0024                  		addq.b	#2,$24(a0)
0000F4A8 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
0000F4B0 317C 8680 0002             		move.w	#$8680,2(a0)
0000F4B6 0028 0004 0001             		ori.b	#4,1(a0)
0000F4BC 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F4C0 1200                       		move.b	d0,d1
0000F4C2 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
0000F4C6 0640 0010                  		addi.w	#$10,d0
0000F4CA E248                       		lsr.w	#1,d0
0000F4CC 1140 0019                  		move.b	d0,$19(a0)	; set object width
0000F4D0 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
0000F4D4 5241                       		addq.w	#1,d1
0000F4D6 E749                       		lsl.w	#3,d1
0000F4D8 1141 0016                  		move.b	d1,$16(a0)	; set object height
0000F4DC                            
0000F4DC                            Obj71_Solid:				; XREF: Obj71_Index
0000F4DC 6100 C436                  		bsr.w	ChkObjOnScreen
0000F4E0 6600                       		bne.s	Obj71_ChkDel
0000F4E2 7200                       		moveq	#0,d1
0000F4E4 1228 0019                  		move.b	$19(a0),d1
0000F4E8 0641 000B                  		addi.w	#$B,d1
0000F4EC 7400                       		moveq	#0,d2
0000F4EE 1428 0016                  		move.b	$16(a0),d2
0000F4F2 3602                       		move.w	d2,d3
0000F4F4 5243                       		addq.w	#1,d3
0000F4F6 3828 0008                  		move.w	8(a0),d4
0000F4FA 6100 E5A4                  		bsr.w	SolidObject71
0000F4FE                            
0000F4FE                            Obj71_ChkDel:
0000F4FE 3028 0008                  		move.w	8(a0),d0
0000F502 0240 FF80                  		andi.w	#$FF80,d0
0000F506 3238 F700                  		move.w	($FFFFF700).w,d1
0000F50A 0441 0080                  		subi.w	#$80,d1
0000F50E 0241 FF80                  		andi.w	#$FF80,d1
0000F514 0C40 0280                  		cmpi.w	#$280,d0
0000F518 6200                       		bhi.s	Obj71_Delete
0000F51A 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
0000F51E 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
0000F520 4EFA C178                  		jmp	DisplaySprite	; if yes, display the object
0000F524                            ; ===========================================================================
0000F524                            
0000F524                            Obj71_NoDisplay:
0000F524 4E75                       		rts	
0000F526                            ; ===========================================================================
0000F526                            
0000F526                            Obj71_Delete:
0000F526 4EFA C1AE                  		jmp	DeleteObject
0000F52A                            ; ===========================================================================
0000F52A                            ; ---------------------------------------------------------------------------
0000F52A                            ; Sprite mappings - invisible solid blocks
0000F52A                            ; ---------------------------------------------------------------------------
0000F52A                            Map_obj71:
0000F52A                            	include "_maps\obj71.asm"
0000F52A                            ; ---------------------------------------------------------------------------
0000F52A                            ; Sprite mappings - invisible solid blocks
0000F52A                            ; ---------------------------------------------------------------------------
0000F52A 0000                       		dc.w byte_114BC-Map_obj71
0000F52C 0000                       		dc.w byte_114D1-Map_obj71
0000F52E 0000                       		dc.w byte_114E6-Map_obj71
0000F530 04                         byte_114BC:	dc.b 4
0000F531 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
0000F536 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
0000F53B 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
0000F540 0005 0018 00               		dc.b 0,	5, 0, $18, 0
0000F545 04                         byte_114D1:	dc.b 4
0000F546 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
0000F54B E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
0000F550 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
0000F555 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
0000F55A 04                         byte_114E6:	dc.b 4
0000F55B E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
0000F560 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
0000F565 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
0000F56A 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
0000F570 00                         		even
0000F570 00                         		even
0000F570                            
0000F570                            ; ===========================================================================
0000F570                            ; ---------------------------------------------------------------------------
0000F570                            ; Object 5D - fans (SLZ)
0000F570                            ; ---------------------------------------------------------------------------
0000F570                            
0000F570                            Obj5D:					; XREF: Obj_Index
0000F570 7000                       		moveq	#0,d0
0000F572 1028 0024                  		move.b	$24(a0),d0
0000F576 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
0000F57A 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
0000F57E                            ; ===========================================================================
0000F57E 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
0000F580 0000                       		dc.w Obj5D_Delay-Obj5D_Index
0000F582                            ; ===========================================================================
0000F582                            
0000F582                            Obj5D_Main:				; XREF: Obj5D_Index
0000F582 5428 0024                  		addq.b	#2,$24(a0)
0000F586 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
0000F58E 317C 43A0 0002             		move.w	#$43A0,2(a0)
0000F594 0028 0004 0001             		ori.b	#4,1(a0)
0000F59A 117C 0010 0019             		move.b	#$10,$19(a0)
0000F5A0 117C 0004 0018             		move.b	#4,$18(a0)
0000F5A6                            
0000F5A6                            Obj5D_Delay:				; XREF: Obj5D_Index
0000F5A6 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
0000F5AC 6600                       		bne.s	Obj5D_Blow	; if yes, branch
0000F5AE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000F5B2 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
0000F5B4 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
0000F5BA 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
0000F5C0 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
0000F5C2 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
0000F5C8                            
0000F5C8                            Obj5D_Blow:
0000F5C8 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
0000F5CC 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
0000F5D0 43F8 D000                  		lea	($FFFFD000).w,a1
0000F5D4 3029 0008                  		move.w	8(a1),d0
0000F5DC 0828 0000 0022             		btst	#0,$22(a0)
0000F5E2 6600                       		bne.s	Obj5D_ChkSonic
0000F5E4 4440                       		neg.w	d0
0000F5E6                            
0000F5E6                            Obj5D_ChkSonic:
0000F5E6 0640 0050                  		addi.w	#$50,d0
0000F5EA 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
0000F5EE 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
0000F5F0 3229 000C                  		move.w	$C(a1),d1
0000F5F4 0641 0060                  		addi.w	#$60,d1
0000F5FC 6500                       		bcs.s	Obj5D_Animate
0000F5FE 0C41 0070                  		cmpi.w	#$70,d1
0000F602 6400                       		bcc.s	Obj5D_Animate
0000F604 0440 0050                  		subi.w	#$50,d0
0000F608 6400                       		bcc.s	loc_1159A
0000F60A 4640                       		not.w	d0
0000F60E                            
0000F60E                            loc_1159A:
0000F60E 0640 0060                  		addi.w	#$60,d0
0000F612 0828 0000 0022             		btst	#0,$22(a0)
0000F618 6600                       		bne.s	loc_115A8
0000F61A 4440                       		neg.w	d0
0000F61C                            
0000F61C                            loc_115A8:
0000F61C 4400                       		neg.b	d0
0000F61E E840                       		asr.w	#4,d0
0000F620 0828 0000 0028             		btst	#0,$28(a0)
0000F626 6700                       		beq.s	Obj5D_MoveSonic
0000F628 4440                       		neg.w	d0
0000F62A                            
0000F62A                            Obj5D_MoveSonic:
0000F62E                            
0000F62E                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
0000F62E 5328 001E                  		subq.b	#1,$1E(a0)
0000F632 6A00                       		bpl.s	Obj5D_ChkDel
0000F634 117C 0000 001E             		move.b	#0,$1E(a0)
0000F63A 5228 001B                  		addq.b	#1,$1B(a0)
0000F63E 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
0000F644 6500                       		bcs.s	loc_115D8
0000F646 117C 0000 001B             		move.b	#0,$1B(a0)
0000F64C                            
0000F64C                            loc_115D8:
0000F64C 7000                       		moveq	#0,d0
0000F64E 0828 0000 0028             		btst	#0,$28(a0)
0000F654 6700                       		beq.s	loc_115E4
0000F656 7002                       		moveq	#2,d0
0000F658                            
0000F658                            loc_115E4:
0000F65C 1140 001A                  		move.b	d0,$1A(a0)
0000F660                            
0000F660                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
0000F660 6100 C038                  		bsr.w	DisplaySprite
0000F664 3028 0008                  		move.w	8(a0),d0
0000F668 0240 FF80                  		andi.w	#$FF80,d0
0000F66C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F670 0441 0080                  		subi.w	#$80,d1
0000F674 0241 FF80                  		andi.w	#$FF80,d1
0000F67A 0C40 0280                  		cmpi.w	#$280,d0
0000F67E 6200 C056                  		bhi.w	DeleteObject
0000F682 4E75                       		rts	
0000F684                            ; ===========================================================================
0000F684                            ; ---------------------------------------------------------------------------
0000F684                            ; Sprite mappings - fans (SLZ)
0000F684                            ; ---------------------------------------------------------------------------
0000F684                            Map_obj5D:
0000F684                            	include "_maps\obj5D.asm"
0000F684                            ; ---------------------------------------------------------------------------
0000F684                            ; Sprite mappings - fans (SLZ)
0000F684                            ; ---------------------------------------------------------------------------
0000F684 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
0000F688 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
0000F68C 0000                       		dc.w byte_1161A-Map_obj5D
0000F68E 02                         byte_1161A:	dc.b 2
0000F68F F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
0000F694 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
0000F699 02                         byte_11625:	dc.b 2
0000F69A F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
0000F69F 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0000F6A4 02                         byte_11630:	dc.b 2
0000F6A5 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
0000F6AA 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
0000F6B0 00                         		even
0000F6B0 00                         		even
0000F6B0                            
0000F6B0                            ; ===========================================================================
0000F6B0                            ; ---------------------------------------------------------------------------
0000F6B0                            ; Object 5E - seesaws (SLZ)
0000F6B0                            ; ---------------------------------------------------------------------------
0000F6B0                            
0000F6B0                            Obj5E:					; XREF: Obj_Index
0000F6B0 7000                       		moveq	#0,d0
0000F6B2 1028 0024                  		move.b	$24(a0),d0
0000F6B6 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
0000F6BA 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
0000F6BE 3028 0030                  		move.w	$30(a0),d0
0000F6C2 0240 FF80                  		andi.w	#$FF80,d0
0000F6C6 3238 F700                  		move.w	($FFFFF700).w,d1
0000F6CA 0441 0080                  		subi.w	#$80,d1
0000F6CE 0241 FF80                  		andi.w	#$FF80,d1
0000F6D4 6B00 C000                  		bmi.w	DeleteObject
0000F6D8 0C40 0280                  		cmpi.w	#$280,d0
0000F6DC 6200 BFF8                  		bhi.w	DeleteObject
0000F6E0 6000 BFB8                  		bra.w	DisplaySprite
0000F6E4                            ; ===========================================================================
0000F6E4 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
0000F6E6 0000                       		dc.w Obj5E_Slope-Obj5E_Index
0000F6E8 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
0000F6EA 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
0000F6EC 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
0000F6EE 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
0000F6F0                            ; ===========================================================================
0000F6F0                            
0000F6F0                            Obj5E_Main:				; XREF: Obj5E_Index
0000F6F0 5428 0024                  		addq.b	#2,$24(a0)
0000F6F4 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
0000F6FC 317C 0374 0002             		move.w	#$374,2(a0)
0000F702 0028 0004 0001             		ori.b	#4,1(a0)
0000F708 117C 0004 0018             		move.b	#4,$18(a0)
0000F70E 117C 0030 0019             		move.b	#$30,$19(a0)
0000F714 3168 0008 0030             		move.w	8(a0),$30(a0)
0000F71A 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
0000F71E 6600                       		bne.s	loc_116D2	; if not, branch
0000F720 6100 C414                  		bsr.w	SingleObjLoad2
0000F724 6600                       		bne.s	loc_116D2
0000F726 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
0000F72A 5C29 0024                  		addq.b	#6,$24(a1)
0000F72E 3368 0008 0008             		move.w	8(a0),8(a1)
0000F734 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F73A 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F740 2348 003C                  		move.l	a0,$3C(a1)
0000F744                            
0000F744                            loc_116D2:
0000F744 0828 0000 0022             		btst	#0,$22(a0)
0000F74A 6700                       		beq.s	loc_116E0
0000F74C 117C 0002 001A             		move.b	#2,$1A(a0)
0000F752                            
0000F752                            loc_116E0:
0000F752 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
0000F758                            
0000F758                            Obj5E_Slope:				; XREF: Obj5E_Index
0000F758 1228 003A                  		move.b	$3A(a0),d1
0000F75C 6100 0000                  		bsr.w	loc_11766
0000F760 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0000F766 0828 0000 001A             		btst	#0,$1A(a0)
0000F76C 6700                       		beq.s	loc_11702
0000F76E 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0000F774                            
0000F774                            loc_11702:
0000F774 43F8 D000                  		lea	($FFFFD000).w,a1
0000F778 3169 0012 0038             		move.w	$12(a1),$38(a0)
0000F77E 323C 0030                  		move.w	#$30,d1
0000F782 4EB9 0000 5636             		jsr	(SlopeObject).l
0000F788 4E75                       		rts	
0000F78A                            ; ===========================================================================
0000F78A                            
0000F78A                            Obj5E_Slope2:				; XREF: Obj5E_Index
0000F78A 6100 0000                  		bsr.w	loc_1174A
0000F78E 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0000F794 0828 0000 001A             		btst	#0,$1A(a0)
0000F79A 6700                       		beq.s	loc_11730
0000F79C 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0000F7A2                            
0000F7A2                            loc_11730:
0000F7A2 323C 0030                  		move.w	#$30,d1
0000F7A6 4EB9 0000 56D6             		jsr	(ExitPlatform).l
0000F7AC 323C 0030                  		move.w	#$30,d1
0000F7B0 3428 0008                  		move.w	8(a0),d2
0000F7B4 4EB8 65F0                  		jsr	SlopeObject2
0000F7B8 4E75                       		rts	
0000F7BA                            ; ===========================================================================
0000F7BA                            
0000F7BA                            loc_1174A:				; XREF: Obj5E_Slope2
0000F7BA 7202                       		moveq	#2,d1
0000F7BC 43F8 D000                  		lea	($FFFFD000).w,a1
0000F7C0 3028 0008                  		move.w	8(a0),d0
0000F7C8 6400                       		bcc.s	loc_1175E
0000F7CA 4440                       		neg.w	d0
0000F7CC 7200                       		moveq	#0,d1
0000F7CE                            
0000F7CE                            loc_1175E:
0000F7CE 0C40 0008                  		cmpi.w	#8,d0
0000F7D2 6400                       		bcc.s	loc_11766
0000F7D4 7201                       		moveq	#1,d1
0000F7D6                            
0000F7D6                            loc_11766:
0000F7D6 1028 001A                  		move.b	$1A(a0),d0
0000F7DA B001                       		cmp.b	d1,d0
0000F7DC 6700                       		beq.s	locret_11790
0000F7DE 6400                       		bcc.s	loc_11772
0000F7E0 5400                       		addq.b	#2,d0
0000F7E2                            
0000F7E2                            loc_11772:
0000F7E2 5300                       		subq.b	#1,d0
0000F7E4 1140 001A                  		move.b	d0,$1A(a0)
0000F7E8 1141 003A                  		move.b	d1,$3A(a0)
0000F7EC 08A8 0000 0001             		bclr	#0,1(a0)
0000F7F2 0828 0001 001A             		btst	#1,$1A(a0)
0000F7F8 6700                       		beq.s	locret_11790
0000F7FA 08E8 0000 0001             		bset	#0,1(a0)
0000F800                            
0000F800                            locret_11790:
0000F800 4E75                       		rts	
0000F802                            ; ===========================================================================
0000F802                            
0000F802                            Obj5E_Spikeball:			; XREF: Obj5E_Index
0000F802 5428 0024                  		addq.b	#2,$24(a0)
0000F806 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
0000F80E 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000F814 0028 0004 0001             		ori.b	#4,1(a0)
0000F81A 117C 0004 0018             		move.b	#4,$18(a0)
0000F820 117C 008B 0020             		move.b	#$8B,$20(a0)
0000F826 117C 000C 0019             		move.b	#$C,$19(a0)
0000F82C 3168 0008 0030             		move.w	8(a0),$30(a0)
0000F832 0668 0028 0008             		addi.w	#$28,8(a0)
0000F838 3168 000C 0034             		move.w	$C(a0),$34(a0)
0000F83E 117C 0001 001A             		move.b	#1,$1A(a0)
0000F844 0828 0000 0022             		btst	#0,$22(a0)
0000F84A 6700                       		beq.s	Obj5E_MoveSpike
0000F84C 0468 0050 0008             		subi.w	#$50,8(a0)
0000F852 117C 0002 003A             		move.b	#2,$3A(a0)
0000F858                            
0000F858                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
0000F858 2268 003C                  		movea.l	$3C(a0),a1
0000F85C 7000                       		moveq	#0,d0
0000F85E 1028 003A                  		move.b	$3A(a0),d0
0000F866 6700                       		beq.s	loc_1183E
0000F868 6400                       		bcc.s	loc_117FC
0000F86A 4400                       		neg.b	d0
0000F86C                            
0000F86C                            loc_117FC:
0000F86C 323C F7E8                  		move.w	#-$818,d1
0000F870 343C FEEC                  		move.w	#-$114,d2
0000F874 0C00 0001                  		cmpi.b	#1,d0
0000F878 6700                       		beq.s	loc_11822
0000F87A 323C F510                  		move.w	#-$AF0,d1
0000F87E 343C FF34                  		move.w	#-$CC,d2
0000F882 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
0000F888 6D00                       		blt.s	loc_11822
0000F88A 323C F200                  		move.w	#-$E00,d1
0000F88E 343C FF60                  		move.w	#-$A0,d2
0000F892                            
0000F892                            loc_11822:
0000F892 3141 0012                  		move.w	d1,$12(a0)
0000F896 3142 0010                  		move.w	d2,$10(a0)
0000F89A 3028 0008                  		move.w	8(a0),d0
0000F8A2 6400                       		bcc.s	loc_11838
0000F8A4 4468 0010                  		neg.w	$10(a0)
0000F8A8                            
0000F8A8                            loc_11838:
0000F8A8 5428 0024                  		addq.b	#2,$24(a0)
0000F8AC 6000                       		bra.s	Obj5E_SpikeFall
0000F8AE                            ; ===========================================================================
0000F8AE                            
0000F8AE                            loc_1183E:				; XREF: Obj5E_MoveSpike
0000F8AE 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0000F8B4 7000                       		moveq	#0,d0
0000F8B6 1029 001A                  		move.b	$1A(a1),d0
0000F8BA 343C 0028                  		move.w	#$28,d2
0000F8BE 3228 0008                  		move.w	8(a0),d1
0000F8C6 6400                       		bcc.s	loc_1185C
0000F8C8 4442                       		neg.w	d2
0000F8CA 5440                       		addq.w	#2,d0
0000F8CC                            
0000F8CC                            loc_1185C:
0000F8CE 3228 0034                  		move.w	$34(a0),d1
0000F8D6 3141 000C                  		move.w	d1,$C(a0)
0000F8DE 3142 0008                  		move.w	d2,8(a0)
0000F8E2 4268 000E                  		clr.w	$E(a0)
0000F8E6 4268 000A                  		clr.w	$A(a0)
0000F8EA 4E75                       		rts	
0000F8EC                            ; ===========================================================================
0000F8EC                            
0000F8EC                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
0000F8EC 4A68 0012                  		tst.w	$12(a0)
0000F8F0 6A00                       		bpl.s	loc_1189A
0000F8F2 6100 BD54                  		bsr.w	ObjectFall
0000F8F6 3028 0034                  		move.w	$34(a0),d0
0000F8FA 0440 002F                  		subi.w	#$2F,d0
0000F8FE B068 000C                  		cmp.w	$C(a0),d0
0000F902 6E00                       		bgt.s	locret_11898
0000F904 6100 BD42                  		bsr.w	ObjectFall
0000F908                            
0000F908                            locret_11898:
0000F908 4E75                       		rts	
0000F90A                            ; ===========================================================================
0000F90A                            
0000F90A                            loc_1189A:				; XREF: Obj5E_SpikeFall
0000F90A 6100 BD3C                  		bsr.w	ObjectFall
0000F90E 2268 003C                  		movea.l	$3C(a0),a1
0000F912 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0000F918 7000                       		moveq	#0,d0
0000F91A 1029 001A                  		move.b	$1A(a1),d0
0000F91E 3228 0008                  		move.w	8(a0),d1
0000F926 6400                       		bcc.s	loc_118BA
0000F928 5440                       		addq.w	#2,d0
0000F92A                            
0000F92A                            loc_118BA:
0000F92C 3228 0034                  		move.w	$34(a0),d1
0000F934 B268 000C                  		cmp.w	$C(a0),d1
0000F938 6E00                       		bgt.s	locret_11938
0000F93A 2268 003C                  		movea.l	$3C(a0),a1
0000F93E 7202                       		moveq	#2,d1
0000F940 4A68 0010                  		tst.w	$10(a0)
0000F944 6B00                       		bmi.s	Obj5E_Spring
0000F946 7200                       		moveq	#0,d1
0000F948                            
0000F948                            Obj5E_Spring:
0000F948 1341 003A                  		move.b	d1,$3A(a1)
0000F94C 1141 003A                  		move.b	d1,$3A(a0)
0000F950 B229 001A                  		cmp.b	$1A(a1),d1
0000F954 6700                       		beq.s	loc_1192C
0000F956 08A9 0003 0022             		bclr	#3,$22(a1)
0000F95C 6700                       		beq.s	loc_1192C
0000F95E 4229 0025                  		clr.b	$25(a1)
0000F962 137C 0002 0024             		move.b	#2,$24(a1)
0000F968 45F8 D000                  		lea	($FFFFD000).w,a2
0000F96C 3568 0012 0012             		move.w	$12(a0),$12(a2)
0000F972 446A 0012                  		neg.w	$12(a2)
0000F976 08EA 0001 0022             		bset	#1,$22(a2)
0000F97C 08AA 0003 0022             		bclr	#3,$22(a2)
0000F982 422A 003C                  		clr.b	$3C(a2)
0000F986 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
0000F98C 157C 0002 0024             		move.b	#2,$24(a2)
0000F992 303C 00CC                  		move.w	#$CC,d0
0000F996 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play spring sound
0000F99C                            
0000F99C                            loc_1192C:
0000F99C 4268 0010                  		clr.w	$10(a0)
0000F9A0 4268 0012                  		clr.w	$12(a0)
0000F9A4 5528 0024                  		subq.b	#2,$24(a0)
0000F9A8                            
0000F9A8                            locret_11938:
0000F9A8 4E75                       		rts	
0000F9AA                            ; ===========================================================================
0000F9AA FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0000F9B4                            
0000F9B4                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
0000F9E4                            		even
0000F9E4                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
0000FA14                            		even
0000FA14                            ; ---------------------------------------------------------------------------
0000FA14                            ; Sprite mappings - seesaws (SLZ)
0000FA14                            ; ---------------------------------------------------------------------------
0000FA14                            Map_obj5E:
0000FA14                            	include "_maps\obj5E.asm"
0000FA14                            ; ---------------------------------------------------------------------------
0000FA14                            ; Sprite mappings - seesaws (SLZ)
0000FA14                            ; ---------------------------------------------------------------------------
0000FA14 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0000FA18 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0000FA1C 07                         byte_119AC:	dc.b 7
0000FA1D D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
0000FA22 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
0000FA27 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
0000FA2C EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
0000FA31 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
0000FA36 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
0000FA3B FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
0000FA40 04                         byte_119D0:	dc.b 4
0000FA41 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
0000FA46 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
0000FA4B E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
0000FA50 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
0000FA56 00                         		even
0000FA56 00                         		even
0000FA56                            
0000FA56                            ; ---------------------------------------------------------------------------
0000FA56                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0000FA56                            ; ---------------------------------------------------------------------------
0000FA56                            Map_obj5Ea:
0000FA56                            	include "_maps\obj5Eballs.asm"
0000FA56                            ; ---------------------------------------------------------------------------
0000FA56                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0000FA56                            ; ---------------------------------------------------------------------------
0000FA56 0000                       		dc.w byte_119EA-Map_obj5Ea
0000FA58 0000                       		dc.w byte_119F0-Map_obj5Ea
0000FA5A 01                         byte_119EA:	dc.b 1
0000FA5B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000FA60 01                         byte_119F0:	dc.b 1
0000FA61 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000FA66                            		even
0000FA66                            		even
0000FA66                            
0000FA66                            ; ===========================================================================
0000FA66                            ; ---------------------------------------------------------------------------
0000FA66                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
0000FA66                            ; ---------------------------------------------------------------------------
0000FA66                            
0000FA66                            Obj5F:					; XREF: Obj_Index
0000FA66 7000                       		moveq	#0,d0
0000FA68 1028 0024                  		move.b	$24(a0),d0
0000FA6C 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
0000FA70 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
0000FA74                            ; ===========================================================================
0000FA74 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
0000FA76 0000                       		dc.w Obj5F_Action-Obj5F_Index
0000FA78 0000                       		dc.w Obj5F_Display-Obj5F_Index
0000FA7A 0000                       		dc.w Obj5F_End-Obj5F_Index
0000FA7C                            ; ===========================================================================
0000FA7C                            
0000FA7C                            Obj5F_Main:				; XREF: Obj5F_Index
0000FA7C 5428 0024                  		addq.b	#2,$24(a0)
0000FA80 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
0000FA88 317C 0400 0002             		move.w	#$400,2(a0)
0000FA8E 0028 0004 0001             		ori.b	#4,1(a0)
0000FA94 117C 0003 0018             		move.b	#3,$18(a0)
0000FA9A 117C 000C 0019             		move.b	#$C,$19(a0)
0000FAA0 1028 0028                  		move.b	$28(a0),d0
0000FAA4 6700                       		beq.s	loc_11A3C
0000FAA6 1140 0024                  		move.b	d0,$24(a0)
0000FAAA 4E75                       		rts	
0000FAAC                            ; ===========================================================================
0000FAAC                            
0000FAAC                            loc_11A3C:
0000FAAC 117C 009A 0020             		move.b	#$9A,$20(a0)
0000FAB2 0868 0000 0022             		bchg	#0,$22(a0)
0000FAB8                            
0000FAB8                            Obj5F_Action:				; XREF: Obj5F_Index
0000FAB8 7000                       		moveq	#0,d0
0000FABA 1028 0025                  		move.b	$25(a0),d0
0000FABE 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
0000FAC2 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
0000FAC6 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0000FACC 6100 8CF2                  		bsr.w	AnimateSprite
0000FAD0 6000 DC60                  		bra.w	MarkObjGone
0000FAD4                            ; ===========================================================================
0000FAD4 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
0000FAD6 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
0000FAD8 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
0000FADA                            ; ===========================================================================
0000FADA                            
0000FADA                            Obj5F_Walk:				; XREF: Obj5F_Index2
0000FADA 6100 0000                  		bsr.w	Obj5F_ChkSonic
0000FADE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000FAE2 6A00                       		bpl.s	locret_11A96	; if time remains, branch
0000FAE4 5428 0025                  		addq.b	#2,$25(a0)
0000FAE8 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
0000FAEE 317C 0010 0010             		move.w	#$10,$10(a0)
0000FAF4 117C 0001 001C             		move.b	#1,$1C(a0)
0000FAFA 0868 0000 0022             		bchg	#0,$22(a0)
0000FB00 6700                       		beq.s	locret_11A96
0000FB02 4468 0010                  		neg.w	$10(a0)		; change direction
0000FB06                            
0000FB06                            locret_11A96:
0000FB06 4E75                       		rts	
0000FB08                            ; ===========================================================================
0000FB08                            
0000FB08                            Obj5F_Wait:				; XREF: Obj5F_Index2
0000FB08 6100 0000                  		bsr.w	Obj5F_ChkSonic
0000FB0C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000FB10 6B00                       		bmi.s	loc_11AA8
0000FB12 6100 BB60                  		bsr.w	SpeedToPos
0000FB16 4E75                       		rts	
0000FB18                            ; ===========================================================================
0000FB18                            
0000FB18                            loc_11AA8:
0000FB18 5528 0025                  		subq.b	#2,$25(a0)
0000FB1C 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
0000FB22 4268 0010                  		clr.w	$10(a0)		; stop walking
0000FB26 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
0000FB2C 4E75                       		rts	
0000FB2E                            ; ===========================================================================
0000FB2E                            
0000FB2E                            Obj5F_Explode:				; XREF: Obj5F_Index2
0000FB2E 5368 0030                  		subq.w	#1,$30(a0)
0000FB32 6A00                       		bpl.s	locret_11AD0
0000FB34 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
0000FB38 117C 0000 0024             		move.b	#0,$24(a0)
0000FB3E                            
0000FB3E                            locret_11AD0:
0000FB3E 4E75                       		rts	
0000FB40                            ; ===========================================================================
0000FB40                            
0000FB40                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
0000FB40 3038 D008                  		move.w	($FFFFD008).w,d0
0000FB48 6400                       		bcc.s	loc_11ADE
0000FB4A 4440                       		neg.w	d0
0000FB4C                            
0000FB4C                            loc_11ADE:
0000FB4C 0C40 0060                  		cmpi.w	#$60,d0
0000FB50 6400                       		bcc.s	locret_11B5E
0000FB52 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FB5A 6400                       		bcc.s	Obj5F_MakeFuse
0000FB5C 4440                       		neg.w	d0
0000FB5E                            
0000FB5E                            Obj5F_MakeFuse:
0000FB5E 0C40 0060                  		cmpi.w	#$60,d0
0000FB62 6400                       		bcc.s	locret_11B5E
0000FB64 4A78 FE08                  		tst.w	($FFFFFE08).w
0000FB68 6600                       		bne.s	locret_11B5E
0000FB6A 117C 0004 0025             		move.b	#4,$25(a0)
0000FB70 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
0000FB76 4268 0010                  		clr.w	$10(a0)
0000FB7A 117C 0002 001C             		move.b	#2,$1C(a0)
0000FB80 6100 BFB4                  		bsr.w	SingleObjLoad2
0000FB84 6600                       		bne.s	locret_11B5E
0000FB86 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
0000FB8A 3368 0008 0008             		move.w	8(a0),8(a1)
0000FB90 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FB96 3368 000C 0034             		move.w	$C(a0),$34(a1)
0000FB9C 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FBA2 137C 0004 0028             		move.b	#4,$28(a1)
0000FBA8 137C 0003 001C             		move.b	#3,$1C(a1)
0000FBAE 337C 0010 0012             		move.w	#$10,$12(a1)
0000FBB4 0828 0001 0022             		btst	#1,$22(a0)
0000FBBA 6700                       		beq.s	loc_11B54
0000FBBC 4469 0012                  		neg.w	$12(a1)
0000FBC0                            
0000FBC0                            loc_11B54:
0000FBC0 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
0000FBC6 2348 003C                  		move.l	a0,$3C(a1)
0000FBCA                            
0000FBCA                            locret_11B5E:
0000FBCA 4E75                       		rts	
0000FBCC                            ; ===========================================================================
0000FBCC                            
0000FBCC                            Obj5F_Display:				; XREF: Obj5F_Index
0000FBCC 6100                       		bsr.s	loc_11B70
0000FBCE 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0000FBD4 6100 8BEA                  		bsr.w	AnimateSprite
0000FBD8 6000 DB58                  		bra.w	MarkObjGone
0000FBDC                            ; ===========================================================================
0000FBDC                            
0000FBDC                            loc_11B70:
0000FBDC 5368 0030                  		subq.w	#1,$30(a0)
0000FBE0 6B00                       		bmi.s	loc_11B7C
0000FBE2 6100 BA90                  		bsr.w	SpeedToPos
0000FBE6 4E75                       		rts	
0000FBE8                            ; ===========================================================================
0000FBE8                            
0000FBE8                            loc_11B7C:
0000FBE8 4268 0030                  		clr.w	$30(a0)
0000FBEC 4228 0024                  		clr.b	$24(a0)
0000FBF0 3168 0034 000C             		move.w	$34(a0),$C(a0)
0000FBF6 7203                       		moveq	#3,d1
0000FBF8 2248                       		movea.l	a0,a1
0000FBFA 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
0000FC00 6000                       		bra.s	Obj5F_MakeShrap
0000FC02                            ; ===========================================================================
0000FC02                            
0000FC02                            Obj5F_Loop:
0000FC02 6100 BF32                  		bsr.w	SingleObjLoad2
0000FC06 6600                       		bne.s	loc_11BCE
0000FC08                            
0000FC08                            Obj5F_MakeShrap:			; XREF: loc_11B7C
0000FC08 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
0000FC0C 3368 0008 0008             		move.w	8(a0),8(a1)
0000FC12 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FC18 137C 0006 0028             		move.b	#6,$28(a1)
0000FC1E 137C 0004 001C             		move.b	#4,$1C(a1)
0000FC24 335A 0010                  		move.w	(a2)+,$10(a1)
0000FC28 335A 0012                  		move.w	(a2)+,$12(a1)
0000FC2C 137C 0098 0020             		move.b	#$98,$20(a1)
0000FC32 08E9 0007 0001             		bset	#7,1(a1)
0000FC38                            
0000FC38                            loc_11BCE:
0000FC38 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
0000FC3C                            
0000FC3C 117C 0006 0024             		move.b	#6,$24(a0)
0000FC42                            
0000FC42                            Obj5F_End:				; XREF: Obj5F_Index
0000FC42 6100 BA30                  		bsr.w	SpeedToPos
0000FC46 0668 0018 0012             		addi.w	#$18,$12(a0)
0000FC4C 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0000FC52 6100 8B6C                  		bsr.w	AnimateSprite
0000FC56 4A28 0001                  		tst.b	1(a0)
0000FC5A 6A00 BA7A                  		bpl.w	DeleteObject
0000FC5E 6000 BA3A                  		bra.w	DisplaySprite
0000FC62                            ; ===========================================================================
0000FC62 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
0000FC72                            
0000FC72                            Ani_obj5F:
0000FC72                            	include "_anim\obj5F.asm"
0000FC72                            ; ---------------------------------------------------------------------------
0000FC72                            ; Animation script - Bomb enemy
0000FC72                            ; ---------------------------------------------------------------------------
0000FC72 0000                       		dc.w byte_11C12-Ani_obj5F
0000FC74 0000                       		dc.w byte_11C16-Ani_obj5F
0000FC76 0000                       		dc.w byte_11C1C-Ani_obj5F
0000FC78 0000                       		dc.w byte_11C20-Ani_obj5F
0000FC7A 0000                       		dc.w byte_11C24-Ani_obj5F
0000FC7C 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
0000FC80 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
0000FC86 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
0000FC8A 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
0000FC8E 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
0000FC92                            		even
0000FC92                            		even
0000FC92                            
0000FC92                            ; ---------------------------------------------------------------------------
0000FC92                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0000FC92                            ; ---------------------------------------------------------------------------
0000FC92                            Map_obj5F:
0000FC92                            	include "_maps\obj5F.asm"
0000FC92                            ; ---------------------------------------------------------------------------
0000FC92                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0000FC92                            ; ---------------------------------------------------------------------------
0000FC92 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
0000FC96 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
0000FC9A 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
0000FC9E 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0000FCA2 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
0000FCA6 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
0000FCAA 03                         byte_11C40:	dc.b 3
0000FCAB F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0000FCB0 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0000FCB5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0000FCBA 03                         byte_11C50:	dc.b 3
0000FCBB F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0000FCC0 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0000FCC5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0000FCCA 03                         byte_11C60:	dc.b 3
0000FCCB F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0000FCD0 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0000FCD5 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0000FCDA 03                         byte_11C70:	dc.b 3
0000FCDB F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0000FCE0 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0000FCE5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0000FCEA 03                         byte_11C80:	dc.b 3
0000FCEB F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0000FCF0 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0000FCF5 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0000FCFA 03                         byte_11C90:	dc.b 3
0000FCFB F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0000FD00 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
0000FD05 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0000FD0A 02                         byte_11CA0:	dc.b 2
0000FD0B F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0000FD10 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0000FD15 02                         byte_11CAB:	dc.b 2
0000FD16 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0000FD1B 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0000FD20 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
0000FD21 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
0000FD26 01                         byte_11CBC:	dc.b 1			; fuse
0000FD27 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
0000FD2C 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
0000FD2D FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0000FD32 01                         byte_11CC8:	dc.b 1			; fireball
0000FD33 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0000FD38                            		even
0000FD38                            		even
0000FD38                            
0000FD38                            ; ===========================================================================
0000FD38                            ; ---------------------------------------------------------------------------
0000FD38                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
0000FD38                            ; ---------------------------------------------------------------------------
0000FD38                            
0000FD38                            Obj60:					; XREF: Obj_Index
0000FD38 7000                       		moveq	#0,d0
0000FD3A 1028 0024                  		move.b	$24(a0),d0
0000FD3E 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
0000FD42 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
0000FD46                            ; ===========================================================================
0000FD46 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
0000FD48 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
0000FD4A 0000                       		dc.w Obj60_Display-Obj60_Index
0000FD4C 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
0000FD4E 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
0000FD50                            ; ===========================================================================
0000FD50                            
0000FD50                            Obj60_Main:				; XREF: Obj60_Index
0000FD50 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
0000FD58 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
0000FD5E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000FD64 6700                       		beq.s	loc_11D02
0000FD66 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
0000FD6C                            
0000FD6C                            loc_11D02:
0000FD6C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000FD72 6600                       		bne.s	loc_11D10
0000FD74 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
0000FD7A                            
0000FD7A                            loc_11D10:
0000FD7A 0028 0004 0001             		ori.b	#4,1(a0)
0000FD80 117C 0004 0018             		move.b	#4,$18(a0)
0000FD86 117C 000B 0020             		move.b	#$B,$20(a0)
0000FD8C 117C 000C 0019             		move.b	#$C,$19(a0)
0000FD92 7400                       		moveq	#0,d2
0000FD94 45E8 0037                  		lea	$37(a0),a2
0000FD98 264A                       		movea.l	a2,a3
0000FD9A 524A                       		addq.w	#1,a2
0000FD9C 7203                       		moveq	#3,d1
0000FD9E                            
0000FD9E                            Obj60_MakeOrbs:
0000FD9E 6100 BD96                  		bsr.w	SingleObjLoad2
0000FDA2 6600                       		bne.s	loc_11D90
0000FDA4 5213                       		addq.b	#1,(a3)
0000FDA6 3A09                       		move.w	a1,d5
0000FDA8 0445 D000                  		subi.w	#-$3000,d5
0000FDAC EC4D                       		lsr.w	#6,d5
0000FDAE 0245 007F                  		andi.w	#$7F,d5
0000FDB2 14C5                       		move.b	d5,(a2)+
0000FDB4 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0000FDB6 137C 0006 0024             		move.b	#6,$24(a1)
0000FDBC 2368 0004 0004             		move.l	4(a0),4(a1)
0000FDC2 3368 0002 0002             		move.w	2(a0),2(a1)
0000FDC8 0029 0004 0001             		ori.b	#4,1(a1)
0000FDCE 137C 0004 0018             		move.b	#4,$18(a1)
0000FDD4 137C 0008 0019             		move.b	#8,$19(a1)
0000FDDA 137C 0003 001A             		move.b	#3,$1A(a1)
0000FDE0 137C 0098 0020             		move.b	#$98,$20(a1)
0000FDE6 1342 0026                  		move.b	d2,$26(a1)
0000FDEA 0602 0040                  		addi.b	#$40,d2
0000FDEE 2348 003C                  		move.l	a0,$3C(a1)
0000FDF2 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
0000FDF6                            
0000FDF6                            loc_11D90:
0000FDF6 7001                       		moveq	#1,d0
0000FDF8 0828 0000 0022             		btst	#0,$22(a0)
0000FDFE 6700                       		beq.s	Obj60_Move
0000FE00 4440                       		neg.w	d0
0000FE02                            
0000FE02                            Obj60_Move:
0000FE02 1140 0036                  		move.b	d0,$36(a0)
0000FE06 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
0000FE0C 5428 0024                  		addq.b	#2,$24(a0)
0000FE10 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
0000FE16 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
0000FE1C 6700                       		beq.s	locret_11DBC	; if not, branch
0000FE1E 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
0000FE22                            
0000FE22                            locret_11DBC:
0000FE22 4E75                       		rts	
0000FE24                            ; ===========================================================================
0000FE24                            
0000FE24                            Obj60_ChkSonic:				; XREF: Obj60_Index
0000FE24 3038 D008                  		move.w	($FFFFD008).w,d0
0000FE2C 6400                       		bcc.s	loc_11DCA
0000FE2E 4440                       		neg.w	d0
0000FE30                            
0000FE30                            loc_11DCA:
0000FE30 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
0000FE34 6400                       		bcc.s	Obj60_Animate	; if not, branch
0000FE36 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FE3E 6400                       		bcc.s	loc_11DDC
0000FE40 4440                       		neg.w	d0
0000FE42                            
0000FE42                            loc_11DDC:
0000FE42 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
0000FE46 6400                       		bcc.s	Obj60_Animate	; if not, branch
0000FE48 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000FE4C 6600                       		bne.s	Obj60_Animate	; if yes, branch
0000FE4E 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
0000FE54                            
0000FE54                            Obj60_Animate:
0000FE54 43F9 0000 0000             		lea	(Ani_obj60).l,a1
0000FE5A 6100 8964                  		bsr.w	AnimateSprite
0000FE5E 6000 0000                  		bra.w	Obj60_ChkDel
0000FE62                            ; ===========================================================================
0000FE62                            
0000FE62                            Obj60_Display:				; XREF: Obj60_Index
0000FE62 6100 B810                  		bsr.w	SpeedToPos
0000FE66                            
0000FE66                            Obj60_ChkDel:				; XREF: Obj60_Animate
0000FE66 3028 0008                  		move.w	8(a0),d0
0000FE6A 0240 FF80                  		andi.w	#$FF80,d0
0000FE6E 3238 F700                  		move.w	($FFFFF700).w,d1
0000FE72 0441 0080                  		subi.w	#$80,d1
0000FE76 0241 FF80                  		andi.w	#$FF80,d1
0000FE7C 0C40 0280                  		cmpi.w	#$280,d0
0000FE80 6200 0000                  		bhi.w	Obj60_ChkGone
0000FE84 6000 B814                  		bra.w	DisplaySprite
0000FE88                            ; ===========================================================================
0000FE88                            
0000FE88                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
0000FE88 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FE8C 7000                       		moveq	#0,d0
0000FE8E 1028 0023                  		move.b	$23(a0),d0
0000FE92 6700                       		beq.s	loc_11E34
0000FE94 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FE9A                            
0000FE9A                            loc_11E34:
0000FE9A 45E8 0037                  		lea	$37(a0),a2
0000FE9E 7400                       		moveq	#0,d2
0000FEA0 141A                       		move.b	(a2)+,d2
0000FEA2 5342                       		subq.w	#1,d2
0000FEA4 6500                       		bcs.s	Obj60_Delete
0000FEA6                            
0000FEA6                            loc_11E40:
0000FEA6 7000                       		moveq	#0,d0
0000FEA8 101A                       		move.b	(a2)+,d0
0000FEAA ED48                       		lsl.w	#6,d0
0000FEAC 0680 00FF D000             		addi.l	#$FFD000,d0
0000FEB2 2240                       		movea.l	d0,a1
0000FEB4 6100 B822                  		bsr.w	DeleteObject2
0000FEB8 51CA FFEC                  		dbf	d2,loc_11E40
0000FEBC                            
0000FEBC                            Obj60_Delete:
0000FEBC 6000 B818                  		bra.w	DeleteObject
0000FEC0                            ; ===========================================================================
0000FEC0                            
0000FEC0                            Obj60_MoveOrb:				; XREF: Obj60_Index
0000FEC0 2268 003C                  		movea.l	$3C(a0),a1
0000FEC4 0C11 0060                  		cmpi.b	#$60,0(a1)
0000FEC8 6600 B80C                  		bne.w	DeleteObject
0000FECC 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
0000FED2 6600                       		bne.s	Obj60_Circle
0000FED4 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
0000FEDA 6600                       		bne.s	Obj60_Circle
0000FEDC 5428 0024                  		addq.b	#2,$24(a0)
0000FEE0 5329 0037                  		subq.b	#1,$37(a1)
0000FEE4 6600                       		bne.s	Obj60_FireOrb
0000FEE6 5429 0024                  		addq.b	#2,$24(a1)
0000FEEA                            
0000FEEA                            Obj60_FireOrb:
0000FEEA 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
0000FEF0 0829 0000 0022             		btst	#0,$22(a1)
0000FEF6 6700                       		beq.s	Obj60_Display2
0000FEF8 4468 0010                  		neg.w	$10(a0)
0000FEFC                            
0000FEFC                            Obj60_Display2:
0000FEFC 6000 B79C                  		bra.w	DisplaySprite
0000FF00                            ; ===========================================================================
0000FF00                            
0000FF00                            Obj60_Circle:				; XREF: Obj60_MoveOrb
0000FF00 1028 0026                  		move.b	$26(a0),d0
0000FF04 4EB9 0000 2556             		jsr	(CalcSine).l
0000FF0A E841                       		asr.w	#4,d1
0000FF10 3141 0008                  		move.w	d1,8(a0)
0000FF14 E840                       		asr.w	#4,d0
0000FF1A 3140 000C                  		move.w	d0,$C(a0)
0000FF1E 1029 0036                  		move.b	$36(a1),d0
0000FF26 6000 B772                  		bra.w	DisplaySprite
0000FF2A                            ; ===========================================================================
0000FF2A                            
0000FF2A                            Obj60_ChkDel2:				; XREF: Obj60_Index
0000FF2A 6100 B748                  		bsr.w	SpeedToPos
0000FF2E 4A28 0001                  		tst.b	1(a0)
0000FF32 6A00 B7A2                  		bpl.w	DeleteObject
0000FF36 6000 B762                  		bra.w	DisplaySprite
0000FF3A                            ; ===========================================================================
0000FF3A                            Ani_obj60:
0000FF3A                            	include "_anim\obj60.asm"
0000FF3A                            ; ---------------------------------------------------------------------------
0000FF3A                            ; Animation script - Orbinaut enemy
0000FF3A                            ; ---------------------------------------------------------------------------
0000FF3A 0000                       		dc.w byte_11EDA-Ani_obj60
0000FF3C 0000                       		dc.w byte_11EDE-Ani_obj60
0000FF3E 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
0000FF42 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
0000FF48                            		even
0000FF48                            		even
0000FF48                            
0000FF48                            ; ---------------------------------------------------------------------------
0000FF48                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0000FF48                            ; ---------------------------------------------------------------------------
0000FF48                            Map_obj60:
0000FF48                            	include "_maps\obj60.asm"
0000FF48                            ; ---------------------------------------------------------------------------
0000FF48                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0000FF48                            ; ---------------------------------------------------------------------------
0000FF48 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
0000FF4C 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
0000FF50 01                         byte_11EEC:	dc.b 1
0000FF51 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000FF56 01                         byte_11EF2:	dc.b 1
0000FF57 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
0000FF5C 01                         byte_11EF8:	dc.b 1
0000FF5D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000FF62 01                         byte_11EFE:	dc.b 1
0000FF63 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0000FF68                            		even
0000FF68                            		even
0000FF68                            
0000FF68                            ; ===========================================================================
0000FF68                            ; ---------------------------------------------------------------------------
0000FF68                            ; Object 16 - harpoon (LZ)
0000FF68                            ; ---------------------------------------------------------------------------
0000FF68                            
0000FF68                            Obj16:					; XREF: Obj_Index
0000FF68 7000                       		moveq	#0,d0
0000FF6A 1028 0024                  		move.b	$24(a0),d0
0000FF6E 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
0000FF72 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
0000FF76                            ; ===========================================================================
0000FF76 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
0000FF78 0000                       		dc.w Obj16_Move-Obj16_Index
0000FF7A 0000                       		dc.w Obj16_Wait-Obj16_Index
0000FF7C                            ; ===========================================================================
0000FF7C                            
0000FF7C                            Obj16_Main:				; XREF: Obj16_Index
0000FF7C 5428 0024                  		addq.b	#2,$24(a0)
0000FF80 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
0000FF88 317C 03CC 0002             		move.w	#$3CC,2(a0)
0000FF8E 0028 0004 0001             		ori.b	#4,1(a0)
0000FF94 117C 0004 0018             		move.b	#4,$18(a0)
0000FF9A 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000FFA0 117C 0014 0019             		move.b	#$14,$19(a0)
0000FFA6 317C 003C 0030             		move.w	#60,$30(a0)
0000FFAC                            
0000FFAC                            Obj16_Move:				; XREF: Obj16_Index
0000FFAC 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0000FFB2 6100 880C                  		bsr.w	AnimateSprite
0000FFB6 7000                       		moveq	#0,d0
0000FFB8 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
0000FFBC 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
0000FFC2 6000 D76E                  		bra.w	MarkObjGone
0000FFC6                            ; ===========================================================================
0000FFC6 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
0000FFCC                            ; ===========================================================================
0000FFCC                            
0000FFCC                            Obj16_Wait:				; XREF: Obj16_Index
0000FFCC 5368 0030                  		subq.w	#1,$30(a0)
0000FFD0 6A00                       		bpl.s	Obj16_ChkDel
0000FFD2 317C 003C 0030             		move.w	#60,$30(a0)
0000FFD8 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
0000FFDC 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
0000FFE2                            
0000FFE2                            Obj16_ChkDel:
0000FFE2 6000 D74E                  		bra.w	MarkObjGone
0000FFE6                            ; ===========================================================================
0000FFE6                            Ani_obj16:
0000FFE6                            	include "_anim\obj16.asm"
0000FFE6                            ; ---------------------------------------------------------------------------
0000FFE6                            ; Animation script - harpoon (LZ)
0000FFE6                            ; ---------------------------------------------------------------------------
0000FFE6 0000                       		dc.w byte_11F8A-Ani_obj16
0000FFE8 0000                       		dc.w byte_11F8E-Ani_obj16
0000FFEA 0000                       		dc.w byte_11F92-Ani_obj16
0000FFEC 0000                       		dc.w byte_11F96-Ani_obj16
0000FFEE 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
0000FFF2 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
0000FFF6 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
0000FFFA 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
0000FFFE                            		even
0000FFFE                            		even
0000FFFE                            
0000FFFE                            ; ---------------------------------------------------------------------------
0000FFFE                            ; Sprite mappings - harpoon (LZ)
0000FFFE                            ; ---------------------------------------------------------------------------
0000FFFE                            Map_obj16:
0000FFFE                            	include "_maps\obj16.asm"
0000FFFE                            ; ---------------------------------------------------------------------------
0000FFFE                            ; Sprite mappings - harpoon (LZ)
0000FFFE                            ; ---------------------------------------------------------------------------
0000FFFE 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00010002 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00010006 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
0001000A 01                         byte_11FA6:	dc.b 1
0001000B FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00010010 01                         byte_11FAC:	dc.b 1
00010011 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00010016 02                         byte_11FB2:	dc.b 2
00010017 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
0001001C FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00010021 01                         byte_11FBD:	dc.b 1
00010022 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00010027 01                         byte_11FC3:	dc.b 1
00010028 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
0001002D 02                         byte_11FC9:	dc.b 2
0001002E D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00010033 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00010038                            		even
00010038                            		even
00010038                            
00010038                            ; ===========================================================================
00010038                            ; ---------------------------------------------------------------------------
00010038                            ; Object 61 - blocks (LZ)
00010038                            ; ---------------------------------------------------------------------------
00010038                            
00010038                            Obj61:					; XREF: Obj_Index
00010038 7000                       		moveq	#0,d0
0001003A 1028 0024                  		move.b	$24(a0),d0
0001003E 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00010042 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00010046                            ; ===========================================================================
00010046 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00010048 0000                       		dc.w Obj61_Action-Obj61_Index
0001004A                            
0001004A 1010                       Obj61_Var:	dc.b $10, $10		; width, height
0001004C 200C                       		dc.b $20, $C
0001004E 1010                       		dc.b $10, $10
00010050 1010                       		dc.b $10, $10
00010052                            ; ===========================================================================
00010052                            
00010052                            Obj61_Main:				; XREF: Obj61_Index
00010052 5428 0024                  		addq.b	#2,$24(a0)
00010056 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
0001005E 317C 43E6 0002             		move.w	#$43E6,2(a0)
00010064 117C 0004 0001             		move.b	#4,1(a0)
0001006A 117C 0003 0018             		move.b	#3,$18(a0)
00010070 7000                       		moveq	#0,d0
00010072 1028 0028                  		move.b	$28(a0),d0
00010076 E648                       		lsr.w	#3,d0
00010078 0240 000E                  		andi.w	#$E,d0
0001007C 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00010080 115A 0019                  		move.b	(a2)+,$19(a0)
00010084 1152 0016                  		move.b	(a2),$16(a0)
00010088 E248                       		lsr.w	#1,d0
0001008A 1140 001A                  		move.b	d0,$1A(a0)
0001008E 3168 0008 0034             		move.w	8(a0),$34(a0)
00010094 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001009A 1028 0028                  		move.b	$28(a0),d0
0001009E 0200 000F                  		andi.b	#$F,d0
000100A2 6700                       		beq.s	Obj61_Action
000100A4 0C00 0007                  		cmpi.b	#7,d0
000100A8 6700                       		beq.s	Obj61_Action
000100AA 117C 0001 0038             		move.b	#1,$38(a0)
000100B0                            
000100B0                            Obj61_Action:				; XREF: Obj61_Index
000100B0 3F28 0008                  		move.w	8(a0),-(sp)
000100B4 7000                       		moveq	#0,d0
000100B6 1028 0028                  		move.b	$28(a0),d0
000100BA 0240 000F                  		andi.w	#$F,d0
000100C0 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000100C4 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000100C8 381F                       		move.w	(sp)+,d4
000100CA 4A28 0001                  		tst.b	1(a0)
000100CE 6A00                       		bpl.s	Obj61_ChkDel
000100D0 7200                       		moveq	#0,d1
000100D2 1228 0019                  		move.b	$19(a0),d1
000100D6 0641 000B                  		addi.w	#$B,d1
000100DA 7400                       		moveq	#0,d2
000100DC 1428 0016                  		move.b	$16(a0),d2
000100E0 3602                       		move.w	d2,d3
000100E2 5243                       		addq.w	#1,d3
000100E4 6100 D974                  		bsr.w	SolidObject
000100E8 1144 003F                  		move.b	d4,$3F(a0)
000100EC 6100 0000                  		bsr.w	loc_12180
000100F0                            
000100F0                            Obj61_ChkDel:
000100F0 3028 0034                  		move.w	$34(a0),d0
000100F4 0240 FF80                  		andi.w	#$FF80,d0
000100F8 3238 F700                  		move.w	($FFFFF700).w,d1
000100FC 0441 0080                  		subi.w	#$80,d1
00010100 0241 FF80                  		andi.w	#$FF80,d1
00010106 0C40 0280                  		cmpi.w	#$280,d0
0001010A 6200 B5CA                  		bhi.w	DeleteObject
0001010E 6000 B58A                  		bra.w	DisplaySprite
00010112                            ; ===========================================================================
00010112 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00010116 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001011A 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
0001011E 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00010122                            ; ===========================================================================
00010122                            
00010122                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00010122 4E75                       		rts	
00010124                            ; ===========================================================================
00010124                            
00010124                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00010124 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00010128 6600                       		bne.s	loc_120D6	; if yes, branch
0001012A 0828 0003 0022             		btst	#3,$22(a0)
00010130 6700                       		beq.s	locret_120D4
00010132 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
00010138                            
00010138                            locret_120D4:
00010138 4E75                       		rts	
0001013A                            ; ===========================================================================
0001013A                            
0001013A                            loc_120D6:
0001013A 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
0001013E 66F8                       		bne.s	locret_120D4	; if time remains, branch
00010140 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00010144 4228 0038                  		clr.b	$38(a0)
00010148 4E75                       		rts	
0001014A                            ; ===========================================================================
0001014A                            
0001014A                            Obj61_Type02:				; XREF: Obj61_TypeIndex
0001014A 6100 B528                  		bsr.w	SpeedToPos
0001014E 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00010152 6100 0000                  		bsr.w	ObjHitFloor
00010156 4A41                       		tst.w	d1
00010158 6A00 0000                  		bpl.w	locret_12106
0001015C 5241                       		addq.w	#1,d1
00010162 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00010166 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001016A                            
0001016A                            locret_12106:
0001016A 4E75                       		rts	
0001016C                            ; ===========================================================================
0001016C                            
0001016C                            Obj61_Type04:				; XREF: Obj61_TypeIndex
0001016C 6100 B506                  		bsr.w	SpeedToPos
00010170 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00010174 6100 0000                  		bsr.w	ObjHitCeiling
00010178 4A41                       		tst.w	d1
0001017A 6A00 0000                  		bpl.w	locret_12126
00010182 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00010186 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001018A                            
0001018A                            locret_12126:
0001018A 4E75                       		rts	
0001018C                            ; ===========================================================================
0001018C                            
0001018C                            Obj61_Type05:				; XREF: Obj61_TypeIndex
0001018C 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00010192 6600                       		bne.s	locret_12138	; if not, branch
00010194 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010198 4228 0038                  		clr.b	$38(a0)
0001019C                            
0001019C                            locret_12138:
0001019C 4E75                       		rts	
0001019E                            ; ===========================================================================
0001019E                            
0001019E                            Obj61_Type07:				; XREF: Obj61_TypeIndex
0001019E 3038 F646                  		move.w	($FFFFF646).w,d0
000101A6 6700                       		beq.s	locret_1217E
000101A8 6400                       		bcc.s	loc_12162
000101AA 0C40 FFFE                  		cmpi.w	#-2,d0
000101AE 6C00                       		bge.s	loc_1214E
000101B0 70FE                       		moveq	#-2,d0
000101B2                            
000101B2                            loc_1214E:
000101B6 6100 0000                  		bsr.w	ObjHitCeiling
000101BA 4A41                       		tst.w	d1
000101BC 6A00 0000                  		bpl.w	locret_12160
000101C4                            
000101C4                            locret_12160:
000101C4 4E75                       		rts	
000101C6                            ; ===========================================================================
000101C6                            
000101C6                            loc_12162:				; XREF: Obj61_Type07
000101C6 0C40 0002                  		cmpi.w	#2,d0
000101CA 6F00                       		ble.s	loc_1216A
000101CC 7002                       		moveq	#2,d0
000101CE                            
000101CE                            loc_1216A:
000101D2 6100 0000                  		bsr.w	ObjHitFloor
000101D6 4A41                       		tst.w	d1
000101D8 6A00 0000                  		bpl.w	locret_1217E
000101DC 5241                       		addq.w	#1,d1
000101E2                            
000101E2                            locret_1217E:
000101E2 4E75                       		rts	
000101E4                            ; ===========================================================================
000101E4                            
000101E4                            loc_12180:				; XREF: Obj61_Action
000101E4 4A28 0038                  		tst.b	$38(a0)
000101E8 6700                       		beq.s	locret_121C0
000101EA 0828 0003 0022             		btst	#3,$22(a0)
000101F0 6600                       		bne.s	loc_1219A
000101F2 4A28 003E                  		tst.b	$3E(a0)
000101F6 6700                       		beq.s	locret_121C0
000101F8 5928 003E                  		subq.b	#4,$3E(a0)
000101FC 6000                       		bra.s	loc_121A6
000101FE                            ; ===========================================================================
000101FE                            
000101FE                            loc_1219A:
000101FE 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00010204 6700                       		beq.s	locret_121C0
00010206 5828 003E                  		addq.b	#4,$3E(a0)
0001020A                            
0001020A                            loc_121A6:
0001020A 1028 003E                  		move.b	$3E(a0),d0
0001020E 4EB9 0000 2556             		jsr	(CalcSine).l
00010214 323C 0400                  		move.w	#$400,d1
00010218 C1C1                       		muls.w	d1,d0
0001021A 4840                       		swap	d0
00010220 3140 000C                  		move.w	d0,$C(a0)
00010224                            
00010224                            locret_121C0:
00010224 4E75                       		rts	
00010226                            ; ===========================================================================
00010226                            ; ---------------------------------------------------------------------------
00010226                            ; Sprite mappings - blocks (LZ)
00010226                            ; ---------------------------------------------------------------------------
00010226                            Map_obj61:
00010226                            	include "_maps\obj61.asm"
00010226                            ; ---------------------------------------------------------------------------
00010226                            ; Sprite mappings - blocks (LZ)
00010226                            ; ---------------------------------------------------------------------------
00010226 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
0001022A 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
0001022E 01                         byte_121CA:	dc.b 1
0001022F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00010234 02                         byte_121D0:	dc.b 2
00010235 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
0001023A F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
0001023F 01                         byte_121DB:	dc.b 1
00010240 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00010245 01                         byte_121E1:	dc.b 1
00010246 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
0001024C 00                         		even
0001024C 00                         		even
0001024C                            
0001024C                            ; ===========================================================================
0001024C                            ; ---------------------------------------------------------------------------
0001024C                            ; Object 62 - gargoyle head (LZ)
0001024C                            ; ---------------------------------------------------------------------------
0001024C                            
0001024C                            Obj62:					; XREF: Obj_Index
0001024C 7000                       		moveq	#0,d0
0001024E 1028 0024                  		move.b	$24(a0),d0
00010252 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00010256 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
0001025A 6000 D4D6                  		bra.w	MarkObjGone
0001025E                            ; ===========================================================================
0001025E 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00010260 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00010262 0000                       		dc.w Obj62_FireBall-Obj62_Index
00010264 0000                       		dc.w Obj62_AniFire-Obj62_Index
00010266                            
00010266 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
0001026E                            ; ===========================================================================
0001026E                            
0001026E                            Obj62_Main:				; XREF: Obj62_Index
0001026E 5428 0024                  		addq.b	#2,$24(a0)
00010272 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001027A 317C 42E9 0002             		move.w	#$42E9,2(a0)
00010280 0028 0004 0001             		ori.b	#4,1(a0)
00010286 117C 0003 0018             		move.b	#3,$18(a0)
0001028C 117C 0010 0019             		move.b	#$10,$19(a0)
00010292 1028 0028                  		move.b	$28(a0),d0	; get object type
00010296 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001029A 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
000102A0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000102A6 0228 000F 0028             		andi.b	#$F,$28(a0)
000102AC                            
000102AC                            Obj62_MakeFire:				; XREF: Obj62_Index
000102AC 5328 001E                  		subq.b	#1,$1E(a0)
000102B0 6600                       		bne.s	Obj62_NoFire
000102B2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000102B8 6100 B65A                  		bsr.w	ChkObjOnScreen
000102BC 6600                       		bne.s	Obj62_NoFire
000102BE 6100 B860                  		bsr.w	SingleObjLoad
000102C2 6600                       		bne.s	Obj62_NoFire
000102C4 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
000102C8 5829 0024                  		addq.b	#4,$24(a1)
000102CC 3368 0008 0008             		move.w	8(a0),8(a1)
000102D2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000102D8 1368 0001 0001             		move.b	1(a0),1(a1)
000102DE 1368 0022 0022             		move.b	$22(a0),$22(a1)
000102E4                            
000102E4                            Obj62_NoFire:
000102E4 4E75                       		rts	
000102E6                            ; ===========================================================================
000102E6                            
000102E6                            Obj62_FireBall:				; XREF: Obj62_Index
000102E6 5428 0024                  		addq.b	#2,$24(a0)
000102EA 117C 0008 0016             		move.b	#8,$16(a0)
000102F0 117C 0008 0017             		move.b	#8,$17(a0)
000102F6 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000102FE 317C 02E9 0002             		move.w	#$2E9,2(a0)
00010304 0028 0004 0001             		ori.b	#4,1(a0)
0001030A 117C 0004 0018             		move.b	#4,$18(a0)
00010310 117C 0098 0020             		move.b	#$98,$20(a0)
00010316 117C 0008 0019             		move.b	#8,$19(a0)
0001031C 117C 0002 001A             		move.b	#2,$1A(a0)
00010322 5068 000C                  		addq.w	#8,$C(a0)
00010326 317C 0200 0010             		move.w	#$200,$10(a0)
0001032C 0828 0000 0022             		btst	#0,$22(a0)
00010332 6600                       		bne.s	Obj62_Sound
00010334 4468 0010                  		neg.w	$10(a0)
00010338                            
00010338                            Obj62_Sound:
00010338 303C 00AE                  		move.w	#$AE,d0
0001033C 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play lava ball sound
00010342                            
00010342                            Obj62_AniFire:				; XREF: Obj62_Index
00010342 1038 FE05                  		move.b	($FFFFFE05).w,d0
00010346 0200 0007                  		andi.b	#7,d0
0001034A 6600                       		bne.s	Obj62_StopFire
0001034C 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00010352                            
00010352                            Obj62_StopFire:
00010352 6100 B320                  		bsr.w	SpeedToPos
00010356 0828 0000 0022             		btst	#0,$22(a0)
0001035C 6600                       		bne.s	Obj62_StopFire2
0001035E 76F8                       		moveq	#-8,d3
00010360 6100 0000                  		bsr.w	ObjHitWallLeft
00010364 4A41                       		tst.w	d1
00010366 6B00 B36E                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
0001036A 4E75                       		rts	
0001036C                            ; ===========================================================================
0001036C                            
0001036C                            Obj62_StopFire2:
0001036C 7608                       		moveq	#8,d3
0001036E 6100 0000                  		bsr.w	ObjHitWallRight
00010372 4A41                       		tst.w	d1
00010374 6B00 B360                  		bmi.w	DeleteObject
00010378 4E75                       		rts	
0001037A                            ; ===========================================================================
0001037A                            ; ---------------------------------------------------------------------------
0001037A                            ; Sprite mappings - gargoyle head (LZ)
0001037A                            ; ---------------------------------------------------------------------------
0001037A                            Map_obj62:
0001037A                            	include "_maps\obj62.asm"
0001037A                            ; ---------------------------------------------------------------------------
0001037A                            ; Sprite mappings - gargoyle head (LZ)
0001037A                            ; ---------------------------------------------------------------------------
0001037A 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
0001037E 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00010382 03                         byte_12320:	dc.b 3
00010383 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00010388 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
0001038D 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00010392 01                         byte_12330:	dc.b 1
00010393 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00010398 01                         byte_12336:	dc.b 1
00010399 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
0001039E                            		even
0001039E                            		even
0001039E                            
0001039E                            ; ===========================================================================
0001039E                            ; ---------------------------------------------------------------------------
0001039E                            ; Object 63 - platforms	on a conveyor belt (LZ)
0001039E                            ; ---------------------------------------------------------------------------
0001039E                            
0001039E                            Obj63:					; XREF: Obj_Index
0001039E 7000                       		moveq	#0,d0
000103A0 1028 0024                  		move.b	$24(a0),d0
000103A4 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
000103A8 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
000103AC 3028 0030                  		move.w	$30(a0),d0
000103B0 0240 FF80                  		andi.w	#$FF80,d0
000103B4 3238 F700                  		move.w	($FFFFF700).w,d1
000103B8 0441 0080                  		subi.w	#$80,d1
000103BC 0241 FF80                  		andi.w	#$FF80,d1
000103C2 0C40 0280                  		cmpi.w	#$280,d0
000103C6 6200                       		bhi.s	loc_1236A
000103C8                            
000103C8                            Obj63_Display:				; XREF: loc_1236A
000103C8 6000 B2D0                  		bra.w	DisplaySprite
000103CC                            ; ===========================================================================
000103CC                            
000103CC                            loc_1236A:				; XREF: Obj63
000103CC 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
000103D2 6600                       		bne.s	loc_12378
000103D4 0C40 FF80                  		cmpi.w	#-$80,d0
000103D8 64EE                       		bcc.s	Obj63_Display
000103DA                            
000103DA                            loc_12378:
000103DA 1028 002F                  		move.b	$2F(a0),d0
000103DE 6A00 B2F6                  		bpl.w	DeleteObject
000103E2 0240 007F                  		andi.w	#$7F,d0
000103E6 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000103EA 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000103F0 6000 B2E4                  		bra.w	DeleteObject
000103F4                            ; ===========================================================================
000103F4 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
000103F6 0000                       		dc.w loc_124B2-Obj63_Index
000103F8 0000                       		dc.w loc_124C2-Obj63_Index
000103FA 0000                       		dc.w loc_124DE-Obj63_Index
000103FC                            ; ===========================================================================
000103FC                            
000103FC                            Obj63_Main:				; XREF: Obj63_Index
000103FC 1028 0028                  		move.b	$28(a0),d0
00010400 6B00 0000                  		bmi.w	loc_12460
00010404 5428 0024                  		addq.b	#2,$24(a0)
00010408 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00010410 317C 43F6 0002             		move.w	#$43F6,2(a0)
00010416 0028 0004 0001             		ori.b	#4,1(a0)
0001041C 117C 0010 0019             		move.b	#$10,$19(a0)
00010422 117C 0004 0018             		move.b	#4,$18(a0)
00010428 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
0001042E 6600                       		bne.s	loc_123E2
00010430 5828 0024                  		addq.b	#4,$24(a0)
00010434 317C 03F6 0002             		move.w	#$3F6,2(a0)
0001043A 117C 0001 0018             		move.b	#1,$18(a0)
00010440 6000 0000                  		bra.w	loc_124DE
00010444                            ; ===========================================================================
00010444                            
00010444                            loc_123E2:
00010444 117C 0004 001A             		move.b	#4,$1A(a0)
0001044A 7000                       		moveq	#0,d0
0001044C 1028 0028                  		move.b	$28(a0),d0
00010450 3200                       		move.w	d0,d1
00010452 E648                       		lsr.w	#3,d0
00010454 0240 001E                  		andi.w	#$1E,d0
00010458 45FA 0000                  		lea	Obj63_Data(pc),a2
0001045C D4F2 0000                  		adda.w	(a2,d0.w),a2
00010460 315A 0038                  		move.w	(a2)+,$38(a0)
00010464 315A 0030                  		move.w	(a2)+,$30(a0)
00010468 214A 003C                  		move.l	a2,$3C(a0)
0001046C 0241 000F                  		andi.w	#$F,d1
00010470 E549                       		lsl.w	#2,d1
00010472 1141 0038                  		move.b	d1,$38(a0)
00010476 117C 0004 003A             		move.b	#4,$3A(a0)
0001047C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00010480 6700                       		beq.s	loc_1244C
00010482 117C 0001 003B             		move.b	#1,$3B(a0)
00010488 4428 003A                  		neg.b	$3A(a0)
0001048C 7200                       		moveq	#0,d1
0001048E 1228 0038                  		move.b	$38(a0),d1
00010496 B228 0039                  		cmp.b	$39(a0),d1
0001049A 6500                       		bcs.s	loc_12448
0001049C 1001                       		move.b	d1,d0
0001049E 7200                       		moveq	#0,d1
000104A0 4A00                       		tst.b	d0
000104A2 6A00                       		bpl.s	loc_12448
000104A4 1228 0039                  		move.b	$39(a0),d1
000104A8 5901                       		subq.b	#4,d1
000104AA                            
000104AA                            loc_12448:
000104AA 1141 0038                  		move.b	d1,$38(a0)
000104AE                            
000104AE                            loc_1244C:
000104AE 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000104B4 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000104BA 6100 0000                  		bsr.w	Obj63_ChangeDir
000104BE 6000 0000                  		bra.w	loc_124B2
000104C2                            ; ===========================================================================
000104C2                            
000104C2                            loc_12460:				; XREF: Obj63_Main
000104C2 1140 002F                  		move.b	d0,$2F(a0)
000104C6 0240 007F                  		andi.w	#$7F,d0
000104CA 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000104CE 08F2 0000 0000             		bset	#0,(a2,d0.w)
000104D4 6600 B200                  		bne.w	DeleteObject
000104DA 0240 001E                  		andi.w	#$1E,d0
000104DE 0640 0070                  		addi.w	#$70,d0
000104E2 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000104E8 D4F2 0000                  		adda.w	(a2,d0.w),a2
000104EC 321A                       		move.w	(a2)+,d1
000104EE 2248                       		movea.l	a0,a1
000104F0 6000                       		bra.s	Obj63_MakePtfms
000104F2                            ; ===========================================================================
000104F2                            
000104F2                            Obj63_Loop:
000104F2 6100 B62C                  		bsr.w	SingleObjLoad
000104F6 6600                       		bne.s	loc_124AA
000104F8                            
000104F8                            Obj63_MakePtfms:			; XREF: loc_12460
000104F8 12BC 0063                  		move.b	#$63,0(a1)
000104FC 335A 0008                  		move.w	(a2)+,8(a1)
00010500 335A 000C                  		move.w	(a2)+,$C(a1)
00010504 301A                       		move.w	(a2)+,d0
00010506 1340 0028                  		move.b	d0,$28(a1)
0001050A                            
0001050A                            loc_124AA:
0001050A 51C9 FFE6                  		dbf	d1,Obj63_Loop
0001050E                            
0001050E 588F                       		addq.l	#4,sp
00010510 4E75                       		rts	
00010512                            ; ===========================================================================
00010512                            
00010512                            loc_124B2:				; XREF: Obj63_Index
00010512 7200                       		moveq	#0,d1
00010514 1228 0019                  		move.b	$19(a0),d1
00010518 4EB9 0000 5562             		jsr	(PlatformObject).l
0001051E 6000 0000                  		bra.w	sub_12502
00010522                            ; ===========================================================================
00010522                            
00010522                            loc_124C2:				; XREF: Obj63_Index
00010522 7200                       		moveq	#0,d1
00010524 1228 0019                  		move.b	$19(a0),d1
00010528 4EB9 0000 56D6             		jsr	(ExitPlatform).l
0001052E 3F28 0008                  		move.w	8(a0),-(sp)
00010532 6100 0000                  		bsr.w	sub_12502
00010536 341F                       		move.w	(sp)+,d2
00010538 4EF9 0000 5C40             		jmp	(MvSonicOnPtfm2).l
0001053E                            ; ===========================================================================
0001053E                            
0001053E                            loc_124DE:				; XREF: Obj63_Index
0001053E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00010542 0240 0003                  		andi.w	#3,d0
00010546 6600                       		bne.s	loc_124FC
00010548 7201                       		moveq	#1,d1
0001054A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001054E 6700                       		beq.s	loc_124F2
00010550 4401                       		neg.b	d1
00010552                            
00010552                            loc_124F2:
00010556 0228 0003 001A             		andi.b	#3,$1A(a0)
0001055C                            
0001055C                            loc_124FC:
0001055C 588F                       		addq.l	#4,sp
0001055E 6000 D1D2                  		bra.w	MarkObjGone
00010562                            
00010562                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010562                            
00010562                            
00010562                            sub_12502:				; XREF: loc_124B2; loc_124C2
00010562 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00010566 6700                       		beq.s	loc_12520
00010568 4A28 003B                  		tst.b	$3B(a0)
0001056C 6600                       		bne.s	loc_12520
0001056E 117C 0001 003B             		move.b	#1,$3B(a0)
00010574 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
0001057A 4428 003A                  		neg.b	$3A(a0)
0001057E 6000                       		bra.s	loc_12534
00010580                            ; ===========================================================================
00010580                            
00010580                            loc_12520:
00010580 3028 0008                  		move.w	8(a0),d0
00010584 B068 0034                  		cmp.w	$34(a0),d0
00010588 6600                       		bne.s	loc_1256A
0001058A 3028 000C                  		move.w	$C(a0),d0
0001058E B068 0036                  		cmp.w	$36(a0),d0
00010592 6600                       		bne.s	loc_1256A
00010594                            
00010594                            loc_12534:
00010594 7200                       		moveq	#0,d1
00010596 1228 0038                  		move.b	$38(a0),d1
0001059E B228 0039                  		cmp.b	$39(a0),d1
000105A2 6500                       		bcs.s	loc_12552
000105A4 1001                       		move.b	d1,d0
000105A6 7200                       		moveq	#0,d1
000105A8 4A00                       		tst.b	d0
000105AA 6A00                       		bpl.s	loc_12552
000105AC 1228 0039                  		move.b	$39(a0),d1
000105B0 5901                       		subq.b	#4,d1
000105B2                            
000105B2                            loc_12552:
000105B2 1141 0038                  		move.b	d1,$38(a0)
000105B6 2268 003C                  		movea.l	$3C(a0),a1
000105BA 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000105C0 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000105C6 6100 0000                  		bsr.w	Obj63_ChangeDir
000105CA                            
000105CA                            loc_1256A:
000105CA 6100 B0A8                  		bsr.w	SpeedToPos
000105CE 4E75                       		rts	
000105D0                            ; End of function sub_12502
000105D0                            
000105D0                            
000105D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000105D0                            
000105D0                            
000105D0                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
000105D0 7000                       		moveq	#0,d0
000105D2 343C FF00                  		move.w	#-$100,d2
000105D6 3028 0008                  		move.w	8(a0),d0
000105DE 6400                       		bcc.s	loc_12584
000105E0 4440                       		neg.w	d0
000105E2 4442                       		neg.w	d2
000105E4                            
000105E4                            loc_12584:
000105E4 7200                       		moveq	#0,d1
000105E6 363C FF00                  		move.w	#-$100,d3
000105EA 3228 000C                  		move.w	$C(a0),d1
000105F2 6400                       		bcc.s	loc_12598
000105F4 4441                       		neg.w	d1
000105F6 4443                       		neg.w	d3
000105F8                            
000105F8                            loc_12598:
000105F8 B240                       		cmp.w	d0,d1
000105FA 6500                       		bcs.s	loc_125C2
000105FC 3028 0008                  		move.w	8(a0),d0
00010604 6700                       		beq.s	loc_125AE
00010606 48C0                       		ext.l	d0
00010608 E180                       		asl.l	#8,d0
0001060A 81C1                       		divs.w	d1,d0
0001060C 4440                       		neg.w	d0
0001060E                            
0001060E                            loc_125AE:
0001060E 3140 0010                  		move.w	d0,$10(a0)
00010612 3143 0012                  		move.w	d3,$12(a0)
00010616 4840                       		swap	d0
00010618 3140 000A                  		move.w	d0,$A(a0)
0001061C 4268 000E                  		clr.w	$E(a0)
00010620 4E75                       		rts	
00010622                            ; ===========================================================================
00010622                            
00010622                            loc_125C2:				; XREF: Obj63_ChangeDir
00010622 3228 000C                  		move.w	$C(a0),d1
0001062A 6700                       		beq.s	loc_125D4
0001062C 48C1                       		ext.l	d1
0001062E E181                       		asl.l	#8,d1
00010630 83C0                       		divs.w	d0,d1
00010632 4441                       		neg.w	d1
00010634                            
00010634                            loc_125D4:
00010634 3141 0012                  		move.w	d1,$12(a0)
00010638 3142 0010                  		move.w	d2,$10(a0)
0001063C 4841                       		swap	d1
0001063E 3141 000E                  		move.w	d1,$E(a0)
00010642 4268 000A                  		clr.w	$A(a0)
00010646 4E75                       		rts	
00010648                            ; End of function Obj63_ChangeDir
00010648                            
00010648                            ; ===========================================================================
00010648 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
0001064A 0000                       		dc.w word_12610-Obj63_Data
0001064C 0000                       		dc.w word_12628-Obj63_Data
0001064E 0000                       		dc.w word_1263C-Obj63_Data
00010650 0000                       		dc.w word_12650-Obj63_Data
00010652 0000                       		dc.w word_12668-Obj63_Data
00010654 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00010664 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00010670 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00010680 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00010688 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
0001069C 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
000106B0 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
000106C8 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000106DC                            
000106DC                            ; ---------------------------------------------------------------------------
000106DC                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000106DC                            ; ---------------------------------------------------------------------------
000106DC                            Map_obj63:
000106DC                            	include "_maps\obj63.asm"
000106DC                            ; ---------------------------------------------------------------------------
000106DC                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000106DC                            ; ---------------------------------------------------------------------------
000106DC 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
000106E0 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
000106E4 0000                       		dc.w byte_1269E-Map_obj63
000106E6 01                         byte_12686:	dc.b 1
000106E7 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000106EC 01                         byte_1268C:	dc.b 1
000106ED F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000106F2 01                         byte_12692:	dc.b 1
000106F3 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000106F8 01                         byte_12698:	dc.b 1
000106F9 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000106FE 01                         byte_1269E:	dc.b 1
000106FF F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00010704                            		even
00010704                            		even
00010704                            
00010704                            ; ===========================================================================
00010704                            ; ---------------------------------------------------------------------------
00010704                            ; Object 64 - bubbles (LZ)
00010704                            ; ---------------------------------------------------------------------------
00010704                            
00010704                            Obj64:					; XREF: Obj_Index
00010704 7000                       		moveq	#0,d0
00010706 1028 0024                  		move.b	$24(a0),d0
0001070A 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
0001070E 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00010712                            ; ===========================================================================
00010712 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00010714 0000                       		dc.w Obj64_Animate-Obj64_Index
00010716 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00010718 0000                       		dc.w Obj64_Display2-Obj64_Index
0001071A 0000                       		dc.w Obj64_Delete3-Obj64_Index
0001071C 0000                       		dc.w Obj64_BblMaker-Obj64_Index
0001071E                            ; ===========================================================================
0001071E                            
0001071E                            Obj64_Main:				; XREF: Obj64_Index
0001071E 5428 0024                  		addq.b	#2,$24(a0)
00010722 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
0001072A 317C 8348 0002             		move.w	#$8348,2(a0)
00010730 117C 0084 0001             		move.b	#$84,1(a0)
00010736 117C 0010 0019             		move.b	#$10,$19(a0)
0001073C 117C 0001 0018             		move.b	#1,$18(a0)
00010742 1028 0028                  		move.b	$28(a0),d0	; get object type
00010746 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00010748 5028 0024                  		addq.b	#8,$24(a0)
0001074C 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00010750 1140 0032                  		move.b	d0,$32(a0)
00010754 1140 0033                  		move.b	d0,$33(a0)
00010758 117C 0006 001C             		move.b	#6,$1C(a0)
0001075E 6000 0000                  		bra.w	Obj64_BblMaker
00010762                            ; ===========================================================================
00010762                            
00010762                            Obj64_Bubble:				; XREF: Obj64_Main
00010762 1140 001C                  		move.b	d0,$1C(a0)
00010766 3168 0008 0030             		move.w	8(a0),$30(a0)
0001076C 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00010772 4EB9 0000 2530             		jsr	(RandomNumber).l
00010778 1140 0026                  		move.b	d0,$26(a0)
0001077C                            
0001077C                            Obj64_Animate:				; XREF: Obj64_Index
0001077C 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00010782 4EBA 803C                  		jsr	AnimateSprite
00010786 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0001078C 6600                       		bne.s	Obj64_ChkWater
0001078E 117C 0001 002E             		move.b	#1,$2E(a0)
00010794                            
00010794                            Obj64_ChkWater:				; XREF: Obj64_Index
00010794 3038 F646                  		move.w	($FFFFF646).w,d0
00010798 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
0001079C 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
0001079E                            
0001079E                            Obj64_Burst:				; XREF: Obj64_Wobble
0001079E 117C 0006 0024             		move.b	#6,$24(a0)
000107A4 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
000107A8 6000 0000                  		bra.w	Obj64_Display2
000107AC                            ; ===========================================================================
000107AC                            
000107AC                            Obj64_Wobble:				; XREF: Obj64_ChkWater
000107AC 1028 0026                  		move.b	$26(a0),d0
000107B0 5228 0026                  		addq.b	#1,$26(a0)
000107B4 0240 007F                  		andi.w	#$7F,d0
000107B8 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000107BE 1031 0000                  		move.b	(a1,d0.w),d0
000107C2 4880                       		ext.w	d0
000107C8 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
000107CC 4A28 002E                  		tst.b	$2E(a0)
000107D0 6700                       		beq.s	Obj64_Display
000107D2 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
000107D6 6700                       		beq.s	Obj64_Display	; if not, branch
000107D8                            
000107D8 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
000107DC 303C 00AD                  		move.w	#$AD,d0
000107E0 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
000107E6 43F8 D000                  		lea	($FFFFD000).w,a1
000107EA 4269 0010                  		clr.w	$10(a1)
000107EE 4269 0012                  		clr.w	$12(a1)
000107F2 4269 0014                  		clr.w	$14(a1)
000107F6 137C 0015 001C             		move.b	#$15,$1C(a1)
000107FC 337C 0023 003E             		move.w	#$23,$3E(a1)
00010802 137C 0000 003C             		move.b	#0,$3C(a1)
00010808 08A9 0005 0022             		bclr	#5,$22(a1)
0001080E 08A9 0004 0022             		bclr	#4,$22(a1)
00010814 0829 0002 0022             		btst	#2,$22(a1)
0001081A 6700 FF82                  		beq.w	Obj64_Burst
0001081E 08A9 0002 0022             		bclr	#2,$22(a1)
00010824 137C 0013 0016             		move.b	#$13,$16(a1)
0001082A 137C 0009 0017             		move.b	#9,$17(a1)
00010830 5B69 000C                  		subq.w	#5,$C(a1)
00010834 6000 FF68                  		bra.w	Obj64_Burst
00010838                            ; ===========================================================================
00010838                            
00010838                            Obj64_Display:				; XREF: Obj64_Wobble
00010838 6100 AE3A                  		bsr.w	SpeedToPos
0001083C 4A28 0001                  		tst.b	1(a0)
00010840 6A00                       		bpl.s	Obj64_Delete
00010842 4EFA AE56                  		jmp	DisplaySprite
00010846                            ; ===========================================================================
00010846                            
00010846                            Obj64_Delete:
00010846 4EFA AE8E                  		jmp	DeleteObject
0001084A                            ; ===========================================================================
0001084A                            
0001084A                            Obj64_Display2:				; XREF: Obj64_Index
0001084A 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00010850 4EB9 0000 87C0             		jsr	AnimateSprite
00010856 4A28 0001                  		tst.b	1(a0)
0001085A 6A00                       		bpl.s	Obj64_Delete2
0001085C 4EFA AE3C                  		jmp	DisplaySprite
00010860                            ; ===========================================================================
00010860                            
00010860                            Obj64_Delete2:
00010860 4EFA AE74                  		jmp	DeleteObject
00010864                            ; ===========================================================================
00010864                            
00010864                            Obj64_Delete3:				; XREF: Obj64_Index
00010864 6000 AE70                  		bra.w	DeleteObject
00010868                            ; ===========================================================================
00010868                            
00010868                            Obj64_BblMaker:				; XREF: Obj64_Index
00010868 4A68 0036                  		tst.w	$36(a0)
0001086C 6600                       		bne.s	loc_12874
0001086E 3038 F646                  		move.w	($FFFFF646).w,d0
00010872 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00010876 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
0001087A 4A28 0001                  		tst.b	1(a0)
0001087E 6A00 0000                  		bpl.w	Obj64_ChkDel
00010882 5368 0038                  		subq.w	#1,$38(a0)
00010886 6A00 0000                  		bpl.w	loc_12914
0001088A 317C 0001 0036             		move.w	#1,$36(a0)
00010890                            
00010890                            loc_1283A:
00010890 4EB9 0000 2530             		jsr	(RandomNumber).l
00010896 3200                       		move.w	d0,d1
00010898 0240 0007                  		andi.w	#7,d0
0001089C 0C40 0006                  		cmpi.w	#6,d0
000108A0 64EE                       		bcc.s	loc_1283A
000108A2                            
000108A2 1140 0034                  		move.b	d0,$34(a0)
000108A6 0241 000C                  		andi.w	#$C,d1
000108AA 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
000108B0 D2C1                       		adda.w	d1,a1
000108B2 2149 003C                  		move.l	a1,$3C(a0)
000108B6 5328 0032                  		subq.b	#1,$32(a0)
000108BA 6A00                       		bpl.s	loc_12872
000108BC 1168 0033 0032             		move.b	$33(a0),$32(a0)
000108C2 08E8 0007 0036             		bset	#7,$36(a0)
000108C8                            
000108C8                            loc_12872:
000108C8 6000                       		bra.s	loc_1287C
000108CA                            ; ===========================================================================
000108CA                            
000108CA                            loc_12874:				; XREF: Obj64_BblMaker
000108CA 5368 0038                  		subq.w	#1,$38(a0)
000108CE 6A00 0000                  		bpl.w	loc_12914
000108D2                            
000108D2                            loc_1287C:
000108D2 4EB9 0000 2530             		jsr	(RandomNumber).l
000108D8 0240 001F                  		andi.w	#$1F,d0
000108DC 3140 0038                  		move.w	d0,$38(a0)
000108E0 6100 B23E                  		bsr.w	SingleObjLoad
000108E4 6600                       		bne.s	loc_128F8
000108E6 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000108EA 3368 0008 0008             		move.w	8(a0),8(a1)
000108F0 4EB9 0000 2530             		jsr	(RandomNumber).l
000108F6 0240 000F                  		andi.w	#$F,d0
000108FA 5140                       		subq.w	#8,d0
00010900 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010906 7000                       		moveq	#0,d0
00010908 1028 0034                  		move.b	$34(a0),d0
0001090C 2468 003C                  		movea.l	$3C(a0),a2
00010910 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00010916 0828 0007 0036             		btst	#7,$36(a0)
0001091C 6700                       		beq.s	loc_128F8
0001091E 4EB9 0000 2530             		jsr	(RandomNumber).l
00010924 0240 0003                  		andi.w	#3,d0
00010928 6600                       		bne.s	loc_128E4
0001092A 08E8 0006 0036             		bset	#6,$36(a0)
00010930 6600                       		bne.s	loc_128F8
00010932 137C 0002 0028             		move.b	#2,$28(a1)
00010938                            
00010938                            loc_128E4:
00010938 4A28 0034                  		tst.b	$34(a0)
0001093C 6600                       		bne.s	loc_128F8
0001093E 08E8 0006 0036             		bset	#6,$36(a0)
00010944 6600                       		bne.s	loc_128F8
00010946 137C 0002 0028             		move.b	#2,$28(a1)
0001094C                            
0001094C                            loc_128F8:
0001094C 5328 0034                  		subq.b	#1,$34(a0)
00010950 6A00                       		bpl.s	loc_12914
00010952 4EB9 0000 2530             		jsr	(RandomNumber).l
00010958 0240 007F                  		andi.w	#$7F,d0
0001095C 0640 0080                  		addi.w	#$80,d0
00010964 4268 0036                  		clr.w	$36(a0)
00010968                            
00010968                            loc_12914:
00010968 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001096E 4EB9 0000 87C0             		jsr	AnimateSprite
00010974                            
00010974                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00010974 3028 0008                  		move.w	8(a0),d0
00010978 0240 FF80                  		andi.w	#$FF80,d0
0001097C 3238 F700                  		move.w	($FFFFF700).w,d1
00010980 0441 0080                  		subi.w	#$80,d1
00010984 0241 FF80                  		andi.w	#$FF80,d1
0001098A 0C40 0280                  		cmpi.w	#$280,d0
0001098E 6200 AD46                  		bhi.w	DeleteObject
00010992 3038 F646                  		move.w	($FFFFF646).w,d0
00010996 B068 000C                  		cmp.w	$C(a0),d0
0001099A 6500 ACFE                  		bcs.w	DisplaySprite
0001099E 4E75                       		rts	
000109A0                            ; ===========================================================================
000109A0                            ; bubble production sequence
000109A0                            
000109A0                            ; 0 = small bubble, 1 =	large bubble
000109A0                            
000109A0 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
000109B2                            
000109B2                            ; ===========================================================================
000109B2                            
000109B2                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
000109B2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000109B6 6B00                       		bmi.s	loc_12998
000109B8 43F8 D000                  		lea	($FFFFD000).w,a1
000109BC 3029 0008                  		move.w	8(a1),d0
000109C0 3228 0008                  		move.w	8(a0),d1
000109C4 0441 0010                  		subi.w	#$10,d1
000109C8 B240                       		cmp.w	d0,d1
000109CA 6400                       		bcc.s	loc_12998
000109CC 0641 0020                  		addi.w	#$20,d1
000109D0 B240                       		cmp.w	d0,d1
000109D2 6500                       		bcs.s	loc_12998
000109D4 3029 000C                  		move.w	$C(a1),d0
000109D8 3228 000C                  		move.w	$C(a0),d1
000109DC B240                       		cmp.w	d0,d1
000109DE 6400                       		bcc.s	loc_12998
000109E0 0641 0010                  		addi.w	#$10,d1
000109E4 B240                       		cmp.w	d0,d1
000109E6 6500                       		bcs.s	loc_12998
000109E8 7001                       		moveq	#1,d0
000109EA 4E75                       		rts	
000109EC                            ; ===========================================================================
000109EC                            
000109EC                            loc_12998:
000109EC 7000                       		moveq	#0,d0
000109EE 4E75                       		rts	
000109F0                            ; ===========================================================================
000109F0                            Ani_obj64:
000109F0                            	include "_anim\obj64.asm"
000109F0                            ; ---------------------------------------------------------------------------
000109F0                            ; Animation script - bubbles (LZ)
000109F0                            ; ---------------------------------------------------------------------------
000109F0 0000                       		dc.w byte_129AA-Ani_obj64
000109F2 0000                       		dc.w byte_129B0-Ani_obj64
000109F4 0000                       		dc.w byte_129B6-Ani_obj64
000109F6 0000                       		dc.w byte_129BE-Ani_obj64
000109F8 0000                       		dc.w byte_129BE-Ani_obj64
000109FA 0000                       		dc.w byte_129C0-Ani_obj64
000109FC 0000                       		dc.w byte_129C6-Ani_obj64
000109FE 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00010A04 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00010A0A 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00010A12 04FC                       byte_129BE:	dc.b 4,	$FC
00010A14 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00010A1A 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00010A20 00                         		even
00010A20 00                         		even
00010A20                            
00010A20                            ; ---------------------------------------------------------------------------
00010A20                            ; Sprite mappings - bubbles (LZ)
00010A20                            ; ---------------------------------------------------------------------------
00010A20                            Map_obj64:
00010A20                            	include "_maps\obj64.asm"
00010A20                            ; ---------------------------------------------------------------------------
00010A20                            ; Sprite mappings - bubbles (LZ)
00010A20                            ; ---------------------------------------------------------------------------
00010A20 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00010A24 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00010A28 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00010A2C 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00010A30 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00010A34 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00010A38 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00010A3C 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00010A40 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00010A44 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00010A48 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00010A4C 0000                       		dc.w byte_12A9C-Map_obj64
00010A4E 01                         byte_129FA:	dc.b 1
00010A4F FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00010A54 01                         byte_12A00:	dc.b 1
00010A55 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00010A5A 01                         byte_12A06:	dc.b 1
00010A5B FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00010A60 01                         byte_12A0C:	dc.b 1
00010A61 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00010A66 01                         byte_12A12:	dc.b 1
00010A67 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00010A6C 01                         byte_12A18:	dc.b 1
00010A6D F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00010A72 01                         byte_12A1E:	dc.b 1
00010A73 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00010A78 04                         byte_12A24:	dc.b 4
00010A79 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00010A7E F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00010A83 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00010A88 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00010A8D 04                         byte_12A39:	dc.b 4
00010A8E F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00010A93 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00010A98 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00010A9D 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00010AA2 01                         byte_12A4E:	dc.b 1
00010AA3 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00010AA8 01                         byte_12A54:	dc.b 1
00010AA9 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00010AAE 01                         byte_12A5A:	dc.b 1
00010AAF F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00010AB4 01                         byte_12A60:	dc.b 1
00010AB5 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00010ABA 01                         byte_12A66:	dc.b 1
00010ABB F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00010AC0 01                         byte_12A6C:	dc.b 1
00010AC1 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00010AC6 01                         byte_12A72:	dc.b 1
00010AC7 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00010ACC 01                         byte_12A78:	dc.b 1
00010ACD F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00010AD2 01                         byte_12A7E:	dc.b 1
00010AD3 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00010AD8 01                         byte_12A84:	dc.b 1
00010AD9 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00010ADE 01                         byte_12A8A:	dc.b 1
00010ADF F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00010AE4 01                         byte_12A90:	dc.b 1
00010AE5 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00010AEA 01                         byte_12A96:	dc.b 1
00010AEB F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00010AF0 00                         byte_12A9C:	dc.b 0
00010AF2 00                         		even
00010AF2 00                         		even
00010AF2                            
00010AF2                            ; ===========================================================================
00010AF2                            ; ---------------------------------------------------------------------------
00010AF2                            ; Object 65 - waterfalls (LZ)
00010AF2                            ; ---------------------------------------------------------------------------
00010AF2                            
00010AF2                            Obj65:					; XREF: Obj_Index
00010AF2 7000                       		moveq	#0,d0
00010AF4 1028 0024                  		move.b	$24(a0),d0
00010AF8 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00010AFC 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00010B00                            ; ===========================================================================
00010B00 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00010B02 0000                       		dc.w Obj65_Animate-Obj65_Index
00010B04 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00010B06 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00010B08 0000                       		dc.w loc_12B36-Obj65_Index
00010B0A                            ; ===========================================================================
00010B0A                            
00010B0A                            Obj65_Main:				; XREF: Obj65_Index
00010B0A 5828 0024                  		addq.b	#4,$24(a0)
00010B0E 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00010B16 317C 4259 0002             		move.w	#$4259,2(a0)
00010B1C 0028 0004 0001             		ori.b	#4,1(a0)
00010B22 117C 0018 0019             		move.b	#$18,$19(a0)
00010B28 117C 0001 0018             		move.b	#1,$18(a0)
00010B2E 1028 0028                  		move.b	$28(a0),d0	; get object type
00010B32 6A00                       		bpl.s	loc_12AE6
00010B34 08E8 0007 0002             		bset	#7,2(a0)
00010B3A                            
00010B3A                            loc_12AE6:
00010B3A 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00010B3E 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00010B42 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00010B46 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00010B48 4228 0018                  		clr.b	$18(a0)
00010B4C 5528 0024                  		subq.b	#2,$24(a0)
00010B50 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00010B56 6700                       		beq.s	loc_12B0A	; if not, branch
00010B58 117C 0006 0024             		move.b	#6,$24(a0)
00010B5E                            
00010B5E                            loc_12B0A:
00010B5E 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00010B64 6700                       		beq.s	Obj65_Animate	; if not, branch
00010B66 117C 0008 0024             		move.b	#8,$24(a0)
00010B6C                            
00010B6C                            Obj65_Animate:				; XREF: Obj65_Index
00010B6C 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00010B72 4EB9 0000 87C0             		jsr	AnimateSprite
00010B78                            
00010B78                            Obj65_ChkDel:				; XREF: Obj65_Index
00010B78 6000 CBB8                  		bra.w	MarkObjGone
00010B7C                            ; ===========================================================================
00010B7C                            
00010B7C                            Obj65_FixHeight:			; XREF: Obj65_Index
00010B7C 3038 F646                  		move.w	($FFFFF646).w,d0
00010B80 0440 0010                  		subi.w	#$10,d0
00010B84 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00010B88 60E2                       		bra.s	Obj65_Animate
00010B8A                            ; ===========================================================================
00010B8A                            
00010B8A                            loc_12B36:				; XREF: Obj65_Index
00010B8A 08A8 0007 0002             		bclr	#7,2(a0)
00010B90 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00010B96 6600                       		bne.s	Obj65_Animate2
00010B98 08E8 0007 0002             		bset	#7,2(a0)
00010B9E                            
00010B9E                            Obj65_Animate2:
00010B9E 60CC                       		bra.s	Obj65_Animate
00010BA0                            ; ===========================================================================
00010BA0                            Ani_obj65:
00010BA0                            	include "_anim\obj65.asm"
00010BA0                            ; ---------------------------------------------------------------------------
00010BA0                            ; Animation script - waterfall (LZ)
00010BA0                            ; ---------------------------------------------------------------------------
00010BA0 0000                       		dc.w byte_12B4E-Ani_obj65
00010BA2 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00010BA8 00                         		even
00010BA8 00                         		even
00010BA8                            
00010BA8                            ; ---------------------------------------------------------------------------
00010BA8                            ; Sprite mappings - waterfalls (LZ)
00010BA8                            ; ---------------------------------------------------------------------------
00010BA8                            Map_obj65:
00010BA8                            	include "_maps\obj65.asm"
00010BA8                            ; ---------------------------------------------------------------------------
00010BA8                            ; Sprite mappings - waterfalls (LZ)
00010BA8                            ; ---------------------------------------------------------------------------
00010BA8 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00010BAC 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00010BB0 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00010BB4 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00010BB8 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00010BBC 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00010BC0 01                         byte_12B6C:	dc.b 1
00010BC1 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00010BC6 02                         byte_12B72:	dc.b 2
00010BC7 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00010BCC 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00010BD1 02                         byte_12B7D:	dc.b 2
00010BD2 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00010BD7 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00010BDC 01                         byte_12B88:	dc.b 1
00010BDD F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00010BE2 02                         byte_12B8E:	dc.b 2
00010BE3 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00010BE8 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00010BED 01                         byte_12B99:	dc.b 1
00010BEE F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00010BF3 01                         byte_12B9F:	dc.b 1
00010BF4 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00010BF9 01                         byte_12BA5:	dc.b 1
00010BFA F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00010BFF 02                         byte_12BAB:	dc.b 2
00010C00 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00010C05 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00010C0A 02                         byte_12BB6:	dc.b 2
00010C0B F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00010C10 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00010C15 02                         byte_12BC1:	dc.b 2
00010C16 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00010C1B F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00010C20 02                         byte_12BCC:	dc.b 2
00010C21 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00010C26 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00010C2C 00                         		even
00010C2C 00                         		even
00010C2C                            
00010C2C                            ; ===========================================================================
00010C2C                            ; ---------------------------------------------------------------------------
00010C2C                            ; Object 05 - dust and splash object from Sonic 2 
00010C2C                            ; ---------------------------------------------------------------------------	
00010C2C                            
00010C2C                            SpinDash_dust:
00010C2C                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00010C2C 7000                       		moveq	#0,d0
00010C2E 1028 0024                  		move.b	$24(a0),d0
00010C32 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00010C36 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00010C3A                            ; ???????????????????????????????????????????????????????????????????????????
00010C3A 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00010C3C 0000                       		dc loc_1DD90-off_1DD2E; 1
00010C3E 0000                       		dc loc_1DE46-off_1DD2E; 2
00010C40 0000                       		dc loc_1DE4A-off_1DD2E; 3
00010C42                            ; ???????????????????????????????????????????????????????????????????????????
00010C42                            
00010C42                            loc_1DD36:				; DATA XREF: h+6DBA?o
00010C42 5428 0024                  		addq.b	#2,$24(a0)
00010C46 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00010C54 117C 0001 0018             		move.b	#1,$18(a0)
00010C5A 117C 0010 0019             		move.b	#$10,$19(a0)
00010C60 317C 07A0 0002             		move	#$7A0,2(a0)
00010C66 317C D000 003E             		move	#-$3000,$3E(a0)
00010C6C 317C F400 003C             		move	#$F400,$3C(a0)
00010C72 B0FC D1C0                  		cmp	#-$2E40,a0
00010C76 6700                       		beq.s	loc_1DD8C
00010C78 117C 0001 0034             		move.b	#1,$34(a0)
00010C7E                            ;		cmp	#2,($FFFFFF70).w
00010C7E                            ;		beq.s	loc_1DD8C
00010C7E                            ;		move	#$48C,2(a0)
00010C7E                            ;		move	#-$4FC0,$3E(a0)
00010C7E                            ;		move	#-$6E80,$3C(a0)
00010C7E                            
00010C7E                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00010C7E                            ;		bsr.w	sub_16D6E
00010C7E                            
00010C7E                            loc_1DD90:				; DATA XREF: h+6DBA?o
00010C7E 3468 003E                  		movea.w	$3E(a0),a2
00010C82 7000                       		moveq	#0,d0
00010C84 1028 001C                  		move.b	$1C(a0),d0
00010C8A 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00010C8E 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00010C92                            ; ???????????????????????????????????????????????????????????????????????????
00010C92 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00010C94 0000                       		dc loc_1DDAC-off_1DDA4; 1
00010C96 0000                       		dc loc_1DDCC-off_1DDA4; 2
00010C98 0000                       		dc loc_1DE20-off_1DDA4; 3
00010C9A                            ; ???????????????????????????????????????????????????????????????????????????
00010C9A                            
00010C9A                            loc_1DDAC:				; DATA XREF: h+6E30?o
00010C9A 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
00010CA0 4A28 001D                  		tst.b	$1D(a0)
00010CA4 6600                       		bne.s	loc_1DE28
00010CA6 316A 0008 0008             		move	8(a2),8(a0)
00010CAC 117C 0000 0022             		move.b	#0,$22(a0)
00010CB8 6000                       		bra.s	loc_1DE28
00010CBA                            ; ???????????????????????????????????????????????????????????????????????????
00010CBA                            
00010CBA                            loc_1DDCC:				; DATA XREF: h+6E30?o
00010CBA                            ;		cmp.b	#$C,$28(a2)
00010CBA                            ;		bcs.s	loc_1DE3E
00010CBA 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00010CC0 6400                       		bcc.s	loc_1DE3E
00010CC2 4A2A 0039                  		tst.b	$39(a2)
00010CC6 6700                       		beq.s	loc_1DE3E
00010CC8 316A 0008 0008             		move	8(a2),8(a0)
00010CCE 316A 000C 000C             		move	$C(a2),$C(a0)
00010CD4 116A 0022 0022             		move.b	$22(a2),$22(a0)
00010CE0 4A28 0034                  		tst.b	$34(a0)
00010CE4 6700                       		beq.s	loc_1DE06
00010CEA                            
00010CEA                            loc_1DE06:				; CODE XREF: h+6E8A?j
00010CEA 4A28 001D                  		tst.b	$1D(a0)
00010CEE 6600                       		bne.s	loc_1DE28
00010CF6 4A6A 0002                  		tst	2(a2)
00010CFA 6A00                       		bpl.s	loc_1DE28
00010D02                            ; ???????????????????????????????????????????????????????????????????????????
00010D02                            
00010D02                            loc_1DE20:				; DATA XREF: h+6E30?o
00010D02                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00010D02 43F9 0000 0000             		lea	(off_1DF38).l,a1
00010D08 4EB9 0000 87C0             		jsr	AnimateSprite
00010D0E 6100 0000                  		bsr.w	loc_1DEE4
00010D12 4EFA A986                  		jmp	DisplaySprite
00010D16                            ; ???????????????????????????????????????????????????????????????????????????
00010D16                            
00010D16                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00010D16 117C 0000 001C             		move.b	#0,$1C(a0)
00010D1C 4E75                       		rts	
00010D1E                            ; ???????????????????????????????????????????????????????????????????????????
00010D1E                            
00010D1E                            loc_1DE46:				; DATA XREF: h+6DBA?o
00010D1E 6000 A9B6                  		bra.w	DeleteObject
00010D22                            ; ???????????????????????????????????????????????????????????????????????????
00010D22                            
00010D22                            
00010D22                            
00010D22                            loc_1DE4A:
00010D22 3468 003E                  	movea.w	$3E(a0),a2
00010D26 7210                       	moveq	#$10,d1
00010D28 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00010D2E 6700                       	beq.s	loc_1DE64
00010D30 7206                       	moveq	#$6,d1
00010D32 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00010D38 6700                       	beq.s	loc_1DE64
00010D3A 117C 0002 0024             	move.b	#2,$24(a0)
00010D40 117C 0000 0032             	move.b	#0,$32(a0)
00010D46 4E75                       	rts
00010D48                            ; ???????????????????????????????????????????????????????????????????????????
00010D48                            
00010D48                            loc_1DE64:				; CODE XREF: h+6EE0?j
00010D48 5328 0032                  		subq.b	#1,$32(a0)
00010D4C 6A00                       		bpl.s	loc_1DEE0
00010D4E 117C 0003 0032             		move.b	#3,$32(a0)
00010D54 4EBA ADCA                  		jsr	SingleObjLoad
00010D58 6600                       		bne.s	loc_1DEE0
00010D5A 1290                       		move.b	0(a0),0(a1)
00010D5C 336A 0008 0008             		move	8(a2),8(a1)
00010D62 336A 000C 000C             		move	$C(a2),$C(a1)
00010D68 4A28 0034                  		tst.b	$34(a0)
00010D6C 6700                       		beq.s	loc_1DE9A
00010D70                            
00010D70                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00010D74 137C 0000 0022             		move.b	#0,$22(a1)
00010D7A 137C 0003 001C             		move.b	#3,$1C(a1)
00010D80 5429 0024                  		addq.b	#2,$24(a1)
00010D84 2368 0004 0004             		move.l	4(a0),4(a1)
00010D8A 1368 0001 0001             		move.b	1(a0),1(a1)
00010D90 137C 0001 0018             		move.b	#1,$18(a1)
00010D96 137C 0004 0019             		move.b	#4,$19(a1)
00010D9C 3368 0002 0002             		move	2(a0),2(a1)
00010DA2 3368 003E 003E             		move	$3E(a0),$3E(a1)
00010DAE 4A6A 0002                  		tst	2(a2)
00010DB2 6A00                       		bpl.s	loc_1DEE0
00010DBA                            
00010DBA                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00010DBA 6100                       		bsr.s	loc_1DEE4
00010DBC 4E75                       		rts	
00010DBE                            ; ???????????????????????????????????????????????????????????????????????????
00010DBE                            
00010DBE                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
00010DBE 7000                       		moveq	#0,d0
00010DC0 1028 001A                  		move.b	$1A(a0),d0
00010DC4 B028 0030                  		cmp.b	$30(a0),d0
00010DC8 6700 0000                  		beq.w	locret_1DF36
00010DCC 1140 0030                  		move.b	d0,$30(a0)
00010DD0 45F9 0000 0000             		lea	(off_1E074).l,a2
00010DDC 3A1A                       		move	(a2)+,d5
00010DDE 5345                       		subq	#1,d5
00010DE0 6B00 0000                  		bmi.w	locret_1DF36
00010DE4 3828 003C                  		move $3C(a0),d4
00010DE8                            
00010DE8                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00010DE8 7200                       		moveq	#0,d1
00010DEA 321A                       		move	(a2)+,d1
00010DEC 3601                       		move	d1,d3
00010DEE E04B                       		lsr.w	#8,d3
00010DFC EB89                       		lsl.l	#5,d1
00010E04 3404                       		move	d4,d2
00010E0A 4EB9 0000 10BE             		jsr	(QueueDMATransfer).l
00010E10 51CD FFD6                  		dbf	d5,loc_1DF0A
00010E14 4E75                           rts
00010E16                            
00010E16                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00010E16 4E75                       		rts	
00010E18                            ; ???????????????????????????????????????????????????????????????????????????
00010E18 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00010E1A 0000                       		dc byte_1DF43-off_1DF38; 1
00010E1C 0000                       		dc byte_1DF4F-off_1DF38; 2
00010E1E 0000                       		dc byte_1DF58-off_1DF38; 3
00010E20 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
00010E23 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
00010E2F 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00010E38 0311 1213 FC01             byte_1DF58:	dc.b   3,$11,$12,$13,$FC, 1; 0	; DATA XREF: h+6FC4?o
00010E3E                            ; -------------------------------------------------------------------------------
00010E3E                            ; Unknown Sprite Mappings
00010E3E                            ; -------------------------------------------------------------------------------
00010E3E                            MapUnc_1DF5E:
00010E3E 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
00010E40 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
00010E42 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
00010E44 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00010E46 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
00010E48 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
00010E4A 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
00010E4C 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
00010E4E 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
00010E50 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00010E52 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00010E54 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00010E56 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
00010E58 0000                       	dc word_1E004-MapUnc_1DF5E; 13
00010E5A 0000                       	dc word_1E016-MapUnc_1DF5E; 14
00010E5C 0000                       	dc word_1E028-MapUnc_1DF5E; 15
00010E5E 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00010E60 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00010E62 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00010E64 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00010E66 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00010E68 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
00010E6A 00                         word_1DF8A:	dc.b 0
00010E6B 01                         word_1DF8C:	dc.b 1
00010E6C F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00010E71 01                         word_1DF96:	dc.b 1
00010E72 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00010E77 01                         word_1DFA0:	dc.b 1
00010E78 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00010E7D 01                         word_1DFAA:	dc.b 1
00010E7E E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00010E83 01                         word_1DFB4:	dc.b 1
00010E84 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00010E89 01                         word_1DFBE:	dc.b 1
00010E8A E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00010E8F 01                         word_1DFC8:	dc.b 1
00010E90 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00010E95 01                         word_1DFD2:	dc.b 1
00010E96 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00010E9B 01                         word_1DFDC:	dc.b 1
00010E9C F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00010EA1 01                         word_1DFE6:	dc.b 1
00010EA2 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00010EA7 01                         word_1DFF0:	dc.b 1
00010EA8 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00010EAD 01                         word_1DFFA:	dc.b 1
00010EAE 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00010EB3 02                         word_1E004:	dc.b 2
00010EB4 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00010EB9 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
00010EBE 02                         word_1E016:	dc.b 2
00010EBF F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00010EC4 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00010EC9 02                         word_1E028:	dc.b 2
00010ECA F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00010ECF 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00010ED4 02                         word_1E03A:	dc.b 2
00010ED5 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00010EDA 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00010EDF 01                         word_1E04C:	dc.b 1
00010EE0 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00010EE5 01                         word_1E056:	dc.b 1
00010EE6 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00010EEB 01                         word_1E060:	dc.b 1
00010EEC F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
00010EF1 01                         word_1E06A:	dc.b 1
00010EF2 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00010EF7 00                         	dc.b 0
00010EF8 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00010EFA 0000                       	dc word_1E0A2-off_1E074; 1
00010EFC 0000                       	dc word_1E0A6-off_1E074; 2
00010EFE 0000                       	dc word_1E0AA-off_1E074; 3
00010F00 0000                       	dc word_1E0AE-off_1E074; 4
00010F02 0000                       	dc word_1E0B2-off_1E074; 5
00010F04 0000                       	dc word_1E0B6-off_1E074; 6
00010F06 0000                       	dc word_1E0BA-off_1E074; 7
00010F08 0000                       	dc word_1E0BE-off_1E074; 8
00010F0A 0000                       	dc word_1E0C2-off_1E074; 9
00010F0C 0000                       	dc word_1E0C6-off_1E074; 10
00010F0E 0000                       	dc word_1E0CA-off_1E074; 11
00010F10 0000                       	dc word_1E0CE-off_1E074; 12
00010F12 0000                       	dc word_1E0D2-off_1E074; 13
00010F14 0000                       	dc word_1E0D8-off_1E074; 14
00010F16 0000                       	dc word_1E0DE-off_1E074; 15
00010F18 0000                       	dc word_1E0E4-off_1E074; 16
00010F1A 0000                       	dc word_1E0EA-off_1E074; 17
00010F1C 0000                       	dc word_1E0EA-off_1E074; 18
00010F1E 0000                       	dc word_1E0EA-off_1E074; 19
00010F20 0000                       	dc word_1E0EA-off_1E074; 20
00010F22 0000                       	dc word_1E0EC-off_1E074; 21
00010F24 0000                       word_1E0A0:	dc 0
00010F26 0001                       word_1E0A2:	dc 1
00010F28 7000                       	dc $7000
00010F2A 0001                       word_1E0A6:	dc 1
00010F2C F008                       	dc $F008
00010F2E 0001                       word_1E0AA:	dc 1
00010F30 F018                       	dc $F018
00010F32 0001                       word_1E0AE:	dc 1
00010F34 F028                       	dc $F028
00010F36 0001                       word_1E0B2:	dc 1
00010F38 F038                       	dc $F038
00010F3A 0001                       word_1E0B6:	dc 1
00010F3C F048                       	dc $F048
00010F3E 0001                       word_1E0BA:	dc 1
00010F40 7058                       	dc $7058
00010F42 0001                       word_1E0BE:	dc 1
00010F44 7060                       	dc $7060
00010F46 0001                       word_1E0C2:	dc 1
00010F48 7068                       	dc $7068
00010F4A 0001                       word_1E0C6:	dc 1
00010F4C 7070                       	dc $7070
00010F4E 0001                       word_1E0CA:	dc 1
00010F50 7078                       	dc $7078
00010F52 0001                       word_1E0CE:	dc 1
00010F54 7080                       	dc $7080
00010F56 0002                       word_1E0D2:	dc 2
00010F58 1088                       	dc $1088
00010F5A 708A                       	dc $708A
00010F5C 0002                       word_1E0D8:	dc 2
00010F5E 3092                       	dc $3092
00010F60 7096                       	dc $7096
00010F62 0002                       word_1E0DE:	dc 2
00010F64 509E                       	dc $509E
00010F66 70A4                       	dc $70A4
00010F68 0002                       word_1E0E4:	dc 2
00010F6A 50AC                       	dc $50AC
00010F6C 70B2                       	dc $70B2
00010F6E 0000                       word_1E0EA:	dc 0
00010F70 0001                       word_1E0EC:	dc 1
00010F72 F0BA                       	dc $F0BA
00010F74                            	even
00010F74                            ; ==========================================================================
00010F74                            
00010F74                            ; ===========================================================================
00010F74                            ; ---------------------------------------------------------------------------
00010F74                            ; Object 01 - Sonic
00010F74                            ; ---------------------------------------------------------------------------
00010F74                            
00010F74                            Obj01:					; XREF: Obj_Index
00010F74 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00010F78 6700                       		beq.s	Obj01_Normal	; if not, branch
00010F7A 4EF9 0000 0000             		jmp	DebugMode
00010F80                            ; ===========================================================================
00010F80                            
00010F80                            Obj01_Normal:
00010F80 7000                       		moveq	#0,d0
00010F82 1028 0024                  		move.b	$24(a0),d0
00010F86 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00010F8A 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00010F8E                            ; ===========================================================================
00010F8E 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00010F90 0000                       		dc.w Obj01_Control-Obj01_Index
00010F92 0000                       		dc.w Obj01_Hurt-Obj01_Index
00010F94 0000                       		dc.w Obj01_Death-Obj01_Index
00010F96 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00010F98                            ; ===========================================================================
00010F98                            
00010F98                            Obj01_Main:				; XREF: Obj01_Index
00010F98 5428 0024                  		addq.b	#2,$24(a0)
00010F9C 117C 000B 0016             		move.b	#11,$16(a0)
00010FA2 117C 0006 0017             		move.b	#6,$17(a0)
00010FA8 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00010FB0 317C 0780 0002             		move.w	#$780,2(a0)
00010FB6 117C 0002 0018             		move.b	#2,$18(a0)
00010FBC 117C 0018 0019             		move.b	#$18,$19(a0)
00010FC2 117C 0004 0001             		move.b	#4,1(a0)
00010FC8 31FC 0100 F760             		move.w	#$100,($FFFFF760).w ; Sonic's top speed
00010FCE 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00010FD4 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00010FDA 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w		
00010FE0                            
00010FE0                            Obj01_Control:				; XREF: Obj01_Index
00010FE0 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00010FE4 6700                       		beq.s	loc_12C58	; if not, branch
00010FE6 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00010FEC 6700                       		beq.s	loc_12C58	; if not, branch
00010FEE 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00010FF4 4238 F7CC                  		clr.b	($FFFFF7CC).w
00010FF8 4E75                       		rts	
00010FFA                            ; ===========================================================================
00010FFA                            
00010FFA                            loc_12C58:
00010FFA 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00010FFE 6600                       		bne.s	loc_12C64	; if yes, branch
00011000 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00011006                            
00011006                            loc_12C64:
00011006 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
0001100C 6600                       		bne.s	loc_12C7E	; if yes, branch
0001100E 7000                       		moveq	#0,d0
00011010 1028 0022                  		move.b	$22(a0),d0
00011014 0240 0006                  		andi.w	#6,d0
00011018 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
0001101C 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00011020                            
00011020                            loc_12C7E:
00011020 6100                       		bsr.s	Sonic_Display
00011022 6100 0000                  		bsr.w	Sonic_RecordPos
00011026 6100 0000                  		bsr.w	Sonic_Water
0001102A 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00011030 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00011036 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001103A 6700                       		beq.s	loc_12CA6
0001103C 4A28 001C                  		tst.b	$1C(a0)
00011040 6600                       		bne.s	loc_12CA6
00011042 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00011048                            
00011048                            loc_12CA6:
00011048 6100 0000                  		bsr.w	Sonic_Animate
0001104C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00011050 6B00                       		bmi.s	loc_12CB6
00011052 4EB9 0000 0000             		jsr	TouchResponse
00011058                            
00011058                            loc_12CB6:
00011058 6100 0000                  		bsr.w	Sonic_Loops
0001105C 6100 0000                  		bsr.w	LoadSonicDynPLC
00011060 4E75                       		rts	
00011062                            ; ===========================================================================
00011062 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00011064 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00011066 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00011068 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
0001106A                            ; ---------------------------------------------------------------------------
0001106A                            ; Music	to play	after invincibility wears off
0001106A                            ; ---------------------------------------------------------------------------
0001106A                            MusicList2:	incbin	misc\muslist2.bin
00011070                            		even
00011070                            ; ===========================================================================
00011070                            
00011070                            Sonic_Display:				; XREF: loc_12C7E
00011070 3028 0030                  		move.w	$30(a0),d0
00011074 6700                       		beq.s	Obj01_Display
00011076 5368 0030                  		subq.w	#1,$30(a0)
0001107A E648                       		lsr.w	#3,d0
0001107C 6400                       		bcc.s	Obj01_ChkInvin
0001107E                            
0001107E                            Obj01_Display:
0001107E 4EBA A61A                  		jsr	DisplaySprite
00011082                            
00011082                            Obj01_ChkInvin:
00011082 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00011086 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
00011088 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
0001108C 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
0001108E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00011092 6600                       		bne.s	Obj01_ChkShoes
00011094 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00011098 6600                       		bne.s	Obj01_RmvInvin
0001109A 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000110A0 6500                       		bcs.s	Obj01_RmvInvin
000110A2 7000                       		moveq	#0,d0
000110A4 1038 FE10                  		move.b	($FFFFFE10).w,d0
000110A8 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
000110AE 6600                       		bne.s	Obj01_PlayMusic
000110B0 7005                       		moveq	#5,d0		; play SBZ music
000110B2                            
000110B2                            Obj01_PlayMusic:
000110B2 43F9 0001 106A             		lea	(MusicList2).l,a1
000110B8 1031 0000                  		move.b	(a1,d0.w),d0
000110BC 4EB9 0000 101A             		jsr	(PlaySound).l	; play normal music
000110C2                            
000110C2                            Obj01_RmvInvin:
000110C2 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000110C8                            
000110C8                            Obj01_ChkShoes:
000110C8 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000110CC 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000110CE 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000110D2 6700                       		beq.s	Obj01_ExitChk
000110D4 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000110D8 6600                       		bne.s	Obj01_ExitChk
000110DA 31FC 0200 F760             		move.w	#$200,($FFFFF760).w ; restore Sonic's speed
000110E0 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000110E6 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000110EC 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000110F2 303C 00E3                  		move.w	#$E3,d0
000110F6 4EF9 0000 101A             		jmp	(PlaySound).l	; run music at normal speed
000110FC                            ; ===========================================================================
000110FC                            
000110FC                            Obj01_ExitChk:
000110FC 4E75                       		rts	
000110FE                            
000110FE                            ; ---------------------------------------------------------------------------
000110FE                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000110FE                            ; ---------------------------------------------------------------------------
000110FE                            
000110FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000110FE                            
000110FE                            
000110FE                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000110FE 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00011102 43F8 CB00                  		lea	($FFFFCB00).w,a1
00011106 43F1 0000                  		lea	(a1,d0.w),a1
0001110A 32E8 0008                  		move.w	8(a0),(a1)+
0001110E 32E8 000C                  		move.w	$C(a0),(a1)+
00011112 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00011116 4E75                       		rts	
00011118                            ; End of function Sonic_RecordPos
00011118                            
00011118                            ; ---------------------------------------------------------------------------
00011118                            ; Subroutine for Sonic when he's underwater
00011118                            ; ---------------------------------------------------------------------------
00011118                            
00011118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011118                            
00011118                            
00011118                            Sonic_Water:				; XREF: loc_12C7E
00011118 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0001111E 6700                       		beq.s	Obj01_InWater	; if yes, branch
00011120                            
00011120                            locret_12D80:
00011120 4E75                       		rts	
00011122                            ; ===========================================================================
00011122                            
00011122                            Obj01_InWater:
00011122 3038 F646                  		move.w	($FFFFF646).w,d0
00011126 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
0001112A 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
0001112C 08E8 0006 0022             		bset	#6,$22(a0)
00011132 66EC                       		bne.s	locret_12D80
00011134 6100 0000                  		bsr.w	ResumeMusic
00011138 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
0001113E 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00011144 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
0001114A 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00011150 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00011156 E0E8 0010                  		asr	$10(a0)
0001115A E0E8 0012                  		asr	$12(a0)
0001115E E0E8 0012                  		asr	$12(a0)
00011162 67BC                       		beq.s	locret_12D80
00011164 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001116A 303C 00AA                  		move.w	#$AA,d0
0001116E 4EF9 0000 1020             		jmp	(PlaySound_Special).l ;	play splash sound
00011174                            ; ===========================================================================
00011174                            
00011174                            Obj01_OutWater:
00011174 08A8 0006 0022             		bclr	#6,$22(a0)
0001117A 67A4                       		beq.s	locret_12D80
0001117C 6100 0000                  		bsr.w	ResumeMusic
00011180 31FC 0200 F760             		move.w	#$200,($FFFFF760).w ; restore Sonic's speed
00011186 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
0001118C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00011192 E1E8 0012                  		asl	$12(a0)
00011196 6700 FF88                  		beq.w	locret_12D80
0001119A 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000111A0 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
000111A6 6E00                       		bgt.s	loc_12E0E
000111A8 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
000111AE                            
000111AE                            loc_12E0E:
000111AE 303C 00AA                  		move.w	#$AA,d0
000111B2 4EF9 0000 1020             		jmp	(PlaySound_Special).l ;	play splash sound
000111B8                            ; End of function Sonic_Water
000111B8                            
000111B8                            ; ===========================================================================
000111B8                            ; ---------------------------------------------------------------------------
000111B8                            ; Modes	for controlling	Sonic
000111B8                            ; ---------------------------------------------------------------------------
000111B8                            
000111B8                            Obj01_MdNormal:				; XREF: Obj01_Modes
000111B8 6100 0000                  		bsr.w	Sonic_Jump
000111BC 6100 0000                  		bsr.w	Sonic_SlopeResist
000111C0 6100 0000                  		bsr.w	Sonic_Move
000111C4 6100 0000                  		bsr.w	Sonic_LevelBound
000111C8 4EBA A4AA                  		jsr	SpeedToPos
000111CC 6100 0000                  		bsr.w	Sonic_AnglePos
000111D0 6100 0000                  		bsr.w	Sonic_SlopeRepel
000111D4 4E75                       		rts	
000111D6                            ; ===========================================================================
000111D6                            
000111D6                            Obj01_MdJump:				; XREF: Obj01_Modes
000111D6 6100 0000                  		bsr.w	Sonic_JumpHeight
000111DA 6100 0000                  		bsr.w	Mario_Fall
000111DE 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000111E2 6100 0000                  		bsr.w	Sonic_LevelBound
000111E6 4EBA A460                  		jsr	ObjectFall
000111EA 0828 0006 0022             		btst	#6,$22(a0)
000111F0 6700                       		beq.s	loc_12E5C
000111F2 0468 0028 0012             		subi.w	#$28,$12(a0)
000111F8                            
000111F8                            loc_12E5C:
000111F8 6100 0000                  		bsr.w	Sonic_JumpAngle
000111FC 6100 0000                  		bsr.w	Sonic_Floor
00011200 4E75                       		rts	
00011202                            ; ===========================================================================
00011202                            
00011202                            Obj01_MdRoll:				; XREF: Obj01_Modes
00011202 6100 0000                  		bsr.w	Sonic_Jump
00011206 6100 0000                  		bsr.w	Sonic_LevelBound
0001120A 4EBA A468                  		jsr	SpeedToPos
0001120E 6100 0000                  		bsr.w	Sonic_AnglePos
00011212 6100 0000                  		bsr.w	Sonic_SlopeRepel
00011216 4E75                       		rts	
00011218                            ; ===========================================================================
00011218                            
00011218                            Obj01_MdJump2:				; XREF: Obj01_Modes
00011218 6100 0000                  		bsr.w	Sonic_JumpHeight
0001121C 6100 0000                  		bsr.w	Mario_Fall
00011220 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00011224 6100 0000                  		bsr.w	Sonic_LevelBound
00011228 4EBA A41E                  		jsr	ObjectFall
0001122C 0828 0006 0022             		btst	#6,$22(a0)
00011232 6700                       		beq.s	loc_12EA6
00011234 0468 0028 0012             		subi.w	#$28,$12(a0)
0001123A                            
0001123A                            loc_12EA6:
0001123A 6100 0000                  		bsr.w	Sonic_JumpAngle
0001123E 6100 0000                  		bsr.w	Sonic_Floor
00011242 4E75                       		rts	
00011244                            ; ---------------------------------------------------------------------------
00011244                            ; Subroutine to	make Sonic walk/run
00011244                            ; ---------------------------------------------------------------------------
00011244                            
00011244                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011244                            
00011244                            
00011244                            Sonic_Move:				; XREF: Obj01_MdNormal
00011244 3C38 F760                  		move.w	($FFFFF760).w,d6
00011248 3A38 F762                  		move.w	($FFFFF762).w,d5
0001124C 3838 F764                  		move.w	($FFFFF764).w,d4
00011250 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00011254 6600 0000                  		bne.w	loc_12FEE
00011258 4A68 003E                  		tst.w	$3E(a0)
0001125C 6600 0000                  		bne.w	Obj01_ResetScr
00011260 0838 0004 F602             		btst	#4,($FFFFF602).w
00011266 6700                       		beq.s	@notrunning
00011268 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; Sonic's top speed
0001126E 6000                       		bra.s	@cont
00011270                            
00011270                            	@notrunning:
00011270 31FC 0100 F760             		move.w	#$100,($FFFFF760).w ; Sonic's top speed
00011276                            
00011276                            	@cont:
00011276 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001127C 6700                       		beq.s	Obj01_NotLeft	; if not, branch
0001127E 6100 0000                  		bsr.w	Sonic_MoveLeft
00011282                            
00011282                            Obj01_NotLeft:
00011282 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00011288 6700                       		beq.s	Obj01_NotRight	; if not, branch
0001128A 6100 0000                  		bsr.w	Sonic_MoveRight
0001128E                            
0001128E                            Obj01_NotRight:
0001128E 1028 0026                  		move.b	$26(a0),d0
00011292 0600 0020                  		addi.b	#$20,d0
00011296 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
0001129A 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001129E 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000112A2 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000112A6 08A8 0005 0022             		bclr	#5,$22(a0)
000112AC 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000112B2                            
000112B2                            Sonic_LookUp:
000112B2 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000112B8 6700                       		beq.s	Sonic_Duck	; if not, branch
000112BA 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000112C0 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000112C6 6700                       		beq.s	loc_12FC2
000112C8 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000112CC 6000                       		bra.s	loc_12FC2
000112CE                            ; ===========================================================================
000112CE                            
000112CE                            Sonic_Duck:
000112CE 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000112D4 6700                       		beq.s	Obj01_ResetScr	; if not, branch
000112D6 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000112DC 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000112E2 6700                       		beq.s	loc_12FC2
000112E4 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000112E8 6000                       		bra.s	loc_12FC2
000112EA                            ; ===========================================================================
000112EA                            
000112EA                            Obj01_ResetScr:
000112EA 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000112F0 6700                       		beq.s	loc_12FC2	; if yes, branch
000112F2 6400                       		bcc.s	loc_12FBE
000112F4 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000112F8                            
000112F8                            loc_12FBE:
000112F8 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000112FC                            
000112FC                            loc_12FC2:
000112FC 1038 F602                  		move.b	($FFFFF602).w,d0
00011300 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00011304 6600                       		bne.s	loc_12FEE	; if yes, branch
00011306 3028 0014                  		move.w	$14(a0),d0
0001130A 6700                       		beq.s	loc_12FEE
0001130C 6B00                       		bmi.s	loc_12FE2
00011310 6400                       		bcc.s	loc_12FDC
00011312 303C 0000                  		move.w	#0,d0
00011316                            
00011316                            loc_12FDC:
00011316 3140 0014                  		move.w	d0,$14(a0)
0001131A 6000                       		bra.s	loc_12FEE
0001131C                            ; ===========================================================================
0001131C                            
0001131C                            loc_12FE2:
0001131E 6400                       		bcc.s	loc_12FEA
00011320 303C 0000                  		move.w	#0,d0
00011324                            
00011324                            loc_12FEA:
00011324 3140 0014                  		move.w	d0,$14(a0)
00011328                            
00011328                            loc_12FEE:
00011328 1028 0026                  		move.b	$26(a0),d0
0001132C 4EB9 0000 2556             		jsr	(CalcSine).l
00011332 C3E8 0014                  		muls.w	$14(a0),d1
00011336 E081                       		asr.l	#8,d1
00011338 3141 0010                  		move.w	d1,$10(a0)
0001133C C1E8 0014                  		muls.w	$14(a0),d0
00011340 E080                       		asr.l	#8,d0
00011342 3140 0012                  		move.w	d0,$12(a0)
00011346                            
00011346                            loc_1300C:
00011346 1028 0026                  		move.b	$26(a0),d0
0001134A 0600 0040                  		addi.b	#$40,d0
0001134E 6B00                       		bmi.s	locret_1307C
00011350 123C 0040                  		move.b	#$40,d1
00011354 4A68 0014                  		tst.w	$14(a0)
00011358 6700                       		beq.s	locret_1307C
0001135A 6B00                       		bmi.s	loc_13024
0001135C 4441                       		neg.w	d1
0001135E                            
0001135E                            loc_13024:
0001135E 1028 0026                  		move.b	$26(a0),d0
00011364 3F00                       		move.w	d0,-(sp)
00011366 6100 0000                  		bsr.w	Sonic_WalkSpeed
0001136A 301F                       		move.w	(sp)+,d0
0001136C 4A41                       		tst.w	d1
0001136E 6A00                       		bpl.s	locret_1307C
00011370 E141                       		asl.w	#8,d1
00011372 0600 0020                  		addi.b	#$20,d0
00011376 0200 00C0                  		andi.b	#$C0,d0
0001137A 6700                       		beq.s	loc_13078
0001137C 0C00 0040                  		cmpi.b	#$40,d0
00011380 6700                       		beq.s	loc_13066
00011382 0C00 0080                  		cmpi.b	#$80,d0
00011386 6700                       		beq.s	loc_13060
0001138C 08E8 0005 0022             		bset	#5,$22(a0)
00011392 317C 0000 0014             		move.w	#0,$14(a0)
00011398 4E75                       		rts	
0001139A                            ; ===========================================================================
0001139A                            
0001139A                            loc_13060:
0001139E 4E75                       		rts	
000113A0                            ; ===========================================================================
000113A0                            
000113A0                            loc_13066:
000113A4 08E8 0005 0022             		bset	#5,$22(a0)
000113AA 317C 0000 0014             		move.w	#0,$14(a0)
000113B0 4E75                       		rts	
000113B2                            ; ===========================================================================
000113B2                            
000113B2                            loc_13078:
000113B6                            
000113B6                            locret_1307C:
000113B6 4E75                       		rts	
000113B8                            ; End of function Sonic_Move
000113B8                            
000113B8                            
000113B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000113B8                            
000113B8                            
000113B8                            Sonic_MoveLeft:				; XREF: Sonic_Move
000113B8 3028 0014                  		move.w	$14(a0),d0
000113BC 6700                       		beq.s	loc_13086
000113BE 6A00                       		bpl.s	loc_130B2
000113C0                            
000113C0                            loc_13086:
000113C0 08E8 0000 0022             		bset	#0,$22(a0)
000113C6 6600                       		bne.s	loc_1309A
000113C8 08A8 0005 0022             		bclr	#5,$22(a0)
000113CE 117C 0001 001D             		move.b	#1,$1D(a0)
000113D4                            
000113D4                            loc_1309A:
000113D6 3206                       		move.w	d6,d1
000113D8 4441                       		neg.w	d1
000113DA B041                       		cmp.w	d1,d0
000113DC 6E00                       		bgt.s	loc_130A6
000113DE 3001                       		move.w	d1,d0
000113E0                            
000113E0                            loc_130A6:
000113E0 3140 0014                  		move.w	d0,$14(a0)
000113E4 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000113EA 4E75                       		rts	
000113EC                            ; ===========================================================================
000113EC                            
000113EC                            loc_130B2:				; XREF: Sonic_MoveLeft
000113EE 6400                       		bcc.s	loc_130BA
000113F0 303C FF80                  		move.w	#-$80,d0
000113F4                            
000113F4                            loc_130BA:
000113F4 3140 0014                  		move.w	d0,$14(a0)
000113F8 1028 0026                  		move.b	$26(a0),d0
000113FC 0600 0020                  		addi.b	#$20,d0
00011400 0200 00C0                  		andi.b	#$C0,d0
00011404 6600                       		bne.s	locret_130E8
00011406 0C40 0100                  		cmpi.w	#$100,d0
0001140A 6D00                       		blt.s	locret_130E8
0001140C 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00011412 08A8 0000 0022             		bclr	#0,$22(a0)
00011418 303C 00A4                  		move.w	#$A4,d0
0001141C 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play stopping sound
00011422 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00011428 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w		
0001142E                            
0001142E                            locret_130E8:
0001142E 4E75                       		rts	
00011430                            ; End of function Sonic_MoveLeft
00011430                            
00011430                            
00011430                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011430                            
00011430                            
00011430                            Sonic_MoveRight:			; XREF: Sonic_Move
00011430 3028 0014                  		move.w	$14(a0),d0
00011434 6B00                       		bmi.s	loc_13118
00011436 08A8 0000 0022             		bclr	#0,$22(a0)
0001143C 6700                       		beq.s	loc_13104
0001143E 08A8 0005 0022             		bclr	#5,$22(a0)
00011444 117C 0001 001D             		move.b	#1,$1D(a0)
0001144A                            
0001144A                            loc_13104:
0001144C B046                       		cmp.w	d6,d0
0001144E 6D00                       		blt.s	loc_1310C
00011450 3006                       		move.w	d6,d0
00011452                            
00011452                            loc_1310C:
00011452 3140 0014                  		move.w	d0,$14(a0)
00011456 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001145C 4E75                       		rts	
0001145E                            ; ===========================================================================
0001145E                            
0001145E                            loc_13118:				; XREF: Sonic_MoveRight
00011460 6400                       		bcc.s	loc_13120
00011462 303C 0080                  		move.w	#$80,d0
00011466                            
00011466                            loc_13120:
00011466 3140 0014                  		move.w	d0,$14(a0)
0001146A 1028 0026                  		move.b	$26(a0),d0
0001146E 0600 0020                  		addi.b	#$20,d0
00011472 0200 00C0                  		andi.b	#$C0,d0
00011476 6600                       		bne.s	locret_1314E
00011478 0C40 FF00                  		cmpi.w	#-$100,d0
0001147C 6E00                       		bgt.s	locret_1314E
0001147E 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00011484 08E8 0000 0022             		bset	#0,$22(a0)
0001148A 303C 00A4                  		move.w	#$A4,d0
0001148E 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play stopping sound
00011494 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
0001149A 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w		
000114A0                            
000114A0                            locret_1314E:
000114A0 4E75                       		rts	
000114A2                            ; End of function Sonic_MoveRight
000114A2                            
000114A2                            ; ---------------------------------------------------------------------------
000114A2                            ; Subroutine to	change Sonic's direction while jumping
000114A2                            ; ---------------------------------------------------------------------------
000114A2                            
000114A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000114A2                            
000114A2                            
000114A2                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
000114A2 3C38 F760                  		move.w	($FFFFF760).w,d6
000114A6 3A38 F762                  		move.w	($FFFFF762).w,d5
000114AA E345                       		asl.w	#1,d5
000114AC 3028 0010                  		move.w	$10(a0),d0
000114B0 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000114B6 6700                       		beq.s	loc_13278	; if not, branch
000114B8 08E8 0000 0022             		bset	#0,$22(a0)
000114C0 3206                       		move.w	d6,d1
000114C2 4441                       		neg.w	d1
000114C4 B041                       		cmp.w	d1,d0
000114C6 6E00                       		bgt.s	loc_13278
000114C8 3001                       		move.w	d1,d0
000114CA                            
000114CA                            loc_13278:
000114CA 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000114D0 6700                       		beq.s	Obj01_JumpMove	; if not, branch
000114D2 08A8 0000 0022             		bclr	#0,$22(a0)
000114DA B046                       		cmp.w	d6,d0
000114DC 6D00                       		blt.s	Obj01_JumpMove
000114DE 3006                       		move.w	d6,d0
000114E0                            
000114E0                            Obj01_JumpMove:
000114E0 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
000114E4                            
000114E4                            Obj01_ResetScr2:
000114E4 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
000114EA 6700                       		beq.s	loc_132A4	; if yes, branch
000114EC 6400                       		bcc.s	loc_132A0
000114EE 5878 F73E                  		addq.w	#4,($FFFFF73E).w
000114F2                            
000114F2                            loc_132A0:
000114F2 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000114F6                            
000114F6                            loc_132A4:
000114F6 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
000114FC 6500                       		bcs.s	locret_132D2	; if yes, branch
000114FE 3028 0010                  		move.w	$10(a0),d0
00011502 3200                       		move.w	d0,d1
00011504 EA41                       		asr.w	#5,d1
00011506 6700                       		beq.s	locret_132D2
00011508 6B00                       		bmi.s	loc_132C6
0001150C 6400                       		bcc.s	loc_132C0
0001150E 303C 0000                  		move.w	#0,d0
00011512                            
00011512                            loc_132C0:
00011512 3140 0010                  		move.w	d0,$10(a0)
00011516 4E75                       		rts	
00011518                            ; ===========================================================================
00011518                            
00011518                            loc_132C6:
0001151A 6500                       		bcs.s	loc_132CE
0001151C 303C 0000                  		move.w	#0,d0
00011520                            
00011520                            loc_132CE:
00011520 3140 0010                  		move.w	d0,$10(a0)
00011524                            
00011524                            locret_132D2:
00011524 4E75                       		rts	
00011526                            ; End of function Sonic_ChgJumpDir
00011526                            
00011526                            ; ===========================================================================
00011526                            ; ---------------------------------------------------------------------------
00011526                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00011526                            ; ---------------------------------------------------------------------------
00011526                            
00011526                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011526                            
00011526                            
00011526                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00011526 2228 0008                  		move.l	8(a0),d1
0001152A 3028 0010                  		move.w	$10(a0),d0
0001152E 48C0                       		ext.l	d0
00011530 E180                       		asl.l	#8,d0
00011534 4841                       		swap	d1
00011536 3038 F728                  		move.w	($FFFFF728).w,d0
0001153A 0640 0010                  		addi.w	#$10,d0
0001153E B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00011540 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00011542 3038 F72A                  		move.w	($FFFFF72A).w,d0
00011546 0640 0128                  		addi.w	#$128,d0
0001154A 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001154E 6600                       		bne.s	loc_13332
00011550 0640 0040                  		addi.w	#$40,d0
00011554                            
00011554                            loc_13332:
00011554 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00011556 6300                       		bls.s	Boundary_Sides	; if yes, branch
00011558                            
00011558                            loc_13336:
00011558 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001155C 0640 00E0                  		addi.w	#$E0,d0
00011560 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00011564 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00011566 4E75                       		rts	
00011568                            ; ===========================================================================
00011568                            
00011568                            Boundary_Bottom:
00011568 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
0001156E 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00011572 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00011578 6500 0000                  		bcs.w	KillSonic
0001157C 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00011580 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00011586 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
0001158C 4E75                       		rts	
0001158E                            ; ===========================================================================
0001158E                            
0001158E                            Boundary_Sides:
0001158E 3140 0008                  		move.w	d0,8(a0)
00011592 317C 0000 000A             		move.w	#0,$A(a0)
00011598 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
0001159E 317C 0000 0014             		move.w	#0,$14(a0)
000115A4 60B2                       		bra.s	loc_13336
000115A6                            ; End of function Sonic_LevelBound
000115A6                            
000115A6                            ; ---------------------------------------------------------------------------
000115A6                            ; Subroutine allowing Sonic to jump
000115A6                            ; ---------------------------------------------------------------------------
000115A6                            
000115A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000115A6                            
000115A6                            
000115A6                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000115A6 1038 F603                  		move.b	($FFFFF603).w,d0
000115AA 0200 0020                  		andi.b	#$20,d0		; is A,	B or C pressed?
000115AE 6600                       		bne.s	@pass	; if not, branch
000115B0 1038 F603                  		move.b	($FFFFF603).w,d0
000115B4 0200 0040                  		andi.b	#$40,d0		; is A,	B or C pressed?		
000115B8 6700 0000                  		beq.w	locret_1348E
000115BC 11FC 0001 F662             		move.b	#1,($FFFFF662).w
000115C2                            
000115C2                            @pass:
000115C2 7000                       		moveq	#0,d0
000115C4 1028 0026                  		move.b	$26(a0),d0
000115C8 0600 0080                  		addi.b	#$80,d0
000115CC 6100 0000                  		bsr.w	sub_14D48
000115D0 0C41 0006                  		cmpi.w	#6,d1
000115D4 6D00 0000                  		blt.w	locret_1348E
000115D8 343C 0680                  		move.w	#$680,d2
000115DC 0828 0006 0022             		btst	#6,$22(a0)
000115E2 6700                       		beq.s	loc_1341C
000115E4 343C 0380                  		move.w	#$380,d2
000115E8                            
000115E8                            loc_1341C:
000115E8 7000                       		moveq	#0,d0
000115EA 1028 0026                  		move.b	$26(a0),d0
000115EE 0400 0040                  		subi.b	#$40,d0
000115F2 4EB9 0000 2556             		jsr	(CalcSine).l
000115F8 C3C2                       		muls.w	d2,d1
000115FA E081                       		asr.l	#8,d1
00011600 C1C2                       		muls.w	d2,d0
00011602 E080                       		asr.l	#8,d0
00011608 08E8 0001 0022             		bset	#1,$22(a0)
0001160E 08A8 0005 0022             		bclr	#5,$22(a0)
00011614 588F                       		addq.l	#4,sp
00011616 117C 0001 003C             		move.b	#1,$3C(a0)
0001161C 4228 0038                  		clr.b	$38(a0)
00011620 303C 00A0                  		move.w	#$A0,d0
00011624 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play jumping sound
0001162A 4A38 F662                  		tst.b	($FFFFF662).w
0001162E 6700                       		beq.s	@regularjump
00011630 117C 0006 001C             		move.b	#6,$1C(a0)
00011636 08E8 0002 0022             		bset	#2,$22(a0)
0001163C 08E8 0004 0022             		bset	#4,$22(a0)
00011642 4E75                       		rts
00011644                            
00011644                            @regularjump
00011644 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
0001164A 08E8 0002 0022             		bset	#2,$22(a0)
00011650                            
00011650                            locret_1348E:
00011650 4E75                       		rts	
00011652                            ; End of function Sonic_Jump
00011652                            
00011652                            
00011652                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011652                            
00011652                            
00011652                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00011652 4A28 003C                  		tst.b	$3C(a0)
00011656 6700                       		beq.s	loc_134C4
00011658 323C FC00                  		move.w	#-$400,d1
0001165C 0828 0006 0022             		btst	#6,$22(a0)
00011662 6700                       		beq.s	loc_134AE
00011664 323C FE00                  		move.w	#-$200,d1
00011668                            
00011668                            loc_134AE:
00011668 B268 0012                  		cmp.w	$12(a0),d1
0001166C 6F00                       		ble.s	locret_134C2
0001166E 1038 F602                  		move.b	($FFFFF602).w,d0
00011672 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00011676 6600                       		bne.s	locret_134C2	; if yes, branch
00011678 3141 0012                  		move.w	d1,$12(a0)
0001167C                            
0001167C                            locret_134C2:
0001167C 4E75                       		rts	
0001167E                            ; ===========================================================================
0001167E                            
0001167E                            loc_134C4:
0001167E 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00011684 6C00                       		bge.s	locret_134D2
00011686 317C F040 0012             		move.w	#-$FC0,$12(a0)
0001168C                            
0001168C                            locret_134D2:
0001168C 4E75                       		rts	
0001168E                            ; End of function Sonic_JumpHeight
0001168E                            
0001168E                            Mario_Fall:
0001168E 0828 0004 0022             		btst	#4,$22(a0)
00011694 6600                       		bne.s	@return
00011696 0828 0001 0022             		btst	#1,$22(a0)	; Check if Mario is midair
0001169C 6700                       		beq.s	@return
0001169E 0828 0003 0022             		btst	#3,$22(a0)	; But if he's in the air and not supposed to fall
000116A4 6600                       		bne.s	@return
000116A6 4A68 0012                  		tst.w	$12(a0)	; Check if he's going downwards
000116AA 6D00                       		blt.s	@return
000116AC 117C 0003 001C             		move.b	#3,$1C(a0)
000116B2                            
000116B2                            	@return:
000116B2 4E75                       		rts
000116B4                            
000116B4                            ; ---------------------------------------------------------------------------
000116B4                            ; Subroutine to	slow Sonic walking up a	slope
000116B4                            ; ---------------------------------------------------------------------------
000116B4                            
000116B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000116B4                            
000116B4                            
000116B4                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
000116B4 1028 0026                  		move.b	$26(a0),d0
000116B8 0600 0060                  		addi.b	#$60,d0
000116BC 0C00 00C0                  		cmpi.b	#$C0,d0
000116C0 6400                       		bcc.s	locret_13508
000116C2 1028 0026                  		move.b	$26(a0),d0
000116C6 4EB9 0000 2556             		jsr	(CalcSine).l
000116CC C1FC 0020                  		muls.w	#$20,d0
000116D0 E080                       		asr.l	#8,d0
000116D2 4A68 0014                  		tst.w	$14(a0)
000116D6 6700                       		beq.s	locret_13508
000116D8 6B00                       		bmi.s	loc_13504
000116DA 4A40                       		tst.w	d0
000116DC 6700                       		beq.s	locret_13502
000116E2                            
000116E2                            locret_13502:
000116E2 4E75                       		rts	
000116E4                            ; ===========================================================================
000116E4                            
000116E4                            loc_13504:
000116E8                            
000116E8                            locret_13508:
000116E8 4E75                       		rts	
000116EA                            ; End of function Sonic_SlopeResist
000116EA                            
000116EA                            ; ---------------------------------------------------------------------------
000116EA                            ; Subroutine to	push Sonic down	a slope
000116EA                            ; ---------------------------------------------------------------------------
000116EA                            
000116EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000116EA                            
000116EA                            
000116EA                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
000116EC 4A28 0038                  		tst.b	$38(a0)
000116F0 6600                       		bne.s	locret_13580
000116F2 4A68 003E                  		tst.w	$3E(a0)
000116F6 6600                       		bne.s	loc_13582
000116F8 1028 0026                  		move.b	$26(a0),d0
000116FC 0600 0020                  		addi.b	#$20,d0
00011700 0200 00C0                  		andi.b	#$C0,d0
00011704 6700                       		beq.s	locret_13580
00011706 3028 0014                  		move.w	$14(a0),d0
0001170A 6A00                       		bpl.s	loc_1356A
0001170C 4440                       		neg.w	d0
0001170E                            
0001170E                            loc_1356A:
0001170E 0C40 0280                  		cmpi.w	#$280,d0
00011712 6400                       		bcc.s	locret_13580
00011714 4268 0014                  		clr.w	$14(a0)
00011718 08E8 0001 0022             		bset	#1,$22(a0)
0001171E 317C 001E 003E             		move.w	#$1E,$3E(a0)
00011724                            
00011724                            locret_13580:
00011724 4E75                       		rts	
00011726                            ; ===========================================================================
00011726                            
00011726                            loc_13582:
00011726 5368 003E                  		subq.w	#1,$3E(a0)
0001172A 4E75                       		rts	
0001172C                            ; End of function Sonic_SlopeRepel
0001172C                            
0001172C                            ; ---------------------------------------------------------------------------
0001172C                            ; Subroutine to	return Sonic's angle to 0 as he jumps
0001172C                            ; ---------------------------------------------------------------------------
0001172C                            
0001172C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001172C                            
0001172C                            
0001172C                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001172C 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00011730 6700                       		beq.s	locret_135A2	; if already 0,	branch
00011732 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00011734                            
00011734 5400                       		addq.b	#2,d0		; increase angle
00011736 6400                       		bcc.s	loc_13596
00011738 7000                       		moveq	#0,d0
0001173A                            
0001173A                            loc_13596:
0001173A 6000                       		bra.s	loc_1359E
0001173C                            ; ===========================================================================
0001173C                            
0001173C                            loc_13598:
0001173C 5500                       		subq.b	#2,d0		; decrease angle
0001173E 6400                       		bcc.s	loc_1359E
00011740 7000                       		moveq	#0,d0
00011742                            
00011742                            loc_1359E:
00011742 1140 0026                  		move.b	d0,$26(a0)
00011746                            
00011746                            locret_135A2:
00011746 4E75                       		rts	
00011748                            ; End of function Sonic_JumpAngle
00011748                            
00011748                            ; ---------------------------------------------------------------------------
00011748                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00011748                            ; ---------------------------------------------------------------------------
00011748                            
00011748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011748                            
00011748                            
00011748                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00011748 3228 0010                  		move.w	$10(a0),d1
0001174C 3428 0012                  		move.w	$12(a0),d2
00011750 4EB9 0000 2824             		jsr	(CalcAngle).l
00011756 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
0001175A 0400 0020                  		subi.b	#$20,d0
0001175E 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00011762 0200 00C0                  		andi.b	#$C0,d0
00011766 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
0001176A 0C00 0040                  		cmpi.b	#$40,d0
0001176E 6700 0000                  		beq.w	loc_13680
00011772 0C00 0080                  		cmpi.b	#$80,d0
00011776 6700 0000                  		beq.w	loc_136E2
0001177A 0C00 00C0                  		cmpi.b	#-$40,d0
0001177E 6700 0000                  		beq.w	loc_1373E
00011782 6100 0000                  		bsr.w	Sonic_HitWall
00011786 4A41                       		tst.w	d1
00011788 6A00                       		bpl.s	loc_135F0
0001178E 317C 0000 0010             		move.w	#0,$10(a0)
00011794                            
00011794                            loc_135F0:
00011794 6100 0000                  		bsr.w	sub_14EB4
00011798 4A41                       		tst.w	d1
0001179A 6A00                       		bpl.s	loc_13602
000117A0 317C 0000 0010             		move.w	#0,$10(a0)
000117A6                            
000117A6                            loc_13602:
000117A6 6100 0000                  		bsr.w	Sonic_HitFloor
000117AA 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
000117AE 4A41                       		tst.w	d1
000117B0 6A00                       		bpl.s	locret_1367E
000117B2 1428 0012                  		move.b	$12(a0),d2
000117B6 5002                       		addq.b	#8,d2
000117B8 4402                       		neg.b	d2
000117BA B202                       		cmp.b	d2,d1
000117BC 6C00                       		bge.s	loc_1361E
000117BE B002                       		cmp.b	d2,d0
000117C0 6D00                       		blt.s	locret_1367E
000117C2                            
000117C2                            loc_1361E:
000117C6 1143 0026                  		move.b	d3,$26(a0)
000117CA 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000117CE 117C 0000 001C             		move.b	#0,$1C(a0)
000117D4 1003                       		move.b	d3,d0
000117D6 0600 0020                  		addi.b	#$20,d0
000117DA 0200 0040                  		andi.b	#$40,d0
000117DE 6600                       		bne.s	loc_1365C
000117E0 1003                       		move.b	d3,d0
000117E2 0600 0010                  		addi.b	#$10,d0
000117E6 0200 0020                  		andi.b	#$20,d0
000117EA 6700                       		beq.s	loc_1364E
000117EC E0E8 0012                  		asr	$12(a0)
000117F0 6000                       		bra.s	loc_13670
000117F2                            ; ===========================================================================
000117F2                            
000117F2                            loc_1364E:
000117F2 317C 0000 0012             		move.w	#0,$12(a0)
000117F8 3168 0010 0014             		move.w	$10(a0),$14(a0)
000117FE 4E75                       		rts	
00011800                            ; ===========================================================================
00011800                            
00011800                            loc_1365C:
00011800 317C 0000 0010             		move.w	#0,$10(a0)
00011806 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
0001180C 6F00                       		ble.s	loc_13670
0001180E 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00011814                            
00011814                            loc_13670:
00011814 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001181A 4A03                       		tst.b	d3
0001181C 6A00                       		bpl.s	locret_1367E
0001181E 4468 0014                  		neg.w	$14(a0)
00011822                            
00011822                            locret_1367E:
00011822 4E75                       		rts	
00011824                            ; ===========================================================================
00011824                            
00011824                            loc_13680:
00011824 6100 0000                  		bsr.w	Sonic_HitWall
00011828 4A41                       		tst.w	d1
0001182A 6A00                       		bpl.s	loc_1369A
00011830 317C 0000 0010             		move.w	#0,$10(a0)
00011836 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001183C 4E75                       		rts	
0001183E                            ; ===========================================================================
0001183E                            
0001183E                            loc_1369A:
0001183E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00011842 4A41                       		tst.w	d1
00011844 6A00                       		bpl.s	loc_136B4
0001184A 4A68 0012                  		tst.w	$12(a0)
0001184E 6A00                       		bpl.s	locret_136B2
00011850 317C 0000 0012             		move.w	#0,$12(a0)
00011856                            
00011856                            locret_136B2:
00011856 4E75                       		rts	
00011858                            ; ===========================================================================
00011858                            
00011858                            loc_136B4:
00011858 4A68 0012                  		tst.w	$12(a0)
0001185C 6B00                       		bmi.s	locret_136E0
0001185E 6100 0000                  		bsr.w	Sonic_HitFloor
00011862 4A41                       		tst.w	d1
00011864 6A00                       		bpl.s	locret_136E0
0001186A 1143 0026                  		move.b	d3,$26(a0)
0001186E 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00011872 117C 0000 001C             		move.b	#0,$1C(a0)
00011878 317C 0000 0012             		move.w	#0,$12(a0)
0001187E 3168 0010 0014             		move.w	$10(a0),$14(a0)
00011884                            
00011884                            locret_136E0:
00011884 4E75                       		rts	
00011886                            ; ===========================================================================
00011886                            
00011886                            loc_136E2:
00011886 6100 0000                  		bsr.w	Sonic_HitWall
0001188A 4A41                       		tst.w	d1
0001188C 6A00                       		bpl.s	loc_136F4
00011892 317C 0000 0010             		move.w	#0,$10(a0)
00011898                            
00011898                            loc_136F4:
00011898 6100 0000                  		bsr.w	sub_14EB4
0001189C 4A41                       		tst.w	d1
0001189E 6A00                       		bpl.s	loc_13706
000118A4 317C 0000 0010             		move.w	#0,$10(a0)
000118AA                            
000118AA                            loc_13706:
000118AA 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000118AE 4A41                       		tst.w	d1
000118B0 6A00                       		bpl.s	locret_1373C
000118B6 1003                       		move.b	d3,d0
000118B8 0600 0020                  		addi.b	#$20,d0
000118BC 0200 0040                  		andi.b	#$40,d0
000118C0 6600                       		bne.s	loc_13726
000118C2 317C 0000 0012             		move.w	#0,$12(a0)
000118C8 4E75                       		rts	
000118CA                            ; ===========================================================================
000118CA                            
000118CA                            loc_13726:
000118CA 1143 0026                  		move.b	d3,$26(a0)
000118CE 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000118D2 3168 0012 0014             		move.w	$12(a0),$14(a0)
000118D8 4A03                       		tst.b	d3
000118DA 6A00                       		bpl.s	locret_1373C
000118DC 4468 0014                  		neg.w	$14(a0)
000118E0                            
000118E0                            locret_1373C:
000118E0 4E75                       		rts	
000118E2                            ; ===========================================================================
000118E2                            
000118E2                            loc_1373E:
000118E2 6100 0000                  		bsr.w	sub_14EB4
000118E6 4A41                       		tst.w	d1
000118E8 6A00                       		bpl.s	loc_13758
000118EE 317C 0000 0010             		move.w	#0,$10(a0)
000118F4 3168 0012 0014             		move.w	$12(a0),$14(a0)
000118FA 4E75                       		rts	
000118FC                            ; ===========================================================================
000118FC                            
000118FC                            loc_13758:
000118FC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00011900 4A41                       		tst.w	d1
00011902 6A00                       		bpl.s	loc_13772
00011908 4A68 0012                  		tst.w	$12(a0)
0001190C 6A00                       		bpl.s	locret_13770
0001190E 317C 0000 0012             		move.w	#0,$12(a0)
00011914                            
00011914                            locret_13770:
00011914 4E75                       		rts	
00011916                            ; ===========================================================================
00011916                            
00011916                            loc_13772:
00011916 4A68 0012                  		tst.w	$12(a0)
0001191A 6B00                       		bmi.s	locret_1379E
0001191C 6100 0000                  		bsr.w	Sonic_HitFloor
00011920 4A41                       		tst.w	d1
00011922 6A00                       		bpl.s	locret_1379E
00011928 1143 0026                  		move.b	d3,$26(a0)
0001192C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00011930 117C 0000 001C             		move.b	#0,$1C(a0)
00011936 317C 0000 0012             		move.w	#0,$12(a0)
0001193C 3168 0010 0014             		move.w	$10(a0),$14(a0)
00011942                            
00011942                            locret_1379E:
00011942 4E75                       		rts	
00011944                            ; End of function Sonic_Floor
00011944                            
00011944                            ; ---------------------------------------------------------------------------
00011944                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00011944                            ; ---------------------------------------------------------------------------
00011944                            
00011944                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011944                            
00011944                            
00011944                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00011944 4238 F662                  		clr.b	($FFFFF662).w
00011948 0828 0004 0022             		btst	#4,$22(a0)
0001194E 6700                       		beq.s	@notSpinJumping
00011950 0838 0002 FE25             		btst	#2,($FFFFFE25).w
00011956 6700                       		beq.s	@notSpinJumping
00011958 0868 0000 0022             		bchg	#0,$22(a0)
0001195E                            
0001195E                            	@notSpinJumping:
0001195E 08A8 0004 0022             		bclr	#4,$22(a0)		
00011964 08A8 0005 0022             		bclr	#5,$22(a0)
0001196A 08A8 0001 0022             		bclr	#1,$22(a0)
00011970 0828 0002 0022             		btst	#2,$22(a0)
00011976 6700                       		beq.s	loc_137E4
00011978 08A8 0002 0022             		bclr	#2,$22(a0)
0001197E 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00011984 5B68 000C                  		subq.w	#5,$C(a0)
00011988                            
00011988                            loc_137E4:
00011988 117C 0000 003C             		move.b	#0,$3C(a0)
0001198E 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00011994 4E75                       		rts	
00011996                            ; End of function Sonic_ResetOnFloor
00011996                            
00011996                            ; ===========================================================================
00011996                            ; ---------------------------------------------------------------------------
00011996                            ; Sonic	when he	gets hurt
00011996                            ; ---------------------------------------------------------------------------
00011996                            
00011996                            Obj01_Hurt:				; XREF: Obj01_Index
00011996 4EBA 9CDC                  		jsr	SpeedToPos
0001199A 0668 0030 0012             		addi.w	#$30,$12(a0)
000119A0 0828 0006 0022             		btst	#6,$22(a0)
000119A6 6700                       		beq.s	loc_1380C
000119A8 0468 0020 0012             		subi.w	#$20,$12(a0)
000119AE                            
000119AE                            loc_1380C:
000119AE 6100 0000                  		bsr.w	Sonic_HurtStop
000119B2 6100 FB72                  		bsr.w	Sonic_LevelBound
000119B6 6100 F746                  		bsr.w	Sonic_RecordPos
000119BA 6100 0000                  		bsr.w	Sonic_Animate
000119BE 6100 0000                  		bsr.w	LoadSonicDynPLC
000119C2 4EFA 9CD6                  		jmp	DisplaySprite
000119C6                            
000119C6                            ; ---------------------------------------------------------------------------
000119C6                            ; Subroutine to	stop Sonic falling after he's been hurt
000119C6                            ; ---------------------------------------------------------------------------
000119C6                            
000119C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000119C6                            
000119C6                            
000119C6                            Sonic_HurtStop:				; XREF: Obj01_Hurt
000119C6 3038 F72E                  		move.w	($FFFFF72E).w,d0
000119CA 0640 00E0                  		addi.w	#$E0,d0
000119CE B068 000C                  		cmp.w	$C(a0),d0
000119D2 6500 0000                  		bcs.w	KillSonic
000119D6 6100 FD70                  		bsr.w	Sonic_Floor
000119DA 0828 0001 0022             		btst	#1,$22(a0)
000119E0 6600                       		bne.s	locret_13860
000119E2 7000                       		moveq	#0,d0
000119E4 3140 0012                  		move.w	d0,$12(a0)
000119E8 3140 0010                  		move.w	d0,$10(a0)
000119EC 3140 0014                  		move.w	d0,$14(a0)
000119F0 117C 0000 001C             		move.b	#0,$1C(a0)
000119F6 5528 0024                  		subq.b	#2,$24(a0)
000119FA 317C 0078 0030             		move.w	#$78,$30(a0)
00011A00                            
00011A00                            locret_13860:
00011A00 4E75                       		rts	
00011A02                            ; End of function Sonic_HurtStop
00011A02                            
00011A02                            ; ===========================================================================
00011A02                            ; ---------------------------------------------------------------------------
00011A02                            ; Sonic	when he	dies
00011A02                            ; ---------------------------------------------------------------------------
00011A02                            
00011A02                            Obj01_Death:				; XREF: Obj01_Index
00011A02 6100 0000                  		bsr.w	GameOver
00011A06 4EBA 9C40                  		jsr	ObjectFall
00011A0A 6100 F6F2                  		bsr.w	Sonic_RecordPos
00011A0E 6100 0000                  		bsr.w	Sonic_Animate
00011A12 6100 0000                  		bsr.w	LoadSonicDynPLC
00011A16 4EFA 9C82                  		jmp	DisplaySprite
00011A1A                            
00011A1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011A1A                            
00011A1A                            
00011A1A                            GameOver:				; XREF: Obj01_Death
00011A1A 3038 F72E                  		move.w	($FFFFF72E).w,d0
00011A1E 0640 0100                  		addi.w	#$100,d0
00011A22 B068 000C                  		cmp.w	$C(a0),d0
00011A26 6400 0000                  		bcc.w	locret_13900
00011A2A 317C FFC8 0012             		move.w	#-$38,$12(a0)
00011A30 5428 0024                  		addq.b	#2,$24(a0)
00011A34 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00011A38 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00011A3C 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00011A40 6600                       		bne.s	loc_138D4
00011A42 317C 0000 003A             		move.w	#0,$3A(a0)
00011A48 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00011A4E 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00011A54 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00011A5A 4238 FE1A                  		clr.b	($FFFFFE1A).w
00011A5E                            
00011A5E                            loc_138C2:
00011A5E 303C 008F                  		move.w	#$8F,d0
00011A62 4EB9 0000 101A             		jsr	(PlaySound).l	; play game over music
00011A68 7003                       		moveq	#3,d0
00011A6A 4EF9 0000 128E             		jmp	(LoadPLC).l	; load game over patterns
00011A70                            ; ===========================================================================
00011A70                            
00011A70                            loc_138D4:
00011A70 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00011A76 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00011A7A 6700                       		beq.s	locret_13900	; if not, branch
00011A7C 317C 0000 003A             		move.w	#0,$3A(a0)
00011A82 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00011A88 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00011A8E 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00011A94 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00011A9A 60C2                       		bra.s	loc_138C2
00011A9C                            ; ===========================================================================
00011A9C                            
00011A9C                            locret_13900:
00011A9C 4E75                       		rts	
00011A9E                            ; End of function GameOver
00011A9E                            
00011A9E                            ; ===========================================================================
00011A9E                            ; ---------------------------------------------------------------------------
00011A9E                            ; Sonic	when the level is restarted
00011A9E                            ; ---------------------------------------------------------------------------
00011A9E                            
00011A9E                            Obj01_ResetLevel:			; XREF: Obj01_Index
00011A9E 4A68 003A                  		tst.w	$3A(a0)
00011AA2 6700                       		beq.s	locret_13914
00011AA4 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00011AA8 6600                       		bne.s	locret_13914
00011AAA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00011AB0                            
00011AB0                            locret_13914:
00011AB0 4E75                       		rts	
00011AB2                            
00011AB2                            ; ---------------------------------------------------------------------------
00011AB2                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00011AB2                            ; ---------------------------------------------------------------------------
00011AB2                            
00011AB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011AB2                            
00011AB2                            
00011AB2                            Sonic_Loops:				; XREF: Obj01_Control
00011AB2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00011AB8 6700                       		beq.s	loc_13926	; if yes, branch
00011ABA 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00011ABE 6600 0000                  		bne.w	locret_139C2	; if not, branch
00011AC2                            
00011AC2                            loc_13926:
00011AC2 3028 000C                  		move.w	$C(a0),d0
00011AC6 E248                       		lsr.w	#1,d0
00011AC8 0240 0380                  		andi.w	#$380,d0
00011ACC 1228 0008                  		move.b	8(a0),d1
00011AD0 0241 007F                  		andi.w	#$7F,d1
00011AD6 43F8 A400                  		lea	($FFFFA400).w,a1
00011ADA 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00011ADE B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00011AE2 6700                       		beq.s	loc_13976
00011AE4 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00011AE8 6700                       		beq.s	loc_13966
00011AEA 08A8 0006 0001             		bclr	#6,1(a0)
00011AF0 4E75                       		rts	
00011AF2                            ; ===========================================================================
00011AF2                            
00011AF2                            loc_13966:
00011AF2 0828 0001 0022             		btst	#1,$22(a0)
00011AF8 6700                       		beq.s	loc_13976
00011AFA 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00011B00 4E75                       		rts	
00011B02                            ; ===========================================================================
00011B02                            
00011B02                            loc_13976:
00011B02 3428 0008                  		move.w	8(a0),d2
00011B06 0C02 002C                  		cmpi.b	#$2C,d2
00011B0A 6400                       		bcc.s	loc_13988
00011B0C 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00011B12 4E75                       		rts	
00011B14                            ; ===========================================================================
00011B14                            
00011B14                            loc_13988:
00011B14 0C02 00E0                  		cmpi.b	#-$20,d2
00011B18 6500                       		bcs.s	loc_13996
00011B1A 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00011B20 4E75                       		rts	
00011B22                            ; ===========================================================================
00011B22                            
00011B22                            loc_13996:
00011B22 0828 0006 0001             		btst	#6,1(a0)
00011B28 6600                       		bne.s	loc_139B2
00011B2A 1228 0026                  		move.b	$26(a0),d1
00011B2E 6700                       		beq.s	locret_139C2
00011B30 0C01 0080                  		cmpi.b	#-$80,d1
00011B34 6200                       		bhi.s	locret_139C2
00011B36 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00011B3C 4E75                       		rts	
00011B3E                            ; ===========================================================================
00011B3E                            
00011B3E                            loc_139B2:
00011B3E 1228 0026                  		move.b	$26(a0),d1
00011B42 0C01 0080                  		cmpi.b	#-$80,d1
00011B46 6300                       		bls.s	locret_139C2
00011B48 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00011B4E                            
00011B4E                            locret_139C2:
00011B4E 4E75                       		rts	
00011B50                            ; End of function Sonic_Loops
00011B50                            
00011B50                            ; ---------------------------------------------------------------------------
00011B50                            ; Subroutine to	animate	Sonic's sprites
00011B50                            ; ---------------------------------------------------------------------------
00011B50                            
00011B50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011B50                            
00011B50                            
00011B50                            Sonic_Animate:				; XREF: Obj01_Control; et al
00011B50 43F9 0000 0000             		lea	(SonicAniData).l,a1
00011B56 7000                       		moveq	#0,d0
00011B58 1028 001C                  		move.b	$1C(a0),d0
00011B5C B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00011B60 6700                       		beq.s	SAnim_Do	; if not, branch
00011B62 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00011B66 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00011B6C 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00011B72                            
00011B72                            SAnim_Do:
00011B74 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00011B78 1011                       		move.b	(a1),d0
00011B7A 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00011B7C 1228 0022                  		move.b	$22(a0),d1
00011B80 0201 0001                  		andi.b	#1,d1
00011B84 0228 00FC 0001             		andi.b	#$FC,1(a0)
00011B8E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00011B92 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00011B94 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00011B98                            
00011B98                            SAnim_Do2:
00011B98 7200                       		moveq	#0,d1
00011B9A 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00011B9E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00011BA2 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00011BA4                            
00011BA4                            SAnim_Next:
00011BA4 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00011BA8 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00011BAC                            
00011BAC                            SAnim_Delay:
00011BAC 4E75                       		rts	
00011BAE                            ; ===========================================================================
00011BAE                            
00011BAE                            SAnim_End_FF:
00011BAE 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00011BB0 6600                       		bne.s	SAnim_End_FE	; if not, branch
00011BB2 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00011BB8 1029 0001                  		move.b	1(a1),d0	; read sprite number
00011BBC 60E6                       		bra.s	SAnim_Next
00011BBE                            ; ===========================================================================
00011BBE                            
00011BBE                            SAnim_End_FE:
00011BBE 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00011BC0 6600                       		bne.s	SAnim_End_FD	; if not, branch
00011BC2 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00011BCC 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00011BD0 60D2                       		bra.s	SAnim_Next
00011BD2                            ; ===========================================================================
00011BD2                            
00011BD2                            SAnim_End_FD:
00011BD2 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00011BD4 6600                       		bne.s	SAnim_End	; if not, branch
00011BD6 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00011BDC                            
00011BDC                            SAnim_End:
00011BDC 4E75                       		rts	
00011BDE                            ; ===========================================================================
00011BDE                            
00011BDE                            SAnim_WalkRun:				; XREF: SAnim_Do
00011BDE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00011BE2 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00011BE4 5200                       		addq.b	#1,d0		; is animation walking/running?
00011BE6 6600 FFB0                  		bne.w	SAnim_Do2	; if not, branch
00011BEA 7200                       		moveq	#0,d1
00011BEC 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00011BF0 1428 0022                  		move.b	$22(a0),d2
00011BF4 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00011BF8 6600                       		bne.s	loc_13A70	; if yes, branch
00011BFA 4600                       		not.b	d0		; reverse angle
00011BFC                            
00011BFC                            loc_13A70:
00011BFC 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00011C00                            
00011C00                            loc_13A78:
00011C00 0228 00FC 0001             		andi.b	#$FC,1(a0)
00011C06 B302                       		eor.b	d1,d2
00011C0C E808                       		lsr.b	#4,d0		; divide angle by $10
00011C0E 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00011C12 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00011C16 6A00                       		bpl.s	loc_13A9C
00011C18 4442                       		neg.w	d2
00011C1A                            
00011C1A                            loc_13A9C:
00011C1A 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00011C20 0C42 0300                  		cmpi.w	#$300,d2	; is Sonic at running speed?
00011C24 6400                       		bcc.s	loc_13AB4	; if yes, branch
00011C26 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00011C2C 1200                       		move.b	d0,d1
00011C2E E209                       		lsr.b	#1,d1
00011C32                            
00011C32                            loc_13AB4:
00011C34 1600                       		move.b	d0,d3
00011C36 4442                       		neg.w	d2
00011C38 0642 0800                  		addi.w	#$800,d2
00011C3C 6A00                       		bpl.s	loc_13AC2
00011C3E 7400                       		moveq	#0,d2
00011C40                            
00011C40                            loc_13AC2:
00011C40 E04A                       		lsr.w	#8,d2
00011C42 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00011C46 6100 FF50                  		bsr.w	SAnim_Do2
00011C4A 4E75                       		rts	
00011C4C                            
00011C4C                            ; End of function Sonic_Animate
00011C4C                            
00011C4C                            ; ===========================================================================
00011C4C                            SonicAniData:
00011C4C                            	include "_anim\Sonic.asm"
00011C4C                            ; ---------------------------------------------------------------------------
00011C4C                            ; Animation script - Sonic
00011C4C                            ; ---------------------------------------------------------------------------
00011C4C 0000                       		dc.w SonAni_Walk-SonicAniData
00011C4E 0000                       		dc.w SonAni_Run-SonicAniData
00011C50 0000                       		dc.w MarioAni_Jump-SonicAniData
00011C52 0000                       		dc.w MarioAni_Fall-SonicAniData
00011C54 0000                       		dc.w SonAni_Push-SonicAniData
00011C56 0000                       		dc.w SonAni_Wait-SonicAniData
00011C58 0000                       		dc.w SonAni_Balance-SonicAniData
00011C5A 0000                       		dc.w SonAni_LookUp-SonicAniData
00011C5C 0000                       		dc.w SonAni_Duck-SonicAniData
00011C5E 0000                       		dc.w SonAni_Warp1-SonicAniData
00011C60 0000                       		dc.w SonAni_Warp2-SonicAniData
00011C62 0000                       		dc.w SonAni_Warp3-SonicAniData
00011C64 0000                       		dc.w SonAni_Warp4-SonicAniData
00011C66 0000                       		dc.w SonAni_Stop-SonicAniData
00011C68 0000                       		dc.w SonAni_Float1-SonicAniData
00011C6A 0000                       		dc.w SonAni_Float2-SonicAniData
00011C6C 0000                       		dc.w SonAni_Spring-SonicAniData
00011C6E 0000                       		dc.w SonAni_LZHang-SonicAniData
00011C70 0000                       		dc.w SonAni_Leap1-SonicAniData
00011C72 0000                       		dc.w SonAni_Leap2-SonicAniData
00011C74 0000                       		dc.w SonAni_Surf-SonicAniData
00011C76 0000                       		dc.w SonAni_Bubble-SonicAniData
00011C78 0000                       		dc.w SonAni_Death1-SonicAniData
00011C7A 0000                       		dc.w SonAni_Drown-SonicAniData
00011C7C 0000                       		dc.w SonAni_Death2-SonicAniData
00011C7E 0000                       		dc.w SonAni_Shrink-SonicAniData
00011C80 0000                       		dc.w SonAni_Hurt-SonicAniData
00011C82 0000                       		dc.w SonAni_LZSlide-SonicAniData
00011C84 0000                       		dc.w SonAni_Blank-SonicAniData
00011C86 0000                       		dc.w SonAni_Float3-SonicAniData
00011C88 0000                       		dc.w SonAni_Float4-SonicAniData
00011C8A FF01 04FF                  SonAni_Walk:	dc.b $FF, 1, 4, $FF
00011C8E FF05 06FF                  SonAni_Run:	dc.b $FF, 5, 6, $FF
00011C92 3F0E FF00                  MarioAni_Jump:	dc.b $3F, $E, $FF, 0
00011C96 3F0F FF00                  MarioAni_Fall:	dc.b $3F, $F, $FF, 0
00011C9A FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00011CA2 3F01 FF00                  SonAni_Wait:	dc.b $3F, 1, $FF, 0
00011CA6 0101 0C0D 11FF             SonAni_Balance:	dc.b 1, 1, $C, $D, $11, $FF
00011CAC 3F02 FF00                  SonAni_LookUp:	dc.b $3F, 2, $FF, 0
00011CB0 3F03 FF00                  SonAni_Duck:	dc.b $3F, 3, $FF, 0
00011CB4 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00011CB8 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00011CBC 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00011CC0 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00011CC4 3F0B FF00                  SonAni_Stop:	dc.b $3F, $B, $FF, 0
00011CC8 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00011CCC 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00011CD4 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00011CD8 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00011CDC 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00011CE2 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00011CE8 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00011CEC 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00011CF4 082A 2BFF                  SonAni_Death1:	dc.b $8, $2A, $2B, $FF
00011CF8 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00011CFC 032A FD16                  SonAni_Death2:	dc.b 3,	$2A, $FD, $16
00011D00 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00011D0A 3F2F FF00                  SonAni_Hurt:	dc.b $3F, $2F, $FF, 0
00011D0E 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00011D12 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00011D16 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00011D1E 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00011D22                            		even
00011D22                            		even
00011D22                            
00011D22                            ; ---------------------------------------------------------------------------
00011D22                            ; Sonic	pattern	loading	subroutine
00011D22                            ; ---------------------------------------------------------------------------
00011D22                            
00011D22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011D22                            
00011D22                            
00011D22                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00011D22 7000                       		moveq	#0,d0
00011D24 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00011D28 B038 F766                  		cmp.b	($FFFFF766).w,d0
00011D2C 6700                       		beq.s	locret_13C96
00011D2E 11C0 F766                  		move.b	d0,($FFFFF766).w
00011D32 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00011D3A D4F2 0000                  		adda.w	(a2,d0.w),a2
00011D3E 7A00                       		moveq	#0,d5
00011D40 1A1A                       		move.b	(a2)+,d5
00011D42 5345                       		subq.w	#1,d5
00011D44 6B00                       		bmi.s	locret_13C96
00011D46 383C F000                  		move.w	#$F000,d4
00011D4A 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00011D50                            
00011D50                            SPLC_ReadEntry:
00011D50 7200                       		moveq	#0,d1
00011D52 121A                       		move.b	(a2)+,d1
00011D54 E149                       		lsl.w	#8,d1
00011D56 121A                       		move.b	(a2)+,d1
00011D58 3601                       		move.w	d1,d3
00011D5A E04B                       		lsr.w	#8,d3
00011D5C 0243 00F0                  		andi.w	#$F0,d3
00011D60 0643 0010                  		addi.w	#$10,d3
00011D64 0241 0FFF                  		andi.w	#$FFF,d1
00011D68 EB89                       		lsl.l	#5,d1
00011D6C 3404                       		move.w	d4,d2
00011D72 4EB9 0000 10BE             		jsr	(QueueDMATransfer).l
00011D78 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00011D7C                            
00011D7C                            locret_13C96:
00011D7C 4E75                       		rts	
00011D7E                            ; End of function LoadSonicDynPLC
00011D7E                            
00011D7E                            
00011D7E                            		include	"Objects/PowerUps/code.asm"
00011D7E                            ; ====================================================================================================
00011D7E                            ; Power Up Object
00011D7E                            ; ====================================================================================================
00011D7E                            
00011D7E                            ; $30(a0)   flower and cape's turn timer
00011D7E                            
00011D7E                            ObjPowerUp:
00011D7E 7000                               moveq   #0,d0
00011D80 1028 0024                  	move.b	$24(a0),d0
00011D84 323B 0000                  	move.w  ObjPowerUp_Index(pc,d0.w),d1
00011D88 4EFB 1000                  	jmp ObjPowerUp_Index(pc,d1.w)
00011D8C                            ; --------------------------------------------------
00011D8C                            ; Power Up Object Routine Index
00011D8C                            ; --------------------------------------------------
00011D8C                            ObjPowerUp_Index:
00011D8C 0000                               dc.w    ObjPowerUp_Init-ObjPowerUp_Index
00011D8E 0000                               dc.w    ObjPowerUp_Super-ObjPowerUp_Index   ; Super mushroom
00011D90 0000                               dc.w    ObjPowerUp_Fire-ObjPowerUp_Index    ; Fire flower
00011D92 0000                               dc.w    ObjPowerUp_Cape-ObjPowerUp_Index    ; Cape feather
00011D94 0000                               dc.w    ObjPowerUp_1Up-ObjPowerUp_Index ; 1-Up msuhroom
00011D96 0000                               dc.w    ObjPowerUp_Star-ObjPowerUp_Index    ; Invincibility star
00011D98 0000                               dc.w    ObjPowerUp_Collect-ObjPowerUp_Index
00011D9A                            ; --------------------------------------------------
00011D9A                            ObjPowerUp_Init:
00011D9A 1028 0028                          move.b  $28(a0),d0 ; Get the object's subtype
00011D9E E308                               lsl.b   #1,d0   ; Multiply it by 2
00011DA2 1140 0024                          move.b  d0,$24(a0)  ; Determines what object code to run
00011DA6 117C 0004 0001                     move.b  #4,1(a0)
00011DAC 317C 0680 0002             	move.w	#$680,2(a0)
00011DB2 217C 0000 0000 0004                move.l	#Map_PowerUps,4(a0)
00011DBA 117C 0007 0016                     move.b  #7,$16(a0)
00011DC0 117C 0007 0017                     move.b  #7,$17(a0)
00011DC6 117C 0003 0018                     move.b	#3,$18(a0)
00011DCC 117C 0008 0019                     move.b	#8,$19(a0)
00011DD2 4E75                               rts
00011DD4                            
00011DD4                            ObjPowerUp_Super:
00011DD4 1168 0028 001A                     move.b  $28(a0),$1A(a0)
00011DDA 4EBA 986C                          jsr ObjectFall
00011DDE 4EB9 0000 0000                     jsr ObjHitFloor
00011DE4 4A41                               tst.w   d1
00011DE6 6A00                               bpl.s   @MoveObj
00011DEC 4268 0012                          clr.w   $12(a0)
00011DF0                            
00011DF0                                @MoveObj:
00011DF4 4EFA 98A4                          jmp DisplaySprite
00011DF8                            
00011DF8                            ObjPowerUp_Fire:
00011DF8 1168 0028 001A                     move.b  $28(a0),$1A(a0)
00011DFE 4A28 0030                          tst.b   $30(a0) ; Timer code doesn't work, plz fix
00011E02 6600                               bne.s   @Display
00011E04 0868 0000 0001                     bchg    #0,1(a0)
00011E0A 117C 000F 0030                     move.b  #15,$30(a0)
00011E10                            
00011E10                                @Display:
00011E10 5328 0030                          subq.b    #1,$30(a0)
00011E14 4EBA 9884                          jsr DisplaySprite
00011E18 4E75                               rts
00011E1A                            
00011E1A                            ObjPowerUp_Cape:
00011E1A 4E75                               rts
00011E1C                            
00011E1C                            ObjPowerUp_1Up:
00011E1C 1168 0028 001A                     move.b  $28(a0),$1A(a0)
00011E22 4EBA 9824                          jsr ObjectFall
00011E26 4EB9 0000 0000                     jsr ObjHitFloor
00011E2C 4A41                               tst.w   d1
00011E2E 6A00                               bpl.s   @MoveObj
00011E34 4268 0012                          clr.w   $12(a0)
00011E38                            
00011E38                                @MoveObj:
00011E3C 4EFA 985C                          jmp DisplaySprite
00011E40                            
00011E40                            ObjPowerUp_Star:
00011E40                            ObjPowerUp_Collect:
00011E40                            
00011E40                            Nem_PowerUps:
00011E40                                    incbin  "Objects/PowerUps/tiles.nem"
00011F40                                    even
00011F40                            
00011F40                            Map_PowerUps:
00011F40                                    include "Objects/PowerUps/mappings.asm"
00011F40                            Map_5a4a:
00011F40 0000                       Map_5a4a_0: 	dc.w Map_5a4a_8-Map_5a4a
00011F42 0000                       Map_5a4a_2: 	dc.w Map_5a4a_E-Map_5a4a
00011F44 0000                       Map_5a4a_4: 	dc.w Map_5a4a_14-Map_5a4a
00011F46 0000                       Map_5a4a_6: 	dc.w Map_5a4a_1A-Map_5a4a
00011F48 01                         Map_5a4a_8: 	dc.b $1
00011F49 F805 2000 F8               	dc.b $F8, $5, $20, $0, $F8
00011F4E 01                         Map_5a4a_E: 	dc.b $1
00011F4F F805 0004 F8               	dc.b $F8, $5, $0, $4, $F8
00011F54 01                         Map_5a4a_14: 	dc.b $1
00011F55 F805 0008 F8               	dc.b $F8, $5, $0, $8, $F8
00011F5A 01                         Map_5a4a_1A: 	dc.b $1
00011F5B F805 0000 F8               	dc.b $F8, $5, $0, $0, $F8
00011F60                            	even
00011F60                            	even
00011F60                                    even
00011F60                                    even
00011F60                            		include	"Objects/Hazards/Green Bubble/code.asm"
00011F60                            ; ====================================================================================================
00011F60                            ; Green Bubble Object in Vanilla Ghost House
00011F60                            ; ====================================================================================================
00011F60                            ObjGreenBubble:
00011F60 7000                               moveq   #0,d0
00011F62 1028 0024                  	    move.b	$24(a0),d0
00011F66 323B 0000                  	    move.w  ObjGreenBubble_Index(pc,d0.w),d1
00011F6A 4EFB 1000                  	    jmp ObjGreenBubble_Index(pc,d1.w)
00011F6E                            ; --------------------------------------------------
00011F6E                            ; Green Bubble Object Index Routine
00011F6E                            ; --------------------------------------------------
00011F6E                            ObjGreenBubble_Index:
00011F6E 0000                               dc.w    ObjGreenBubble_Init-ObjGreenBubble_Index
00011F70 0000                               dc.w    ObjGreenBubble_Main-ObjGreenBubble_Index
00011F72                            ; --------------------------------------------------
00011F72                            ObjGreenBubble_Init:
00011F72 5428 0024                          addq.b  #2,$24(a0)
00011F76 117C 0004 0001                     move.b  #4,1(a0)
00011F7C 317C 0300 0002             	    move.w	#$300,2(a0)
00011F82 217C 0000 0000 0004                move.l	#Map_GreenBubble,4(a0)
00011F8A 117C 0018 0016                     move.b  #24,$16(a0)
00011F90 117C 0018 0017                     move.b  #24,$17(a0)
00011F96 117C 0000 0018                     move.b	#0,$18(a0)
00011F9C 117C 0020 0019                     move.b	#32,$19(a0)
00011FA2 4E75                               rts
00011FA4                            
00011FA4                            ObjGreenBubble_Main:
00011FA4 43F9 0000 0000                     lea (Ani_GreenBubble).l,a1
00011FAA 4EB9 0000 87C0                     jsr AnimateSprite
00011FB0 4EFA 96E8                          jmp DisplaySprite
00011FB4                            
00011FB4                            
00011FB4                            Nem_GreenBubble:
00011FB4                                    incbin  "Objects/Hazards/Green Bubble/tiles.nem"
00012398 00                                 even
00012398                            
00012398                            Map_GreenBubble:
00012398                                    include "Objects/Hazards/Green Bubble/mappings.asm"
00012398                            Map_29b3:
00012398 0000                       Map_29b3_0: 	dc.w Map_29b3_C-Map_29b3
0001239A 0000                       Map_29b3_2: 	dc.w Map_29b3_21-Map_29b3
0001239C 0000                       Map_29b3_4: 	dc.w Map_29b3_36-Map_29b3
0001239E 0000                       Map_29b3_6: 	dc.w Map_29b3_4B-Map_29b3
000123A0 0000                       Map_29b3_8: 	dc.w Map_29b3_60-Map_29b3
000123A2 0000                       Map_29b3_A: 	dc.w Map_29b3_75-Map_29b3
000123A4 04                         Map_29b3_C: 	dc.b $4
000123A5 E00F 0000 E0               	dc.b $E0, $F, $0, $0, $E0
000123AA E00F 0010 00               	dc.b $E0, $F, $0, $10, $0
000123AF 000F 1020 E0               	dc.b $0, $F, $10, $20, $E0
000123B4 000F 1030 00               	dc.b $0, $F, $10, $30, $0
000123B9 04                         Map_29b3_21: 	dc.b $4
000123BA E00F E040 E0               	dc.b $E0, $F, $E0, $40, $E0
000123BF E00F E840 00               	dc.b $E0, $F, $E8, $40, $0
000123C4 000F F040 E0               	dc.b $0, $F, $F0, $40, $E0
000123C9 000F F840 00               	dc.b $0, $F, $F8, $40, $0
000123CE 04                         Map_29b3_36: 	dc.b $4
000123CF E00F 0050 E0               	dc.b $E0, $F, $0, $50, $E0
000123D4 E00F 0060 00               	dc.b $E0, $F, $0, $60, $0
000123D9 000F 1050 E0               	dc.b $0, $F, $10, $50, $E0
000123DE 000F 1060 00               	dc.b $0, $F, $10, $60, $0
000123E3 04                         Map_29b3_4B: 	dc.b $4
000123E4 E00F E070 E0               	dc.b $E0, $F, $E0, $70, $E0
000123E9 E00F E870 00               	dc.b $E0, $F, $E8, $70, $0
000123EE 000F F070 E0               	dc.b $0, $F, $F0, $70, $E0
000123F3 000F F870 00               	dc.b $0, $F, $F8, $70, $0
000123F8 04                         Map_29b3_60: 	dc.b $4
000123F9 E00F 0080 E0               	dc.b $E0, $F, $0, $80, $E0
000123FE E00F 0090 00               	dc.b $E0, $F, $0, $90, $0
00012403 000F 1080 E0               	dc.b $0, $F, $10, $80, $E0
00012408 000F 1090 00               	dc.b $0, $F, $10, $90, $0
0001240D 04                         Map_29b3_75: 	dc.b $4
0001240E E00F E0A0 E0               	dc.b $E0, $F, $E0, $A0, $E0
00012413 E00F E8A0 00               	dc.b $E0, $F, $E8, $A0, $0
00012418 000F F0A0 E0               	dc.b $0, $F, $F0, $A0, $E0
0001241D 000F F8A0 00               	dc.b $0, $F, $F8, $A0, $0
00012422                            	even
00012422                            	even
00012422                            
00012422                            Ani_GreenBubble:
00012422 0000                               dc.w    GrBubAni0-Ani_GreenBubble
00012424 0000                               dc.w    GrBubAni1-Ani_GreenBubble
00012426 0000                               dc.w    GrBubAni2-Ani_GreenBubble
00012428                            
00012428                            GrBubAni0:
00012428 0100 0100 01FD 01                  dc.b    1, 0, 1, 0, 1, $FD, 1
0001242F                            GrBubAni1:
0001242F 0102 0302 03FD 02                  dc.b    1, 2, 3, 2, 3, $FD, 2
00012436                            GrBubAni2:
00012436 0104 0504 05FD 00                  dc.b    1, 4, 5, 4, 5, $FD, 0
0001243E 00                                 even
0001243E 00                                 even
0001243E                            
0001243E                            ; ===========================================================================
0001243E                            ; ---------------------------------------------------------------------------
0001243E                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
0001243E                            ; ---------------------------------------------------------------------------
0001243E                            
0001243E                            Obj0A:					; XREF: Obj_Index
0001243E 7000                       		moveq	#0,d0
00012440 1028 0024                  		move.b	$24(a0),d0
00012444 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00012448 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
0001244C                            ; ===========================================================================
0001244C 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00012450 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00012454 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00012458 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
0001245C 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
0001245E                            ; ===========================================================================
0001245E                            
0001245E                            Obj0A_Main:				; XREF: Obj0A_Index
0001245E 5428 0024                  		addq.b	#2,$24(a0)
00012462 217C 0001 0A20 0004        		move.l	#Map_obj64,4(a0)
0001246A 317C 8348 0002             		move.w	#$8348,2(a0)
00012470 117C 0084 0001             		move.b	#$84,1(a0)
00012476 117C 0010 0019             		move.b	#$10,$19(a0)
0001247C 117C 0001 0018             		move.b	#1,$18(a0)
00012482 1028 0028                  		move.b	$28(a0),d0
00012486 6A00                       		bpl.s	loc_13D00
00012488 5028 0024                  		addq.b	#8,$24(a0)
0001248C 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00012494 317C 0440 0002             		move.w	#$440,2(a0)
0001249A 0240 007F                  		andi.w	#$7F,d0
0001249E 1140 0033                  		move.b	d0,$33(a0)
000124A2 6000 0000                  		bra.w	Obj0A_Countdown
000124A6                            ; ===========================================================================
000124A6                            
000124A6                            loc_13D00:
000124A6 1140 001C                  		move.b	d0,$1C(a0)
000124AA 3168 0008 0030             		move.w	8(a0),$30(a0)
000124B0 317C FF78 0012             		move.w	#-$88,$12(a0)
000124B6                            
000124B6                            Obj0A_Animate:				; XREF: Obj0A_Index
000124B6 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000124BC 4EB9 0000 87C0             		jsr	AnimateSprite
000124C2                            
000124C2                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000124C2 3038 F646                  		move.w	($FFFFF646).w,d0
000124C6 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000124CA 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000124CC 117C 0006 0024             		move.b	#6,$24(a0)
000124D2 5E28 001C                  		addq.b	#7,$1C(a0)
000124D6 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000124DC 6700                       		beq.s	Obj0A_Display
000124DE 6000                       		bra.s	Obj0A_Display
000124E0                            ; ===========================================================================
000124E0                            
000124E0                            Obj0A_Wobble:
000124E0 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000124E4 6700                       		beq.s	loc_13D44
000124E6 5868 0030                  		addq.w	#4,$30(a0)
000124EA                            
000124EA                            loc_13D44:
000124EA 1028 0026                  		move.b	$26(a0),d0
000124EE 5228 0026                  		addq.b	#1,$26(a0)
000124F2 0240 007F                  		andi.w	#$7F,d0
000124F6 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000124FC 1031 0000                  		move.b	(a1,d0.w),d0
00012500 4880                       		ext.w	d0
00012506 3140 0008                  		move.w	d0,8(a0)
0001250A 6100                       		bsr.s	Obj0A_ShowNumber
0001250C 4EBA 9166                  		jsr	SpeedToPos
00012510 4A28 0001                  		tst.b	1(a0)
00012514 6A00                       		bpl.s	Obj0A_Delete
00012516 4EFA 9182                  		jmp	DisplaySprite
0001251A                            ; ===========================================================================
0001251A                            
0001251A                            Obj0A_Delete:
0001251A 4EFA 91BA                  		jmp	DeleteObject
0001251E                            ; ===========================================================================
0001251E                            
0001251E                            Obj0A_Display:				; XREF: Obj0A_Index
0001251E 6100                       		bsr.s	Obj0A_ShowNumber
00012520 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00012526 4EB9 0000 87C0             		jsr	AnimateSprite
0001252C 4EFA 916C                  		jmp	DisplaySprite
00012530                            ; ===========================================================================
00012530                            
00012530                            Obj0A_Delete2:				; XREF: Obj0A_Index
00012530 4EFA 91A4                  		jmp	DeleteObject
00012534                            ; ===========================================================================
00012534                            
00012534                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00012534 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
0001253A 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
0001253C 5368 0038                  		subq.w	#1,$38(a0)
00012540 6600                       		bne.s	Obj0A_Display2
00012542 117C 000E 0024             		move.b	#$E,$24(a0)
00012548 5E28 001C                  		addq.b	#7,$1C(a0)
0001254C 60D0                       		bra.s	Obj0A_Display
0001254E                            ; ===========================================================================
0001254E                            
0001254E                            Obj0A_Display2:
0001254E 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00012554 4EB9 0000 87C0             		jsr	AnimateSprite
0001255A 4A28 0001                  		tst.b	1(a0)
0001255E 6A00                       		bpl.s	Obj0A_Delete3
00012560 4EFA 9138                  		jmp	DisplaySprite
00012564                            ; ===========================================================================
00012564                            
00012564                            Obj0A_Delete3:
00012564 4EFA 9170                  		jmp	DeleteObject
00012568                            ; ===========================================================================
00012568                            
00012568                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00012568 4A68 0038                  		tst.w	$38(a0)
0001256C 6700                       		beq.s	locret_13E1A
0001256E 5368 0038                  		subq.w	#1,$38(a0)
00012572 6600                       		bne.s	locret_13E1A
00012574 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
0001257A 6400                       		bcc.s	locret_13E1A
0001257C 317C 000F 0038             		move.w	#$F,$38(a0)
00012582 4268 0012                  		clr.w	$12(a0)
00012586 117C 0080 0001             		move.b	#$80,1(a0)
0001258C 3028 0008                  		move.w	8(a0),d0
00012594 0640 0080                  		addi.w	#$80,d0
00012598 3140 0008                  		move.w	d0,8(a0)
0001259C 3028 000C                  		move.w	$C(a0),d0
000125A4 0640 0080                  		addi.w	#$80,d0
000125A8 3140 000A                  		move.w	d0,$A(a0)
000125AC 117C 000C 0024             		move.b	#$C,$24(a0)
000125B2                            
000125B2                            locret_13E1A:
000125B2 4E75                       		rts	
000125B4                            ; ===========================================================================
000125B4                            Obj0A_WobbleData:
000125B4 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000125C5 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000125D6 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
000125E7 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
000125F7 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00012604 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00012611 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001261E FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
0001262B FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00012634                            ; ===========================================================================
00012634                            
00012634                            Obj0A_Countdown:			; XREF: Obj0A_Index
00012634 4A68 002C                  		tst.w	$2C(a0)
00012638 6600 0000                  		bne.w	loc_13F86
0001263C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00012642 6400 0000                  		bcc.w	locret_1408C
00012646 0838 0006 D022             		btst	#6,($FFFFD022).w
0001264C 6700 0000                  		beq.w	locret_1408C
00012650 5368 0038                  		subq.w	#1,$38(a0)
00012654 6A00 0000                  		bpl.w	loc_13FAC
00012658 317C 003B 0038             		move.w	#59,$38(a0)
0001265E 317C 0001 0036             		move.w	#1,$36(a0)
00012664 4EB9 0000 2530             		jsr	(RandomNumber).l
0001266A 0240 0001                  		andi.w	#1,d0
0001266E 1140 0034                  		move.b	d0,$34(a0)
00012672 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00012676 0C40 0019                  		cmpi.w	#$19,d0
0001267A 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
0001267C 0C40 0014                  		cmpi.w	#$14,d0
00012680 6700                       		beq.s	Obj0A_WarnSound
00012682 0C40 000F                  		cmpi.w	#$F,d0
00012686 6700                       		beq.s	Obj0A_WarnSound
00012688 0C40 000C                  		cmpi.w	#$C,d0
0001268C 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
0001268E 6600                       		bne.s	loc_13F02
00012690 303C 0092                  		move.w	#$92,d0
00012694 4EB9 0000 101A             		jsr	(PlaySound).l	; play countdown music
0001269A                            
0001269A                            loc_13F02:
0001269A 5328 0032                  		subq.b	#1,$32(a0)
0001269E 6A00                       		bpl.s	Obj0A_ReduceAir
000126A0 1168 0033 0032             		move.b	$33(a0),$32(a0)
000126A6 08E8 0007 0036             		bset	#7,$36(a0)
000126AC 6000                       		bra.s	Obj0A_ReduceAir
000126AE                            ; ===========================================================================
000126AE                            
000126AE                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000126AE 303C 00C2                  		move.w	#$C2,d0
000126B2 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000126B8                            
000126B8                            Obj0A_ReduceAir:
000126B8 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000126BC 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000126C0 6100 0000                  		bsr.w	ResumeMusic
000126C4 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000126CA 303C 00B2                  		move.w	#$B2,d0
000126CE 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play drowning sound
000126D4 117C 000A 0034             		move.b	#$A,$34(a0)
000126DA 317C 0001 0036             		move.w	#1,$36(a0)
000126E0 317C 0078 002C             		move.w	#$78,$2C(a0)
000126E6 2F08                       		move.l	a0,-(sp)
000126E8 41F8 D000                  		lea	($FFFFD000).w,a0
000126EC 6100 F256                  		bsr.w	Sonic_ResetOnFloor
000126F0 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
000126F6 08E8 0001 0022             		bset	#1,$22(a0)
000126FC 08E8 0007 0002             		bset	#7,2(a0)
00012702 317C 0000 0012             		move.w	#0,$12(a0)
00012708 317C 0000 0010             		move.w	#0,$10(a0)
0001270E 317C 0000 0014             		move.w	#0,$14(a0)
00012714 11FC 0001 F744             		move.b	#1,($FFFFF744).w
0001271A 205F                       		movea.l	(sp)+,a0
0001271C 4E75                       		rts	
0001271E                            ; ===========================================================================
0001271E                            
0001271E                            loc_13F86:
0001271E 5368 002C                  		subq.w	#1,$2C(a0)
00012722 6600                       		bne.s	loc_13F94
00012724 11FC 0006 D024             		move.b	#6,($FFFFD024).w
0001272A 4E75                       		rts	
0001272C                            ; ===========================================================================
0001272C                            
0001272C                            loc_13F94:
0001272C 2F08                       		move.l	a0,-(sp)
0001272E 41F8 D000                  		lea	($FFFFD000).w,a0
00012732 4EBA 8F40                  		jsr	SpeedToPos
00012736 0668 0010 0012             		addi.w	#$10,$12(a0)
0001273C 205F                       		movea.l	(sp)+,a0
0001273E 6000                       		bra.s	loc_13FAC
00012740                            ; ===========================================================================
00012740                            
00012740                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00012740 6000                       		bra.s	Obj0A_MakeItem
00012742                            ; ===========================================================================
00012742                            
00012742                            loc_13FAC:
00012742 4A68 0036                  		tst.w	$36(a0)
00012746 6700 0000                  		beq.w	locret_1408C
0001274A 5368 003A                  		subq.w	#1,$3A(a0)
0001274E 6A00 0000                  		bpl.w	locret_1408C
00012752                            
00012752                            Obj0A_MakeItem:
00012752 4EB9 0000 2530             		jsr	(RandomNumber).l
00012758 0240 000F                  		andi.w	#$F,d0
0001275C 3140 003A                  		move.w	d0,$3A(a0)
00012760 4EBA 93BE                  		jsr	SingleObjLoad
00012764 6600 0000                  		bne.w	locret_1408C
00012768 12BC 000A                  		move.b	#$A,0(a1)	; load object
0001276C 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00012772 7006                       		moveq	#6,d0
00012774 0838 0000 D022             		btst	#0,($FFFFD022).w
0001277A 6700                       		beq.s	loc_13FF2
0001277C 4440                       		neg.w	d0
0001277E 137C 0040 0026             		move.b	#$40,$26(a1)
00012784                            
00012784                            loc_13FF2:
00012788 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
0001278E 137C 0006 0028             		move.b	#6,$28(a1)
00012794 4A68 002C                  		tst.w	$2C(a0)
00012798 6700 0000                  		beq.w	loc_1403E
0001279C 0268 0007 003A             		andi.w	#7,$3A(a0)
000127A2 0668 0000 003A             		addi.w	#0,$3A(a0)
000127A8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000127AC 0440 000C                  		subi.w	#$C,d0
000127B0 3340 000C                  		move.w	d0,$C(a1)
000127B4 4EB9 0000 2530             		jsr	(RandomNumber).l
000127BA 1340 0026                  		move.b	d0,$26(a1)
000127BE 3038 FE04                  		move.w	($FFFFFE04).w,d0
000127C2 0200 0003                  		andi.b	#3,d0
000127C6 6600                       		bne.s	loc_14082
000127C8 137C 000E 0028             		move.b	#$E,$28(a1)
000127CE 6000                       		bra.s	loc_14082
000127D0                            ; ===========================================================================
000127D0                            
000127D0                            loc_1403E:
000127D0 0828 0007 0036             		btst	#7,$36(a0)
000127D6 6700                       		beq.s	loc_14082
000127D8 3438 FE14                  		move.w	($FFFFFE14).w,d2
000127DC E24A                       		lsr.w	#1,d2
000127DE 4EB9 0000 2530             		jsr	(RandomNumber).l
000127E4 0240 0003                  		andi.w	#3,d0
000127E8 6600                       		bne.s	loc_1406A
000127EA 08E8 0006 0036             		bset	#6,$36(a0)
000127F0 6600                       		bne.s	loc_14082
000127F2 1342 0028                  		move.b	d2,$28(a1)
000127F6 337C 001C 0038             		move.w	#$1C,$38(a1)
000127FC                            
000127FC                            loc_1406A:
000127FC 4A28 0034                  		tst.b	$34(a0)
00012800 6600                       		bne.s	loc_14082
00012802 08E8 0006 0036             		bset	#6,$36(a0)
00012808 6600                       		bne.s	loc_14082
0001280A 1342 0028                  		move.b	d2,$28(a1)
0001280E 337C 001C 0038             		move.w	#$1C,$38(a1)
00012814                            
00012814                            loc_14082:
00012814 5328 0034                  		subq.b	#1,$34(a0)
00012818 6A00                       		bpl.s	locret_1408C
0001281A 4268 0036                  		clr.w	$36(a0)
0001281E                            
0001281E                            locret_1408C:
0001281E 4E75                       		rts	
00012820                            
00012820                            ; ---------------------------------------------------------------------------
00012820                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00012820                            ; ---------------------------------------------------------------------------
00012820                            
00012820                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012820                            
00012820                            
00012820                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00012820 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00012826 6200                       		bhi.s	loc_140AC
00012828 303C 0082                  		move.w	#$82,d0		; play LZ music
0001282C 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	0103 (SBZ3)
00012832 6600                       		bne.s	loc_140A6
00012834 303C 0086                  		move.w	#$86,d0		; play SBZ music
00012838                            
00012838                            loc_140A6:
00012838 4EB9 0000 101A             		jsr	(PlaySound).l
0001283E                            
0001283E                            loc_140AC:
0001283E 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00012844 4238 D372                  		clr.b	($FFFFD372).w
00012848 4E75                       		rts	
0001284A                            ; End of function ResumeMusic
0001284A                            
0001284A                            ; ===========================================================================
0001284A                            Ani_obj0A:
0001284A                            	include "_anim\obj0A.asm"
0001284A                            ; ---------------------------------------------------------------------------
0001284A                            ; Animation script - countdown numbers and bubbles (LZ)
0001284A                            ; ---------------------------------------------------------------------------
0001284A 0000                       		dc.w byte_140D6-Ani_obj0A
0001284C 0000                       		dc.w byte_140E0-Ani_obj0A
0001284E 0000                       		dc.w byte_140EA-Ani_obj0A
00012850 0000                       		dc.w byte_140F4-Ani_obj0A
00012852 0000                       		dc.w byte_140FE-Ani_obj0A
00012854 0000                       		dc.w byte_14108-Ani_obj0A
00012856 0000                       		dc.w byte_14112-Ani_obj0A
00012858 0000                       		dc.w byte_14118-Ani_obj0A
0001285A 0000                       		dc.w byte_14120-Ani_obj0A
0001285C 0000                       		dc.w byte_14128-Ani_obj0A
0001285E 0000                       		dc.w byte_14130-Ani_obj0A
00012860 0000                       		dc.w byte_14138-Ani_obj0A
00012862 0000                       		dc.w byte_14140-Ani_obj0A
00012864 0000                       		dc.w byte_14148-Ani_obj0A
00012866 0000                       		dc.w byte_1414A-Ani_obj0A
00012868 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00012872 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
0001287C 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00012886 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00012890 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
0001289A 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000128A4 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
000128AA 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
000128B2 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
000128BA 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
000128C2 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
000128CA 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
000128D2 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
000128DA 0EFC                       byte_14148:	dc.b $E, $FC
000128DC 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
000128E2                            		even
000128E2                            		even
000128E2                            
000128E2                            ; ---------------------------------------------------------------------------
000128E2                            ; Sprite mappings - drowning countdown numbers (LZ)
000128E2                            ; ---------------------------------------------------------------------------
000128E2                            Map_obj0A:
000128E2                            	include "_maps\obj0A.asm"
000128E2                            ; ---------------------------------------------------------------------------
000128E2                            ; Sprite mappings - drowning countdown numbers (LZ)
000128E2                            ; ---------------------------------------------------------------------------
000128E2 0000                       		dc.w byte_14152-Map_obj0A
000128E4 01                         byte_14152:	dc.b 1
000128E5 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
000128EA                            		even
000128EA                            		even
000128EA                            
000128EA                            ; ===========================================================================
000128EA                            ; ---------------------------------------------------------------------------
000128EA                            ; Object 38 - shield and invincibility stars
000128EA                            ; ---------------------------------------------------------------------------
000128EA                            
000128EA                            Obj38:					; XREF: Obj_Index
000128EA 7000                       		moveq	#0,d0
000128EC 1028 0024                  		move.b	$24(a0),d0
000128F0 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
000128F4 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
000128F8                            ; ===========================================================================
000128F8 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
000128FA 0000                       		dc.w Obj38_Shield-Obj38_Index
000128FC 0000                       		dc.w Obj38_Stars-Obj38_Index
000128FE                            ; ===========================================================================
000128FE                            
000128FE                            Obj38_Main:				; XREF: Obj38_Index
000128FE 5428 0024                  		addq.b	#2,$24(a0)
00012902 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
0001290A 117C 0004 0001             		move.b	#4,1(a0)
00012910 117C 0001 0018             		move.b	#1,$18(a0)
00012916 117C 0010 0019             		move.b	#$10,$19(a0)
0001291C 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00012920 6600                       		bne.s	Obj38_DoStars	; if not, branch
00012922 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00012928 4E75                       		rts	
0001292A                            ; ===========================================================================
0001292A                            
0001292A                            Obj38_DoStars:
0001292A 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
0001292E 317C 055C 0002             		move.w	#$55C,2(a0)
00012934 4E75                       		rts	
00012936                            ; ===========================================================================
00012936                            
00012936                            Obj38_Shield:				; XREF: Obj38_Index
00012936 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001293A 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
0001293C 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00012940 6700                       		beq.s	Obj38_Delete	; if not, branch
00012942 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00012948 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001294E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00012954 43F9 0000 0000             		lea	(Ani_obj38).l,a1
0001295A 4EB9 0000 87C0             		jsr	AnimateSprite
00012960 4EFA 8D38                  		jmp	DisplaySprite
00012964                            ; ===========================================================================
00012964                            
00012964                            Obj38_RmvShield:
00012964 4E75                       		rts	
00012966                            ; ===========================================================================
00012966                            
00012966                            Obj38_Delete:
00012966 4EFA 8D6E                  		jmp	DeleteObject
0001296A                            ; ===========================================================================
0001296A                            
0001296A                            Obj38_Stars:				; XREF: Obj38_Index
0001296A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001296E 6700                       		beq.s	Obj38_Delete2	; if not, branch
00012970 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00012974 1228 001C                  		move.b	$1C(a0),d1
00012978 5301                       		subq.b	#1,d1
0001297A 6000                       		bra.s	Obj38_StarTrail
0001297C                            ; ===========================================================================
0001297C E909                       		lsl.b	#4,d1
0001297E 5801                       		addq.b	#4,d1
00012982 1228 0030                  		move.b	$30(a0),d1
00012988 5801                       		addq.b	#4,d1
0001298A 0201 000F                  		andi.b	#$F,d1
0001298E 1141 0030                  		move.b	d1,$30(a0)
00012992 6000                       		bra.s	Obj38_StarTrail2a
00012994                            ; ===========================================================================
00012994                            
00012994                            Obj38_StarTrail:			; XREF: Obj38_Stars
00012994 E709                       		lsl.b	#3,d1
00012996 1401                       		move.b	d1,d2
0001299C 5801                       		addq.b	#4,d1
000129A0 1228 0030                  		move.b	$30(a0),d1
000129A6 5801                       		addq.b	#4,d1
000129A8 0C01 0018                  		cmpi.b	#$18,d1
000129AC 6500                       		bcs.s	Obj38_StarTrail2
000129AE 7200                       		moveq	#0,d1
000129B0                            
000129B0                            Obj38_StarTrail2:
000129B0 1141 0030                  		move.b	d1,$30(a0)
000129B4                            
000129B4                            Obj38_StarTrail2a:
000129B4 43F8 CB00                  		lea	($FFFFCB00).w,a1
000129B8 43F1 0000                  		lea	(a1,d0.w),a1
000129BC 3159 0008                  		move.w	(a1)+,8(a0)
000129C0 3159 000C                  		move.w	(a1)+,$C(a0)
000129C4 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000129CA 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000129D0 4EB9 0000 87C0             		jsr	AnimateSprite
000129D6 4EFA 8CC2                  		jmp	DisplaySprite
000129DA                            ; ===========================================================================
000129DA                            
000129DA                            Obj38_Delete2:				; XREF: Obj38_Stars
000129DA 4EFA 8CFA                  		jmp	DeleteObject
000129DE                            ; ===========================================================================
000129DE                            ; ---------------------------------------------------------------------------
000129DE                            ; Object 4A - special stage entry from beta
000129DE                            ; ---------------------------------------------------------------------------
000129DE                            
000129DE                            Obj4A:					; XREF: Obj_Index
000129DE 7000                       		moveq	#0,d0
000129E0 1028 0024                  		move.b	$24(a0),d0
000129E4 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
000129E8 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
000129EC                            ; ===========================================================================
000129EC 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
000129EE 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
000129F0 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
000129F2                            ; ===========================================================================
000129F2                            
000129F2                            Obj4A_Main:				; XREF: Obj4A_Index
000129F2 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
000129F6 6700                       		beq.s	Obj4A_Main2	; if yes, branch
000129F8 4E75                       		rts	
000129FA                            ; ===========================================================================
000129FA                            
000129FA                            Obj4A_Main2:
000129FA 5428 0024                  		addq.b	#2,$24(a0)
000129FE 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00012A06 117C 0004 0001             		move.b	#4,1(a0)
00012A0C 117C 0001 0018             		move.b	#1,$18(a0)
00012A12 117C 0038 0019             		move.b	#$38,$19(a0)
00012A18 317C 0541 0002             		move.w	#$541,2(a0)
00012A1E 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00012A24                            
00012A24                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00012A24 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00012A2A 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00012A30 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00012A36 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00012A3C 4EB9 0000 87C0             		jsr	AnimateSprite
00012A42 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00012A48 6600                       		bne.s	Obj4A_Display
00012A4A 4A38 D000                  		tst.b	($FFFFD000).w
00012A4E 6700                       		beq.s	Obj4A_Display
00012A50 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00012A56 303C 00A8                  		move.w	#$A8,d0
00012A5A 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00012A60                            
00012A60                            Obj4A_Display:
00012A60 4EFA 8C38                  		jmp	DisplaySprite
00012A64                            ; ===========================================================================
00012A64                            
00012A64                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00012A64 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00012A68 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00012A6A 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00012A70 4EFA 8C64                  		jmp	DeleteObject
00012A74                            ; ===========================================================================
00012A74                            
00012A74                            Obj4A_Wait:
00012A74 4E75                       		rts	
00012A76                            ; ===========================================================================
00012A76                            ; ---------------------------------------------------------------------------
00012A76                            ; Object 08 - water splash (LZ)
00012A76                            ; ---------------------------------------------------------------------------
00012A76                            
00012A76                            Obj08:					; XREF: Obj_Index
00012A76 7000                       		moveq	#0,d0
00012A78 1028 0024                  		move.b	$24(a0),d0
00012A7C 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00012A80 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00012A84                            ; ===========================================================================
00012A84 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00012A86 0000                       		dc.w Obj08_Display-Obj08_Index
00012A88 0000                       		dc.w Obj08_Delete-Obj08_Index
00012A8A                            ; ===========================================================================
00012A8A                            
00012A8A                            Obj08_Main:				; XREF: Obj08_Index
00012A8A 5428 0024                  		addq.b	#2,$24(a0)
00012A8E 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00012A96 0028 0004 0001             		ori.b	#4,1(a0)
00012A9C 117C 0001 0018             		move.b	#1,$18(a0)
00012AA2 117C 0010 0019             		move.b	#$10,$19(a0)
00012AA8 317C 4259 0002             		move.w	#$4259,2(a0)
00012AAE 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00012AB4                            
00012AB4                            Obj08_Display:				; XREF: Obj08_Index
00012AB4 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00012ABA 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00012AC0 4EB9 0000 87C0             		jsr	AnimateSprite
00012AC6 4EFA 8BD2                  		jmp	DisplaySprite
00012ACA                            ; ===========================================================================
00012ACA                            
00012ACA                            Obj08_Delete:				; XREF: Obj08_Index
00012ACA 4EFA 8C0A                  		jmp	DeleteObject	; delete when animation	is complete
00012ACE                            ; ===========================================================================
00012ACE                            Ani_obj38:
00012ACE                            	include "_anim\obj38.asm"
00012ACE                            ; ---------------------------------------------------------------------------
00012ACE                            ; Animation script - shield and invincibility stars
00012ACE                            ; ---------------------------------------------------------------------------
00012ACE 0000                       		dc.w byte_14356-Ani_obj38
00012AD0 0000                       		dc.w byte_1435E-Ani_obj38
00012AD2 0000                       		dc.w byte_14364-Ani_obj38
00012AD4 0000                       		dc.w byte_1437E-Ani_obj38
00012AD6 0000                       		dc.w byte_14398-Ani_obj38
00012AD8 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00012AE0 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00012AE6 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00012AF7 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00012B00 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00012B11 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00012B1A 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00012B2B 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00012B34                            		even
00012B34                            		even
00012B34                            
00012B34                            ; ---------------------------------------------------------------------------
00012B34                            ; Sprite mappings - shield and invincibility stars
00012B34                            ; ---------------------------------------------------------------------------
00012B34                            Map_obj38:
00012B34                            	include "_maps\obj38.asm"
00012B34                            ; ---------------------------------------------------------------------------
00012B34                            ; Sprite mappings - shield and invincibility stars
00012B34                            ; ---------------------------------------------------------------------------
00012B34 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00012B38 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00012B3C 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00012B40 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00012B44 04                         byte_143C2:	dc.b 4
00012B45 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00012B4A E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00012B4F 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00012B54 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00012B59 04                         byte_143D7:	dc.b 4
00012B5A E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00012B5F E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00012B64 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00012B69 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00012B6E 04                         byte_143EC:	dc.b 4
00012B6F E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00012B74 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00012B79 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00012B7E 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00012B83 04                         byte_14401:	dc.b 4
00012B84 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00012B89 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00012B8E 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00012B93 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00012B98 04                         byte_14416:	dc.b 4
00012B99 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00012B9E E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00012BA3 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00012BA8 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00012BAD 04                         byte_1442B:	dc.b 4
00012BAE E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00012BB3 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00012BB8 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00012BBD 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00012BC2 04                         byte_14440:	dc.b 4
00012BC3 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00012BC8 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00012BCD 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00012BD2 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00012BD8 00                         		even
00012BD8 00                         		even
00012BD8                            
00012BD8                            Ani_obj4A:
00012BD8                            	include "_anim\obj4A.asm"
00012BD8                            ; ---------------------------------------------------------------------------
00012BD8                            ; Animation script - special stage entry effect from beta
00012BD8                            ; ---------------------------------------------------------------------------
00012BD8 0000                       		dc.w byte_14458-Ani_obj4A
00012BDA 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00012BEE                            		even
00012BEE                            		even
00012BEE                            
00012BEE                            ; ---------------------------------------------------------------------------
00012BEE                            ; Sprite mappings - special stage entry	from beta
00012BEE                            ; ---------------------------------------------------------------------------
00012BEE                            Map_obj4A:
00012BEE                            	include "_maps\obj4A.asm"
00012BEE                            ; ---------------------------------------------------------------------------
00012BEE                            ; Sprite mappings - special stage entry	from beta
00012BEE                            ; ---------------------------------------------------------------------------
00012BEE 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00012BF2 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00012BF6 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00012BFA 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00012BFE 03                         byte_1447C:	dc.b 3
00012BFF F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00012C04 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00012C09 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00012C0E 03                         byte_1448C:	dc.b 3
00012C0F F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00012C14 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00012C19 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00012C1E 05                         byte_1449C:	dc.b 5
00012C1F E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00012C24 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00012C29 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00012C2E 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00012C33 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00012C38 09                         byte_144B6:	dc.b 9
00012C39 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00012C3E F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00012C43 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00012C48 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00012C4D F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00012C52 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00012C57 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00012C5C 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00012C61 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00012C66 12                         byte_144E4:	dc.b $12
00012C67 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00012C6C F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00012C71 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00012C76 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00012C7B 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00012C80 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00012C85 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00012C8A F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00012C8F 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00012C94 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00012C99 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00012C9E 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00012CA3 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00012CA8 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00012CAD 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00012CB2 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00012CB7 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00012CBC F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00012CC1 11                         byte_1453F:	dc.b $11
00012CC2 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00012CC7 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00012CCC 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00012CD1 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00012CD6 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00012CDB F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00012CE0 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00012CE5 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00012CEA 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00012CEF 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00012CF4 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00012CF9 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00012CFE F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00012D03 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00012D08 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00012D0D 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00012D12 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00012D17 09                         byte_14595:	dc.b 9
00012D18 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00012D1D 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00012D22 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00012D27 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00012D2C FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00012D31 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00012D36 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00012D3B 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00012D40 04                         		dc.b 4
00012D41 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00012D46                            		even
00012D46                            		even
00012D46                            
00012D46                            Ani_obj08:
00012D46                            	include "_anim\obj08.asm"
00012D46                            ; ---------------------------------------------------------------------------
00012D46                            ; Animation script - water splash (LZ)
00012D46                            ; ---------------------------------------------------------------------------
00012D46 0000                       		dc.w byte_145C6-Ani_obj08
00012D48 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00012D4E                            		even
00012D4E                            		even
00012D4E                            
00012D4E                            ; ---------------------------------------------------------------------------
00012D4E                            ; Sprite mappings - water splash (LZ)
00012D4E                            ; ---------------------------------------------------------------------------
00012D4E                            Map_obj08:
00012D4E                            	include "_maps\obj08.asm"
00012D4E                            ; ---------------------------------------------------------------------------
00012D4E                            ; Sprite mappings - water splash (LZ)
00012D4E                            ; ---------------------------------------------------------------------------
00012D4E 0000                       		dc.w byte_145D2-Map_obj08
00012D50 0000                       		dc.w byte_145DD-Map_obj08
00012D52 0000                       		dc.w byte_145E8-Map_obj08
00012D54 02                         byte_145D2:	dc.b 2
00012D55 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00012D5A FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00012D5F 02                         byte_145DD:	dc.b 2
00012D60 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00012D65 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00012D6A 01                         byte_145E8:	dc.b 1
00012D6B E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00012D70                            		even
00012D70                            		even
00012D70                            
00012D70                            ; ---------------------------------------------------------------------------
00012D70                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00012D70                            ; ---------------------------------------------------------------------------
00012D70                            
00012D70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012D70                            
00012D70                            
00012D70                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00012D70 0828 0003 0022             		btst	#3,$22(a0)
00012D76 6700                       		beq.s	loc_14602
00012D78 7000                       		moveq	#0,d0
00012D7A 11C0 F768                  		move.b	d0,($FFFFF768).w
00012D7E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00012D82 4E75                       		rts	
00012D84                            ; ===========================================================================
00012D84                            
00012D84                            loc_14602:
00012D84 7003                       		moveq	#3,d0
00012D86 11C0 F768                  		move.b	d0,($FFFFF768).w
00012D8A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00012D8E 1028 0026                  		move.b	$26(a0),d0
00012D92 0600 0020                  		addi.b	#$20,d0
00012D96 6A00                       		bpl.s	loc_14624
00012D98 1028 0026                  		move.b	$26(a0),d0
00012D9C 6A00                       		bpl.s	loc_1461E
00012D9E 5300                       		subq.b	#1,d0
00012DA0                            
00012DA0                            loc_1461E:
00012DA0 0600 0020                  		addi.b	#$20,d0
00012DA4 6000                       		bra.s	loc_14630
00012DA6                            ; ===========================================================================
00012DA6                            
00012DA6                            loc_14624:
00012DA6 1028 0026                  		move.b	$26(a0),d0
00012DAA 6A00                       		bpl.s	loc_1462C
00012DAC 5200                       		addq.b	#1,d0
00012DAE                            
00012DAE                            loc_1462C:
00012DAE 0600 001F                  		addi.b	#$1F,d0
00012DB2                            
00012DB2                            loc_14630:
00012DB2 0200 00C0                  		andi.b	#$C0,d0
00012DB6 0C00 0040                  		cmpi.b	#$40,d0
00012DBA 6700 0000                  		beq.w	Sonic_WalkVertL
00012DBE 0C00 0080                  		cmpi.b	#$80,d0
00012DC2 6700 0000                  		beq.w	Sonic_WalkCeiling
00012DC6 0C00 00C0                  		cmpi.b	#$C0,d0
00012DCA 6700 0000                  		beq.w	Sonic_WalkVertR
00012DCE 3428 000C                  		move.w	$C(a0),d2
00012DD2 3628 0008                  		move.w	8(a0),d3
00012DD6 7000                       		moveq	#0,d0
00012DD8 1028 0016                  		move.b	$16(a0),d0
00012DDC 4880                       		ext.w	d0
00012DE0 1028 0017                  		move.b	$17(a0),d0
00012DE4 4880                       		ext.w	d0
00012DE8 49F8 F768                  		lea	($FFFFF768).w,a4
00012DEC 367C 0010                  		movea.w	#$10,a3
00012DF0 3C3C 0000                  		move.w	#0,d6
00012DF4 7A0D                       		moveq	#$D,d5
00012DF6 6100 0000                  		bsr.w	FindFloor
00012DFA 3F01                       		move.w	d1,-(sp)
00012DFC 3428 000C                  		move.w	$C(a0),d2
00012E00 3628 0008                  		move.w	8(a0),d3
00012E04 7000                       		moveq	#0,d0
00012E06 1028 0016                  		move.b	$16(a0),d0
00012E0A 4880                       		ext.w	d0
00012E0E 1028 0017                  		move.b	$17(a0),d0
00012E12 4880                       		ext.w	d0
00012E14 4440                       		neg.w	d0
00012E18 49F8 F76A                  		lea	($FFFFF76A).w,a4
00012E1C 367C 0010                  		movea.w	#$10,a3
00012E20 3C3C 0000                  		move.w	#0,d6
00012E24 7A0D                       		moveq	#$D,d5
00012E26 6100 0000                  		bsr.w	FindFloor
00012E2A 301F                       		move.w	(sp)+,d0
00012E2C 6100 0000                  		bsr.w	Sonic_Angle
00012E30 4A41                       		tst.w	d1
00012E32 6700                       		beq.s	locret_146BE
00012E34 6A00                       		bpl.s	loc_146C0
00012E36 0C41 FFF2                  		cmpi.w	#-$E,d1
00012E3A 6D00                       		blt.s	locret_146E6
00012E40                            
00012E40                            locret_146BE:
00012E40 4E75                       		rts	
00012E42                            ; ===========================================================================
00012E42                            
00012E42                            loc_146C0:
00012E42 0C41 000E                  		cmpi.w	#$E,d1
00012E46 6E00                       		bgt.s	loc_146CC
00012E48                            
00012E48                            loc_146C6:
00012E4C 4E75                       		rts	
00012E4E                            ; ===========================================================================
00012E4E                            
00012E4E                            loc_146CC:
00012E4E 4A28 0038                  		tst.b	$38(a0)
00012E52 66F4                       		bne.s	loc_146C6
00012E54 08E8 0001 0022             		bset	#1,$22(a0)
00012E5A 08A8 0005 0022             		bclr	#5,$22(a0)
00012E60 117C 0001 001D             		move.b	#1,$1D(a0)
00012E66 4E75                       		rts	
00012E68                            ; ===========================================================================
00012E68                            
00012E68                            locret_146E6:
00012E68 4E75                       		rts	
00012E6A                            ; End of function Sonic_AnglePos
00012E6A                            
00012E6A                            ; ===========================================================================
00012E6A 2428 0008                  		move.l	8(a0),d2
00012E6E 3028 0010                  		move.w	$10(a0),d0
00012E72 48C0                       		ext.l	d0
00012E74 E180                       		asl.l	#8,d0
00012E78 2142 0008                  		move.l	d2,8(a0)
00012E7C 303C 0038                  		move.w	#$38,d0
00012E80 48C0                       		ext.l	d0
00012E82 E180                       		asl.l	#8,d0
00012E86 2143 000C                  		move.l	d3,$C(a0)
00012E8A 4E75                       		rts	
00012E8C                            ; ===========================================================================
00012E8C                            
00012E8C                            locret_1470A:
00012E8C 4E75                       		rts	
00012E8E                            ; ===========================================================================
00012E8E 2628 000C                  		move.l	$C(a0),d3
00012E92 3028 0012                  		move.w	$12(a0),d0
00012E96 0440 0038                  		subi.w	#$38,d0
00012E9A 3140 0012                  		move.w	d0,$12(a0)
00012E9E 48C0                       		ext.l	d0
00012EA0 E180                       		asl.l	#8,d0
00012EA4 2143 000C                  		move.l	d3,$C(a0)
00012EA8 4E75                       		rts	
00012EAA 4E75                       		rts	
00012EAC                            ; ===========================================================================
00012EAC 2428 0008                  		move.l	8(a0),d2
00012EB0 2628 000C                  		move.l	$C(a0),d3
00012EB4 3028 0010                  		move.w	$10(a0),d0
00012EB8 48C0                       		ext.l	d0
00012EBA E180                       		asl.l	#8,d0
00012EBE 3028 0012                  		move.w	$12(a0),d0
00012EC2 48C0                       		ext.l	d0
00012EC4 E180                       		asl.l	#8,d0
00012EC8 2142 0008                  		move.l	d2,8(a0)
00012ECC 2143 000C                  		move.l	d3,$C(a0)
00012ED0 4E75                       		rts	
00012ED2                            
00012ED2                            ; ---------------------------------------------------------------------------
00012ED2                            ; Subroutine to	change Sonic's angle as he walks along the floor
00012ED2                            ; ---------------------------------------------------------------------------
00012ED2                            
00012ED2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012ED2                            
00012ED2                            
00012ED2                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00012ED2 1438 F76A                  		move.b	($FFFFF76A).w,d2
00012ED6 B240                       		cmp.w	d0,d1
00012ED8 6F00                       		ble.s	loc_1475E
00012EDA 1438 F768                  		move.b	($FFFFF768).w,d2
00012EDE 3200                       		move.w	d0,d1
00012EE0                            
00012EE0                            loc_1475E:
00012EE0 0802 0000                  		btst	#0,d2
00012EE4 6600                       		bne.s	loc_1476A
00012EE6 1142 0026                  		move.b	d2,$26(a0)
00012EEA 4E75                       		rts	
00012EEC                            ; ===========================================================================
00012EEC                            
00012EEC                            loc_1476A:
00012EEC 1428 0026                  		move.b	$26(a0),d2
00012EF0 0602 0020                  		addi.b	#$20,d2
00012EF4 0202 00C0                  		andi.b	#$C0,d2
00012EF8 1142 0026                  		move.b	d2,$26(a0)
00012EFC 4E75                       		rts	
00012EFE                            ; End of function Sonic_Angle
00012EFE                            
00012EFE                            ; ---------------------------------------------------------------------------
00012EFE                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00012EFE                            ; ---------------------------------------------------------------------------
00012EFE                            
00012EFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012EFE                            
00012EFE                            
00012EFE                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00012EFE 3428 000C                  		move.w	$C(a0),d2
00012F02 3628 0008                  		move.w	8(a0),d3
00012F06 7000                       		moveq	#0,d0
00012F08 1028 0017                  		move.b	$17(a0),d0
00012F0C 4880                       		ext.w	d0
00012F0E 4440                       		neg.w	d0
00012F12 1028 0016                  		move.b	$16(a0),d0
00012F16 4880                       		ext.w	d0
00012F1A 49F8 F768                  		lea	($FFFFF768).w,a4
00012F1E 367C 0010                  		movea.w	#$10,a3
00012F22 3C3C 0000                  		move.w	#0,d6
00012F26 7A0D                       		moveq	#$D,d5
00012F28 6100 0000                  		bsr.w	FindWall
00012F2C 3F01                       		move.w	d1,-(sp)
00012F2E 3428 000C                  		move.w	$C(a0),d2
00012F32 3628 0008                  		move.w	8(a0),d3
00012F36 7000                       		moveq	#0,d0
00012F38 1028 0017                  		move.b	$17(a0),d0
00012F3C 4880                       		ext.w	d0
00012F40 1028 0016                  		move.b	$16(a0),d0
00012F44 4880                       		ext.w	d0
00012F48 49F8 F76A                  		lea	($FFFFF76A).w,a4
00012F4C 367C 0010                  		movea.w	#$10,a3
00012F50 3C3C 0000                  		move.w	#0,d6
00012F54 7A0D                       		moveq	#$D,d5
00012F56 6100 0000                  		bsr.w	FindWall
00012F5A 301F                       		move.w	(sp)+,d0
00012F5C 6100 FF74                  		bsr.w	Sonic_Angle
00012F60 4A41                       		tst.w	d1
00012F62 6700                       		beq.s	locret_147F0
00012F64 6A00                       		bpl.s	loc_147F2
00012F66 0C41 FFF2                  		cmpi.w	#-$E,d1
00012F6A 6D00 FF20                  		blt.w	locret_1470A
00012F72                            
00012F72                            locret_147F0:
00012F72 4E75                       		rts	
00012F74                            ; ===========================================================================
00012F74                            
00012F74                            loc_147F2:
00012F74 0C41 000E                  		cmpi.w	#$E,d1
00012F78 6E00                       		bgt.s	loc_147FE
00012F7A                            
00012F7A                            loc_147F8:
00012F7E 4E75                       		rts	
00012F80                            ; ===========================================================================
00012F80                            
00012F80                            loc_147FE:
00012F80 4A28 0038                  		tst.b	$38(a0)
00012F84 66F4                       		bne.s	loc_147F8
00012F86 08E8 0001 0022             		bset	#1,$22(a0)
00012F8C 08A8 0005 0022             		bclr	#5,$22(a0)
00012F92 117C 0001 001D             		move.b	#1,$1D(a0)
00012F98 4E75                       		rts	
00012F9A                            ; End of function Sonic_WalkVertR
00012F9A                            
00012F9A                            ; ---------------------------------------------------------------------------
00012F9A                            ; Subroutine allowing Sonic to walk upside-down
00012F9A                            ; ---------------------------------------------------------------------------
00012F9A                            
00012F9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012F9A                            
00012F9A                            
00012F9A                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00012F9A 3428 000C                  		move.w	$C(a0),d2
00012F9E 3628 0008                  		move.w	8(a0),d3
00012FA2 7000                       		moveq	#0,d0
00012FA4 1028 0016                  		move.b	$16(a0),d0
00012FA8 4880                       		ext.w	d0
00012FAC 0A42 000F                  		eori.w	#$F,d2
00012FB0 1028 0017                  		move.b	$17(a0),d0
00012FB4 4880                       		ext.w	d0
00012FB8 49F8 F768                  		lea	($FFFFF768).w,a4
00012FBC 367C FFF0                  		movea.w	#-$10,a3
00012FC0 3C3C 1000                  		move.w	#$1000,d6
00012FC4 7A0D                       		moveq	#$D,d5
00012FC6 6100 0000                  		bsr.w	FindFloor
00012FCA 3F01                       		move.w	d1,-(sp)
00012FCC 3428 000C                  		move.w	$C(a0),d2
00012FD0 3628 0008                  		move.w	8(a0),d3
00012FD4 7000                       		moveq	#0,d0
00012FD6 1028 0016                  		move.b	$16(a0),d0
00012FDA 4880                       		ext.w	d0
00012FDE 0A42 000F                  		eori.w	#$F,d2
00012FE2 1028 0017                  		move.b	$17(a0),d0
00012FE6 4880                       		ext.w	d0
00012FEA 49F8 F76A                  		lea	($FFFFF76A).w,a4
00012FEE 367C FFF0                  		movea.w	#-$10,a3
00012FF2 3C3C 1000                  		move.w	#$1000,d6
00012FF6 7A0D                       		moveq	#$D,d5
00012FF8 6100 0000                  		bsr.w	FindFloor
00012FFC 301F                       		move.w	(sp)+,d0
00012FFE 6100 FED2                  		bsr.w	Sonic_Angle
00013002 4A41                       		tst.w	d1
00013004 6700                       		beq.s	locret_14892
00013006 6A00                       		bpl.s	loc_14894
00013008 0C41 FFF2                  		cmpi.w	#-$E,d1
0001300C 6D00 FE5A                  		blt.w	locret_146E6
00013014                            
00013014                            locret_14892:
00013014 4E75                       		rts	
00013016                            ; ===========================================================================
00013016                            
00013016                            loc_14894:
00013016 0C41 000E                  		cmpi.w	#$E,d1
0001301A 6E00                       		bgt.s	loc_148A0
0001301C                            
0001301C                            loc_1489A:
00013020 4E75                       		rts	
00013022                            ; ===========================================================================
00013022                            
00013022                            loc_148A0:
00013022 4A28 0038                  		tst.b	$38(a0)
00013026 66F4                       		bne.s	loc_1489A
00013028 08E8 0001 0022             		bset	#1,$22(a0)
0001302E 08A8 0005 0022             		bclr	#5,$22(a0)
00013034 117C 0001 001D             		move.b	#1,$1D(a0)
0001303A 4E75                       		rts	
0001303C                            ; End of function Sonic_WalkCeiling
0001303C                            
0001303C                            ; ---------------------------------------------------------------------------
0001303C                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
0001303C                            ; ---------------------------------------------------------------------------
0001303C                            
0001303C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001303C                            
0001303C                            
0001303C                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
0001303C 3428 000C                  		move.w	$C(a0),d2
00013040 3628 0008                  		move.w	8(a0),d3
00013044 7000                       		moveq	#0,d0
00013046 1028 0017                  		move.b	$17(a0),d0
0001304A 4880                       		ext.w	d0
0001304E 1028 0016                  		move.b	$16(a0),d0
00013052 4880                       		ext.w	d0
00013056 0A43 000F                  		eori.w	#$F,d3
0001305A 49F8 F768                  		lea	($FFFFF768).w,a4
0001305E 367C FFF0                  		movea.w	#-$10,a3
00013062 3C3C 0800                  		move.w	#$800,d6
00013066 7A0D                       		moveq	#$D,d5
00013068 6100 0000                  		bsr.w	FindWall
0001306C 3F01                       		move.w	d1,-(sp)
0001306E 3428 000C                  		move.w	$C(a0),d2
00013072 3628 0008                  		move.w	8(a0),d3
00013076 7000                       		moveq	#0,d0
00013078 1028 0017                  		move.b	$17(a0),d0
0001307C 4880                       		ext.w	d0
00013080 1028 0016                  		move.b	$16(a0),d0
00013084 4880                       		ext.w	d0
00013088 0A43 000F                  		eori.w	#$F,d3
0001308C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00013090 367C FFF0                  		movea.w	#-$10,a3
00013094 3C3C 0800                  		move.w	#$800,d6
00013098 7A0D                       		moveq	#$D,d5
0001309A 6100 0000                  		bsr.w	FindWall
0001309E 301F                       		move.w	(sp)+,d0
000130A0 6100 FE30                  		bsr.w	Sonic_Angle
000130A4 4A41                       		tst.w	d1
000130A6 6700                       		beq.s	locret_14934
000130A8 6A00                       		bpl.s	loc_14936
000130AA 0C41 FFF2                  		cmpi.w	#-$E,d1
000130AE 6D00 FDDC                  		blt.w	locret_1470A
000130B6                            
000130B6                            locret_14934:
000130B6 4E75                       		rts	
000130B8                            ; ===========================================================================
000130B8                            
000130B8                            loc_14936:
000130B8 0C41 000E                  		cmpi.w	#$E,d1
000130BC 6E00                       		bgt.s	loc_14942
000130BE                            
000130BE                            loc_1493C:
000130C2 4E75                       		rts	
000130C4                            ; ===========================================================================
000130C4                            
000130C4                            loc_14942:
000130C4 4A28 0038                  		tst.b	$38(a0)
000130C8 66F4                       		bne.s	loc_1493C
000130CA 08E8 0001 0022             		bset	#1,$22(a0)
000130D0 08A8 0005 0022             		bclr	#5,$22(a0)
000130D6 117C 0001 001D             		move.b	#1,$1D(a0)
000130DC 4E75                       		rts	
000130DE                            ; End of function Sonic_WalkVertL
000130DE                            
000130DE                            ; ---------------------------------------------------------------------------
000130DE                            ; Subroutine to	find which tile	the object is standing on
000130DE                            ; ---------------------------------------------------------------------------
000130DE                            
000130DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000130DE                            
000130DE                            
000130DE                            Floor_ChkTile:				; XREF: FindFloor; et al
000130DE 3002                       		move.w	d2,d0
000130E0 E248                       		lsr.w	#1,d0
000130E2 0240 0380                  		andi.w	#$380,d0
000130E6 3203                       		move.w	d3,d1
000130E8 E049                       		lsr.w	#8,d1
000130EA 0241 007F                  		andi.w	#$7F,d1
000130F0 72FF                       		moveq	#-1,d1
000130F2 43F8 A400                  		lea	($FFFFA400).w,a1
000130F6 1231 0000                  		move.b	(a1,d0.w),d1
000130FA 6700                       		beq.s	loc_14996
000130FC 6B00                       		bmi.s	loc_1499A
000130FE 5301                       		subq.b	#1,d1
00013100 4881                       		ext.w	d1
00013102 EE59                       		ror.w	#7,d1
00013104 3002                       		move.w	d2,d0
00013108 0240 01E0                  		andi.w	#$1E0,d0
0001310E 3003                       		move.w	d3,d0
00013110 E648                       		lsr.w	#3,d0
00013112 0240 001E                  		andi.w	#$1E,d0
00013118                            
00013118                            loc_14996:
00013118 2241                       		movea.l	d1,a1
0001311A 4E75                       		rts	
0001311C                            ; ===========================================================================
0001311C                            
0001311C                            loc_1499A:
0001311C 0241 007F                  		andi.w	#$7F,d1
00013120 0828 0006 0001             		btst	#6,1(a0)
00013126 6700                       		beq.s	loc_149B2
00013128 5241                       		addq.w	#1,d1
0001312A 0C41 0029                  		cmpi.w	#$29,d1
0001312E 6600                       		bne.s	loc_149B2
00013130 323C 0051                  		move.w	#$51,d1
00013134                            
00013134                            loc_149B2:
00013134 5301                       		subq.b	#1,d1
00013136 EE59                       		ror.w	#7,d1
00013138 3002                       		move.w	d2,d0
0001313C 0240 01E0                  		andi.w	#$1E0,d0
00013142 3003                       		move.w	d3,d0
00013144 E648                       		lsr.w	#3,d0
00013146 0240 001E                  		andi.w	#$1E,d0
0001314C 2241                       		movea.l	d1,a1
0001314E 4E75                       		rts	
00013150                            ; End of function Floor_ChkTile
00013150                            
00013150                            
00013150                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013150                            
00013150                            
00013150                            FindFloor:				; XREF: Sonic_AnglePos; et al
00013150 618C                       		bsr.s	Floor_ChkTile
00013152 3011                       		move.w	(a1),d0
00013154 3800                       		move.w	d0,d4
00013156 0240 07FF                  		andi.w	#$7FF,d0
0001315A 6700                       		beq.s	loc_149DE
0001315C 0B04                       		btst	d5,d4
0001315E 6600                       		bne.s	loc_149EC
00013160                            
00013160                            loc_149DE:
00013162 6100 0000                  		bsr.w	FindFloor2
00013168 0641 0010                  		addi.w	#$10,d1
0001316C 4E75                       		rts	
0001316E                            ; ===========================================================================
0001316E                            
0001316E                            loc_149EC:
0001316E 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00013172 1032 0000                  		move.b	(a2,d0.w),d0
00013176 0240 00FF                  		andi.w	#$FF,d0
0001317A 67E4                       		beq.s	loc_149DE
0001317C 45F9 0000 0000             		lea	(AngleMap).l,a2
00013182 18B2 0000                  		move.b	(a2,d0.w),(a4)
00013186 E948                       		lsl.w	#4,d0
00013188 3203                       		move.w	d3,d1
0001318A 0804 000B                  		btst	#$B,d4
0001318E 6700                       		beq.s	loc_14A12
00013190 4641                       		not.w	d1
00013192 4414                       		neg.b	(a4)
00013194                            
00013194                            loc_14A12:
00013194 0804 000C                  		btst	#$C,d4
00013198 6700                       		beq.s	loc_14A22
0001319A 0614 0040                  		addi.b	#$40,(a4)
0001319E 4414                       		neg.b	(a4)
000131A0 0414 0040                  		subi.b	#$40,(a4)
000131A4                            
000131A4                            loc_14A22:
000131A4 0241 000F                  		andi.w	#$F,d1
000131AA 45F9 0000 0000             		lea	(CollArray1).l,a2
000131B0 1032 1000                  		move.b	(a2,d1.w),d0
000131B4 4880                       		ext.w	d0
000131B6 BD44                       		eor.w	d6,d4
000131B8 0804 000C                  		btst	#$C,d4
000131BC 6700                       		beq.s	loc_14A3E
000131BE 4440                       		neg.w	d0
000131C0                            
000131C0                            loc_14A3E:
000131C0 4A40                       		tst.w	d0
000131C2 679C                       		beq.s	loc_149DE
000131C4 6B00                       		bmi.s	loc_14A5A
000131C6 0C00 0010                  		cmpi.b	#$10,d0
000131CA 6700                       		beq.s	loc_14A66
000131CC 3202                       		move.w	d2,d1
000131CE 0241 000F                  		andi.w	#$F,d1
000131D4 323C 000F                  		move.w	#$F,d1
000131DA 4E75                       		rts	
000131DC                            ; ===========================================================================
000131DC                            
000131DC                            loc_14A5A:
000131DC 3202                       		move.w	d2,d1
000131DE 0241 000F                  		andi.w	#$F,d1
000131E4 6A00 FF7A                  		bpl.w	loc_149DE
000131E8                            
000131E8                            loc_14A66:
000131EA 6100 0000                  		bsr.w	FindFloor2
000131F0 0441 0010                  		subi.w	#$10,d1
000131F4 4E75                       		rts	
000131F6                            ; End of function FindFloor
000131F6                            
000131F6                            
000131F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000131F6                            
000131F6                            
000131F6                            FindFloor2:				; XREF: FindFloor
000131F6 6100 FEE6                  		bsr.w	Floor_ChkTile
000131FA 3011                       		move.w	(a1),d0
000131FC 3800                       		move.w	d0,d4
000131FE 0240 07FF                  		andi.w	#$7FF,d0
00013202 6700                       		beq.s	loc_14A86
00013204 0B04                       		btst	d5,d4
00013206 6600                       		bne.s	loc_14A94
00013208                            
00013208                            loc_14A86:
00013208 323C 000F                  		move.w	#$F,d1
0001320C 3002                       		move.w	d2,d0
0001320E 0240 000F                  		andi.w	#$F,d0
00013214 4E75                       		rts	
00013216                            ; ===========================================================================
00013216                            
00013216                            loc_14A94:
00013216 2478 F796                  		movea.l	($FFFFF796).w,a2
0001321A 1032 0000                  		move.b	(a2,d0.w),d0
0001321E 0240 00FF                  		andi.w	#$FF,d0
00013222 67E4                       		beq.s	loc_14A86
00013224 45F9 0000 0000             		lea	(AngleMap).l,a2
0001322A 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001322E E948                       		lsl.w	#4,d0
00013230 3203                       		move.w	d3,d1
00013232 0804 000B                  		btst	#$B,d4
00013236 6700                       		beq.s	loc_14ABA
00013238 4641                       		not.w	d1
0001323A 4414                       		neg.b	(a4)
0001323C                            
0001323C                            loc_14ABA:
0001323C 0804 000C                  		btst	#$C,d4
00013240 6700                       		beq.s	loc_14ACA
00013242 0614 0040                  		addi.b	#$40,(a4)
00013246 4414                       		neg.b	(a4)
00013248 0414 0040                  		subi.b	#$40,(a4)
0001324C                            
0001324C                            loc_14ACA:
0001324C 0241 000F                  		andi.w	#$F,d1
00013252 45F9 0000 0000             		lea	(CollArray1).l,a2
00013258 1032 1000                  		move.b	(a2,d1.w),d0
0001325C 4880                       		ext.w	d0
0001325E BD44                       		eor.w	d6,d4
00013260 0804 000C                  		btst	#$C,d4
00013264 6700                       		beq.s	loc_14AE6
00013266 4440                       		neg.w	d0
00013268                            
00013268                            loc_14AE6:
00013268 4A40                       		tst.w	d0
0001326A 679C                       		beq.s	loc_14A86
0001326C 6B00                       		bmi.s	loc_14AFC
0001326E 3202                       		move.w	d2,d1
00013270 0241 000F                  		andi.w	#$F,d1
00013276 323C 000F                  		move.w	#$F,d1
0001327C 4E75                       		rts	
0001327E                            ; ===========================================================================
0001327E                            
0001327E                            loc_14AFC:
0001327E 3202                       		move.w	d2,d1
00013280 0241 000F                  		andi.w	#$F,d1
00013286 6A00 FF80                  		bpl.w	loc_14A86
0001328A 4641                       		not.w	d1
0001328C 4E75                       		rts	
0001328E                            ; End of function FindFloor2
0001328E                            
0001328E                            
0001328E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001328E                            
0001328E                            
0001328E                            FindWall:				; XREF: Sonic_WalkVertR; et al
0001328E 6100 FE4E                  		bsr.w	Floor_ChkTile
00013292 3011                       		move.w	(a1),d0
00013294 3800                       		move.w	d0,d4
00013296 0240 07FF                  		andi.w	#$7FF,d0
0001329A 6700                       		beq.s	loc_14B1E
0001329C 0B04                       		btst	d5,d4
0001329E 6600                       		bne.s	loc_14B2C
000132A0                            
000132A0                            loc_14B1E:
000132A2 6100 0000                  		bsr.w	FindWall2
000132A8 0641 0010                  		addi.w	#$10,d1
000132AC 4E75                       		rts	
000132AE                            ; ===========================================================================
000132AE                            
000132AE                            loc_14B2C:
000132AE 2478 F796                  		movea.l	($FFFFF796).w,a2
000132B2 1032 0000                  		move.b	(a2,d0.w),d0
000132B6 0240 00FF                  		andi.w	#$FF,d0
000132BA 67E4                       		beq.s	loc_14B1E
000132BC 45F9 0000 0000             		lea	(AngleMap).l,a2
000132C2 18B2 0000                  		move.b	(a2,d0.w),(a4)
000132C6 E948                       		lsl.w	#4,d0
000132C8 3202                       		move.w	d2,d1
000132CA 0804 000C                  		btst	#$C,d4
000132CE 6700                       		beq.s	loc_14B5A
000132D0 4641                       		not.w	d1
000132D2 0614 0040                  		addi.b	#$40,(a4)
000132D6 4414                       		neg.b	(a4)
000132D8 0414 0040                  		subi.b	#$40,(a4)
000132DC                            
000132DC                            loc_14B5A:
000132DC 0804 000B                  		btst	#$B,d4
000132E0 6700                       		beq.s	loc_14B62
000132E2 4414                       		neg.b	(a4)
000132E4                            
000132E4                            loc_14B62:
000132E4 0241 000F                  		andi.w	#$F,d1
000132EA 45F9 0000 0000             		lea	(CollArray2).l,a2
000132F0 1032 1000                  		move.b	(a2,d1.w),d0
000132F4 4880                       		ext.w	d0
000132F6 BD44                       		eor.w	d6,d4
000132F8 0804 000B                  		btst	#$B,d4
000132FC 6700                       		beq.s	loc_14B7E
000132FE 4440                       		neg.w	d0
00013300                            
00013300                            loc_14B7E:
00013300 4A40                       		tst.w	d0
00013302 679C                       		beq.s	loc_14B1E
00013304 6B00                       		bmi.s	loc_14B9A
00013306 0C00 0010                  		cmpi.b	#$10,d0
0001330A 6700                       		beq.s	loc_14BA6
0001330C 3203                       		move.w	d3,d1
0001330E 0241 000F                  		andi.w	#$F,d1
00013314 323C 000F                  		move.w	#$F,d1
0001331A 4E75                       		rts	
0001331C                            ; ===========================================================================
0001331C                            
0001331C                            loc_14B9A:
0001331C 3203                       		move.w	d3,d1
0001331E 0241 000F                  		andi.w	#$F,d1
00013324 6A00 FF7A                  		bpl.w	loc_14B1E
00013328                            
00013328                            loc_14BA6:
0001332A 6100 0000                  		bsr.w	FindWall2
00013330 0441 0010                  		subi.w	#$10,d1
00013334 4E75                       		rts	
00013336                            ; End of function FindWall
00013336                            
00013336                            
00013336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013336                            
00013336                            
00013336                            FindWall2:				; XREF: FindWall
00013336 6100 FDA6                  		bsr.w	Floor_ChkTile
0001333A 3011                       		move.w	(a1),d0
0001333C 3800                       		move.w	d0,d4
0001333E 0240 07FF                  		andi.w	#$7FF,d0
00013342 6700                       		beq.s	loc_14BC6
00013344 0B04                       		btst	d5,d4
00013346 6600                       		bne.s	loc_14BD4
00013348                            
00013348                            loc_14BC6:
00013348 323C 000F                  		move.w	#$F,d1
0001334C 3003                       		move.w	d3,d0
0001334E 0240 000F                  		andi.w	#$F,d0
00013354 4E75                       		rts	
00013356                            ; ===========================================================================
00013356                            
00013356                            loc_14BD4:
00013356 2478 F796                  		movea.l	($FFFFF796).w,a2
0001335A 1032 0000                  		move.b	(a2,d0.w),d0
0001335E 0240 00FF                  		andi.w	#$FF,d0
00013362 67E4                       		beq.s	loc_14BC6
00013364 45F9 0000 0000             		lea	(AngleMap).l,a2
0001336A 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001336E E948                       		lsl.w	#4,d0
00013370 3202                       		move.w	d2,d1
00013372 0804 000C                  		btst	#$C,d4
00013376 6700                       		beq.s	loc_14C02
00013378 4641                       		not.w	d1
0001337A 0614 0040                  		addi.b	#$40,(a4)
0001337E 4414                       		neg.b	(a4)
00013380 0414 0040                  		subi.b	#$40,(a4)
00013384                            
00013384                            loc_14C02:
00013384 0804 000B                  		btst	#$B,d4
00013388 6700                       		beq.s	loc_14C0A
0001338A 4414                       		neg.b	(a4)
0001338C                            
0001338C                            loc_14C0A:
0001338C 0241 000F                  		andi.w	#$F,d1
00013392 45F9 0000 0000             		lea	(CollArray2).l,a2
00013398 1032 1000                  		move.b	(a2,d1.w),d0
0001339C 4880                       		ext.w	d0
0001339E BD44                       		eor.w	d6,d4
000133A0 0804 000B                  		btst	#$B,d4
000133A4 6700                       		beq.s	loc_14C26
000133A6 4440                       		neg.w	d0
000133A8                            
000133A8                            loc_14C26:
000133A8 4A40                       		tst.w	d0
000133AA 679C                       		beq.s	loc_14BC6
000133AC 6B00                       		bmi.s	loc_14C3C
000133AE 3203                       		move.w	d3,d1
000133B0 0241 000F                  		andi.w	#$F,d1
000133B6 323C 000F                  		move.w	#$F,d1
000133BC 4E75                       		rts	
000133BE                            ; ===========================================================================
000133BE                            
000133BE                            loc_14C3C:
000133BE 3203                       		move.w	d3,d1
000133C0 0241 000F                  		andi.w	#$F,d1
000133C6 6A00 FF80                  		bpl.w	loc_14BC6
000133CA 4641                       		not.w	d1
000133CC 4E75                       		rts	
000133CE                            ; End of function FindWall2
000133CE                            
000133CE                            
000133CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000133CE                            
000133CE                            
000133CE                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000133CE 2628 0008                  		move.l	8(a0),d3
000133D2 2428 000C                  		move.l	$C(a0),d2
000133D6 3228 0010                  		move.w	$10(a0),d1
000133DA 48C1                       		ext.l	d1
000133DC E181                       		asl.l	#8,d1
000133E0 3228 0012                  		move.w	$12(a0),d1
000133E4 48C1                       		ext.l	d1
000133E6 E181                       		asl.l	#8,d1
000133EA 4842                       		swap	d2
000133EC 4843                       		swap	d3
000133EE 11C0 F768                  		move.b	d0,($FFFFF768).w
000133F2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000133F6 1200                       		move.b	d0,d1
000133F8 0600 0020                  		addi.b	#$20,d0
000133FC 6A00                       		bpl.s	loc_14D1A
000133FE 1001                       		move.b	d1,d0
00013400 6A00                       		bpl.s	loc_14D14
00013402 5300                       		subq.b	#1,d0
00013404                            
00013404                            loc_14D14:
00013404 0600 0020                  		addi.b	#$20,d0
00013408 6000                       		bra.s	loc_14D24
0001340A                            ; ===========================================================================
0001340A                            
0001340A                            loc_14D1A:
0001340A 1001                       		move.b	d1,d0
0001340C 6A00                       		bpl.s	loc_14D20
0001340E 5200                       		addq.b	#1,d0
00013410                            
00013410                            loc_14D20:
00013410 0600 001F                  		addi.b	#$1F,d0
00013414                            
00013414                            loc_14D24:
00013414 0200 00C0                  		andi.b	#$C0,d0
00013418 6700 0000                  		beq.w	loc_14DF0
0001341C 0C00 0080                  		cmpi.b	#$80,d0
00013420 6700 0000                  		beq.w	loc_14F7C
00013424 0201 0038                  		andi.b	#$38,d1
00013428 6600                       		bne.s	loc_14D3C
0001342A 5042                       		addq.w	#8,d2
0001342C                            
0001342C                            loc_14D3C:
0001342C 0C00 0040                  		cmpi.b	#$40,d0
00013430 6700 0000                  		beq.w	loc_1504A
00013434 6000 0000                  		bra.w	loc_14EBC
00013438                            
00013438                            ; End of function Sonic_WalkSpeed
00013438                            
00013438                            
00013438                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013438                            
00013438                            
00013438                            sub_14D48:				; XREF: Sonic_Jump
00013438 11C0 F768                  		move.b	d0,($FFFFF768).w
0001343C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00013440 0600 0020                  		addi.b	#$20,d0
00013444 0200 00C0                  		andi.b	#$C0,d0
00013448 0C00 0040                  		cmpi.b	#$40,d0
0001344C 6700 0000                  		beq.w	loc_14FD6
00013450 0C00 0080                  		cmpi.b	#$80,d0
00013454 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00013458 0C00 00C0                  		cmpi.b	#$C0,d0
0001345C 6700 0000                  		beq.w	sub_14E50
00013460                            
00013460                            ; End of function sub_14D48
00013460                            
00013460                            ; ---------------------------------------------------------------------------
00013460                            ; Subroutine to	make Sonic land	on the floor after jumping
00013460                            ; ---------------------------------------------------------------------------
00013460                            
00013460                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013460                            
00013460                            
00013460                            Sonic_HitFloor:				; XREF: Sonic_Floor
00013460 3428 000C                  		move.w	$C(a0),d2
00013464 3628 0008                  		move.w	8(a0),d3
00013468 7000                       		moveq	#0,d0
0001346A 1028 0016                  		move.b	$16(a0),d0
0001346E 4880                       		ext.w	d0
00013472 1028 0017                  		move.b	$17(a0),d0
00013476 4880                       		ext.w	d0
0001347A 49F8 F768                  		lea	($FFFFF768).w,a4
0001347E 367C 0010                  		movea.w	#$10,a3
00013482 3C3C 0000                  		move.w	#0,d6
00013486 7A0D                       		moveq	#$D,d5
00013488 6100 FCC6                  		bsr.w	FindFloor
0001348C 3F01                       		move.w	d1,-(sp)
0001348E 3428 000C                  		move.w	$C(a0),d2
00013492 3628 0008                  		move.w	8(a0),d3
00013496 7000                       		moveq	#0,d0
00013498 1028 0016                  		move.b	$16(a0),d0
0001349C 4880                       		ext.w	d0
000134A0 1028 0017                  		move.b	$17(a0),d0
000134A4 4880                       		ext.w	d0
000134A8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000134AC 367C 0010                  		movea.w	#$10,a3
000134B0 3C3C 0000                  		move.w	#0,d6
000134B4 7A0D                       		moveq	#$D,d5
000134B6 6100 FC98                  		bsr.w	FindFloor
000134BA 301F                       		move.w	(sp)+,d0
000134BC 143C 0000                  		move.b	#0,d2
000134C0                            
000134C0                            loc_14DD0:
000134C0 1638 F76A                  		move.b	($FFFFF76A).w,d3
000134C4 B240                       		cmp.w	d0,d1
000134C6 6F00                       		ble.s	loc_14DDE
000134C8 1638 F768                  		move.b	($FFFFF768).w,d3
000134CC C141                       		exg	d0,d1
000134CE                            
000134CE                            loc_14DDE:
000134CE 0803 0000                  		btst	#0,d3
000134D2 6700                       		beq.s	locret_14DE6
000134D4 1602                       		move.b	d2,d3
000134D6                            
000134D6                            locret_14DE6:
000134D6 4E75                       		rts	
000134D8                            
000134D8                            ; End of function Sonic_HitFloor
000134D8                            
000134D8                            ; ===========================================================================
000134D8 3428 000C                  		move.w	$C(a0),d2
000134DC 3628 0008                  		move.w	8(a0),d3
000134E0                            
000134E0                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000134E0 0642 000A                  		addi.w	#$A,d2
000134E4 49F8 F768                  		lea	($FFFFF768).w,a4
000134E8 367C 0010                  		movea.w	#$10,a3
000134EC 3C3C 0000                  		move.w	#0,d6
000134F0 7A0E                       		moveq	#$E,d5
000134F2 6100 FC5C                  		bsr.w	FindFloor
000134F6 143C 0000                  		move.b	#0,d2
000134FA                            
000134FA                            loc_14E0A:				; XREF: sub_14EB4
000134FA 1638 F768                  		move.b	($FFFFF768).w,d3
000134FE 0803 0000                  		btst	#0,d3
00013502 6700                       		beq.s	locret_14E16
00013504 1602                       		move.b	d2,d3
00013506                            
00013506                            locret_14E16:
00013506 4E75                       		rts	
00013508                            
00013508                            ; ---------------------------------------------------------------------------
00013508                            ; Subroutine allowing objects to interact with the floor
00013508                            ; ---------------------------------------------------------------------------
00013508                            
00013508                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013508                            
00013508                            
00013508                            ObjHitFloor:
00013508 3628 0008                  		move.w	8(a0),d3
0001350C                            
0001350C                            ; End of function ObjHitFloor
0001350C                            
0001350C                            
0001350C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001350C                            
0001350C                            
0001350C                            ObjHitFloor2:
0001350C 3428 000C                  		move.w	$C(a0),d2
00013510 7000                       		moveq	#0,d0
00013512 1028 0016                  		move.b	$16(a0),d0
00013516 4880                       		ext.w	d0
0001351A 49F8 F768                  		lea	($FFFFF768).w,a4
0001351E 18BC 0000                  		move.b	#0,(a4)
00013522 367C 0010                  		movea.w	#$10,a3
00013526 3C3C 0000                  		move.w	#0,d6
0001352A 7A0D                       		moveq	#$D,d5
0001352C 6100 FC22                  		bsr.w	FindFloor
00013530 1638 F768                  		move.b	($FFFFF768).w,d3
00013534 0803 0000                  		btst	#0,d3
00013538 6700                       		beq.s	locret_14E4E
0001353A 163C 0000                  		move.b	#0,d3
0001353E                            
0001353E                            locret_14E4E:
0001353E 4E75                       		rts	
00013540                            ; End of function ObjHitFloor2
00013540                            
00013540                            
00013540                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013540                            
00013540                            
00013540                            sub_14E50:				; XREF: sub_14D48
00013540 3428 000C                  		move.w	$C(a0),d2
00013544 3628 0008                  		move.w	8(a0),d3
00013548 7000                       		moveq	#0,d0
0001354A 1028 0017                  		move.b	$17(a0),d0
0001354E 4880                       		ext.w	d0
00013552 1028 0016                  		move.b	$16(a0),d0
00013556 4880                       		ext.w	d0
0001355A 49F8 F768                  		lea	($FFFFF768).w,a4
0001355E 367C 0010                  		movea.w	#$10,a3
00013562 3C3C 0000                  		move.w	#0,d6
00013566 7A0E                       		moveq	#$E,d5
00013568 6100 FD24                  		bsr.w	FindWall
0001356C 3F01                       		move.w	d1,-(sp)
0001356E 3428 000C                  		move.w	$C(a0),d2
00013572 3628 0008                  		move.w	8(a0),d3
00013576 7000                       		moveq	#0,d0
00013578 1028 0017                  		move.b	$17(a0),d0
0001357C 4880                       		ext.w	d0
00013580 1028 0016                  		move.b	$16(a0),d0
00013584 4880                       		ext.w	d0
00013588 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001358C 367C 0010                  		movea.w	#$10,a3
00013590 3C3C 0000                  		move.w	#0,d6
00013594 7A0E                       		moveq	#$E,d5
00013596 6100 FCF6                  		bsr.w	FindWall
0001359A 301F                       		move.w	(sp)+,d0
0001359C 143C 00C0                  		move.b	#-$40,d2
000135A0 6000 FF1E                  		bra.w	loc_14DD0
000135A4                            
000135A4                            ; End of function sub_14E50
000135A4                            
000135A4                            
000135A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135A4                            
000135A4                            
000135A4                            sub_14EB4:				; XREF: Sonic_Floor
000135A4 3428 000C                  		move.w	$C(a0),d2
000135A8 3628 0008                  		move.w	8(a0),d3
000135AC                            
000135AC                            loc_14EBC:
000135AC 0643 000A                  		addi.w	#$A,d3
000135B0 49F8 F768                  		lea	($FFFFF768).w,a4
000135B4 367C 0010                  		movea.w	#$10,a3
000135B8 3C3C 0000                  		move.w	#0,d6
000135BC 7A0E                       		moveq	#$E,d5
000135BE 6100 FCCE                  		bsr.w	FindWall
000135C2 143C 00C0                  		move.b	#-$40,d2
000135C6 6000 FF32                  		bra.w	loc_14E0A
000135CA                            
000135CA                            ; End of function sub_14EB4
000135CA                            
000135CA                            ; ---------------------------------------------------------------------------
000135CA                            ; Subroutine to	detect when an object hits a wall to its right
000135CA                            ; ---------------------------------------------------------------------------
000135CA                            
000135CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135CA                            
000135CA                            
000135CA                            ObjHitWallRight:
000135CE 3428 000C                  		move.w	$C(a0),d2
000135D2 49F8 F768                  		lea	($FFFFF768).w,a4
000135D6 18BC 0000                  		move.b	#0,(a4)
000135DA 367C 0010                  		movea.w	#$10,a3
000135DE 3C3C 0000                  		move.w	#0,d6
000135E2 7A0E                       		moveq	#$E,d5
000135E4 6100 FCA8                  		bsr.w	FindWall
000135E8 1638 F768                  		move.b	($FFFFF768).w,d3
000135EC 0803 0000                  		btst	#0,d3
000135F0 6700                       		beq.s	locret_14F06
000135F2 163C 00C0                  		move.b	#-$40,d3
000135F6                            
000135F6                            locret_14F06:
000135F6 4E75                       		rts	
000135F8                            
000135F8                            ; End of function ObjHitWallRight
000135F8                            
000135F8                            ; ---------------------------------------------------------------------------
000135F8                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000135F8                            ; touches them
000135F8                            ; ---------------------------------------------------------------------------
000135F8                            
000135F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135F8                            
000135F8                            
000135F8                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000135F8 3428 000C                  		move.w	$C(a0),d2
000135FC 3628 0008                  		move.w	8(a0),d3
00013600 7000                       		moveq	#0,d0
00013602 1028 0016                  		move.b	$16(a0),d0
00013606 4880                       		ext.w	d0
0001360A 0A42 000F                  		eori.w	#$F,d2
0001360E 1028 0017                  		move.b	$17(a0),d0
00013612 4880                       		ext.w	d0
00013616 49F8 F768                  		lea	($FFFFF768).w,a4
0001361A 367C FFF0                  		movea.w	#-$10,a3
0001361E 3C3C 1000                  		move.w	#$1000,d6
00013622 7A0E                       		moveq	#$E,d5
00013624 6100 FB2A                  		bsr.w	FindFloor
00013628 3F01                       		move.w	d1,-(sp)
0001362A 3428 000C                  		move.w	$C(a0),d2
0001362E 3628 0008                  		move.w	8(a0),d3
00013632 7000                       		moveq	#0,d0
00013634 1028 0016                  		move.b	$16(a0),d0
00013638 4880                       		ext.w	d0
0001363C 0A42 000F                  		eori.w	#$F,d2
00013640 1028 0017                  		move.b	$17(a0),d0
00013644 4880                       		ext.w	d0
00013648 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001364C 367C FFF0                  		movea.w	#-$10,a3
00013650 3C3C 1000                  		move.w	#$1000,d6
00013654 7A0E                       		moveq	#$E,d5
00013656 6100 FAF8                  		bsr.w	FindFloor
0001365A 301F                       		move.w	(sp)+,d0
0001365C 143C 0080                  		move.b	#-$80,d2
00013660 6000 FE5E                  		bra.w	loc_14DD0
00013664                            ; End of function Sonic_DontRunOnWalls
00013664                            
00013664                            ; ===========================================================================
00013664 3428 000C                  		move.w	$C(a0),d2
00013668 3628 0008                  		move.w	8(a0),d3
0001366C                            
0001366C                            loc_14F7C:
0001366C 0442 000A                  		subi.w	#$A,d2
00013670 0A42 000F                  		eori.w	#$F,d2
00013674 49F8 F768                  		lea	($FFFFF768).w,a4
00013678 367C FFF0                  		movea.w	#-$10,a3
0001367C 3C3C 1000                  		move.w	#$1000,d6
00013680 7A0E                       		moveq	#$E,d5
00013682 6100 FACC                  		bsr.w	FindFloor
00013686 143C 0080                  		move.b	#-$80,d2
0001368A 6000 FE6E                  		bra.w	loc_14E0A
0001368E                            
0001368E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001368E                            
0001368E                            
0001368E                            ObjHitCeiling:
0001368E 3428 000C                  		move.w	$C(a0),d2
00013692 3628 0008                  		move.w	8(a0),d3
00013696 7000                       		moveq	#0,d0
00013698 1028 0016                  		move.b	$16(a0),d0
0001369C 4880                       		ext.w	d0
000136A0 0A42 000F                  		eori.w	#$F,d2
000136A4 49F8 F768                  		lea	($FFFFF768).w,a4
000136A8 367C FFF0                  		movea.w	#-$10,a3
000136AC 3C3C 1000                  		move.w	#$1000,d6
000136B0 7A0E                       		moveq	#$E,d5
000136B2 6100 FA9C                  		bsr.w	FindFloor
000136B6 1638 F768                  		move.b	($FFFFF768).w,d3
000136BA 0803 0000                  		btst	#0,d3
000136BE 6700                       		beq.s	locret_14FD4
000136C0 163C 0080                  		move.b	#-$80,d3
000136C4                            
000136C4                            locret_14FD4:
000136C4 4E75                       		rts	
000136C6                            ; End of function ObjHitCeiling
000136C6                            
000136C6                            ; ===========================================================================
000136C6                            
000136C6                            loc_14FD6:				; XREF: sub_14D48
000136C6 3428 000C                  		move.w	$C(a0),d2
000136CA 3628 0008                  		move.w	8(a0),d3
000136CE 7000                       		moveq	#0,d0
000136D0 1028 0017                  		move.b	$17(a0),d0
000136D4 4880                       		ext.w	d0
000136D8 1028 0016                  		move.b	$16(a0),d0
000136DC 4880                       		ext.w	d0
000136E0 0A43 000F                  		eori.w	#$F,d3
000136E4 49F8 F768                  		lea	($FFFFF768).w,a4
000136E8 367C FFF0                  		movea.w	#-$10,a3
000136EC 3C3C 0800                  		move.w	#$800,d6
000136F0 7A0E                       		moveq	#$E,d5
000136F2 6100 FB9A                  		bsr.w	FindWall
000136F6 3F01                       		move.w	d1,-(sp)
000136F8 3428 000C                  		move.w	$C(a0),d2
000136FC 3628 0008                  		move.w	8(a0),d3
00013700 7000                       		moveq	#0,d0
00013702 1028 0017                  		move.b	$17(a0),d0
00013706 4880                       		ext.w	d0
0001370A 1028 0016                  		move.b	$16(a0),d0
0001370E 4880                       		ext.w	d0
00013712 0A43 000F                  		eori.w	#$F,d3
00013716 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001371A 367C FFF0                  		movea.w	#-$10,a3
0001371E 3C3C 0800                  		move.w	#$800,d6
00013722 7A0E                       		moveq	#$E,d5
00013724 6100 FB68                  		bsr.w	FindWall
00013728 301F                       		move.w	(sp)+,d0
0001372A 143C 0040                  		move.b	#$40,d2
0001372E 6000 FD90                  		bra.w	loc_14DD0
00013732                            
00013732                            ; ---------------------------------------------------------------------------
00013732                            ; Subroutine to	stop Sonic when	he jumps at a wall
00013732                            ; ---------------------------------------------------------------------------
00013732                            
00013732                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013732                            
00013732                            
00013732                            Sonic_HitWall:				; XREF: Sonic_Floor
00013732 3428 000C                  		move.w	$C(a0),d2
00013736 3628 0008                  		move.w	8(a0),d3
0001373A                            
0001373A                            loc_1504A:
0001373A 0443 000A                  		subi.w	#$A,d3
0001373E 0A43 000F                  		eori.w	#$F,d3
00013742 49F8 F768                  		lea	($FFFFF768).w,a4
00013746 367C FFF0                  		movea.w	#-$10,a3
0001374A 3C3C 0800                  		move.w	#$800,d6
0001374E 7A0E                       		moveq	#$E,d5
00013750 6100 FB3C                  		bsr.w	FindWall
00013754 143C 0040                  		move.b	#$40,d2
00013758 6000 FDA0                  		bra.w	loc_14E0A
0001375C                            ; End of function Sonic_HitWall
0001375C                            
0001375C                            ; ---------------------------------------------------------------------------
0001375C                            ; Subroutine to	detect when an object hits a wall to its left
0001375C                            ; ---------------------------------------------------------------------------
0001375C                            
0001375C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001375C                            
0001375C                            
0001375C                            ObjHitWallLeft:
00013760 3428 000C                  		move.w	$C(a0),d2
00013764 49F8 F768                  		lea	($FFFFF768).w,a4
00013768 18BC 0000                  		move.b	#0,(a4)
0001376C 367C FFF0                  		movea.w	#-$10,a3
00013770 3C3C 0800                  		move.w	#$800,d6
00013774 7A0E                       		moveq	#$E,d5
00013776 6100 FB16                  		bsr.w	FindWall
0001377A 1638 F768                  		move.b	($FFFFF768).w,d3
0001377E 0803 0000                  		btst	#0,d3
00013782 6700                       		beq.s	locret_15098
00013784 163C 0040                  		move.b	#$40,d3
00013788                            
00013788                            locret_15098:
00013788 4E75                       		rts	
0001378A                            ; End of function ObjHitWallLeft
0001378A                            
0001378A                            ; ===========================================================================
0001378A                            ; ---------------------------------------------------------------------------
0001378A                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
0001378A                            ; ---------------------------------------------------------------------------
0001378A                            
0001378A                            Obj66:					; XREF: Obj_Index
0001378A 7000                       		moveq	#0,d0
0001378C 1028 0024                  		move.b	$24(a0),d0
00013790 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00013794 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00013798                            ; ===========================================================================
00013798 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
0001379A 0000                       		dc.w Obj66_Action-Obj66_Index
0001379C 0000                       		dc.w Obj66_Display-Obj66_Index
0001379E 0000                       		dc.w Obj66_Release-Obj66_Index
000137A0                            ; ===========================================================================
000137A0                            
000137A0                            Obj66_Main:				; XREF: Obj66_Index
000137A0 5428 0024                  		addq.b	#2,$24(a0)
000137A4 323C 0001                  		move.w	#1,d1
000137A8 2248                       		movea.l	a0,a1
000137AA 6000                       		bra.s	Obj66_MakeItem
000137AC                            ; ===========================================================================
000137AC                            
000137AC                            Obj66_Loop:
000137AC 6100 8372                  		bsr.w	SingleObjLoad
000137B0 6600                       		bne.s	loc_150FE
000137B2 12BC 0066                  		move.b	#$66,0(a1)
000137B6 5829 0024                  		addq.b	#4,$24(a1)
000137BA 3368 0008 0008             		move.w	8(a0),8(a1)
000137C0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000137C6 137C 0003 0018             		move.b	#3,$18(a1)
000137CC 137C 0010 001A             		move.b	#$10,$1A(a1)
000137D2                            
000137D2                            Obj66_MakeItem:				; XREF: Obj66_Main
000137D2 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000137DA 337C 4348 0002             		move.w	#$4348,2(a1)
000137E0 0029 0004 0001             		ori.b	#4,1(a1)
000137E6 137C 0038 0019             		move.b	#$38,$19(a1)
000137EC                            
000137EC                            loc_150FE:
000137EC 51C9 FFBE                  		dbf	d1,Obj66_Loop
000137F0                            
000137F0 117C 0030 0019             		move.b	#$30,$19(a0)
000137F6 117C 0004 0018             		move.b	#4,$18(a0)
000137FC 317C 003C 0030             		move.w	#$3C,$30(a0)
00013802 117C 0001 0034             		move.b	#1,$34(a0)
00013808 1168 0028 0038             		move.b	$28(a0),$38(a0)
0001380E                            
0001380E                            Obj66_Action:				; XREF: Obj66_Index
0001380E 6100 0000                  		bsr.w	Obj66_ChkSwitch
00013812 4A28 0001                  		tst.b	1(a0)
00013816 6A00 0000                  		bpl.w	Obj66_Display
0001381A 323C 0030                  		move.w	#$30,d1
0001381E 3401                       		move.w	d1,d2
00013820 3602                       		move.w	d2,d3
00013822 5243                       		addq.w	#1,d3
00013824 3828 0008                  		move.w	8(a0),d4
00013828 6100 A230                  		bsr.w	SolidObject
0001382C 0828 0005 0022             		btst	#5,$22(a0)
00013832 6700 0000                  		beq.w	Obj66_Display
00013836 43F8 D000                  		lea	($FFFFD000).w,a1
0001383A 720E                       		moveq	#$E,d1
0001383C 3029 0008                  		move.w	8(a1),d0
00013840 B068 0008                  		cmp.w	8(a0),d0
00013844 6500                       		bcs.s	Obj66_GrabSonic
00013846 7207                       		moveq	#7,d1
00013848                            
00013848                            Obj66_GrabSonic:
00013848 B228 001A                  		cmp.b	$1A(a0),d1
0001384C 6600                       		bne.s	Obj66_Display
0001384E 1141 0032                  		move.b	d1,$32(a0)
00013852 5828 0024                  		addq.b	#4,$24(a0)
00013856 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001385C 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00013862 337C 0800 0014             		move.w	#$800,$14(a1)
00013868 337C 0000 0010             		move.w	#0,$10(a1)
0001386E 337C 0000 0012             		move.w	#0,$12(a1)
00013874 08A8 0005 0022             		bclr	#5,$22(a0)
0001387A 08A9 0005 0022             		bclr	#5,$22(a1)
00013880 08E9 0001 0022             		bset	#1,$22(a1)
00013886 3429 0008                  		move.w	8(a1),d2
0001388A 3629 000C                  		move.w	$C(a1),d3
0001388E 6100 0000                  		bsr.w	Obj66_ChgPos
0001389A E0E9 0008                  		asr	8(a1)
0001389E E0E9 000C                  		asr	$C(a1)
000138A2                            
000138A2                            Obj66_Display:				; XREF: Obj66_Index
000138A2 6000 9E8E                  		bra.w	MarkObjGone
000138A6                            ; ===========================================================================
000138A6                            
000138A6                            Obj66_Release:				; XREF: Obj66_Index
000138A6 1028 001A                  		move.b	$1A(a0),d0
000138AA 0C00 0004                  		cmpi.b	#4,d0
000138AE 6700                       		beq.s	loc_151C8
000138B0 0C00 0007                  		cmpi.b	#7,d0
000138B4 6600                       		bne.s	loc_151F8
000138B6                            
000138B6                            loc_151C8:
000138B6 B028 0032                  		cmp.b	$32(a0),d0
000138BA 6700                       		beq.s	loc_151F8
000138BC 43F8 D000                  		lea	($FFFFD000).w,a1
000138C0 337C 0000 0010             		move.w	#0,$10(a1)
000138C6 337C 0800 0012             		move.w	#$800,$12(a1)
000138CC 0C00 0004                  		cmpi.b	#4,d0
000138D0 6700                       		beq.s	loc_151F0
000138D2 337C 0800 0010             		move.w	#$800,$10(a1)
000138D8 337C 0800 0012             		move.w	#$800,$12(a1)
000138DE                            
000138DE                            loc_151F0:
000138DE 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
000138E2 5928 0024                  		subq.b	#4,$24(a0)
000138E6                            
000138E6                            loc_151F8:
000138E6 6100                       		bsr.s	Obj66_ChkSwitch
000138E8 6100                       		bsr.s	Obj66_ChgPos
000138EA 6000 9E46                  		bra.w	MarkObjGone
000138EE                            
000138EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138EE                            
000138EE                            
000138EE                            Obj66_ChkSwitch:			; XREF: Obj66_Action
000138EE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000138F2 7000                       		moveq	#0,d0
000138F4 1028 0038                  		move.b	$38(a0),d0
000138F8 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000138FE 6700                       		beq.s	loc_15224	; if not, branch
00013900 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00013904 6600                       		bne.s	Obj66_Animate	; if yes, branch
00013906 4428 0034                  		neg.b	$34(a0)
0001390A 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00013910 6000                       		bra.s	Obj66_Animate
00013912                            ; ===========================================================================
00013912                            
00013912                            loc_15224:
00013912 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00013916                            
00013916                            Obj66_Animate:
00013916 5328 001E                  		subq.b	#1,$1E(a0)
0001391A 6A00                       		bpl.s	locret_15246
0001391C 117C 0007 001E             		move.b	#7,$1E(a0)
00013922 1228 0034                  		move.b	$34(a0),d1
00013926 1028 001A                  		move.b	$1A(a0),d0
0001392C 0200 000F                  		andi.b	#$F,d0
00013930 1140 001A                  		move.b	d0,$1A(a0)
00013934                            
00013934                            locret_15246:
00013934 4E75                       		rts	
00013936                            ; End of function Obj66_ChkSwitch
00013936                            
00013936                            
00013936                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013936                            
00013936                            
00013936                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00013936 43F8 D000                  		lea	($FFFFD000).w,a1
0001393A 7000                       		moveq	#0,d0
0001393C 1028 001A                  		move.b	$1A(a0),d0
00013942 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00013946 101A                       		move.b	(a2)+,d0
00013948 4880                       		ext.w	d0
0001394E 3340 0008                  		move.w	d0,8(a1)
00013952 101A                       		move.b	(a2)+,d0
00013954 4880                       		ext.w	d0
0001395A 3340 000C                  		move.w	d0,$C(a1)
0001395E 4E75                       		rts	
00013960                            ; End of function Obj66_ChgPos
00013960                            
00013960                            ; ===========================================================================
00013960 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00013964 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00013968 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
0001396C 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00013970 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00013974 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00013978 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
0001397C E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00013980                            ; ---------------------------------------------------------------------------
00013980                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00013980                            ; ---------------------------------------------------------------------------
00013980                            Map_obj66:
00013980                            	include "_maps\obj66.asm"
00013980                            ; ---------------------------------------------------------------------------
00013980                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00013980                            ; ---------------------------------------------------------------------------
00013980 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00013984 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00013988 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
0001398C 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00013990 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00013994 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00013998 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
0001399C 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
000139A0 0000                       		dc.w byte_154A4-Map_obj66
000139A2 06                         byte_152B4:	dc.b 6
000139A3 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000139A8 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000139AD E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000139B2 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000139B7 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000139BC 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000139C1 06                         byte_152D3:	dc.b 6
000139C2 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000139C7 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000139CC F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000139D1 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000139D6 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000139DB 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000139E0 06                         byte_152F2:	dc.b 6
000139E1 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000139E6 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000139EB 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000139F0 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000139F5 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000139FA 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000139FF 06                         byte_15311:	dc.b 6
00013A00 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00013A05 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00013A0A 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00013A0F 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00013A14 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00013A19 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00013A1E 06                         byte_15330:	dc.b 6
00013A1F 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00013A24 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00013A29 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00013A2E 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00013A33 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00013A38 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00013A3D 06                         byte_1534F:	dc.b 6
00013A3E 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00013A43 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00013A48 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00013A4D 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00013A52 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00013A57 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00013A5C 06                         byte_1536E:	dc.b 6
00013A5D 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00013A62 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00013A67 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00013A6C 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00013A71 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00013A76 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00013A7B 06                         byte_1538D:	dc.b 6
00013A7C 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00013A81 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00013A86 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00013A8B F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00013A90 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00013A95 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00013A9A 06                         byte_153AC:	dc.b 6
00013A9B E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00013AA0 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00013AA5 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00013AAA E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00013AAF 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00013AB4 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00013AB9 06                         byte_153CB:	dc.b 6
00013ABA D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00013ABF E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00013AC4 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00013AC9 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00013ACE F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00013AD3 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00013AD8 06                         byte_153EA:	dc.b 6
00013AD9 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00013ADE E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00013AE3 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00013AE8 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00013AED E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00013AF2 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00013AF7 06                         byte_15409:	dc.b 6
00013AF8 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00013AFD D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00013B02 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00013B07 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00013B0C E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00013B11 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00013B16 06                         byte_15428:	dc.b 6
00013B17 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00013B1C D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00013B21 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00013B26 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00013B2B E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00013B30 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00013B35 06                         byte_15447:	dc.b 6
00013B36 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00013B3B D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00013B40 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00013B45 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00013B4A E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00013B4F E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00013B54 06                         byte_15466:	dc.b 6
00013B55 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00013B5A D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00013B5F D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00013B64 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00013B69 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00013B6E E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00013B73 06                         byte_15485:	dc.b 6
00013B74 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00013B79 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00013B7E DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00013B83 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00013B88 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00013B8D F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00013B92 0C                         byte_154A4:	dc.b $C
00013B93 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00013B98 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00013B9D E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00013BA2 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00013BA7 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00013BAC E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00013BB1 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00013BB6 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00013BBB 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00013BC0 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00013BC5 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00013BCA 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00013BD0 00                         		even
00013BD0 00                         		even
00013BD0                            
00013BD0                            ; ===========================================================================
00013BD0                            ; ---------------------------------------------------------------------------
00013BD0                            ; Object 67 - disc that	you run	around (SBZ)
00013BD0                            ; ---------------------------------------------------------------------------
00013BD0                            
00013BD0                            Obj67:					; XREF: Obj_Index
00013BD0 7000                       		moveq	#0,d0
00013BD2 1028 0024                  		move.b	$24(a0),d0
00013BD6 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00013BDA 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00013BDE                            ; ===========================================================================
00013BDE 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00013BE0 0000                       		dc.w Obj67_Action-Obj67_Index
00013BE2                            ; ===========================================================================
00013BE2                            
00013BE2                            Obj67_Main:				; XREF: Obj67_Index
00013BE2 5428 0024                  		addq.b	#2,$24(a0)
00013BE6 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00013BEE 317C C344 0002             		move.w	#$C344,2(a0)
00013BF4 117C 0004 0001             		move.b	#4,1(a0)
00013BFA 117C 0004 0018             		move.b	#4,$18(a0)
00013C00 117C 0008 0019             		move.b	#8,$19(a0)
00013C06 3168 0008 0032             		move.w	8(a0),$32(a0)
00013C0C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00013C12 117C 0018 0034             		move.b	#$18,$34(a0)
00013C18 117C 0048 0038             		move.b	#$48,$38(a0)
00013C1E 1228 0028                  		move.b	$28(a0),d1	; get object type
00013C22 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00013C26 6700                       		beq.s	loc_15546
00013C28 117C 0010 0034             		move.b	#$10,$34(a0)
00013C2E 117C 0038 0038             		move.b	#$38,$38(a0)
00013C34                            
00013C34                            loc_15546:
00013C34 1228 0028                  		move.b	$28(a0),d1	; get object type
00013C38 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00013C3C 4881                       		ext.w	d1
00013C3E E741                       		asl.w	#3,d1
00013C40 3141 0036                  		move.w	d1,$36(a0)
00013C44 1028 0022                  		move.b	$22(a0),d0
00013C48 E418                       		ror.b	#2,d0
00013C4A 0200 00C0                  		andi.b	#-$40,d0
00013C4E 1140 0026                  		move.b	d0,$26(a0)
00013C52                            
00013C52                            Obj67_Action:				; XREF: Obj67_Index
00013C52 6100 0000                  		bsr.w	Obj67_MoveSonic
00013C56 6100 0000                  		bsr.w	Obj67_MoveSpot
00013C5A 6000 0000                  		bra.w	Obj67_ChkDel
00013C5E                            ; ===========================================================================
00013C5E                            
00013C5E                            Obj67_MoveSonic:			; XREF: Obj67_Action
00013C5E 7400                       		moveq	#0,d2
00013C60 1428 0038                  		move.b	$38(a0),d2
00013C64 3602                       		move.w	d2,d3
00013C68 43F8 D000                  		lea	($FFFFD000).w,a1
00013C6C 3029 0008                  		move.w	8(a1),d0
00013C76 B043                       		cmp.w	d3,d0
00013C78 6400                       		bcc.s	loc_155A8
00013C7A 3229 000C                  		move.w	$C(a1),d1
00013C84 B243                       		cmp.w	d3,d1
00013C86 6400                       		bcc.s	loc_155A8
00013C88 0829 0001 0022             		btst	#1,$22(a1)
00013C8E 6700                       		beq.s	loc_155B8
00013C90 4228 003A                  		clr.b	$3A(a0)
00013C94 4E75                       		rts	
00013C96                            ; ===========================================================================
00013C96                            
00013C96                            loc_155A8:
00013C96 4A28 003A                  		tst.b	$3A(a0)
00013C9A 6700                       		beq.s	locret_155B6
00013C9C 4229 0038                  		clr.b	$38(a1)
00013CA0 4228 003A                  		clr.b	$3A(a0)
00013CA4                            
00013CA4                            locret_155B6:
00013CA4 4E75                       		rts	
00013CA6                            ; ===========================================================================
00013CA6                            
00013CA6                            loc_155B8:
00013CA6 4A28 003A                  		tst.b	$3A(a0)
00013CAA 6600                       		bne.s	loc_155E2
00013CAC 117C 0001 003A             		move.b	#1,$3A(a0)
00013CB2 0829 0002 0022             		btst	#2,$22(a1)
00013CB8 6600                       		bne.s	loc_155D0
00013CBA 4229 001C                  		clr.b	$1C(a1)
00013CBE                            
00013CBE                            loc_155D0:
00013CBE 08A9 0005 0022             		bclr	#5,$22(a1)
00013CC4 137C 0001 001D             		move.b	#1,$1D(a1)
00013CCA 137C 0001 0038             		move.b	#1,$38(a1)
00013CD0                            
00013CD0                            loc_155E2:
00013CD0 3029 0014                  		move.w	$14(a1),d0
00013CD4 4A68 0036                  		tst.w	$36(a0)
00013CD8 6A00                       		bpl.s	loc_15608
00013CDA 0C40 FC00                  		cmpi.w	#-$400,d0
00013CDE 6F00                       		ble.s	loc_155FA
00013CE0 337C FC00 0014             		move.w	#-$400,$14(a1)
00013CE6 4E75                       		rts	
00013CE8                            ; ===========================================================================
00013CE8                            
00013CE8                            loc_155FA:
00013CE8 0C40 F100                  		cmpi.w	#-$F00,d0
00013CEC 6C00                       		bge.s	locret_15606
00013CEE 337C F100 0014             		move.w	#-$F00,$14(a1)
00013CF4                            
00013CF4                            locret_15606:
00013CF4 4E75                       		rts	
00013CF6                            ; ===========================================================================
00013CF6                            
00013CF6                            loc_15608:
00013CF6 0C40 0400                  		cmpi.w	#$400,d0
00013CFA 6C00                       		bge.s	loc_15616
00013CFC 337C 0400 0014             		move.w	#$400,$14(a1)
00013D02 4E75                       		rts	
00013D04                            ; ===========================================================================
00013D04                            
00013D04                            loc_15616:
00013D04 0C40 0F00                  		cmpi.w	#$F00,d0
00013D08 6F00                       		ble.s	locret_15622
00013D0A 337C 0F00 0014             		move.w	#$F00,$14(a1)
00013D10                            
00013D10                            locret_15622:
00013D10 4E75                       		rts	
00013D12                            ; ===========================================================================
00013D12                            
00013D12                            Obj67_MoveSpot:				; XREF: Obj67_Action
00013D12 3028 0036                  		move.w	$36(a0),d0
00013D1A 1028 0026                  		move.b	$26(a0),d0
00013D1E 4EB9 0000 2556             		jsr	(CalcSine).l
00013D24 3428 0030                  		move.w	$30(a0),d2
00013D28 3628 0032                  		move.w	$32(a0),d3
00013D2C 7800                       		moveq	#0,d4
00013D2E 1828 0034                  		move.b	$34(a0),d4
00013D32 E14C                       		lsl.w	#8,d4
00013D34 2A04                       		move.l	d4,d5
00013D36 C9C0                       		muls.w	d0,d4
00013D38 4844                       		swap	d4
00013D3A CBC1                       		muls.w	d1,d5
00013D3C 4845                       		swap	d5
00013D42 3144 000C                  		move.w	d4,$C(a0)
00013D46 3145 0008                  		move.w	d5,8(a0)
00013D4A 4E75                       		rts	
00013D4C                            ; ===========================================================================
00013D4C                            
00013D4C                            Obj67_ChkDel:				; XREF: Obj67_Action
00013D4C 3028 0032                  		move.w	$32(a0),d0
00013D50 0240 FF80                  		andi.w	#-$80,d0
00013D54 3238 F700                  		move.w	($FFFFF700).w,d1
00013D58 0441 0080                  		subi.w	#$80,d1
00013D5C 0241 FF80                  		andi.w	#-$80,d1
00013D62 0C40 0280                  		cmpi.w	#$280,d0
00013D66 6200                       		bhi.s	Obj67_Delete
00013D68 4EF9 0000 B69A             		jmp	DisplaySprite
00013D6E                            ; ===========================================================================
00013D6E                            
00013D6E                            Obj67_Delete:
00013D6E 4EF9 0000 B6D6             		jmp	DeleteObject
00013D74                            ; ===========================================================================
00013D74                            ; ---------------------------------------------------------------------------
00013D74                            ; Sprite mappings - disc that you run around (SBZ)
00013D74                            ; (It's just a small blob that moves around in a circle. The disc itself is
00013D74                            ; part of the level tiles.)
00013D74                            ; ---------------------------------------------------------------------------
00013D74                            Map_obj67:
00013D74                            	include "_maps\obj67.asm"
00013D74                            ; ---------------------------------------------------------------------------
00013D74                            ; Sprite mappings - disc that you run around (SBZ)
00013D74                            ; (It's just a small blob that moves around in a circle. The disc itself is
00013D74                            ; part of the level tiles.)
00013D74                            ; ---------------------------------------------------------------------------
00013D74 0000                       		dc.w byte_15688-Map_obj67
00013D76 01                         byte_15688:	dc.b 1
00013D77 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00013D7C                            		even
00013D7C                            		even
00013D7C                            
00013D7C                            ; ===========================================================================
00013D7C                            ; ---------------------------------------------------------------------------
00013D7C                            ; Object 68 - conveyor belts (SBZ)
00013D7C                            ; ---------------------------------------------------------------------------
00013D7C                            
00013D7C                            Obj68:					; XREF: Obj_Index
00013D7C 7000                       		moveq	#0,d0
00013D7E 1028 0024                  		move.b	$24(a0),d0
00013D82 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00013D86 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00013D8A                            ; ===========================================================================
00013D8A 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00013D8C 0000                       		dc.w Obj68_Action-Obj68_Index
00013D8E                            ; ===========================================================================
00013D8E                            
00013D8E                            Obj68_Main:				; XREF: Obj68_Index
00013D8E 5428 0024                  		addq.b	#2,$24(a0)
00013D92 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00013D98 1228 0028                  		move.b	$28(a0),d1	; get object type
00013D9C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00013DA0 6700                       		beq.s	loc_156BA	; if zero, branch
00013DA2 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00013DA8                            
00013DA8                            loc_156BA:
00013DA8 1228 0028                  		move.b	$28(a0),d1	; get object type
00013DAC 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00013DB0 4881                       		ext.w	d1
00013DB2 E841                       		asr.w	#4,d1
00013DB4 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00013DB8                            
00013DB8                            Obj68_Action:				; XREF: Obj68_Index
00013DB8 6100                       		bsr.s	Obj68_MoveSonic
00013DBA 3028 0008                  		move.w	8(a0),d0
00013DBE 0240 FF80                  		andi.w	#$FF80,d0
00013DC2 3238 F700                  		move.w	($FFFFF700).w,d1
00013DC6 0441 0080                  		subi.w	#$80,d1
00013DCA 0241 FF80                  		andi.w	#$FF80,d1
00013DD0 0C40 0280                  		cmpi.w	#$280,d0
00013DD4 6200                       		bhi.s	Obj68_Delete
00013DD6 4E75                       		rts	
00013DD8                            ; ===========================================================================
00013DD8                            
00013DD8                            Obj68_Delete:
00013DD8 4EF9 0000 B6D6             		jmp	DeleteObject
00013DDE                            ; ===========================================================================
00013DDE                            
00013DDE                            Obj68_MoveSonic:			; XREF: Obj68_Action
00013DDE 7400                       		moveq	#0,d2
00013DE0 1428 0038                  		move.b	$38(a0),d2
00013DE4 3602                       		move.w	d2,d3
00013DE8 43F8 D000                  		lea	($FFFFD000).w,a1
00013DEC 3029 0008                  		move.w	8(a1),d0
00013DF6 B043                       		cmp.w	d3,d0
00013DF8 6400                       		bcc.s	locret_1572E
00013DFA 3229 000C                  		move.w	$C(a1),d1
00013E02 0641 0030                  		addi.w	#$30,d1
00013E06 0C41 0030                  		cmpi.w	#$30,d1
00013E0A 6400                       		bcc.s	locret_1572E
00013E0C 0829 0001 0022             		btst	#1,$22(a1)
00013E12 6600                       		bne.s	locret_1572E
00013E14 3028 0036                  		move.w	$36(a0),d0
00013E1C                            
00013E1C                            locret_1572E:
00013E1C 4E75                       		rts	
00013E1E                            
00013E1E                            ; ===========================================================================
00013E1E                            ; ---------------------------------------------------------------------------
00013E1E                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00013E1E                            ; ---------------------------------------------------------------------------
00013E1E                            
00013E1E                            Obj69:					; XREF: Obj_Index
00013E1E 7000                       		moveq	#0,d0
00013E20 1028 0024                  		move.b	$24(a0),d0
00013E24 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00013E28 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00013E2C                            ; ===========================================================================
00013E2C 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00013E2E 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00013E30 0000                       		dc.w Obj69_Spinner-Obj69_Index
00013E32                            ; ===========================================================================
00013E32                            
00013E32                            Obj69_Main:				; XREF: Obj69_Index
00013E32 5428 0024                  		addq.b	#2,$24(a0)
00013E36 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00013E3E 317C 4492 0002             		move.w	#$4492,2(a0)
00013E44 0028 0004 0001             		ori.b	#4,1(a0)
00013E4A 117C 0080 0019             		move.b	#$80,$19(a0)
00013E50 7000                       		moveq	#0,d0
00013E52 1028 0028                  		move.b	$28(a0),d0
00013E56 0240 000F                  		andi.w	#$F,d0
00013E5A C0FC 003C                  		mulu.w	#$3C,d0
00013E5E 3140 0032                  		move.w	d0,$32(a0)
00013E62 4A28 0028                  		tst.b	$28(a0)
00013E66 6A00                       		bpl.s	Obj69_Trapdoor
00013E68 5428 0024                  		addq.b	#2,$24(a0)
00013E6C 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00013E74 317C 04DF 0002             		move.w	#$4DF,2(a0)
00013E7A 117C 0010 0019             		move.b	#$10,$19(a0)
00013E80 117C 0002 001C             		move.b	#2,$1C(a0)
00013E86 7000                       		moveq	#0,d0
00013E88 1028 0028                  		move.b	$28(a0),d0	; get object type
00013E8C 3200                       		move.w	d0,d1
00013E8E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00013E92 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00013E96 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00013E9A 3140 0032                  		move.w	d0,$32(a0)
00013E9E 0241 0070                  		andi.w	#$70,d1
00013EA2 0641 0010                  		addi.w	#$10,d1
00013EA6 E549                       		lsl.w	#2,d1
00013EA8 5341                       		subq.w	#1,d1
00013EAA 3141 0036                  		move.w	d1,$36(a0)
00013EAE 6000                       		bra.s	Obj69_Spinner
00013EB0                            ; ===========================================================================
00013EB0                            
00013EB0                            Obj69_Trapdoor:				; XREF: Obj69_Index
00013EB0 5368 0030                  		subq.w	#1,$30(a0)
00013EB4 6A00                       		bpl.s	Obj69_Animate
00013EB6 3168 0032 0030             		move.w	$32(a0),$30(a0)
00013EBC 0868 0000 001C             		bchg	#0,$1C(a0)
00013EC2 4A28 0001                  		tst.b	1(a0)
00013EC6 6A00                       		bpl.s	Obj69_Animate
00013EC8 303C 00BB                  		move.w	#$BB,d0
00013ECC 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play door sound
00013ED2                            
00013ED2                            Obj69_Animate:
00013ED2 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00013ED8 4EB9 0000 87C0             		jsr	AnimateSprite
00013EDE 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00013EE2 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00013EE4 323C 004B                  		move.w	#$4B,d1
00013EE8 343C 000C                  		move.w	#$C,d2
00013EEC 3602                       		move.w	d2,d3
00013EEE 5243                       		addq.w	#1,d3
00013EF0 3828 0008                  		move.w	8(a0),d4
00013EF4 6100 9B64                  		bsr.w	SolidObject
00013EF8 6000 9838                  		bra.w	MarkObjGone
00013EFC                            ; ===========================================================================
00013EFC                            
00013EFC                            Obj69_NotSolid:
00013EFC 0828 0003 0022             		btst	#3,$22(a0)
00013F02 6700                       		beq.s	Obj69_Display
00013F04 43F8 D000                  		lea	($FFFFD000).w,a1
00013F08 08A9 0003 0022             		bclr	#3,$22(a1)
00013F0E 08A8 0003 0022             		bclr	#3,$22(a0)
00013F14 4228 0025                  		clr.b	$25(a0)
00013F18                            
00013F18                            Obj69_Display:
00013F18 6000 9818                  		bra.w	MarkObjGone
00013F1C                            ; ===========================================================================
00013F1C                            
00013F1C                            Obj69_Spinner:				; XREF: Obj69_Index
00013F1C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00013F24 6600                       		bne.s	Obj69_Delay
00013F26 117C 0001 0034             		move.b	#1,$34(a0)
00013F2C                            
00013F2C                            Obj69_Delay:
00013F2C 4A28 0034                  		tst.b	$34(a0)
00013F30 6700                       		beq.s	Obj69_Animate2
00013F32 5368 0030                  		subq.w	#1,$30(a0)
00013F36 6A00                       		bpl.s	Obj69_Animate2
00013F38 3168 0032 0030             		move.w	$32(a0),$30(a0)
00013F3E 4228 0034                  		clr.b	$34(a0)
00013F42 0868 0000 001C             		bchg	#0,$1C(a0)
00013F48                            
00013F48                            Obj69_Animate2:
00013F48 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00013F4E 4EB9 0000 87C0             		jsr	AnimateSprite
00013F54 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00013F58 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00013F5A 323C 001B                  		move.w	#$1B,d1
00013F5E 343C 0007                  		move.w	#7,d2
00013F62 3602                       		move.w	d2,d3
00013F64 5243                       		addq.w	#1,d3
00013F66 3828 0008                  		move.w	8(a0),d4
00013F6A 6100 9AEE                  		bsr.w	SolidObject
00013F6E 6000 97C2                  		bra.w	MarkObjGone
00013F72                            ; ===========================================================================
00013F72                            
00013F72                            Obj69_NotSolid2:
00013F72 0828 0003 0022             		btst	#3,$22(a0)
00013F78 6700                       		beq.s	Obj69_Display2
00013F7A 43F8 D000                  		lea	($FFFFD000).w,a1
00013F7E 08A9 0003 0022             		bclr	#3,$22(a1)
00013F84 08A8 0003 0022             		bclr	#3,$22(a0)
00013F8A 4228 0025                  		clr.b	$25(a0)
00013F8E                            
00013F8E                            Obj69_Display2:
00013F8E 6000 97A2                  		bra.w	MarkObjGone
00013F92                            ; ===========================================================================
00013F92                            Ani_obj69:
00013F92                            	include "_anim\obj69.asm"
00013F92                            ; ---------------------------------------------------------------------------
00013F92                            ; Animation script - trapdoor (SBZ)
00013F92                            ; ---------------------------------------------------------------------------
00013F92 0000                       		dc.w byte_158AC-Ani_obj69
00013F94 0000                       		dc.w byte_158B2-Ani_obj69
00013F96 0000                       		dc.w byte_158B8-Ani_obj69
00013F98 0000                       		dc.w byte_158CC-Ani_obj69
00013F9A 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00013FA0 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00013FA6 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00013FB3 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00013FBA 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00013FC7 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00013FCE                            		even
00013FCE                            		even
00013FCE                            
00013FCE                            ; ---------------------------------------------------------------------------
00013FCE                            ; Sprite mappings - trapdoor (SBZ)
00013FCE                            ; ---------------------------------------------------------------------------
00013FCE                            Map_obj69:
00013FCE                            	include "_maps\obj69.asm"
00013FCE                            ; ---------------------------------------------------------------------------
00013FCE                            ; Sprite mappings - trapdoor (SBZ)
00013FCE                            ; ---------------------------------------------------------------------------
00013FCE 0000                       		dc.w byte_158E6-Map_obj69
00013FD0 0000                       		dc.w byte_158FB-Map_obj69
00013FD2 0000                       		dc.w byte_15924-Map_obj69
00013FD4 04                         byte_158E6:	dc.b 4
00013FD5 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00013FDA F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00013FDF F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00013FE4 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00013FE9 08                         byte_158FB:	dc.b 8
00013FEA F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00013FEF 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00013FF4 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00013FF9 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00013FFE F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00014003 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00014008 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
0001400D 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00014012 04                         byte_15924:	dc.b 4
00014013 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00014018 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001401D 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00014022 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00014028 00                         		even
00014028 00                         		even
00014028                            
00014028                            ; ---------------------------------------------------------------------------
00014028                            ; Sprite mappings - spinning platforms (SBZ)
00014028                            ; ---------------------------------------------------------------------------
00014028                            Map_obj69a:
00014028                            	include "_maps\obj69a.asm"
00014028                            ; ---------------------------------------------------------------------------
00014028                            ; Sprite mappings - spinning platforms (SBZ)
00014028                            ; ---------------------------------------------------------------------------
00014028 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
0001402C 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00014030 0000                       		dc.w byte_15970-Map_obj69a
00014032 02                         byte_15944:	dc.b 2
00014033 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00014038 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001403D 02                         byte_1594F:	dc.b 2
0001403E F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00014043 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00014048 02                         byte_1595A:	dc.b 2
00014049 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
0001404E 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00014053 02                         byte_15965:	dc.b 2
00014054 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00014059 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
0001405E 02                         byte_15970:	dc.b 2
0001405F F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00014064 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
0001406A 00                         		even
0001406A 00                         		even
0001406A                            
0001406A                            ; ===========================================================================
0001406A                            ; ---------------------------------------------------------------------------
0001406A                            ; Object 6A - ground saws and pizza cutters (SBZ)
0001406A                            ; ---------------------------------------------------------------------------
0001406A                            
0001406A                            Obj6A:					; XREF: Obj_Index
0001406A 7000                       		moveq	#0,d0
0001406C 1028 0024                  		move.b	$24(a0),d0
00014070 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00014074 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00014078                            ; ===========================================================================
00014078 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
0001407A 0000                       		dc.w Obj6A_Action-Obj6A_Index
0001407C                            ; ===========================================================================
0001407C                            
0001407C                            Obj6A_Main:				; XREF: Obj6A_Index
0001407C 5428 0024                  		addq.b	#2,$24(a0)
00014080 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00014088 317C 43B5 0002             		move.w	#$43B5,2(a0)
0001408E 117C 0004 0001             		move.b	#4,1(a0)
00014094 117C 0004 0018             		move.b	#4,$18(a0)
0001409A 117C 0020 0019             		move.b	#$20,$19(a0)
000140A0 3168 0008 003A             		move.w	8(a0),$3A(a0)
000140A6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000140AC 0C28 0003 0028             		cmpi.b	#3,$28(a0)
000140B2 6400                       		bcc.s	Obj6A_Action
000140B4 117C 00A2 0020             		move.b	#$A2,$20(a0)
000140BA                            
000140BA                            Obj6A_Action:				; XREF: Obj6A_Index
000140BA 7000                       		moveq	#0,d0
000140BC 1028 0028                  		move.b	$28(a0),d0
000140C0 0240 0007                  		andi.w	#7,d0
000140C6 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000140CA 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
000140CE 3028 003A                  		move.w	$3A(a0),d0
000140D2 0240 FF80                  		andi.w	#$FF80,d0
000140D6 3238 F700                  		move.w	($FFFFF700).w,d1
000140DA 0441 0080                  		subi.w	#$80,d1
000140DE 0241 FF80                  		andi.w	#$FF80,d1
000140E4 0C40 0280                  		cmpi.w	#$280,d0
000140E8 6200                       		bhi.s	Obj6A_Delete
000140EA 4EF9 0000 B69A             		jmp	DisplaySprite
000140F0                            ; ===========================================================================
000140F0                            
000140F0                            Obj6A_Delete:
000140F0 4EF9 0000 B6D6             		jmp	DeleteObject
000140F6                            ; ===========================================================================
000140F6 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000140FA 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000140FE 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00014100                            ; ===========================================================================
00014100                            
00014100                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00014100 4E75                       		rts	
00014102                            ; ===========================================================================
00014102                            
00014102                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00014102 323C 0060                  		move.w	#$60,d1
00014106 7000                       		moveq	#0,d0
00014108 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001410C 0828 0000 0022             		btst	#0,$22(a0)
00014112 6700                       		beq.s	Obj6A_Animate01
00014114 4440                       		neg.w	d0
00014118                            
00014118                            Obj6A_Animate01:
00014118 3228 003A                  		move.w	$3A(a0),d1
0001411E 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00014122 5328 001E                  		subq.b	#1,$1E(a0)
00014126 6A00                       		bpl.s	loc_15A46
00014128 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
0001412E 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00014134                            
00014134                            loc_15A46:
00014134 4A28 0001                  		tst.b	1(a0)
00014138 6A00                       		bpl.s	locret_15A60
0001413A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001413E 0240 000F                  		andi.w	#$F,d0
00014142 6600                       		bne.s	locret_15A60
00014144 303C 00B0                  		move.w	#$B0,d0
00014148 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play saw sound
0001414E                            
0001414E                            locret_15A60:
0001414E 4E75                       		rts	
00014150                            ; ===========================================================================
00014150                            
00014150                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00014150 323C 0030                  		move.w	#$30,d1
00014154 7000                       		moveq	#0,d0
00014156 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001415A 0828 0000 0022             		btst	#0,$22(a0)
00014160 6700                       		beq.s	Obj6A_Animate02
00014162 4440                       		neg.w	d0
00014164 0640 0080                  		addi.w	#$80,d0
00014168                            
00014168                            Obj6A_Animate02:
00014168 3228 0038                  		move.w	$38(a0),d1
0001416E 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00014172 5328 001E                  		subq.b	#1,$1E(a0)
00014176 6A00                       		bpl.s	loc_15A96
00014178 117C 0002 001E             		move.b	#2,$1E(a0)
0001417E 0868 0000 001A             		bchg	#0,$1A(a0)
00014184                            
00014184                            loc_15A96:
00014184 4A28 0001                  		tst.b	1(a0)
00014188 6A00                       		bpl.s	locret_15AB0
0001418A 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001418E 0C00 0018                  		cmpi.b	#$18,d0
00014192 6600                       		bne.s	locret_15AB0
00014194 303C 00B0                  		move.w	#$B0,d0
00014198 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play saw sound
0001419E                            
0001419E                            locret_15AB0:
0001419E 4E75                       		rts	
000141A0                            ; ===========================================================================
000141A0                            
000141A0                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000141A0 4A28 003D                  		tst.b	$3D(a0)
000141A4 6600                       		bne.s	Obj6A_Animate03
000141A6 3038 D008                  		move.w	($FFFFD008).w,d0
000141AA 0440 00C0                  		subi.w	#$C0,d0
000141AE 6500                       		bcs.s	loc_15B02
000141B4 6500                       		bcs.s	loc_15B02
000141B6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000141BA 0440 0080                  		subi.w	#$80,d0
000141BE B068 000C                  		cmp.w	$C(a0),d0
000141C2 6400                       		bcc.s	locret_15B04
000141C4 0640 0100                  		addi.w	#$100,d0
000141C8 B068 000C                  		cmp.w	$C(a0),d0
000141CC 6500                       		bcs.s	locret_15B04
000141CE 117C 0001 003D             		move.b	#1,$3D(a0)
000141D4 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000141DA 117C 00A2 0020             		move.b	#$A2,$20(a0)
000141E0 117C 0002 001A             		move.b	#2,$1A(a0)
000141E6 303C 00B0                  		move.w	#$B0,d0
000141EA 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play saw sound
000141F0                            
000141F0                            loc_15B02:
000141F0 588F                       		addq.l	#4,sp
000141F2                            
000141F2                            locret_15B04:
000141F2 4E75                       		rts	
000141F4                            ; ===========================================================================
000141F4                            
000141F4                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000141F4 4EB9 0000 B674             		jsr	SpeedToPos
000141FA 3168 0008 003A             		move.w	8(a0),$3A(a0)
00014200 5328 001E                  		subq.b	#1,$1E(a0)
00014204 6A00                       		bpl.s	locret_15B24
00014206 117C 0002 001E             		move.b	#2,$1E(a0)
0001420C 0868 0000 001A             		bchg	#0,$1A(a0)
00014212                            
00014212                            locret_15B24:
00014212 4E75                       		rts	
00014214                            ; ===========================================================================
00014214                            
00014214                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00014214 4A28 003D                  		tst.b	$3D(a0)
00014218 6600                       		bne.s	Obj6A_Animate04
0001421A 3038 D008                  		move.w	($FFFFD008).w,d0
0001421E 0640 00E0                  		addi.w	#$E0,d0
00014226 6400                       		bcc.s	loc_15B74
00014228 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001422C 0440 0080                  		subi.w	#$80,d0
00014230 B068 000C                  		cmp.w	$C(a0),d0
00014234 6400                       		bcc.s	locret_15B76
00014236 0640 0100                  		addi.w	#$100,d0
0001423A B068 000C                  		cmp.w	$C(a0),d0
0001423E 6500                       		bcs.s	locret_15B76
00014240 117C 0001 003D             		move.b	#1,$3D(a0)
00014246 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
0001424C 117C 00A2 0020             		move.b	#$A2,$20(a0)
00014252 117C 0002 001A             		move.b	#2,$1A(a0)
00014258 303C 00B0                  		move.w	#$B0,d0
0001425C 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play saw sound
00014262                            
00014262                            loc_15B74:
00014262 588F                       		addq.l	#4,sp
00014264                            
00014264                            locret_15B76:
00014264 4E75                       		rts	
00014266                            ; ===========================================================================
00014266                            
00014266                            Obj6A_Animate04:
00014266 4EB9 0000 B674             		jsr	SpeedToPos
0001426C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00014272 5328 001E                  		subq.b	#1,$1E(a0)
00014276 6A00                       		bpl.s	locret_15B96
00014278 117C 0002 001E             		move.b	#2,$1E(a0)
0001427E 0868 0000 001A             		bchg	#0,$1A(a0)
00014284                            
00014284                            locret_15B96:
00014284 4E75                       		rts	
00014286                            ; ===========================================================================
00014286                            ; ---------------------------------------------------------------------------
00014286                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00014286                            ; ---------------------------------------------------------------------------
00014286                            Map_obj6A:
00014286                            	include "_maps\obj6A.asm"
00014286                            ; ---------------------------------------------------------------------------
00014286                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00014286                            ; ---------------------------------------------------------------------------
00014286 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
0001428A 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
0001428E 07                         byte_15BA0:	dc.b 7
0001428F C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00014294 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00014299 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001429E E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000142A3 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000142A8 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000142AD 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000142B2 07                         byte_15BC4:	dc.b 7
000142B3 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000142B8 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000142BD E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000142C2 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000142C7 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000142CC 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000142D1 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000142D6 04                         byte_15BE8:	dc.b 4
000142D7 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000142DC E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000142E1 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000142E6 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000142EB 04                         byte_15BFD:	dc.b 4
000142EC E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000142F1 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000142F6 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000142FB 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00014300                            		even
00014300                            		even
00014300                            
00014300                            ; ===========================================================================
00014300                            ; ---------------------------------------------------------------------------
00014300                            ; Object 6B - stomper (SBZ)
00014300                            ; ---------------------------------------------------------------------------
00014300                            
00014300                            Obj6B:					; XREF: Obj_Index
00014300 7000                       		moveq	#0,d0
00014302 1028 0024                  		move.b	$24(a0),d0
00014306 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
0001430A 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
0001430E                            ; ===========================================================================
0001430E 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00014310 0000                       		dc.w Obj6B_Action-Obj6B_Index
00014312                            
00014312 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00014316 1C20 3803                  		dc.b  $1C, $20,	$38,   3
0001431A 1C20 4004                  		dc.b  $1C, $20,	$40,   4
0001431E 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00014322 8040 0005                  		dc.b  $80, $40,	  0,   5
00014326                            ; ===========================================================================
00014326                            
00014326                            Obj6B_Main:				; XREF: Obj6B_Index
00014326 5428 0024                  		addq.b	#2,$24(a0)
0001432A 7000                       		moveq	#0,d0
0001432C 1028 0028                  		move.b	$28(a0),d0
00014330 E448                       		lsr.w	#2,d0
00014332 0240 001C                  		andi.w	#$1C,d0
00014336 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
0001433A 115B 0019                  		move.b	(a3)+,$19(a0)
0001433E 115B 0016                  		move.b	(a3)+,$16(a0)
00014342 E448                       		lsr.w	#2,d0
00014344 1140 001A                  		move.b	d0,$1A(a0)
00014348 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00014350 317C 22C0 0002             		move.w	#$22C0,2(a0)
00014356 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
0001435C 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
0001435E 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00014364 6700                       		beq.s	Obj6B_SBZ3
00014366                            
00014366                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00014366 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001436A 7000                       		moveq	#0,d0
0001436C 1028 0023                  		move.b	$23(a0),d0
00014370 6700                       		beq.s	Obj6B_Delete
00014372 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00014378                            
00014378                            Obj6B_Delete:
00014378 4EF9 0000 B6D6             		jmp	DeleteObject
0001437E                            ; ===========================================================================
0001437E                            
0001437E                            Obj6B_SBZ3:				; XREF: Obj6B_Main
0001437E 317C 41F0 0002             		move.w	#$41F0,2(a0)
00014384 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
0001438A 6600                       		bne.s	Obj6B_SBZ12
0001438C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00014390 7000                       		moveq	#0,d0
00014392 1028 0023                  		move.b	$23(a0),d0
00014396 6700                       		beq.s	Obj6B_SBZ12
00014398 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001439E 6700                       		beq.s	Obj6B_SBZ12
000143A0 4238 F7CB                  		clr.b	($FFFFF7CB).w
000143A4 60C0                       		bra.s	Obj6B_ChkGone
000143A6                            ; ===========================================================================
000143A6                            
000143A6                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000143A6 0028 0004 0001             		ori.b	#4,1(a0)
000143AC 117C 0004 0018             		move.b	#4,$18(a0)
000143B2 3168 0008 0034             		move.w	8(a0),$34(a0)
000143B8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000143BE 7000                       		moveq	#0,d0
000143C0 101B                       		move.b	(a3)+,d0
000143C2 3140 003C                  		move.w	d0,$3C(a0)
000143C6 7000                       		moveq	#0,d0
000143C8 1028 0028                  		move.b	$28(a0),d0
000143CC 6A00                       		bpl.s	Obj6B_Action
000143CE 0200 000F                  		andi.b	#$F,d0
000143D2 1140 003E                  		move.b	d0,$3E(a0)
000143D6 1153 0028                  		move.b	(a3),$28(a0)
000143DA 0C13 0005                  		cmpi.b	#5,(a3)
000143DE 6600                       		bne.s	Obj6B_ChkGone2
000143E0 08E8 0004 0001             		bset	#4,1(a0)
000143E6                            
000143E6                            Obj6B_ChkGone2:
000143E6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000143EA 7000                       		moveq	#0,d0
000143EC 1028 0023                  		move.b	$23(a0),d0
000143F0 6700                       		beq.s	Obj6B_Action
000143F2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000143F8                            
000143F8                            Obj6B_Action:				; XREF: Obj6B_Index
000143F8 3F28 0008                  		move.w	8(a0),-(sp)
000143FC 7000                       		moveq	#0,d0
000143FE 1028 0028                  		move.b	$28(a0),d0
00014402 0240 000F                  		andi.w	#$F,d0
00014408 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
0001440C 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00014410 381F                       		move.w	(sp)+,d4
00014412 4A28 0001                  		tst.b	1(a0)
00014416 6A00                       		bpl.s	Obj6B_ChkDel
00014418 7200                       		moveq	#0,d1
0001441A 1228 0019                  		move.b	$19(a0),d1
0001441E 0641 000B                  		addi.w	#$B,d1
00014422 7400                       		moveq	#0,d2
00014424 1428 0016                  		move.b	$16(a0),d2
00014428 3602                       		move.w	d2,d3
0001442A 5243                       		addq.w	#1,d3
0001442C 6100 962C                  		bsr.w	SolidObject
00014430                            
00014430                            Obj6B_ChkDel:
00014430 3028 0034                  		move.w	$34(a0),d0
00014434 0240 FF80                  		andi.w	#$FF80,d0
00014438 3238 F700                  		move.w	($FFFFF700).w,d1
0001443C 0441 0080                  		subi.w	#$80,d1
00014440 0241 FF80                  		andi.w	#$FF80,d1
00014446 0C40 0280                  		cmpi.w	#$280,d0
0001444A 6200                       		bhi.s	loc_15D64
0001444C 4EF9 0000 B69A             		jmp	DisplaySprite
00014452                            ; ===========================================================================
00014452                            
00014452                            loc_15D64:
00014452 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00014458 6600                       		bne.s	Obj6B_Delete2
0001445A 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001445E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00014462 7000                       		moveq	#0,d0
00014464 1028 0023                  		move.b	$23(a0),d0
00014468 6700                       		beq.s	Obj6B_Delete2
0001446A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00014470                            
00014470                            Obj6B_Delete2:
00014470 4EF9 0000 B6D6             		jmp	DeleteObject
00014476                            ; ===========================================================================
00014476 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
0001447A 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
0001447E 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00014482                            ; ===========================================================================
00014482                            
00014482                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00014482 4E75                       		rts	
00014484                            ; ===========================================================================
00014484                            
00014484                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00014484 4A28 0038                  		tst.b	$38(a0)
00014488 6600                       		bne.s	loc_15DB4
0001448A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001448E 7000                       		moveq	#0,d0
00014490 1028 003E                  		move.b	$3E(a0),d0
00014494 0832 0000 0000             		btst	#0,(a2,d0.w)
0001449A 6700                       		beq.s	loc_15DC2
0001449C 117C 0001 0038             		move.b	#1,$38(a0)
000144A2                            
000144A2                            loc_15DB4:
000144A2 3028 003C                  		move.w	$3C(a0),d0
000144A6 B068 003A                  		cmp.w	$3A(a0),d0
000144AA 6700                       		beq.s	loc_15DE0
000144AC 5468 003A                  		addq.w	#2,$3A(a0)
000144B0                            
000144B0                            loc_15DC2:
000144B0 3028 003A                  		move.w	$3A(a0),d0
000144B4 0828 0000 0022             		btst	#0,$22(a0)
000144BA 6700                       		beq.s	loc_15DD4
000144BC 4440                       		neg.w	d0
000144BE 0640 0080                  		addi.w	#$80,d0
000144C2                            
000144C2                            loc_15DD4:
000144C2 3228 0034                  		move.w	$34(a0),d1
000144C8 3141 0008                  		move.w	d1,8(a0)
000144CC 4E75                       		rts	
000144CE                            ; ===========================================================================
000144CE                            
000144CE                            loc_15DE0:
000144CE 5228 0028                  		addq.b	#1,$28(a0)
000144D2 317C 00B4 0036             		move.w	#$B4,$36(a0)
000144D8 4228 0038                  		clr.b	$38(a0)
000144DC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000144E0 7000                       		moveq	#0,d0
000144E2 1028 0023                  		move.b	$23(a0),d0
000144E6 67C8                       		beq.s	loc_15DC2
000144E8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000144EE 60C0                       		bra.s	loc_15DC2
000144F0                            ; ===========================================================================
000144F0                            
000144F0                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000144F0 4A28 0038                  		tst.b	$38(a0)
000144F4 6600                       		bne.s	loc_15E14
000144F6 5368 0036                  		subq.w	#1,$36(a0)
000144FA 6600                       		bne.s	loc_15E1E
000144FC 117C 0001 0038             		move.b	#1,$38(a0)
00014502                            
00014502                            loc_15E14:
00014502 4A68 003A                  		tst.w	$3A(a0)
00014506 6700                       		beq.s	loc_15E3C
00014508 5568 003A                  		subq.w	#2,$3A(a0)
0001450C                            
0001450C                            loc_15E1E:
0001450C 3028 003A                  		move.w	$3A(a0),d0
00014510 0828 0000 0022             		btst	#0,$22(a0)
00014516 6700                       		beq.s	loc_15E30
00014518 4440                       		neg.w	d0
0001451A 0640 0080                  		addi.w	#$80,d0
0001451E                            
0001451E                            loc_15E30:
0001451E 3228 0034                  		move.w	$34(a0),d1
00014524 3141 0008                  		move.w	d1,8(a0)
00014528 4E75                       		rts	
0001452A                            ; ===========================================================================
0001452A                            
0001452A                            loc_15E3C:
0001452A 5328 0028                  		subq.b	#1,$28(a0)
0001452E 4228 0038                  		clr.b	$38(a0)
00014532 45F8 FC00                  		lea	($FFFFFC00).w,a2
00014536 7000                       		moveq	#0,d0
00014538 1028 0023                  		move.b	$23(a0),d0
0001453C 67CE                       		beq.s	loc_15E1E
0001453E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00014544 60C6                       		bra.s	loc_15E1E
00014546                            ; ===========================================================================
00014546                            
00014546                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00014546 4A28 0038                  		tst.b	$38(a0)
0001454A 6600                       		bne.s	loc_15E7C
0001454C 4A68 003A                  		tst.w	$3A(a0)
00014550 6700                       		beq.s	loc_15E6A
00014552 5368 003A                  		subq.w	#1,$3A(a0)
00014556 6000                       		bra.s	loc_15E8E
00014558                            ; ===========================================================================
00014558                            
00014558                            loc_15E6A:
00014558 5368 0036                  		subq.w	#1,$36(a0)
0001455C 6A00                       		bpl.s	loc_15E8E
0001455E 317C 003C 0036             		move.w	#$3C,$36(a0)
00014564 117C 0001 0038             		move.b	#1,$38(a0)
0001456A                            
0001456A                            loc_15E7C:
0001456A 5068 003A                  		addq.w	#8,$3A(a0)
0001456E 3028 003A                  		move.w	$3A(a0),d0
00014572 B068 003C                  		cmp.w	$3C(a0),d0
00014576 6600                       		bne.s	loc_15E8E
00014578 4228 0038                  		clr.b	$38(a0)
0001457C                            
0001457C                            loc_15E8E:
0001457C 3028 003A                  		move.w	$3A(a0),d0
00014580 0828 0000 0022             		btst	#0,$22(a0)
00014586 6700                       		beq.s	loc_15EA0
00014588 4440                       		neg.w	d0
0001458A 0640 0038                  		addi.w	#$38,d0
0001458E                            
0001458E                            loc_15EA0:
0001458E 3228 0030                  		move.w	$30(a0),d1
00014594 3141 000C                  		move.w	d1,$C(a0)
00014598 4E75                       		rts	
0001459A                            ; ===========================================================================
0001459A                            
0001459A                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
0001459A 4A28 0038                  		tst.b	$38(a0)
0001459E 6600                       		bne.s	loc_15ED0
000145A0 4A68 003A                  		tst.w	$3A(a0)
000145A4 6700                       		beq.s	loc_15EBE
000145A6 5168 003A                  		subq.w	#8,$3A(a0)
000145AA 6000                       		bra.s	loc_15EF0
000145AC                            ; ===========================================================================
000145AC                            
000145AC                            loc_15EBE:
000145AC 5368 0036                  		subq.w	#1,$36(a0)
000145B0 6A00                       		bpl.s	loc_15EF0
000145B2 317C 003C 0036             		move.w	#$3C,$36(a0)
000145B8 117C 0001 0038             		move.b	#1,$38(a0)
000145BE                            
000145BE                            loc_15ED0:
000145BE 3028 003A                  		move.w	$3A(a0),d0
000145C2 B068 003C                  		cmp.w	$3C(a0),d0
000145C6 6700                       		beq.s	loc_15EE0
000145C8 5068 003A                  		addq.w	#8,$3A(a0)
000145CC 6000                       		bra.s	loc_15EF0
000145CE                            ; ===========================================================================
000145CE                            
000145CE                            loc_15EE0:
000145CE 5368 0036                  		subq.w	#1,$36(a0)
000145D2 6A00                       		bpl.s	loc_15EF0
000145D4 317C 003C 0036             		move.w	#$3C,$36(a0)
000145DA 4228 0038                  		clr.b	$38(a0)
000145DE                            
000145DE                            loc_15EF0:
000145DE 3028 003A                  		move.w	$3A(a0),d0
000145E2 0828 0000 0022             		btst	#0,$22(a0)
000145E8 6700                       		beq.s	loc_15F02
000145EA 4440                       		neg.w	d0
000145EC 0640 0038                  		addi.w	#$38,d0
000145F0                            
000145F0                            loc_15F02:
000145F0 3228 0030                  		move.w	$30(a0),d1
000145F6 3141 000C                  		move.w	d1,$C(a0)
000145FA 4E75                       		rts	
000145FC                            ; ===========================================================================
000145FC                            
000145FC                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000145FC 4A28 0038                  		tst.b	$38(a0)
00014600 6600                       		bne.s	loc_15F3E
00014602 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00014606 7000                       		moveq	#0,d0
00014608 1028 003E                  		move.b	$3E(a0),d0
0001460C 0832 0000 0000             		btst	#0,(a2,d0.w)
00014612 6700                       		beq.s	locret_15F5C
00014614 117C 0001 0038             		move.b	#1,$38(a0)
0001461A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001461E 7000                       		moveq	#0,d0
00014620 1028 0023                  		move.b	$23(a0),d0
00014624 6700                       		beq.s	loc_15F3E
00014626 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001462C                            
0001462C                            loc_15F3E:
0001462C 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00014634 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
0001463C 3168 0008 0034             		move.w	8(a0),$34(a0)
00014642 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00014648 6700                       		beq.s	loc_15F5E
0001464A                            
0001464A                            locret_15F5C:
0001464A 4E75                       		rts	
0001464C                            ; ===========================================================================
0001464C                            
0001464C                            loc_15F5E:
0001464C 4228 0028                  		clr.b	$28(a0)
00014650 4228 0038                  		clr.b	$38(a0)
00014654 4E75                       		rts	
00014656                            ; ===========================================================================
00014656                            ; ---------------------------------------------------------------------------
00014656                            ; Sprite mappings - stomper and	platforms (SBZ)
00014656                            ; ---------------------------------------------------------------------------
00014656                            Map_obj6B:
00014656                            	include "_maps\obj6B.asm"
00014656                            ; ---------------------------------------------------------------------------
00014656                            ; Sprite mappings - stomper and	platforms (SBZ)
00014656                            ; ---------------------------------------------------------------------------
00014656 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
0001465A 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
0001465E 0000                       		dc.w byte_15FB0-Map_obj6B
00014660 04                         byte_15F72:	dc.b 4
00014661 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00014666 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
0001466B F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00014670 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00014675 08                         byte_15F87:	dc.b 8
00014676 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
0001467B E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00014680 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00014685 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
0001468A 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001468F 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00014694 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00014699 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001469E 0E                         byte_15FB0:	dc.b $E
0001469F C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
000146A4 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
000146A9 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
000146AE C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000146B3 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000146B8 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000146BD C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000146C2 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000146C7 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000146CC E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000146D1 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000146D6 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000146DB 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000146E0 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000146E6 00                         		even
000146E6 00                         		even
000146E6                            
000146E6                            ; ===========================================================================
000146E6                            ; ---------------------------------------------------------------------------
000146E6                            ; Object 6C - vanishing	platforms (SBZ)
000146E6                            ; ---------------------------------------------------------------------------
000146E6                            
000146E6                            Obj6C:					; XREF: Obj_Index
000146E6 7000                       		moveq	#0,d0
000146E8 1028 0024                  		move.b	$24(a0),d0
000146EC 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000146F0 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000146F4                            ; ===========================================================================
000146F4 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000146F6 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000146F8 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000146FA 0000                       		dc.w loc_16068-Obj6C_Index
000146FC                            ; ===========================================================================
000146FC                            
000146FC                            Obj6C_Main:				; XREF: Obj6C_Index
000146FC 5C28 0024                  		addq.b	#6,$24(a0)
00014700 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00014708 317C 44C3 0002             		move.w	#$44C3,2(a0)
0001470E 0028 0004 0001             		ori.b	#4,1(a0)
00014714 117C 0010 0019             		move.b	#$10,$19(a0)
0001471A 117C 0004 0018             		move.b	#4,$18(a0)
00014720 7000                       		moveq	#0,d0
00014722 1028 0028                  		move.b	$28(a0),d0	; get object type
00014726 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001472A 5240                       		addq.w	#1,d0		; add 1
0001472C EF48                       		lsl.w	#7,d0		; multiply by $80
0001472E 3200                       		move.w	d0,d1
00014730 5340                       		subq.w	#1,d0
00014732 3140 0030                  		move.w	d0,$30(a0)
00014736 3140 0032                  		move.w	d0,$32(a0)
0001473A 7000                       		moveq	#0,d0
0001473C 1028 0028                  		move.b	$28(a0),d0	; get object type
00014740 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00014744 0641 0080                  		addi.w	#$80,d1
00014748 C0C1                       		mulu.w	d1,d0
0001474A E088                       		lsr.l	#8,d0
0001474C 3140 0036                  		move.w	d0,$36(a0)
00014750 5341                       		subq.w	#1,d1
00014752 3141 0038                  		move.w	d1,$38(a0)
00014756                            
00014756                            loc_16068:				; XREF: Obj6C_Index
00014756 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014762 6600                       		bne.s	Obj6C_Animate
00014764 5928 0024                  		subq.b	#4,$24(a0)
00014768 6000                       		bra.s	Obj6C_Vanish
0001476A                            ; ===========================================================================
0001476A                            
0001476A                            Obj6C_Animate:
0001476A 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00014770 4EB9 0000 87C0             		jsr	AnimateSprite
00014776 6000 8FBA                  		bra.w	MarkObjGone
0001477A                            ; ===========================================================================
0001477A                            
0001477A                            Obj6C_Vanish:				; XREF: Obj6C_Index
0001477A 5368 0030                  		subq.w	#1,$30(a0)
0001477E 6A00                       		bpl.s	loc_160AA
00014780 317C 007F 0030             		move.w	#127,$30(a0)
00014786 4A28 001C                  		tst.b	$1C(a0)
0001478A 6700                       		beq.s	loc_160A4
0001478C 3168 0032 0030             		move.w	$32(a0),$30(a0)
00014792                            
00014792                            loc_160A4:
00014792 0868 0000 001C             		bchg	#0,$1C(a0)
00014798                            
00014798                            loc_160AA:
00014798 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001479E 4EB9 0000 87C0             		jsr	AnimateSprite
000147A4 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
000147AA 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
000147AC 0C28 0002 0024             		cmpi.b	#2,$24(a0)
000147B2 6600                       		bne.s	loc_160D6
000147B4 7200                       		moveq	#0,d1
000147B6 1228 0019                  		move.b	$19(a0),d1
000147BA 4EB9 0000 5562             		jsr	(PlatformObject).l
000147C0 6000 8F70                  		bra.w	MarkObjGone
000147C4                            ; ===========================================================================
000147C4                            
000147C4                            loc_160D6:
000147C4 7200                       		moveq	#0,d1
000147C6 1228 0019                  		move.b	$19(a0),d1
000147CA 4EB9 0000 56D6             		jsr	(ExitPlatform).l
000147D0 3428 0008                  		move.w	8(a0),d2
000147D4 4EB9 0000 5C40             		jsr	(MvSonicOnPtfm2).l
000147DA 6000 8F56                  		bra.w	MarkObjGone
000147DE                            ; ===========================================================================
000147DE                            
000147DE                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000147DE 0828 0003 0022             		btst	#3,$22(a0)
000147E4 6700                       		beq.s	Obj6C_Display
000147E6 43F8 D000                  		lea	($FFFFD000).w,a1
000147EA 08A9 0003 0022             		bclr	#3,$22(a1)
000147F0 08A8 0003 0022             		bclr	#3,$22(a0)
000147F6 117C 0002 0024             		move.b	#2,$24(a0)
000147FC 4228 0025                  		clr.b	$25(a0)
00014800                            
00014800                            Obj6C_Display:
00014800 6000 8F30                  		bra.w	MarkObjGone
00014804                            ; ===========================================================================
00014804                            Ani_obj6C:
00014804                            	include "_anim\obj6C.asm"
00014804                            ; ---------------------------------------------------------------------------
00014804                            ; Animation script - vanishing platforms (SBZ)
00014804                            ; ---------------------------------------------------------------------------
00014804 0000                       		dc.w byte_1611A-Ani_obj6C
00014806 0000                       		dc.w byte_16122-Ani_obj6C
00014808 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00014810 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00014818                            		even
00014818                            		even
00014818                            
00014818                            ; ---------------------------------------------------------------------------
00014818                            ; Sprite mappings - vanishing platforms	(SBZ)
00014818                            ; ---------------------------------------------------------------------------
00014818                            Map_obj6C:
00014818                            	include "_maps\obj6C.asm"
00014818                            ; ---------------------------------------------------------------------------
00014818                            ; Sprite mappings - vanishing platforms	(SBZ)
00014818                            ; ---------------------------------------------------------------------------
00014818 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
0001481C 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00014820 01                         byte_16132:	dc.b 1
00014821 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00014826 01                         byte_16138:	dc.b 1
00014827 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
0001482C 01                         byte_1613E:	dc.b 1
0001482D F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00014832 00                         byte_16144:	dc.b 0
00014834 00                         		even
00014834 00                         		even
00014834                            
00014834                            ; ===========================================================================
00014834                            ; ---------------------------------------------------------------------------
00014834                            ; Object 6E - electrocution orbs (SBZ)
00014834                            ; ---------------------------------------------------------------------------
00014834                            
00014834                            Obj6E:					; XREF: Obj_Index
00014834 7000                       		moveq	#0,d0
00014836 1028 0024                  		move.b	$24(a0),d0
0001483A 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
0001483E 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00014842                            ; ===========================================================================
00014842 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00014844 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00014846                            ; ===========================================================================
00014846                            
00014846                            Obj6E_Main:				; XREF: Obj6E_Index
00014846 5428 0024                  		addq.b	#2,$24(a0)
0001484A 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00014852 317C 047E 0002             		move.w	#$47E,2(a0)
00014858 0028 0004 0001             		ori.b	#4,1(a0)
0001485E 117C 0028 0019             		move.b	#$28,$19(a0)
00014864 7000                       		moveq	#0,d0
00014866 1028 0028                  		move.b	$28(a0),d0	; read object type
0001486A E948                       		lsl.w	#4,d0		; multiply by $10
0001486C 5340                       		subq.w	#1,d0
0001486E 3140 0034                  		move.w	d0,$34(a0)
00014872                            
00014872                            Obj6E_Shock:				; XREF: Obj6E_Index
00014872 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001487A 6600                       		bne.s	Obj6E_Animate
0001487C 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00014882 4A28 0001                  		tst.b	1(a0)
00014886 6A00                       		bpl.s	Obj6E_Animate
00014888 303C 00B1                  		move.w	#$B1,d0
0001488C 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play electricity sound
00014892                            
00014892                            Obj6E_Animate:
00014892 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00014898 4EB9 0000 87C0             		jsr	AnimateSprite
0001489E 117C 0000 0020             		move.b	#0,$20(a0)
000148A4 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
000148AA 6600                       		bne.s	Obj6E_Display	; if not, branch
000148AC 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
000148B2                            
000148B2                            Obj6E_Display:
000148B2 6000 8E7E                  		bra.w	MarkObjGone
000148B6                            ; ===========================================================================
000148B6                            Ani_obj6E:
000148B6                            	include "_anim\obj6E.asm"
000148B6                            ; ---------------------------------------------------------------------------
000148B6                            ; Animation script - electrocution orbs (SBZ)
000148B6                            ; ---------------------------------------------------------------------------
000148B6 0000                       		dc.w byte_161CC-Ani_obj6E
000148B8 0000                       		dc.w byte_161D0-Ani_obj6E
000148BA 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
000148BE 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
000148CE                            		even
000148CE                            		even
000148CE                            
000148CE                            ; ---------------------------------------------------------------------------
000148CE                            ; Sprite mappings - electrocution orbs (SBZ)
000148CE                            ; ---------------------------------------------------------------------------
000148CE                            Map_obj6E:
000148CE                            	include "_maps\obj6E.asm"
000148CE                            ; ---------------------------------------------------------------------------
000148CE                            ; Sprite mappings - electrocution orbs (SBZ)
000148CE                            ; ---------------------------------------------------------------------------
000148CE 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
000148D2 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
000148D6 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
000148DA 02                         byte_161EC:	dc.b 2
000148DB F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000148E0 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000148E5 03                         byte_161F7:	dc.b 3
000148E6 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000148EB F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000148F0 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000148F5 05                         byte_16207:	dc.b 5
000148F6 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000148FB F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00014900 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00014905 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
0001490A F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
0001490F 04                         byte_16221:	dc.b 4
00014910 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00014915 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001491A F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
0001491F F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00014924 06                         byte_16236:	dc.b 6
00014925 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001492A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001492F F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00014934 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00014939 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
0001493E F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00014943 04                         byte_16255:	dc.b 4
00014944 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00014949 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001494E F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00014953 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00014958                            		even
00014958                            		even
00014958                            
00014958                            ; ===========================================================================
00014958                            ; ---------------------------------------------------------------------------
00014958                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00014958                            ; ---------------------------------------------------------------------------
00014958                            
00014958                            Obj6F:					; XREF: Obj_Index
00014958 7000                       		moveq	#0,d0
0001495A 1028 0024                  		move.b	$24(a0),d0
0001495E 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00014962 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00014966 3028 0030                  		move.w	$30(a0),d0
0001496A 0240 FF80                  		andi.w	#$FF80,d0
0001496E 3238 F700                  		move.w	($FFFFF700).w,d1
00014972 0441 0080                  		subi.w	#$80,d1
00014976 0241 FF80                  		andi.w	#$FF80,d1
0001497C 0C40 0280                  		cmpi.w	#$280,d0
00014980 6200                       		bhi.s	loc_1629A
00014982                            
00014982                            Obj6F_Display:
00014982 4EF9 0000 B69A             		jmp	DisplaySprite
00014988                            ; ===========================================================================
00014988                            
00014988                            loc_1629A:
00014988 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
0001498E 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00014990 0C40 FF80                  		cmpi.w	#-$80,d0
00014994 64EC                       		bcc.s	Obj6F_Display
00014996                            
00014996                            Obj6F_Act1or2:
00014996 1028 002F                  		move.b	$2F(a0),d0
0001499A 6A00                       		bpl.s	Obj6F_Delete
0001499C 0240 007F                  		andi.w	#$7F,d0
000149A0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000149A4 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000149AA                            
000149AA                            Obj6F_Delete:
000149AA 4EF9 0000 B6D6             		jmp	DeleteObject
000149B0                            ; ===========================================================================
000149B0 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
000149B2 0000                       		dc.w loc_163D8-Obj6F_Index
000149B4                            ; ===========================================================================
000149B4                            
000149B4                            Obj6F_Main:				; XREF: Obj6F_Index
000149B4 1028 0028                  		move.b	$28(a0),d0
000149B8 6B00 0000                  		bmi.w	loc_16380
000149BC 5428 0024                  		addq.b	#2,$24(a0)
000149C0 217C 0001 4028 0004        		move.l	#Map_obj69a,4(a0)
000149C8 317C 04DF 0002             		move.w	#$4DF,2(a0)
000149CE 117C 0010 0019             		move.b	#$10,$19(a0)
000149D4 0028 0004 0001             		ori.b	#4,1(a0)
000149DA 117C 0004 0018             		move.b	#4,$18(a0)
000149E0 7000                       		moveq	#0,d0
000149E2 1028 0028                  		move.b	$28(a0),d0
000149E6 3200                       		move.w	d0,d1
000149E8 E648                       		lsr.w	#3,d0
000149EA 0240 001E                  		andi.w	#$1E,d0
000149EE 45FA 0000                  		lea	off_164A6(pc),a2
000149F2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000149F6 315A 0038                  		move.w	(a2)+,$38(a0)
000149FA 315A 0030                  		move.w	(a2)+,$30(a0)
000149FE 214A 003C                  		move.l	a2,$3C(a0)
00014A02 0241 000F                  		andi.w	#$F,d1
00014A06 E549                       		lsl.w	#2,d1
00014A08 1141 0038                  		move.b	d1,$38(a0)
00014A0C 117C 0004 003A             		move.b	#4,$3A(a0)
00014A12 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00014A16 6700                       		beq.s	loc_16356
00014A18 117C 0001 003B             		move.b	#1,$3B(a0)
00014A1E 4428 003A                  		neg.b	$3A(a0)
00014A22 7200                       		moveq	#0,d1
00014A24 1228 0038                  		move.b	$38(a0),d1
00014A2C B228 0039                  		cmp.b	$39(a0),d1
00014A30 6500                       		bcs.s	loc_16352
00014A32 1001                       		move.b	d1,d0
00014A34 7200                       		moveq	#0,d1
00014A36 4A00                       		tst.b	d0
00014A38 6A00                       		bpl.s	loc_16352
00014A3A 1228 0039                  		move.b	$39(a0),d1
00014A3E 5901                       		subq.b	#4,d1
00014A40                            
00014A40                            loc_16352:
00014A40 1141 0038                  		move.b	d1,$38(a0)
00014A44                            
00014A44                            loc_16356:
00014A44 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00014A4A 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00014A50 4A41                       		tst.w	d1
00014A52 6600                       		bne.s	loc_1636C
00014A54 117C 0001 001C             		move.b	#1,$1C(a0)
00014A5A                            
00014A5A                            loc_1636C:
00014A5A 0C41 0008                  		cmpi.w	#8,d1
00014A5E 6600                       		bne.s	loc_16378
00014A60 117C 0000 001C             		move.b	#0,$1C(a0)
00014A66                            
00014A66                            loc_16378:
00014A66 6100 BB68                  		bsr.w	Obj63_ChangeDir
00014A6A 6000 0000                  		bra.w	loc_163D8
00014A6E                            ; ===========================================================================
00014A6E                            
00014A6E                            loc_16380:				; XREF: Obj6F_Main
00014A6E 1140 002F                  		move.b	d0,$2F(a0)
00014A72 0240 007F                  		andi.w	#$7F,d0
00014A76 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00014A7A 08F2 0000 0000             		bset	#0,(a2,d0.w)
00014A80 6700                       		beq.s	loc_1639A
00014A82 4EF9 0000 B6D6             		jmp	DeleteObject
00014A88                            ; ===========================================================================
00014A88                            
00014A88                            loc_1639A:
00014A8A 0240 001E                  		andi.w	#$1E,d0
00014A8E 0640 0080                  		addi.w	#$80,d0
00014A92 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00014A98 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014A9C 321A                       		move.w	(a2)+,d1
00014A9E 2248                       		movea.l	a0,a1
00014AA0 6000                       		bra.s	Obj6F_LoadPform
00014AA2                            ; ===========================================================================
00014AA2                            
00014AA2                            Obj6F_Loop:
00014AA2 4EB9 0000 BB20             		jsr	SingleObjLoad
00014AA8 6600                       		bne.s	loc_163D0
00014AAA                            
00014AAA                            Obj6F_LoadPform:			; XREF: loc_1639A
00014AAA 12BC 006F                  		move.b	#$6F,0(a1)
00014AAE 335A 0008                  		move.w	(a2)+,8(a1)
00014AB2 335A 000C                  		move.w	(a2)+,$C(a1)
00014AB6 301A                       		move.w	(a2)+,d0
00014AB8 1340 0028                  		move.b	d0,$28(a1)
00014ABC                            
00014ABC                            loc_163D0:
00014ABC 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00014AC0                            
00014AC0 588F                       		addq.l	#4,sp
00014AC2 4E75                       		rts	
00014AC4                            ; ===========================================================================
00014AC4                            
00014AC4                            loc_163D8:				; XREF: Obj6F_Index
00014AC4 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00014ACA 4EB9 0000 87C0             		jsr	AnimateSprite
00014AD0 4A28 001A                  		tst.b	$1A(a0)
00014AD4 6600                       		bne.s	loc_16404
00014AD6 3F28 0008                  		move.w	8(a0),-(sp)
00014ADA 6100 0000                  		bsr.w	loc_16424
00014ADE 323C 001B                  		move.w	#$1B,d1
00014AE2 343C 0007                  		move.w	#7,d2
00014AE6 3602                       		move.w	d2,d3
00014AE8 5243                       		addq.w	#1,d3
00014AEA 381F                       		move.w	(sp)+,d4
00014AEC 6000 8F6C                  		bra.w	SolidObject
00014AF0                            ; ===========================================================================
00014AF0                            
00014AF0                            loc_16404:
00014AF0 0828 0003 0022             		btst	#3,$22(a0)
00014AF6 6700                       		beq.s	loc_16420
00014AF8 43F8 D000                  		lea	($FFFFD000).w,a1
00014AFC 08A9 0003 0022             		bclr	#3,$22(a1)
00014B02 08A8 0003 0022             		bclr	#3,$22(a0)
00014B08 4228 0025                  		clr.b	$25(a0)
00014B0C                            
00014B0C                            loc_16420:
00014B0C 6000 0002                  		bra.w	*+4
00014B10                            
00014B10                            loc_16424:
00014B10 3028 0008                  		move.w	8(a0),d0
00014B14 B068 0034                  		cmp.w	$34(a0),d0
00014B18 6600                       		bne.s	loc_16484
00014B1A 3028 000C                  		move.w	$C(a0),d0
00014B1E B068 0036                  		cmp.w	$36(a0),d0
00014B22 6600                       		bne.s	loc_16484
00014B24 7200                       		moveq	#0,d1
00014B26 1228 0038                  		move.b	$38(a0),d1
00014B2E B228 0039                  		cmp.b	$39(a0),d1
00014B32 6500                       		bcs.s	loc_16456
00014B34 1001                       		move.b	d1,d0
00014B36 7200                       		moveq	#0,d1
00014B38 4A00                       		tst.b	d0
00014B3A 6A00                       		bpl.s	loc_16456
00014B3C 1228 0039                  		move.b	$39(a0),d1
00014B40 5901                       		subq.b	#4,d1
00014B42                            
00014B42                            loc_16456:
00014B42 1141 0038                  		move.b	d1,$38(a0)
00014B46 2268 003C                  		movea.l	$3C(a0),a1
00014B4A 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00014B50 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00014B56 4A41                       		tst.w	d1
00014B58 6600                       		bne.s	loc_16474
00014B5A 117C 0001 001C             		move.b	#1,$1C(a0)
00014B60                            
00014B60                            loc_16474:
00014B60 0C41 0008                  		cmpi.w	#8,d1
00014B64 6600                       		bne.s	loc_16480
00014B66 117C 0000 001C             		move.b	#0,$1C(a0)
00014B6C                            
00014B6C                            loc_16480:
00014B6C 6100 BA62                  		bsr.w	Obj63_ChangeDir
00014B70                            
00014B70                            loc_16484:
00014B70 4EF9 0000 B674             		jmp	SpeedToPos
00014B76                            ; ===========================================================================
00014B76                            Ani_obj6F:
00014B76                            	include "_anim\obj6F.asm"
00014B76                            ; ---------------------------------------------------------------------------
00014B76                            ; Animation script - platform on conveyor belt (SBZ)
00014B76                            ; ---------------------------------------------------------------------------
00014B76 0000                       		dc.w byte_1648E-Ani_obj6F
00014B78 0000                       		dc.w byte_164A2-Ani_obj6F
00014B7A 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00014B87 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00014B8E 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00014B92 00                         		even
00014B92 00                         		even
00014B92                            
00014B92 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00014B98 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00014B9E 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00014BB2 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00014BC6 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00014BDA 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00014BEE 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00014C02 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00014C16                            ; ===========================================================================
00014C16                            ; ---------------------------------------------------------------------------
00014C16                            ; Object 70 - large girder block (SBZ)
00014C16                            ; ---------------------------------------------------------------------------
00014C16                            
00014C16                            Obj70:					; XREF: Obj_Index
00014C16 7000                       		moveq	#0,d0
00014C18 1028 0024                  		move.b	$24(a0),d0
00014C1C 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00014C20 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00014C24                            ; ===========================================================================
00014C24 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00014C26 0000                       		dc.w Obj70_Action-Obj70_Index
00014C28                            ; ===========================================================================
00014C28                            
00014C28                            Obj70_Main:				; XREF: Obj70_Index
00014C28 5428 0024                  		addq.b	#2,$24(a0)
00014C2C 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00014C34 317C 42F0 0002             		move.w	#$42F0,2(a0)
00014C3A 0028 0004 0001             		ori.b	#4,1(a0)
00014C40 117C 0004 0018             		move.b	#4,$18(a0)
00014C46 117C 0060 0019             		move.b	#$60,$19(a0)
00014C4C 117C 0018 0016             		move.b	#$18,$16(a0)
00014C52 3168 0008 0032             		move.w	8(a0),$32(a0)
00014C58 3168 000C 0030             		move.w	$C(a0),$30(a0)
00014C5E 6100 0000                  		bsr.w	Obj70_Move2
00014C62                            
00014C62                            Obj70_Action:				; XREF: Obj70_Index
00014C62 3F28 0008                  		move.w	8(a0),-(sp)
00014C66 4A68 003A                  		tst.w	$3A(a0)
00014C6A 6700                       		beq.s	Obj70_Move
00014C6C 5368 003A                  		subq.w	#1,$3A(a0)
00014C70 6600                       		bne.s	Obj70_Solid
00014C72                            
00014C72                            Obj70_Move:
00014C72 4EB9 0000 B674             		jsr	SpeedToPos
00014C78 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00014C7C 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00014C7E 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00014C82                            
00014C82                            Obj70_Solid:
00014C82 381F                       		move.w	(sp)+,d4
00014C84 4A28 0001                  		tst.b	1(a0)
00014C88 6A00                       		bpl.s	Obj70_ChkDel
00014C8A 7200                       		moveq	#0,d1
00014C8C 1228 0019                  		move.b	$19(a0),d1
00014C90 0641 000B                  		addi.w	#$B,d1
00014C94 7400                       		moveq	#0,d2
00014C96 1428 0016                  		move.b	$16(a0),d2
00014C9A 3602                       		move.w	d2,d3
00014C9C 5243                       		addq.w	#1,d3
00014C9E 6100 8DBA                  		bsr.w	SolidObject
00014CA2                            
00014CA2                            Obj70_ChkDel:
00014CA2 3028 0032                  		move.w	$32(a0),d0
00014CA6 0240 FF80                  		andi.w	#$FF80,d0
00014CAA 3238 F700                  		move.w	($FFFFF700).w,d1
00014CAE 0441 0080                  		subi.w	#$80,d1
00014CB2 0241 FF80                  		andi.w	#$FF80,d1
00014CB8 0C40 0280                  		cmpi.w	#$280,d0
00014CBC 6200                       		bhi.s	Obj70_Delete
00014CBE 4EF9 0000 B69A             		jmp	DisplaySprite
00014CC4                            ; ===========================================================================
00014CC4                            
00014CC4                            Obj70_Delete:
00014CC4 4EF9 0000 B6D6             		jmp	DeleteObject
00014CCA                            ; ===========================================================================
00014CCA                            
00014CCA                            Obj70_Move2:				; XREF: Obj70_Main
00014CCA 1028 0038                  		move.b	$38(a0),d0
00014CCE 0240 0018                  		andi.w	#$18,d0
00014CD2 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00014CD8 43F1 0000                  		lea	(a1,d0.w),a1
00014CDC 3159 0010                  		move.w	(a1)+,$10(a0)
00014CE0 3159 0012                  		move.w	(a1)+,$12(a0)
00014CE4 3159 0034                  		move.w	(a1)+,$34(a0)
00014CE8 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00014CEC 317C 0007 003A             		move.w	#7,$3A(a0)
00014CF2 4E75                       		rts	
00014CF4                            ; ===========================================================================
00014CF4 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00014CFC 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00014D04 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00014D0C 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00014D14                            ; ---------------------------------------------------------------------------
00014D14                            ; Sprite mappings - large girder block (SBZ)
00014D14                            ; ---------------------------------------------------------------------------
00014D14                            Map_obj70:
00014D14                            	include "_maps\obj70.asm"
00014D14                            ; ---------------------------------------------------------------------------
00014D14                            ; Sprite mappings - large girder block (SBZ)
00014D14                            ; ---------------------------------------------------------------------------
00014D14 0000                       		dc.w byte_1662A-Map_obj70
00014D16 0C                         byte_1662A:	dc.b $C
00014D17 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00014D1C 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00014D21 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00014D26 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00014D2B E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00014D30 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00014D35 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00014D3A 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00014D3F E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00014D44 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00014D49 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00014D4E 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00014D54 00                         		even
00014D54 00                         		even
00014D54                            
00014D54                            ; ===========================================================================
00014D54                            ; ---------------------------------------------------------------------------
00014D54                            ; Object 72 - teleporter (SBZ)
00014D54                            ; ---------------------------------------------------------------------------
00014D54                            
00014D54                            Obj72:					; XREF: Obj_Index
00014D54 7000                       		moveq	#0,d0
00014D56 1028 0024                  		move.b	$24(a0),d0
00014D5A 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00014D5E 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00014D62 3028 0008                  		move.w	8(a0),d0
00014D66 0240 FF80                  		andi.w	#$FF80,d0
00014D6A 3238 F700                  		move.w	($FFFFF700).w,d1
00014D6E 0441 0080                  		subi.w	#$80,d1
00014D72 0241 FF80                  		andi.w	#$FF80,d1
00014D78 0C40 0280                  		cmpi.w	#$280,d0
00014D7C 6200                       		bhi.s	Obj72_Delete
00014D7E 4E75                       		rts	
00014D80                            ; ===========================================================================
00014D80                            
00014D80                            Obj72_Delete:
00014D80 4EF9 0000 B6D6             		jmp	DeleteObject
00014D86                            ; ===========================================================================
00014D86 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00014D88 0000                       		dc.w loc_166C8-Obj72_Index
00014D8A 0000                       		dc.w loc_1675E-Obj72_Index
00014D8C 0000                       		dc.w loc_16798-Obj72_Index
00014D8E                            ; ===========================================================================
00014D8E                            
00014D8E                            Obj72_Main:				; XREF: Obj72_Index
00014D8E 5428 0024                  		addq.b	#2,$24(a0)
00014D92 1028 0028                  		move.b	$28(a0),d0
00014D98 0240 001E                  		andi.w	#$1E,d0
00014D9C 45FA 0000                  		lea	Obj72_Data(pc),a2
00014DA0 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014DA4 315A 003A                  		move.w	(a2)+,$3A(a0)
00014DA8 214A 003C                  		move.l	a2,$3C(a0)
00014DAC 315A 0036                  		move.w	(a2)+,$36(a0)
00014DB0 315A 0038                  		move.w	(a2)+,$38(a0)
00014DB4                            
00014DB4                            loc_166C8:				; XREF: Obj72_Index
00014DB4 43F8 D000                  		lea	($FFFFD000).w,a1
00014DB8 3029 0008                  		move.w	8(a1),d0
00014DC0 0828 0000 0022             		btst	#0,$22(a0)
00014DC6 6700                       		beq.s	loc_166E0
00014DC8 0640 000F                  		addi.w	#$F,d0
00014DCC                            
00014DCC                            loc_166E0:
00014DCC 0C40 0010                  		cmpi.w	#$10,d0
00014DD0 6400                       		bcc.s	locret_1675C
00014DD2 3229 000C                  		move.w	$C(a1),d1
00014DDA 0641 0020                  		addi.w	#$20,d1
00014DDE 0C41 0040                  		cmpi.w	#$40,d1
00014DE2 6400                       		bcc.s	locret_1675C
00014DE4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00014DE8 6600                       		bne.s	locret_1675C
00014DEA 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00014DF0 6600                       		bne.s	loc_1670E
00014DF2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00014DF8 6500                       		bcs.s	locret_1675C
00014DFA                            
00014DFA                            loc_1670E:
00014DFA 5428 0024                  		addq.b	#2,$24(a0)
00014DFE 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014E04 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00014E0A 337C 0800 0014             		move.w	#$800,$14(a1)
00014E10 337C 0000 0010             		move.w	#0,$10(a1)
00014E16 337C 0000 0012             		move.w	#0,$12(a1)
00014E1C 08A8 0005 0022             		bclr	#5,$22(a0)
00014E22 08A9 0005 0022             		bclr	#5,$22(a1)
00014E28 08E9 0001 0022             		bset	#1,$22(a1)
00014E2E 3368 0008 0008             		move.w	8(a0),8(a1)
00014E34 3368 000C 000C             		move.w	$C(a0),$C(a1)
00014E3A 4228 0032                  		clr.b	$32(a0)
00014E3E 303C 00BE                  		move.w	#$BE,d0
00014E42 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00014E48                            
00014E48                            locret_1675C:
00014E48 4E75                       		rts	
00014E4A                            ; ===========================================================================
00014E4A                            
00014E4A                            loc_1675E:				; XREF: Obj72_Index
00014E4A 43F8 D000                  		lea	($FFFFD000).w,a1
00014E4E 1028 0032                  		move.b	$32(a0),d0
00014E52 5428 0032                  		addq.b	#2,$32(a0)
00014E56 4EB9 0000 2556             		jsr	(CalcSine).l
00014E5C EA40                       		asr.w	#5,d0
00014E5E 3428 000C                  		move.w	$C(a0),d2
00014E64 3342 000C                  		move.w	d2,$C(a1)
00014E68 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00014E6E 6600                       		bne.s	locret_16796
00014E70 6100 0000                  		bsr.w	sub_1681C
00014E74 5428 0024                  		addq.b	#2,$24(a0)
00014E78 303C 00BC                  		move.w	#$BC,d0
00014E7C 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play teleport sound
00014E82                            
00014E82                            locret_16796:
00014E82 4E75                       		rts	
00014E84                            ; ===========================================================================
00014E84                            
00014E84                            loc_16798:				; XREF: Obj72_Index
00014E84 588F                       		addq.l	#4,sp
00014E86 43F8 D000                  		lea	($FFFFD000).w,a1
00014E8A 5328 002E                  		subq.b	#1,$2E(a0)
00014E8E 6A00                       		bpl.s	loc_167DA
00014E90 3368 0036 0008             		move.w	$36(a0),8(a1)
00014E96 3368 0038 000C             		move.w	$38(a0),$C(a1)
00014E9C 7200                       		moveq	#0,d1
00014E9E 1228 003A                  		move.b	$3A(a0),d1
00014EA2 5801                       		addq.b	#4,d1
00014EA4 B228 003B                  		cmp.b	$3B(a0),d1
00014EA8 6500                       		bcs.s	loc_167C2
00014EAA 7200                       		moveq	#0,d1
00014EAC 6000                       		bra.s	loc_16800
00014EAE                            ; ===========================================================================
00014EAE                            
00014EAE                            loc_167C2:
00014EAE 1141 003A                  		move.b	d1,$3A(a0)
00014EB2 2468 003C                  		movea.l	$3C(a0),a2
00014EB6 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00014EBC 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00014EC2 6000 0000                  		bra.w	sub_1681C
00014EC6                            ; ===========================================================================
00014EC6                            
00014EC6                            loc_167DA:
00014EC6 2429 0008                  		move.l	8(a1),d2
00014ECA 2629 000C                  		move.l	$C(a1),d3
00014ECE 3029 0010                  		move.w	$10(a1),d0
00014ED2 48C0                       		ext.l	d0
00014ED4 E180                       		asl.l	#8,d0
00014ED8 3029 0012                  		move.w	$12(a1),d0
00014EDC 48C0                       		ext.l	d0
00014EDE E180                       		asl.l	#8,d0
00014EE2 2342 0008                  		move.l	d2,8(a1)
00014EE6 2343 000C                  		move.l	d3,$C(a1)
00014EEA 4E75                       		rts	
00014EEC                            ; ===========================================================================
00014EEC                            
00014EEC                            loc_16800:
00014EEC 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00014EF2 4228 0024                  		clr.b	$24(a0)
00014EF6 4238 F7C8                  		clr.b	($FFFFF7C8).w
00014EFA 337C 0000 0010             		move.w	#0,$10(a1)
00014F00 337C 0200 0012             		move.w	#$200,$12(a1)
00014F06 4E75                       		rts	
00014F08                            
00014F08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F08                            
00014F08                            
00014F08                            sub_1681C:
00014F08 7000                       		moveq	#0,d0
00014F0A 343C 1000                  		move.w	#$1000,d2
00014F0E 3028 0036                  		move.w	$36(a0),d0
00014F16 6C00                       		bge.s	loc_16830
00014F18 4440                       		neg.w	d0
00014F1A 4442                       		neg.w	d2
00014F1C                            
00014F1C                            loc_16830:
00014F1C 7200                       		moveq	#0,d1
00014F1E 363C 1000                  		move.w	#$1000,d3
00014F22 3228 0038                  		move.w	$38(a0),d1
00014F2A 6C00                       		bge.s	loc_16844
00014F2C 4441                       		neg.w	d1
00014F2E 4443                       		neg.w	d3
00014F30                            
00014F30                            loc_16844:
00014F30 B240                       		cmp.w	d0,d1
00014F32 6500                       		bcs.s	loc_1687A
00014F34 7200                       		moveq	#0,d1
00014F36 3228 0038                  		move.w	$38(a0),d1
00014F3E 4841                       		swap	d1
00014F40 83C3                       		divs.w	d3,d1
00014F42 7000                       		moveq	#0,d0
00014F44 3028 0036                  		move.w	$36(a0),d0
00014F4C 6700                       		beq.s	loc_16866
00014F4E 4840                       		swap	d0
00014F50 81C1                       		divs.w	d1,d0
00014F52                            
00014F52                            loc_16866:
00014F52 3340 0010                  		move.w	d0,$10(a1)
00014F56 3343 0012                  		move.w	d3,$12(a1)
00014F5A 4A41                       		tst.w	d1
00014F5C 6A00                       		bpl.s	loc_16874
00014F5E 4441                       		neg.w	d1
00014F60                            
00014F60                            loc_16874:
00014F60 3141 002E                  		move.w	d1,$2E(a0)
00014F64 4E75                       		rts	
00014F66                            ; ===========================================================================
00014F66                            
00014F66                            loc_1687A:
00014F66 7000                       		moveq	#0,d0
00014F68 3028 0036                  		move.w	$36(a0),d0
00014F70 4840                       		swap	d0
00014F72 81C2                       		divs.w	d2,d0
00014F74 7200                       		moveq	#0,d1
00014F76 3228 0038                  		move.w	$38(a0),d1
00014F7E 6700                       		beq.s	loc_16898
00014F80 4841                       		swap	d1
00014F82 83C0                       		divs.w	d0,d1
00014F84                            
00014F84                            loc_16898:
00014F84 3341 0012                  		move.w	d1,$12(a1)
00014F88 3342 0010                  		move.w	d2,$10(a1)
00014F8C 4A40                       		tst.w	d0
00014F8E 6A00                       		bpl.s	loc_168A6
00014F90 4440                       		neg.w	d0
00014F92                            
00014F92                            loc_168A6:
00014F92 3140 002E                  		move.w	d0,$2E(a0)
00014F96 4E75                       		rts	
00014F98                            ; End of function sub_1681C
00014F98                            
00014F98                            ; ===========================================================================
00014F98 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00014F9E 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00014FA4 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00014FA8 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00014FAE 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00014FB4 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00014FBA 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00014FC0 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00014FC6 0884 0298 0894             		dc.w $884, $298, $894
00014FCC 0270 0894 0190             		dc.w $270, $894, $190
00014FD2 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00014FD8 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00014FDE 1184 0498 1158             		dc.w $1184, $498, $1158
00014FE4 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00014FEA 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00014FF0 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00014FF6 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00014FFC 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00015002 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00015008 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001500E 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00015014 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001501A 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00015020                            ; ===========================================================================
00015020                            ; ---------------------------------------------------------------------------
00015020                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00015020                            ; ---------------------------------------------------------------------------
00015020                            
00015020                            Obj78:					; XREF: Obj_Index
00015020 7000                       		moveq	#0,d0
00015022 1028 0024                  		move.b	$24(a0),d0
00015026 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001502A 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
0001502E                            ; ===========================================================================
0001502E 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00015030 0000                       		dc.w Obj78_Action-Obj78_Index
00015032 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00015034 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00015036 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00015038 0000                       		dc.w Obj78_Delete-Obj78_Index
0001503A 0000                       		dc.w loc_16CC0-Obj78_Index
0001503C                            ; ===========================================================================
0001503C                            
0001503C                            locret_16950:
0001503C 4E75                       		rts	
0001503E                            ; ===========================================================================
0001503E                            
0001503E                            Obj78_Main:				; XREF: Obj78_Index
0001503E 117C 0007 0016             		move.b	#7,$16(a0)
00015044 117C 0008 0017             		move.b	#8,$17(a0)
0001504A 4EB9 0000 B648             		jsr	ObjectFall
00015050 4EBA E4B6                  		jsr	ObjHitFloor
00015054 4A41                       		tst.w	d1
00015056 6AE4                       		bpl.s	locret_16950
0001505C 4268 0012                  		clr.w	$12(a0)
00015060 5428 0024                  		addq.b	#2,$24(a0)
00015064 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
0001506C 317C 22B0 0002             		move.w	#$22B0,2(a0)
00015072 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00015078 6700                       		beq.s	loc_16996
0001507A 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00015080                            
00015080                            loc_16996:
00015080 0228 0003 0001             		andi.b	#3,1(a0)
00015086 0028 0004 0001             		ori.b	#4,1(a0)
0001508C 1168 0001 0022             		move.b	1(a0),$22(a0)
00015092 117C 0004 0018             		move.b	#4,$18(a0)
00015098 117C 0008 0019             		move.b	#8,$19(a0)
0001509E 117C 000B 0020             		move.b	#$B,$20(a0)
000150A4 3428 0008                  		move.w	8(a0),d2
000150A8 7A0C                       		moveq	#$C,d5
000150AA 0828 0000 0022             		btst	#0,$22(a0)
000150B0 6700                       		beq.s	loc_169CA
000150B2 4445                       		neg.w	d5
000150B4                            
000150B4                            loc_169CA:
000150B4 1C3C 0004                  		move.b	#4,d6
000150B8 7600                       		moveq	#0,d3
000150BA 7804                       		moveq	#4,d4
000150BC 2448                       		movea.l	a0,a2
000150BE 7202                       		moveq	#2,d1
000150C0                            
000150C0                            Obj78_LoadBody:
000150C0 4EB9 0000 BB36             		jsr	SingleObjLoad2
000150C6 6600                       		bne.s	Obj78_QuitLoad
000150C8 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
000150CC 1346 0024                  		move.b	d6,$24(a1)
000150D0 5406                       		addq.b	#2,d6
000150D2 2368 0004 0004             		move.l	4(a0),4(a1)
000150D8 3368 0002 0002             		move.w	2(a0),2(a1)
000150DE 137C 0005 0018             		move.b	#5,$18(a1)
000150E4 137C 0008 0019             		move.b	#8,$19(a1)
000150EA 137C 00CB 0020             		move.b	#$CB,$20(a1)
000150F2 3342 0008                  		move.w	d2,8(a1)
000150F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000150FC 1368 0022 0022             		move.b	$22(a0),$22(a1)
00015102 1368 0022 0001             		move.b	$22(a0),1(a1)
00015108 137C 0008 001A             		move.b	#8,$1A(a1)
0001510E 234A 003C                  		move.l	a2,$3C(a1)
00015112 1344 003C                  		move.b	d4,$3C(a1)
00015116 5804                       		addq.b	#4,d4
00015118 2449                       		movea.l	a1,a2
0001511A                            
0001511A                            Obj78_QuitLoad:
0001511A 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0001511E                            
0001511E 117C 0007 002A             		move.b	#7,$2A(a0)
00015124 4228 003C                  		clr.b	$3C(a0)
00015128                            
00015128                            Obj78_Action:				; XREF: Obj78_Index
00015128 4A28 0022                  		tst.b	$22(a0)
0001512C 6B00 0000                  		bmi.w	loc_16C96
00015130 7000                       		moveq	#0,d0
00015132 1028 0025                  		move.b	$25(a0),d0
00015136 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001513A 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
0001513E 1228 002B                  		move.b	$2B(a0),d1
00015142 6A00                       		bpl.s	Obj78_Display
00015144 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001514A 1028 0026                  		move.b	$26(a0),d0
0001514E 0240 007F                  		andi.w	#$7F,d0
00015152 5828 0026                  		addq.b	#4,$26(a0)
00015156 1031 0000                  		move.b	(a1,d0.w),d0
0001515A 6A00                       		bpl.s	Obj78_AniHead
0001515C 08A8 0007 002B             		bclr	#7,$2B(a0)
00015162 6000                       		bra.s	Obj78_Display
00015164                            ; ===========================================================================
00015164                            
00015164                            Obj78_AniHead:
00015164 0201 0010                  		andi.b	#$10,d1
0001516A 1140 001A                  		move.b	d0,$1A(a0)
0001516E                            
0001516E                            Obj78_Display:
0001516E 3028 0008                  		move.w	8(a0),d0
00015172 0240 FF80                  		andi.w	#$FF80,d0
00015176 3238 F700                  		move.w	($FFFFF700).w,d1
0001517A 0441 0080                  		subi.w	#$80,d1
0001517E 0241 FF80                  		andi.w	#$FF80,d1
00015184 0C40 0280                  		cmpi.w	#$280,d0
00015188 6200 0000                  		bhi.w	Obj78_ChkGone
0001518C 4EF9 0000 B69A             		jmp	DisplaySprite
00015192                            ; ===========================================================================
00015192                            
00015192                            Obj78_ChkGone:
00015192 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015196 7000                       		moveq	#0,d0
00015198 1028 0023                  		move.b	$23(a0),d0
0001519C 6700                       		beq.s	loc_16ABC
0001519E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000151A4                            
000151A4                            loc_16ABC:
000151A4 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000151AA 4E75                       		rts	
000151AC                            ; ===========================================================================
000151AC                            
000151AC                            Obj78_Delete:				; XREF: Obj78_Index
000151AC 4EF9 0000 B6D6             		jmp	DeleteObject
000151B2                            ; ===========================================================================
000151B2 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000151B4 0000                       		dc.w loc_16B02-Obj78_Index2
000151B6                            ; ===========================================================================
000151B6                            
000151B6                            Obj78_Move:				; XREF: Obj78_Index2
000151B6 5328 002A                  		subq.b	#1,$2A(a0)
000151BA 6B00                       		bmi.s	Obj78_Move2
000151BC 4E75                       		rts	
000151BE                            ; ===========================================================================
000151BE                            
000151BE                            Obj78_Move2:
000151BE 5428 0025                  		addq.b	#2,$25(a0)
000151C2 117C 0010 002A             		move.b	#$10,$2A(a0)
000151C8 317C FF40 0010             		move.w	#-$C0,$10(a0)
000151CE 317C 0040 0014             		move.w	#$40,$14(a0)
000151D4 0868 0004 002B             		bchg	#4,$2B(a0)
000151DA 6600                       		bne.s	loc_16AFC
000151DC 4268 0010                  		clr.w	$10(a0)
000151E0 4468 0014                  		neg.w	$14(a0)
000151E4                            
000151E4                            loc_16AFC:
000151E4 08E8 0007 002B             		bset	#7,$2B(a0)
000151EA                            
000151EA                            loc_16B02:				; XREF: Obj78_Index2
000151EA 5328 002A                  		subq.b	#1,$2A(a0)
000151EE 6B00                       		bmi.s	loc_16B5E
000151F0 2F28 0008                  		move.l	8(a0),-(sp)
000151F4 2428 0008                  		move.l	8(a0),d2
000151F8 3028 0010                  		move.w	$10(a0),d0
000151FC 0828 0000 0022             		btst	#0,$22(a0)
00015202 6700                       		beq.s	loc_16B1E
00015204 4440                       		neg.w	d0
00015206                            
00015206                            loc_16B1E:
00015206 48C0                       		ext.l	d0
00015208 E180                       		asl.l	#8,d0
0001520C 2142 0008                  		move.l	d2,8(a0)
00015210 4EBA E2F6                  		jsr	ObjHitFloor
00015214 241F                       		move.l	(sp)+,d2
00015216 0C41 FFF8                  		cmpi.w	#-8,d1
0001521A 6D00                       		blt.s	loc_16B70
0001521C 0C41 000C                  		cmpi.w	#$C,d1
00015220 6C00                       		bge.s	loc_16B70
00015226 4842                       		swap	d2
00015228 B468 0008                  		cmp.w	8(a0),d2
0001522C 6700                       		beq.s	locret_16B5C
0001522E 7000                       		moveq	#0,d0
00015230 1028 003C                  		move.b	$3C(a0),d0
00015234 5228 003C                  		addq.b	#1,$3C(a0)
00015238 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001523E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00015242                            
00015242                            locret_16B5C:
00015242 4E75                       		rts	
00015244                            ; ===========================================================================
00015244                            
00015244                            loc_16B5E:
00015244 5528 0025                  		subq.b	#2,$25(a0)
00015248 117C 0007 002A             		move.b	#7,$2A(a0)
0001524E 317C 0000 0010             		move.w	#0,$10(a0)
00015254 4E75                       		rts	
00015256                            ; ===========================================================================
00015256                            
00015256                            loc_16B70:
00015256 2142 0008                  		move.l	d2,8(a0)
0001525A 0868 0000 0022             		bchg	#0,$22(a0)
00015260 1168 0022 0001             		move.b	$22(a0),1(a0)
00015266 7000                       		moveq	#0,d0
00015268 1028 003C                  		move.b	$3C(a0),d0
0001526C 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00015272 5228 003C                  		addq.b	#1,$3C(a0)
00015276 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001527C 4E75                       		rts	
0001527E                            ; ===========================================================================
0001527E                            
0001527E                            Obj78_BodySeg2:				; XREF: Obj78_Index
0001527E 2268 003C                  		movea.l	$3C(a0),a1
00015282 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00015288 6A00                       		bpl.s	Obj78_BodySeg1
0001528A 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00015290 1028 0026                  		move.b	$26(a0),d0
00015294 0240 007F                  		andi.w	#$7F,d0
00015298 5828 0026                  		addq.b	#4,$26(a0)
0001529C 4A31 0004                  		tst.b	4(a1,d0.w)
000152A0 6A00                       		bpl.s	Obj78_AniBody
000152A2 5828 0026                  		addq.b	#4,$26(a0)
000152A6                            
000152A6                            Obj78_AniBody:
000152A6 1031 0000                  		move.b	(a1,d0.w),d0
000152AA 5000                       		addq.b	#8,d0
000152AC 1140 001A                  		move.b	d0,$1A(a0)
000152B0                            
000152B0                            Obj78_BodySeg1:				; XREF: Obj78_Index
000152B0 2268 003C                  		movea.l	$3C(a0),a1
000152B4 4A28 0022                  		tst.b	$22(a0)
000152B8 6B00 0000                  		bmi.w	loc_16C90
000152BC 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000152C2 1169 0025 0025             		move.b	$25(a1),$25(a0)
000152C8 6700 0000                  		beq.w	loc_16C64
000152CC 3169 0014 0014             		move.w	$14(a1),$14(a0)
000152D2 3029 0010                  		move.w	$10(a1),d0
000152DA 3140 0010                  		move.w	d0,$10(a0)
000152DE 2428 0008                  		move.l	8(a0),d2
000152E2 2602                       		move.l	d2,d3
000152E4 3028 0010                  		move.w	$10(a0),d0
000152E8 0828 0000 0022             		btst	#0,$22(a0)
000152EE 6700                       		beq.s	loc_16C0C
000152F0 4440                       		neg.w	d0
000152F2                            
000152F2                            loc_16C0C:
000152F2 48C0                       		ext.l	d0
000152F4 E180                       		asl.l	#8,d0
000152F8 2142 0008                  		move.l	d2,8(a0)
000152FC 4843                       		swap	d3
000152FE B668 0008                  		cmp.w	8(a0),d3
00015302 6700                       		beq.s	loc_16C64
00015304 7000                       		moveq	#0,d0
00015306 1028 003C                  		move.b	$3C(a0),d0
0001530A 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001530E 0C01 0080                  		cmpi.b	#-$80,d1
00015312 6600                       		bne.s	loc_16C50
00015314 4843                       		swap	d3
00015316 2143 0008                  		move.l	d3,8(a0)
0001531A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001531E 0868 0000 0022             		bchg	#0,$22(a0)
00015324 1168 0022 0001             		move.b	$22(a0),1(a0)
0001532A 5228 003C                  		addq.b	#1,$3C(a0)
0001532E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00015334 6000                       		bra.s	loc_16C64
00015336                            ; ===========================================================================
00015336                            
00015336                            loc_16C50:
00015336 4881                       		ext.w	d1
0001533C 5228 003C                  		addq.b	#1,$3C(a0)
00015340 0228 000F 003C             		andi.b	#$F,$3C(a0)
00015346 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001534A                            
0001534A                            loc_16C64:
0001534A 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00015350 6700                       		beq.s	loc_16C90
00015352 0C11 0027                  		cmpi.b	#$27,0(a1)
00015356 6700                       		beq.s	loc_16C7C
00015358 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
0001535E 6600                       		bne.s	loc_16C82
00015360                            
00015360                            loc_16C7C:
00015360 117C 000A 0024             		move.b	#$A,$24(a0)
00015366                            
00015366                            loc_16C82:
00015366 4EF9 0000 B69A             		jmp	DisplaySprite
0001536C                            
0001536C                            ; ===========================================================================
0001536C FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00015374                            ; ===========================================================================
00015374                            
00015374                            loc_16C90:
00015374 08E9 0007 0022             		bset	#7,$22(a1)
0001537A                            
0001537A                            loc_16C96:
0001537A 7000                       		moveq	#0,d0
0001537C 1028 0024                  		move.b	$24(a0),d0
00015380 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00015384 0828 0000 0022             		btst	#0,$22(a0)
0001538A 6700                       		beq.s	loc_16CAA
0001538C 4440                       		neg.w	d0
0001538E                            
0001538E                            loc_16CAA:
0001538E 3140 0010                  		move.w	d0,$10(a0)
00015392 317C FC00 0012             		move.w	#-$400,$12(a0)
00015398 117C 000C 0024             		move.b	#$C,$24(a0)
0001539E 0228 00F8 001A             		andi.b	#-8,$1A(a0)
000153A4                            
000153A4                            loc_16CC0:				; XREF: Obj78_Index
000153A4 4EB9 0000 B648             		jsr	ObjectFall
000153AA 4A68 0012                  		tst.w	$12(a0)
000153AE 6B00                       		bmi.s	loc_16CE0
000153B0 4EBA E156                  		jsr	ObjHitFloor
000153B4 4A41                       		tst.w	d1
000153B6 6A00                       		bpl.s	loc_16CE0
000153BC 317C FC00 0012             		move.w	#-$400,$12(a0)
000153C2                            
000153C2                            loc_16CE0:
000153C2 4A28 0001                  		tst.b	1(a0)
000153C6 6A00 FDCA                  		bpl.w	Obj78_ChkGone
000153CA 4EF9 0000 B69A             		jmp	DisplaySprite
000153D0                            ; ===========================================================================
000153D0                            Ani_obj78:
000153D0                            	include "_anim\obj78.asm"
000153D0                            ; ---------------------------------------------------------------------------
000153D0                            ; Animation script - Caterkiller enemy (uses non-standard format)
000153D0                            ; ---------------------------------------------------------------------------
000153D0 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000153E0 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000153F0 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00015400 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00015410 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00015420 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00015430 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00015440 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00015450                            	even
00015450                            	even
00015450                            
00015450                            ; ---------------------------------------------------------------------------
00015450                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00015450                            ; ---------------------------------------------------------------------------
00015450                            Map_obj78:
00015450                            	include "_maps\obj78.asm"
00015450                            ; ---------------------------------------------------------------------------
00015450                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00015450                            ; ---------------------------------------------------------------------------
00015450 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00015454 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00015458 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
0001545C 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00015460 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00015464 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00015468 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
0001546C 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00015470 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00015474 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00015478 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
0001547C 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00015480 01                         byte_16D9E:	dc.b 1
00015481 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00015486 01                         byte_16DA4:	dc.b 1
00015487 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
0001548C 01                         byte_16DAA:	dc.b 1
0001548D F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00015492 01                         byte_16DB0:	dc.b 1
00015493 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00015498 01                         byte_16DB6:	dc.b 1
00015499 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
0001549E 01                         byte_16DBC:	dc.b 1
0001549F ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
000154A4 01                         byte_16DC2:	dc.b 1
000154A5 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
000154AA 01                         byte_16DC8:	dc.b 1
000154AB EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
000154B0 01                         byte_16DCE:	dc.b 1
000154B1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000154B6 01                         byte_16DD4:	dc.b 1
000154B7 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000154BC 01                         byte_16DDA:	dc.b 1
000154BD F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000154C2 01                         byte_16DE0:	dc.b 1
000154C3 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000154C8 01                         byte_16DE6:	dc.b 1
000154C9 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000154CE 01                         byte_16DEC:	dc.b 1
000154CF F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000154D4 01                         byte_16DF2:	dc.b 1
000154D5 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000154DA 01                         byte_16DF8:	dc.b 1
000154DB F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000154E0 01                         byte_16DFE:	dc.b 1
000154E1 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000154E6 01                         byte_16E04:	dc.b 1
000154E7 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000154EC 01                         byte_16E0A:	dc.b 1
000154ED F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000154F2 01                         byte_16E10:	dc.b 1
000154F3 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000154F8 01                         byte_16E16:	dc.b 1
000154F9 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000154FE 01                         byte_16E1C:	dc.b 1
000154FF ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00015504 01                         byte_16E22:	dc.b 1
00015505 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001550A 01                         byte_16E28:	dc.b 1
0001550B EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00015510                            		even
00015510                            		even
00015510                            
00015510                            ; ===========================================================================
00015510                            ; ---------------------------------------------------------------------------
00015510                            ; Object 79 - lamppost
00015510                            ; ---------------------------------------------------------------------------
00015510                            
00015510                            Obj79:					; XREF: Obj_Index
00015510 7000                       		moveq	#0,d0
00015512 1028 0024                  		move.b	$24(a0),d0
00015516 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
0001551A 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
0001551E 4EFA 8212                  		jmp	MarkObjGone
00015522                            ; ===========================================================================
00015522 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00015524 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00015526 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00015528 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001552A                            ; ===========================================================================
0001552A                            
0001552A                            Obj79_Main:				; XREF: Obj79_Index
0001552A 5428 0024                  		addq.b	#2,$24(a0)
0001552E 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00015536 317C 07A0 0002             		move.w	#$7A0,2(a0)
0001553C 117C 0004 0001             		move.b	#4,1(a0)
00015542 117C 0008 0019             		move.b	#8,$19(a0)
00015548 117C 0005 0018             		move.b	#5,$18(a0)
0001554E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015552 7000                       		moveq	#0,d0
00015554 1028 0023                  		move.b	$23(a0),d0
00015558 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001555E 0832 0000 0002             		btst	#0,2(a2,d0.w)
00015564 6600                       		bne.s	Obj79_RedLamp
00015566 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001556A 0201 007F                  		andi.b	#$7F,d1
0001556E 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00015572 0202 007F                  		andi.b	#$7F,d2
00015576 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00015578 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
0001557A                            
0001557A                            Obj79_RedLamp:
0001557A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00015580 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00015586 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
0001558C 4E75                       		rts	
0001558E                            ; ===========================================================================
0001558E                            
0001558E                            Obj79_BlueLamp:				; XREF: Obj79_Index
0001558E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00015592 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00015596 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001559A 6B00 0000                  		bmi.w	locret_16F90
0001559E 1238 FE30                  		move.b	($FFFFFE30).w,d1
000155A2 0201 007F                  		andi.b	#$7F,d1
000155A6 1428 0028                  		move.b	$28(a0),d2
000155AA 0202 007F                  		andi.b	#$7F,d2
000155AE B202                       		cmp.b	d2,d1
000155B0 6500                       		bcs.s	Obj79_HitLamp
000155B2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000155B6 7000                       		moveq	#0,d0
000155B8 1028 0023                  		move.b	$23(a0),d0
000155BC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000155C2 117C 0004 0024             		move.b	#4,$24(a0)
000155C8 117C 0003 001A             		move.b	#3,$1A(a0)
000155CE 6000 0000                  		bra.w	locret_16F90
000155D2                            ; ===========================================================================
000155D2                            
000155D2                            Obj79_HitLamp:
000155D2 3038 D008                  		move.w	($FFFFD008).w,d0
000155DA 5040                       		addq.w	#8,d0
000155DC 0C40 0010                  		cmpi.w	#$10,d0
000155E0 6400 0000                  		bcc.w	locret_16F90
000155E4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000155EC 0640 0040                  		addi.w	#$40,d0
000155F0 0C40 0068                  		cmpi.w	#$68,d0
000155F4 6400                       		bcc.s	locret_16F90
000155F6 303C 00A1                  		move.w	#$A1,d0
000155FA 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play lamppost sound
00015600 5428 0024                  		addq.b	#2,$24(a0)
00015604 4EB9 0000 BB20             		jsr	SingleObjLoad
0001560A 6600                       		bne.s	loc_16F76
0001560C 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00015610 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00015616 3368 0008 0030             		move.w	8(a0),$30(a1)
0001561C 3368 000C 0032             		move.w	$C(a0),$32(a1)
00015622 0469 0018 0032             		subi.w	#$18,$32(a1)
00015628 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00015630 337C 07A0 0002             		move.w	#$7A0,2(a1)
00015636 137C 0004 0001             		move.b	#4,1(a1)
0001563C 137C 0008 0019             		move.b	#8,$19(a1)
00015642 137C 0004 0018             		move.b	#4,$18(a1)
00015648 137C 0002 001A             		move.b	#2,$1A(a1)
0001564E 337C 0020 0036             		move.w	#$20,$36(a1)
00015654                            
00015654                            loc_16F76:
00015654 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
0001565A 6100 0000                  		bsr.w	Obj79_StoreInfo
0001565E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015662 7000                       		moveq	#0,d0
00015664 1028 0023                  		move.b	$23(a0),d0
00015668 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001566E                            
0001566E                            locret_16F90:
0001566E 4E75                       		rts	
00015670                            ; ===========================================================================
00015670                            
00015670                            Obj79_AfterHit:				; XREF: Obj79_Index
00015670 4E75                       		rts	
00015672                            ; ===========================================================================
00015672                            
00015672                            Obj79_Twirl:				; XREF: Obj79_Index
00015672 5368 0036                  		subq.w	#1,$36(a0)
00015676 6A00                       		bpl.s	loc_16FA0
00015678 117C 0004 0024             		move.b	#4,$24(a0)
0001567E                            
0001567E                            loc_16FA0:
0001567E 1028 0026                  		move.b	$26(a0),d0
00015682 0428 0010 0026             		subi.b	#$10,$26(a0)
00015688 0400 0040                  		subi.b	#$40,d0
0001568C 4EB9 0000 2556             		jsr	(CalcSine).l
00015692 C3FC 0C00                  		muls.w	#$C00,d1
00015696 4841                       		swap	d1
0001569C 3141 0008                  		move.w	d1,8(a0)
000156A0 C1FC 0C00                  		muls.w	#$C00,d0
000156A4 4840                       		swap	d0
000156AA 3140 000C                  		move.w	d0,$C(a0)
000156AE 4E75                       		rts	
000156B0                            ; ===========================================================================
000156B0                            ; ---------------------------------------------------------------------------
000156B0                            ; Subroutine to	store information when you hit a lamppost
000156B0                            ; ---------------------------------------------------------------------------
000156B0                            
000156B0                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
000156B0 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000156B6 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000156BC 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000156C2 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000156C8 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000156CE 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000156D4 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000156DA 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000156E0 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000156E6 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000156EC 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000156F2 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000156F8 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000156FE 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00015704 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
0001570A 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00015710 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00015716 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
0001571C 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00015722 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00015728 4E75                       		rts	
0001572A                            
0001572A                            ; ---------------------------------------------------------------------------
0001572A                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001572A                            ; ---------------------------------------------------------------------------
0001572A                            
0001572A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001572A                            
0001572A                            
0001572A                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
0001572A 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00015730 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00015736 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
0001573C 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00015742 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00015748 4278 FE20                  		clr.w	($FFFFFE20).w
0001574C 4238 FE1B                  		clr.b	($FFFFFE1B).w
00015750 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00015756 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
0001575C 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00015760 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00015766 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001576C 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00015772 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00015778 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
0001577E 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00015784 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
0001578A 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00015790 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00015796 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
0001579C 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
000157A2 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
000157A8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000157AE 6600                       		bne.s	loc_170E4
000157B0 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
000157B6 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000157BC 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000157C2                            
000157C2                            loc_170E4:
000157C2 4A38 FE30                  		tst.b	($FFFFFE30).w
000157C6 6A00                       		bpl.s	locret_170F6
000157C8 3038 FE32                  		move.w	($FFFFFE32).w,d0
000157CC 0440 00A0                  		subi.w	#$A0,d0
000157D0 31C0 F728                  		move.w	d0,($FFFFF728).w
000157D4                            
000157D4                            locret_170F6:
000157D4 4E75                       		rts	
000157D6                            ; End of function Obj79_LoadInfo
000157D6                            
000157D6                            ; ===========================================================================
000157D6                            ; ---------------------------------------------------------------------------
000157D6                            ; Sprite mappings - lamppost
000157D6                            ; ---------------------------------------------------------------------------
000157D6                            Map_obj79:
000157D6                            	include "_maps\obj79.asm"
000157D6                            ; ---------------------------------------------------------------------------
000157D6                            ; Sprite mappings - lamppost
000157D6                            ; ---------------------------------------------------------------------------
000157D6 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
000157DA 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000157DE 06                         byte_17100:	dc.b 6
000157DF E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000157E4 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000157E9 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000157EE F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000157F3 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
000157F8 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
000157FD 04                         byte_1711F:	dc.b 4
000157FE E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00015803 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00015808 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001580D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00015812 02                         byte_17134:	dc.b 2
00015813 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00015818 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
0001581D 06                         byte_1713F:	dc.b 6
0001581E E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00015823 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00015828 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001582D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00015832 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00015837 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
0001583C                            		even
0001583C                            		even
0001583C                            
0001583C                            ; ===========================================================================
0001583C                            ; ---------------------------------------------------------------------------
0001583C                            ; Object 7D - hidden points at the end of a level
0001583C                            ; ---------------------------------------------------------------------------
0001583C                            
0001583C                            Obj7D:					; XREF: Obj_Index
0001583C 7000                       		moveq	#0,d0
0001583E 1028 0024                  		move.b	$24(a0),d0
00015842 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00015846 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
0001584A                            ; ===========================================================================
0001584A 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
0001584C 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
0001584E                            ; ===========================================================================
0001584E                            
0001584E                            Obj7D_Main:				; XREF: Obj7D_Index
0001584E 7410                       		moveq	#$10,d2
00015850 3602                       		move.w	d2,d3
00015854 43F8 D000                  		lea	($FFFFD000).w,a1
00015858 3029 0008                  		move.w	8(a1),d0
00015862 B043                       		cmp.w	d3,d0
00015864 6400                       		bcc.s	Obj7D_ChkDel
00015866 3229 000C                  		move.w	$C(a1),d1
00015870 B243                       		cmp.w	d3,d1
00015872 6400                       		bcc.s	Obj7D_ChkDel
00015874 4A78 FE08                  		tst.w	($FFFFFE08).w
00015878 6600                       		bne.s	Obj7D_ChkDel
0001587A 4A38 F7CD                  		tst.b	($FFFFF7CD).w
0001587E 6600                       		bne.s	Obj7D_ChkDel
00015880 5428 0024                  		addq.b	#2,$24(a0)
00015884 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
0001588C 317C 84B6 0002             		move.w	#$84B6,2(a0)
00015892 0028 0004 0001             		ori.b	#4,1(a0)
00015898 117C 0000 0018             		move.b	#0,$18(a0)
0001589E 117C 0010 0019             		move.b	#$10,$19(a0)
000158A4 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000158AA 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
000158B0 303C 00C9                  		move.w	#$C9,d0
000158B4 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play bonus sound
000158BA 7000                       		moveq	#0,d0
000158BC 1028 0028                  		move.b	$28(a0),d0
000158C2 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
000158C6 4EB9 0000 0000             		jsr	AddPoints
000158CC                            
000158CC                            Obj7D_ChkDel:
000158CC 3028 0008                  		move.w	8(a0),d0
000158D0 0240 FF80                  		andi.w	#$FF80,d0
000158D4 3238 F700                  		move.w	($FFFFF700).w,d1
000158D8 0441 0080                  		subi.w	#$80,d1
000158DC 0241 FF80                  		andi.w	#$FF80,d1
000158E2 0C40 0280                  		cmpi.w	#$280,d0
000158E6 6200                       		bhi.s	Obj7D_Delete
000158E8 4E75                       		rts	
000158EA                            ; ===========================================================================
000158EA                            
000158EA                            Obj7D_Delete:
000158EA 4EF9 0000 B6D6             		jmp	DeleteObject
000158F0                            ; ===========================================================================
000158F0 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
000158F2 03E8                       		dc.w 1000
000158F4 0064                       		dc.w 100
000158F6 0001                       		dc.w 1
000158F8                            ; ===========================================================================
000158F8                            
000158F8                            Obj7D_DelayDel:				; XREF: Obj7D_Index
000158F8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
000158FC 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
000158FE 3028 0008                  		move.w	8(a0),d0
00015902 0240 FF80                  		andi.w	#-$80,d0
00015906 3238 F700                  		move.w	($FFFFF700).w,d1
0001590A 0441 0080                  		subi.w	#$80,d1
0001590E 0241 FF80                  		andi.w	#-$80,d1
00015914 0C40 0280                  		cmpi.w	#$280,d0
00015918 6200                       		bhi.s	Obj7D_Delete2
0001591A 4EF9 0000 B69A             		jmp	DisplaySprite
00015920                            ; ===========================================================================
00015920                            
00015920                            Obj7D_Delete2:
00015920 4EF9 0000 B6D6             		jmp	DeleteObject
00015926                            ; ===========================================================================
00015926                            ; ---------------------------------------------------------------------------
00015926                            ; Sprite mappings - hidden points at the end of	a level
00015926                            ; ---------------------------------------------------------------------------
00015926                            Map_obj7D:
00015926                            	include "_maps\obj7D.asm"
00015926                            ; ---------------------------------------------------------------------------
00015926                            ; Sprite mappings - hidden points at the end of	a level
00015926                            ; ---------------------------------------------------------------------------
00015926 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
0001592A 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
0001592E 00                         byte_17250:	dc.b 0
0001592F 01                         byte_17251:	dc.b 1
00015930 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00015935 01                         byte_17257:	dc.b 1
00015936 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001593B 01                         byte_1725D:	dc.b 1
0001593C F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00015942 00                         		even
00015942 00                         		even
00015942                            
00015942                            ; ===========================================================================
00015942                            ; ---------------------------------------------------------------------------
00015942                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00015942                            ; ---------------------------------------------------------------------------
00015942                            
00015942                            Obj8A:					; XREF: Obj_Index
00015942 7000                       		moveq	#0,d0
00015944 1028 0024                  		move.b	$24(a0),d0
00015948 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
0001594C 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00015950                            ; ===========================================================================
00015950 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00015952 0000                       		dc.w Obj8A_Display-Obj8A_Index
00015954                            ; ===========================================================================
00015954                            
00015954                            Obj8A_Main:				; XREF: Obj8A_Index
00015954 5428 0024                  		addq.b	#2,$24(a0)
00015958 317C 0100 0008             		move.w	#$100,8(a0)
0001595E 317C 00F0 000A             		move.w	#$F0,$A(a0)
00015964 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
0001596C 317C 05A0 0002             		move.w	#$5A0,2(a0)
00015972 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00015976 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
0001597A 117C 0000 0001             		move.b	#0,1(a0)
00015980 117C 0000 0018             		move.b	#0,$18(a0)
00015986 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
0001598C 6600                       		bne.s	Obj8A_Display	; if not, branch
0001598E 317C 00A6 0002             		move.w	#$A6,2(a0)
00015994 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00015998 6700                       		beq.s	Obj8A_Display	; if not, branch
0001599A 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
000159A0 6600                       		bne.s	Obj8A_Display	; if not, branch
000159A2 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
000159A8 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
000159AE 4EF9 0000 B6D6             		jmp	DeleteObject
000159B4                            ; ===========================================================================
000159B4                            
000159B4                            Obj8A_Display:				; XREF: Obj8A_Index
000159B4 4EF9 0000 B69A             		jmp	DisplaySprite
000159BA                            ; ===========================================================================
000159BA                            ; ---------------------------------------------------------------------------
000159BA                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000159BA                            ; ---------------------------------------------------------------------------
000159BA                            Map_obj8A:
000159BA                            	include "_maps\obj8A.asm"
000159BA                            Map_b4cd:
000159BA 0000                       Map_b4cd_0: 	dc.w Map_b4cd_2-Map_b4cd
000159BC 02                         Map_b4cd_2: 	dc.b $2
000159BD F80D 0000 E0               	dc.b $F8, $D, $0, $0, $E0
000159C2 F80D 0008 00               	dc.b $F8, $D, $0, $8, $0
000159C8 00                         	even
000159C8 00                         	even
000159C8                            
000159C8                            ; ===========================================================================
000159C8                            ; ---------------------------------------------------------------------------
000159C8                            ; Object 3D - Eggman (GHZ)
000159C8                            ; ---------------------------------------------------------------------------
000159C8                            
000159C8                            Obj3D:					; XREF: Obj_Index
000159C8 7000                       		moveq	#0,d0
000159CA 1028 0024                  		move.b	$24(a0),d0
000159CE 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
000159D2 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
000159D6                            ; ===========================================================================
000159D6 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
000159D8 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
000159DA 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
000159DC 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
000159DE                            
000159DE 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
000159E0 0401                       		dc.b 4,	1
000159E2 0607                       		dc.b 6,	7
000159E4                            ; ===========================================================================
000159E4                            
000159E4                            Obj3D_Main:				; XREF: Obj3D_Index
000159E4 45F9 0001 59DE             		lea	(Obj3D_ObjData).l,a2
000159EA 2248                       		movea.l	a0,a1
000159EC 7202                       		moveq	#2,d1
000159EE 6000                       		bra.s	Obj3D_LoadBoss
000159F0                            ; ===========================================================================
000159F0                            
000159F0                            Obj3D_Loop:
000159F0 4EB9 0000 BB36             		jsr	SingleObjLoad2
000159F6 6600                       		bne.s	loc_17772
000159F8                            
000159F8                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
000159F8 135A 0024                  		move.b	(a2)+,$24(a1)
000159FC 12BC 003D                  		move.b	#$3D,0(a1)
00015A00 3368 0008 0008             		move.w	8(a0),8(a1)
00015A06 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015A0C 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00015A14 337C 0400 0002             		move.w	#$400,2(a1)
00015A1A 137C 0004 0001             		move.b	#4,1(a1)
00015A20 137C 0020 0019             		move.b	#$20,$19(a1)
00015A26 137C 0003 0018             		move.b	#3,$18(a1)
00015A2C 135A 001C                  		move.b	(a2)+,$1C(a1)
00015A30 2348 0034                  		move.l	a0,$34(a1)
00015A34 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00015A38                            
00015A38                            loc_17772:
00015A38 3168 0008 0030             		move.w	8(a0),$30(a0)
00015A3E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00015A44 117C 000F 0020             		move.b	#$F,$20(a0)
00015A4A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00015A50                            
00015A50                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00015A50 7000                       		moveq	#0,d0
00015A52 1028 0025                  		move.b	$25(a0),d0
00015A56 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00015A5A 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00015A5E 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00015A64 4EB9 0000 87C0             		jsr	AnimateSprite
00015A6A 1028 0022                  		move.b	$22(a0),d0
00015A6E 0200 0003                  		andi.b	#3,d0
00015A72 0228 00FC 0001             		andi.b	#$FC,1(a0)
00015A7C 4EF9 0000 B69A             		jmp	DisplaySprite
00015A82                            ; ===========================================================================
00015A82 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00015A84 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00015A86 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00015A88 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00015A8A 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00015A8C 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00015A8E 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00015A90                            ; ===========================================================================
00015A90                            
00015A90                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00015A90 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00015A96 6100 0000                  		bsr.w	BossMove
00015A9A 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00015AA0 6600                       		bne.s	loc_177E6
00015AA2 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00015AA8 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00015AAC                            
00015AAC                            loc_177E6:
00015AAC 1028 003F                  		move.b	$3F(a0),d0
00015AB0 4EB9 0000 2556             		jsr	(CalcSine).l
00015AB6 EC40                       		asr.w	#6,d0
00015ABC 3140 000C                  		move.w	d0,$C(a0)
00015AC0 3168 0030 0008             		move.w	$30(a0),8(a0)
00015AC6 5428 003F                  		addq.b	#2,$3F(a0)
00015ACA 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00015AD0 6400                       		bcc.s	locret_1784A
00015AD2 4A28 0022                  		tst.b	$22(a0)
00015AD6 6B00                       		bmi.s	loc_1784C
00015AD8 4A28 0020                  		tst.b	$20(a0)
00015ADC 6600                       		bne.s	locret_1784A
00015ADE 4A28 003E                  		tst.b	$3E(a0)
00015AE2 6600                       		bne.s	Obj3D_ShipFlash
00015AE4 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00015AEA 303C 00AC                  		move.w	#$AC,d0
00015AEE 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play boss damage sound
00015AF4                            
00015AF4                            Obj3D_ShipFlash:
00015AF4 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00015AF8 7000                       		moveq	#0,d0		; move 0 (black) to d0
00015AFA 4A51                       		tst.w	(a1)
00015AFC 6600                       		bne.s	loc_1783C
00015AFE 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00015B02                            
00015B02                            loc_1783C:
00015B02 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00015B04 5328 003E                  		subq.b	#1,$3E(a0)
00015B08 6600                       		bne.s	locret_1784A
00015B0A 117C 000F 0020             		move.b	#$F,$20(a0)
00015B10                            
00015B10                            locret_1784A:
00015B10 4E75                       		rts	
00015B12                            ; ===========================================================================
00015B12                            
00015B12                            loc_1784C:				; XREF: loc_177E6
00015B12 7064                       		moveq	#100,d0
00015B14 6100 0000                  		bsr.w	AddPoints
00015B18 117C 0008 0025             		move.b	#8,$25(a0)
00015B1E 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00015B24 4E75                       		rts	
00015B26                            
00015B26                            ; ---------------------------------------------------------------------------
00015B26                            ; Defeated boss	subroutine
00015B26                            ; ---------------------------------------------------------------------------
00015B26                            
00015B26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B26                            
00015B26                            
00015B26                            BossDefeated:
00015B26 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00015B2A 0200 0007                  		andi.b	#7,d0
00015B2E 6600                       		bne.s	locret_178A2
00015B30 4EB9 0000 BB20             		jsr	SingleObjLoad
00015B36 6600                       		bne.s	locret_178A2
00015B38 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00015B3C 3368 0008 0008             		move.w	8(a0),8(a1)
00015B42 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015B48 4EB9 0000 2530             		jsr	(RandomNumber).l
00015B4E 3200                       		move.w	d0,d1
00015B50 7200                       		moveq	#0,d1
00015B52 1200                       		move.b	d0,d1
00015B54 E409                       		lsr.b	#2,d1
00015B56 0441 0020                  		subi.w	#$20,d1
00015B5E E048                       		lsr.w	#8,d0
00015B60 E608                       		lsr.b	#3,d0
00015B66                            
00015B66                            locret_178A2:
00015B66 4E75                       		rts	
00015B68                            ; End of function BossDefeated
00015B68                            
00015B68                            ; ---------------------------------------------------------------------------
00015B68                            ; Subroutine to	move a boss
00015B68                            ; ---------------------------------------------------------------------------
00015B68                            
00015B68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B68                            
00015B68                            
00015B68                            BossMove:
00015B68 2428 0030                  		move.l	$30(a0),d2
00015B6C 2628 0038                  		move.l	$38(a0),d3
00015B70 3028 0010                  		move.w	$10(a0),d0
00015B74 48C0                       		ext.l	d0
00015B76 E180                       		asl.l	#8,d0
00015B7A 3028 0012                  		move.w	$12(a0),d0
00015B7E 48C0                       		ext.l	d0
00015B80 E180                       		asl.l	#8,d0
00015B84 2142 0030                  		move.l	d2,$30(a0)
00015B88 2143 0038                  		move.l	d3,$38(a0)
00015B8C 4E75                       		rts	
00015B8E                            ; End of function BossMove
00015B8E                            
00015B8E                            ; ===========================================================================
00015B8E                            
00015B8E                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00015B8E 317C FF00 0010             		move.w	#-$100,$10(a0)
00015B94 317C FFC0 0012             		move.w	#-$40,$12(a0)
00015B9A 6100 FFCC                  		bsr.w	BossMove
00015B9E 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00015BA4 6600                       		bne.s	loc_17916
00015BA6 317C 0000 0010             		move.w	#0,$10(a0)
00015BAC 317C 0000 0012             		move.w	#0,$12(a0)
00015BB2 5428 0025                  		addq.b	#2,$25(a0)
00015BB6 4EB9 0000 BB36             		jsr	SingleObjLoad2
00015BBC 6600                       		bne.s	loc_17910
00015BBE 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00015BC2 3368 0030 0008             		move.w	$30(a0),8(a1)
00015BC8 3368 0038 000C             		move.w	$38(a0),$C(a1)
00015BCE 2348 0034                  		move.l	a0,$34(a1)
00015BD2                            
00015BD2                            loc_17910:
00015BD2 317C 0077 003C             		move.w	#$77,$3C(a0)
00015BD8                            
00015BD8                            loc_17916:
00015BD8 6000 FED2                  		bra.w	loc_177E6
00015BDC                            ; ===========================================================================
00015BDC                            
00015BDC                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00015BDC 5368 003C                  		subq.w	#1,$3C(a0)
00015BE0 6A00                       		bpl.s	Obj3D_Reverse
00015BE2 5428 0025                  		addq.b	#2,$25(a0)
00015BE6 317C 003F 003C             		move.w	#$3F,$3C(a0)
00015BEC 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00015BF2 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00015BF8 6600                       		bne.s	Obj3D_Reverse
00015BFA 317C 007F 003C             		move.w	#$7F,$3C(a0)
00015C00 317C 0040 0010             		move.w	#$40,$10(a0)
00015C06                            
00015C06                            Obj3D_Reverse:
00015C06 0828 0000 0022             		btst	#0,$22(a0)
00015C0C 6600                       		bne.s	loc_17950
00015C0E 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00015C12                            
00015C12                            loc_17950:
00015C12 6000 FE98                  		bra.w	loc_177E6
00015C16                            ; ===========================================================================
00015C16                            
00015C16                            loc_17954:				; XREF: Obj3D_ShipIndex
00015C16 5368 003C                  		subq.w	#1,$3C(a0)
00015C1A 6B00                       		bmi.s	loc_17960
00015C1C 6100 FF4A                  		bsr.w	BossMove
00015C20 6000                       		bra.s	loc_17976
00015C22                            ; ===========================================================================
00015C22                            
00015C22                            loc_17960:
00015C22 0868 0000 0022             		bchg	#0,$22(a0)
00015C28 317C 003F 003C             		move.w	#$3F,$3C(a0)
00015C2E 5528 0025                  		subq.b	#2,$25(a0)
00015C32 317C 0000 0010             		move.w	#0,$10(a0)
00015C38                            
00015C38                            loc_17976:
00015C38 6000 FE72                  		bra.w	loc_177E6
00015C3C                            ; ===========================================================================
00015C3C                            
00015C3C                            loc_1797A:				; XREF: Obj3D_ShipIndex
00015C3C 5368 003C                  		subq.w	#1,$3C(a0)
00015C40 6B00                       		bmi.s	loc_17984
00015C42 6000 FEE2                  		bra.w	BossDefeated
00015C46                            ; ===========================================================================
00015C46                            
00015C46                            loc_17984:
00015C46 08E8 0000 0022             		bset	#0,$22(a0)
00015C4C 08A8 0007 0022             		bclr	#7,$22(a0)
00015C52 4268 0010                  		clr.w	$10(a0)
00015C56 5428 0025                  		addq.b	#2,$25(a0)
00015C5A 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00015C60 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00015C64 6600                       		bne.s	locret_179AA
00015C66 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00015C6C                            
00015C6C                            locret_179AA:
00015C6C 4E75                       		rts	
00015C6E                            ; ===========================================================================
00015C6E                            
00015C6E                            loc_179AC:				; XREF: Obj3D_ShipIndex
00015C6E 5268 003C                  		addq.w	#1,$3C(a0)
00015C72 6700                       		beq.s	loc_179BC
00015C74 6A00                       		bpl.s	loc_179C2
00015C76 0668 0018 0012             		addi.w	#$18,$12(a0)
00015C7C 6000                       		bra.s	loc_179EE
00015C7E                            ; ===========================================================================
00015C7E                            
00015C7E                            loc_179BC:
00015C7E 4268 0012                  		clr.w	$12(a0)
00015C82 6000                       		bra.s	loc_179EE
00015C84                            ; ===========================================================================
00015C84                            
00015C84                            loc_179C2:
00015C84 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00015C8A 6500                       		bcs.s	loc_179DA
00015C8C 6700                       		beq.s	loc_179E0
00015C8E 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00015C94 6500                       		bcs.s	loc_179EE
00015C96 5428 0025                  		addq.b	#2,$25(a0)
00015C9A 6000                       		bra.s	loc_179EE
00015C9C                            ; ===========================================================================
00015C9C                            
00015C9C                            loc_179DA:
00015C9C 5168 0012                  		subq.w	#8,$12(a0)
00015CA0 6000                       		bra.s	loc_179EE
00015CA2                            ; ===========================================================================
00015CA2                            
00015CA2                            loc_179E0:
00015CA2 4268 0012                  		clr.w	$12(a0)
00015CA6 303C 0081                  		move.w	#$81,d0
00015CAA 4EB9 0000 101A             		jsr	(PlaySound).l	; play GHZ music
00015CB0                            
00015CB0                            loc_179EE:
00015CB0 6100 FEB6                  		bsr.w	BossMove
00015CB4 6000 FDF6                  		bra.w	loc_177E6
00015CB8                            ; ===========================================================================
00015CB8                            
00015CB8                            loc_179F6:				; XREF: Obj3D_ShipIndex
00015CB8 317C 0400 0010             		move.w	#$400,$10(a0)
00015CBE 317C FFC0 0012             		move.w	#-$40,$12(a0)
00015CC4 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00015CCA 6700                       		beq.s	loc_17A10
00015CCC 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00015CD0 6000                       		bra.s	loc_17A16
00015CD2                            ; ===========================================================================
00015CD2                            
00015CD2                            loc_17A10:
00015CD2 4A28 0001                  		tst.b	1(a0)
00015CD6 6A00                       		bpl.s	Obj3D_ShipDel
00015CD8                            
00015CD8                            loc_17A16:
00015CD8 6100 FE8E                  		bsr.w	BossMove
00015CDC 6000 FDCE                  		bra.w	loc_177E6
00015CE0                            ; ===========================================================================
00015CE0                            
00015CE0                            Obj3D_ShipDel:
00015CE0 4EF9 0000 B6D6             		jmp	DeleteObject
00015CE6                            ; ===========================================================================
00015CE6                            
00015CE6                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00015CE6 7000                       		moveq	#0,d0
00015CE8 7201                       		moveq	#1,d1
00015CEA 2268 0034                  		movea.l	$34(a0),a1
00015CEE 1029 0025                  		move.b	$25(a1),d0
00015CF2 5900                       		subq.b	#4,d0
00015CF4 6600                       		bne.s	loc_17A3E
00015CF6 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00015CFC 6600                       		bne.s	loc_17A46
00015CFE 7204                       		moveq	#4,d1
00015D00                            
00015D00                            loc_17A3E:
00015D00 5D00                       		subq.b	#6,d0
00015D02 6B00                       		bmi.s	loc_17A46
00015D04 720A                       		moveq	#$A,d1
00015D06 6000                       		bra.s	loc_17A5A
00015D08                            ; ===========================================================================
00015D08                            
00015D08                            loc_17A46:
00015D08 4A29 0020                  		tst.b	$20(a1)
00015D0C 6600                       		bne.s	loc_17A50
00015D0E 7205                       		moveq	#5,d1
00015D10 6000                       		bra.s	loc_17A5A
00015D12                            ; ===========================================================================
00015D12                            
00015D12                            loc_17A50:
00015D12 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00015D18 6500                       		bcs.s	loc_17A5A
00015D1A 7204                       		moveq	#4,d1
00015D1C                            
00015D1C                            loc_17A5A:
00015D1C 1141 001C                  		move.b	d1,$1C(a0)
00015D20 5500                       		subq.b	#2,d0
00015D22 6600                       		bne.s	Obj3D_FaceDisp
00015D24 117C 0006 001C             		move.b	#6,$1C(a0)
00015D2A 4A28 0001                  		tst.b	1(a0)
00015D2E 6A00                       		bpl.s	Obj3D_FaceDel
00015D30                            
00015D30                            Obj3D_FaceDisp:
00015D30 6000                       		bra.s	Obj3D_Display
00015D32                            ; ===========================================================================
00015D32                            
00015D32                            Obj3D_FaceDel:
00015D32 4EF9 0000 B6D6             		jmp	DeleteObject
00015D38                            ; ===========================================================================
00015D38                            
00015D38                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00015D38 117C 0007 001C             		move.b	#7,$1C(a0)
00015D3E 2268 0034                  		movea.l	$34(a0),a1
00015D42 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00015D48 6600                       		bne.s	loc_17A96
00015D4A 117C 000B 001C             		move.b	#$B,$1C(a0)
00015D50 4A28 0001                  		tst.b	1(a0)
00015D54 6A00                       		bpl.s	Obj3D_FlameDel
00015D56 6000                       		bra.s	Obj3D_FlameDisp
00015D58                            ; ===========================================================================
00015D58                            
00015D58                            loc_17A96:
00015D58 3029 0010                  		move.w	$10(a1),d0
00015D5C 6700                       		beq.s	Obj3D_FlameDisp
00015D5E 117C 0008 001C             		move.b	#8,$1C(a0)
00015D64                            
00015D64                            Obj3D_FlameDisp:
00015D64 6000                       		bra.s	Obj3D_Display
00015D66                            ; ===========================================================================
00015D66                            
00015D66                            Obj3D_FlameDel:
00015D66 4EF9 0000 B6D6             		jmp	DeleteObject
00015D6C                            ; ===========================================================================
00015D6C                            
00015D6C                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00015D6C 2268 0034                  		movea.l	$34(a0),a1
00015D70 3169 0008 0008             		move.w	8(a1),8(a0)
00015D76 3169 000C 000C             		move.w	$C(a1),$C(a0)
00015D7C 1169 0022 0022             		move.b	$22(a1),$22(a0)
00015D82 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00015D88 4EB9 0000 87C0             		jsr	AnimateSprite
00015D8E 1028 0022                  		move.b	$22(a0),d0
00015D92 0200 0003                  		andi.b	#3,d0
00015D96 0228 00FC 0001             		andi.b	#$FC,1(a0)
00015DA0 4EF9 0000 B69A             		jmp	DisplaySprite
00015DA6                            ; ===========================================================================
00015DA6                            ; ---------------------------------------------------------------------------
00015DA6                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00015DA6                            ; ---------------------------------------------------------------------------
00015DA6                            
00015DA6                            Obj48:					; XREF: Obj_Index
00015DA6 7000                       		moveq	#0,d0
00015DA8 1028 0024                  		move.b	$24(a0),d0
00015DAC 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00015DB0 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00015DB4                            ; ===========================================================================
00015DB4 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00015DB6 0000                       		dc.w Obj48_Base-Obj48_Index
00015DB8 0000                       		dc.w Obj48_Display2-Obj48_Index
00015DBA 0000                       		dc.w loc_17C68-Obj48_Index
00015DBC 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00015DBE                            ; ===========================================================================
00015DBE                            
00015DBE                            Obj48_Main:				; XREF: Obj48_Index
00015DBE 5428 0024                  		addq.b	#2,$24(a0)
00015DC2 317C 4080 0026             		move.w	#$4080,$26(a0)
00015DC8 317C FE00 003E             		move.w	#-$200,$3E(a0)
00015DCE 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00015DD6 317C 046C 0002             		move.w	#$46C,2(a0)
00015DDC 45E8 0028                  		lea	$28(a0),a2
00015DE0 14FC 0000                  		move.b	#0,(a2)+
00015DE4 7205                       		moveq	#5,d1
00015DE6 2248                       		movea.l	a0,a1
00015DE8 6000                       		bra.s	loc_17B60
00015DEA                            ; ===========================================================================
00015DEA                            
00015DEA                            Obj48_MakeLinks:
00015DEA 4EB9 0000 BB36             		jsr	SingleObjLoad2
00015DF0 6600                       		bne.s	Obj48_MakeBall
00015DF2 3368 0008 0008             		move.w	8(a0),8(a1)
00015DF8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015DFE 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00015E02 137C 0006 0024             		move.b	#6,$24(a1)
00015E08 237C 0000 5D5A 0004        		move.l	#Map_obj15,4(a1)
00015E10 337C 0380 0002             		move.w	#$380,2(a1)
00015E16 137C 0001 001A             		move.b	#1,$1A(a1)
00015E1C 5228 0028                  		addq.b	#1,$28(a0)
00015E20                            
00015E20                            loc_17B60:				; XREF: Obj48_Main
00015E20 3A09                       		move.w	a1,d5
00015E22 0445 D000                  		subi.w	#$D000,d5
00015E26 EC4D                       		lsr.w	#6,d5
00015E28 0245 007F                  		andi.w	#$7F,d5
00015E2C 14C5                       		move.b	d5,(a2)+
00015E2E 137C 0004 0001             		move.b	#4,1(a1)
00015E34 137C 0008 0019             		move.b	#8,$19(a1)
00015E3A 137C 0006 0018             		move.b	#6,$18(a1)
00015E40 2368 0034 0034             		move.l	$34(a0),$34(a1)
00015E46 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00015E4A                            
00015E4A                            Obj48_MakeBall:
00015E4A 137C 0008 0024             		move.b	#8,$24(a1)
00015E50 237C 0000 6274 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00015E58 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00015E5E 137C 0001 001A             		move.b	#1,$1A(a1)
00015E64 137C 0005 0018             		move.b	#5,$18(a1)
00015E6A 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00015E70 4E75                       		rts	
00015E72                            ; ===========================================================================
00015E72                            
00015E72 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00015E78                            
00015E78                            ; ===========================================================================
00015E78                            
00015E78                            Obj48_Base:				; XREF: Obj48_Index
00015E78 47F9 0001 5E72             		lea	(Obj48_PosData).l,a3
00015E7E 45E8 0028                  		lea	$28(a0),a2
00015E82 7C00                       		moveq	#0,d6
00015E84 1C1A                       		move.b	(a2)+,d6
00015E86                            
00015E86                            loc_17BC6:
00015E86 7800                       		moveq	#0,d4
00015E88 181A                       		move.b	(a2)+,d4
00015E8A ED4C                       		lsl.w	#6,d4
00015E8C 0684 00FF D000             		addi.l	#$FFD000,d4
00015E92 2244                       		movea.l	d4,a1
00015E94 101B                       		move.b	(a3)+,d0
00015E96 B029 003C                  		cmp.b	$3C(a1),d0
00015E9A 6700                       		beq.s	loc_17BE0
00015E9C 5229 003C                  		addq.b	#1,$3C(a1)
00015EA0                            
00015EA0                            loc_17BE0:
00015EA0 51CE FFE4                  		dbf	d6,loc_17BC6
00015EA4                            
00015EA4 B029 003C                  		cmp.b	$3C(a1),d0
00015EA8 6600                       		bne.s	loc_17BFA
00015EAA 2268 0034                  		movea.l	$34(a0),a1
00015EAE 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00015EB4 6600                       		bne.s	loc_17BFA
00015EB6 5428 0024                  		addq.b	#2,$24(a0)
00015EBA                            
00015EBA                            loc_17BFA:
00015EBA 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00015EC0 6700                       		beq.s	Obj48_Display
00015EC2 5268 0032                  		addq.w	#1,$32(a0)
00015EC6                            
00015EC6                            Obj48_Display:
00015EC6 6100 0000                  		bsr.w	sub_17C2A
00015ECA 1028 0026                  		move.b	$26(a0),d0
00015ECE 4EB9 0000 5CCC             		jsr	(Obj15_Move2).l
00015ED4 4EF9 0000 B69A             		jmp	DisplaySprite
00015EDA                            ; ===========================================================================
00015EDA                            
00015EDA                            Obj48_Display2:				; XREF: Obj48_Index
00015EDA 6100 0000                  		bsr.w	sub_17C2A
00015EDE 4EB9 0000 5C8C             		jsr	(Obj48_Move).l
00015EE4 4EF9 0000 B69A             		jmp	DisplaySprite
00015EEA                            
00015EEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015EEA                            
00015EEA                            
00015EEA                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00015EEA 2268 0034                  		movea.l	$34(a0),a1
00015EEE 0628 0020 001B             		addi.b	#$20,$1B(a0)
00015EF4 6400                       		bcc.s	loc_17C3C
00015EF6 0868 0000 001A             		bchg	#0,$1A(a0)
00015EFC                            
00015EFC                            loc_17C3C:
00015EFC 3169 0008 003A             		move.w	8(a1),$3A(a0)
00015F02 3029 000C                  		move.w	$C(a1),d0
00015F0A 3140 0038                  		move.w	d0,$38(a0)
00015F0E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00015F14 4A29 0022                  		tst.b	$22(a1)
00015F18 6A00                       		bpl.s	locret_17C66
00015F1A 10BC 003F                  		move.b	#$3F,0(a0)
00015F1E 117C 0000 0024             		move.b	#0,$24(a0)
00015F24                            
00015F24                            locret_17C66:
00015F24 4E75                       		rts	
00015F26                            ; End of function sub_17C2A
00015F26                            
00015F26                            ; ===========================================================================
00015F26                            
00015F26                            loc_17C68:				; XREF: Obj48_Index
00015F26 2268 0034                  		movea.l	$34(a0),a1
00015F2A 4A29 0022                  		tst.b	$22(a1)
00015F2E 6A00                       		bpl.s	Obj48_Display3
00015F30 10BC 003F                  		move.b	#$3F,0(a0)
00015F34 117C 0000 0024             		move.b	#0,$24(a0)
00015F3A                            
00015F3A                            Obj48_Display3:
00015F3A 4EF9 0000 B69A             		jmp	DisplaySprite
00015F40                            ; ===========================================================================
00015F40                            
00015F40                            Obj48_ChkVanish:			; XREF: Obj48_Index
00015F40 7000                       		moveq	#0,d0
00015F42 4A28 001A                  		tst.b	$1A(a0)
00015F46 6600                       		bne.s	Obj48_Vanish
00015F48 5200                       		addq.b	#1,d0
00015F4A                            
00015F4A                            Obj48_Vanish:
00015F4A 1140 001A                  		move.b	d0,$1A(a0)
00015F4E 2268 0034                  		movea.l	$34(a0),a1
00015F52 4A29 0022                  		tst.b	$22(a1)
00015F56 6A00                       		bpl.s	Obj48_Display4
00015F58 117C 0000 0020             		move.b	#0,$20(a0)
00015F5E 6100 FBC6                  		bsr.w	BossDefeated
00015F62 5328 003C                  		subq.b	#1,$3C(a0)
00015F66 6A00                       		bpl.s	Obj48_Display4
00015F68 10BC 003F                  		move.b	#$3F,(a0)
00015F6C 117C 0000 0024             		move.b	#0,$24(a0)
00015F72                            
00015F72                            Obj48_Display4:
00015F72 4EF9 0000 B69A             		jmp	DisplaySprite
00015F78                            ; ===========================================================================
00015F78                            Ani_Eggman:
00015F78                            	include "_anim\Eggman.asm"
00015F78                            ; ---------------------------------------------------------------------------
00015F78                            ; Animation script - Eggman (bosses)
00015F78                            ; ---------------------------------------------------------------------------
00015F78 0000                       		dc.w byte_17CD4-Ani_Eggman
00015F7A 0000                       		dc.w byte_17CD8-Ani_Eggman
00015F7C 0000                       		dc.w byte_17CDC-Ani_Eggman
00015F7E 0000                       		dc.w byte_17CE0-Ani_Eggman
00015F80 0000                       		dc.w byte_17CE4-Ani_Eggman
00015F82 0000                       		dc.w byte_17CE8-Ani_Eggman
00015F84 0000                       		dc.w byte_17CEC-Ani_Eggman
00015F86 0000                       		dc.w byte_17CF0-Ani_Eggman
00015F88 0000                       		dc.w byte_17CF4-Ani_Eggman
00015F8A 0000                       		dc.w byte_17CF8-Ani_Eggman
00015F8C 0000                       		dc.w byte_17CFC-Ani_Eggman
00015F8E 0000                       		dc.w byte_17D00-Ani_Eggman
00015F90 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00015F94 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00015F98 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00015F9C 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00015FA0 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00015FA4 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00015FA8 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00015FAC 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00015FB0 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00015FB4 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00015FB8 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00015FBC 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00015FC8                            		even
00015FC8                            		even
00015FC8                            
00015FC8                            ; ---------------------------------------------------------------------------
00015FC8                            ; Sprite mappings - Eggman (boss levels)
00015FC8                            ; ---------------------------------------------------------------------------
00015FC8                            Map_Eggman:
00015FC8                            	include "_maps\Eggman.asm"
00015FC8                            ; ---------------------------------------------------------------------------
00015FC8                            ; Sprite mappings - Eggman (boss levels)
00015FC8                            ; ---------------------------------------------------------------------------
00015FC8 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00015FCC 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00015FD0 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
00015FD4 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
00015FD8 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00015FDC 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00015FE0 0000                       		dc.w byte_17DC8-Map_Eggman
00015FE2 06                         byte_17D26:	dc.b 6
00015FE3 EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
00015FE8 EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
00015FED FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00015FF2 FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
00015FF7 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00015FFC 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00016001 02                         byte_17D45:	dc.b 2
00016002 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00016007 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
0001600C 02                         byte_17D50:	dc.b 2
0001600D E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00016012 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00016017 03                         byte_17D5B:	dc.b 3
00016018 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
0001601D EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00016022 EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00016027 03                         byte_17D6B:	dc.b 3
00016028 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
0001602D EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00016032 EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00016037 03                         byte_17D7B:	dc.b 3
00016038 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
0001603D EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00016042 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00016047 03                         byte_17D8B:	dc.b 3
00016048 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
0001604D E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00016052 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00016057 04                         byte_17D9B:	dc.b 4
00016058 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
0001605D E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00016062 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00016067 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
0001606C 01                         byte_17DB0:	dc.b 1
0001606D 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00016072 01                         byte_17DB6:	dc.b 1
00016073 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00016078 00                         byte_17DBC:	dc.b 0
00016079 02                         byte_17DBD:	dc.b 2
0001607A 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
0001607F 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00016084 02                         byte_17DC8:	dc.b 2
00016085 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
0001608A 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00016090 00                         		even
00016090 00                         		even
00016090                            
00016090                            ; ---------------------------------------------------------------------------
00016090                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00016090                            ; ---------------------------------------------------------------------------
00016090                            Map_BossItems:
00016090                            	include "_maps\Boss items.asm"
00016090                            ; ---------------------------------------------------------------------------
00016090                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00016090                            ; ---------------------------------------------------------------------------
00016090 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00016094 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00016098 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
0001609C 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
000160A0 01                         byte_17DE4:	dc.b 1
000160A1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000160A6 02                         byte_17DEA:	dc.b 2
000160A7 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
000160AC F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000160B1 00                         		dc.b 0
000160B2 01                         byte_17DF6:	dc.b 1
000160B3 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
000160B8 01                         byte_17DFC:	dc.b 1
000160B9 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
000160BE 01                         byte_17E02:	dc.b 1
000160BF 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
000160C4 04                         byte_17E08:	dc.b 4
000160C5 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
000160CA F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
000160CF F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000160D4 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000160D9 00                         		dc.b 0
000160DA 02                         byte_17E1E:	dc.b 2
000160DB 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000160E0 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000160E5 00                         		dc.b 0
000160E6 02                         byte_17E2A:	dc.b 2
000160E7 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
000160EC 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
000160F2 00                         		even
000160F2 00                         		even
000160F2                            
000160F2                            ; ===========================================================================
000160F2                            ; ---------------------------------------------------------------------------
000160F2                            ; Object 77 - Eggman (LZ)
000160F2                            ; ---------------------------------------------------------------------------
000160F2                            
000160F2                            Obj77:					; XREF: Obj_Index
000160F2 7000                       		moveq	#0,d0
000160F4 1028 0024                  		move.b	$24(a0),d0
000160F8 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
000160FC 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00016100                            ; ===========================================================================
00016100 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00016102 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00016104 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00016106 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00016108                            
00016108 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001610A 0401                       		dc.b 4,	1
0001610C 0607                       		dc.b 6,	7
0001610E                            ; ===========================================================================
0001610E                            
0001610E                            Obj77_Main:				; XREF: Obj77_Index
0001610E 317C 1E10 0008             		move.w	#$1E10,8(a0)
00016114 317C 05C0 000C             		move.w	#$5C0,$C(a0)
0001611A 3168 0008 0030             		move.w	8(a0),$30(a0)
00016120 3168 000C 0038             		move.w	$C(a0),$38(a0)
00016126 117C 000F 0020             		move.b	#$F,$20(a0)
0001612C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00016132 117C 0004 0018             		move.b	#4,$18(a0)
00016138 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001613C 2248                       		movea.l	a0,a1
0001613E 7202                       		moveq	#2,d1
00016140 6000                       		bra.s	Obj77_LoadBoss
00016142                            ; ===========================================================================
00016142                            
00016142                            Obj77_Loop:
00016142 4EB9 0000 BB36             		jsr	SingleObjLoad2
00016148 6600                       		bne.s	Obj77_ShipMain
0001614A 12BC 0077                  		move.b	#$77,0(a1)
0001614E 3368 0008 0008             		move.w	8(a0),8(a1)
00016154 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001615A                            
0001615A                            Obj77_LoadBoss:				; XREF: Obj77_Main
0001615A 08A8 0000 0022             		bclr	#0,$22(a0)
00016160 4229 0025                  		clr.b	$25(a1)
00016164 135A 0024                  		move.b	(a2)+,$24(a1)
00016168 135A 001C                  		move.b	(a2)+,$1C(a1)
0001616C 1368 0018 0018             		move.b	$18(a0),$18(a1)
00016172 237C 0001 5FC8 0004        		move.l	#Map_Eggman,4(a1)
0001617A 337C 0400 0002             		move.w	#$400,2(a1)
00016180 137C 0004 0001             		move.b	#4,1(a1)
00016186 137C 0020 0019             		move.b	#$20,$19(a1)
0001618C 2348 0034                  		move.l	a0,$34(a1)
00016190 51C9 FFB0                  		dbf	d1,Obj77_Loop
00016194                            
00016194                            Obj77_ShipMain:
00016194 43F8 D000                  		lea	($FFFFD000).w,a1
00016198 7000                       		moveq	#0,d0
0001619A 1028 0025                  		move.b	$25(a0),d0
0001619E 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
000161A2 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
000161A6 43F9 0001 5F78             		lea	(Ani_Eggman).l,a1
000161AC 4EB9 0000 87C0             		jsr	AnimateSprite
000161B2 7003                       		moveq	#3,d0
000161B8 0228 00FC 0001             		andi.b	#$FC,1(a0)
000161C2 4EF9 0000 B69A             		jmp	DisplaySprite
000161C8                            ; ===========================================================================
000161C8 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
000161CC 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
000161D0 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
000161D4 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
000161D8                            ; ===========================================================================
000161D8                            
000161D8                            loc_17F1E:				; XREF: Obj77_ShipIndex
000161D8 3029 0008                  		move.w	8(a1),d0
000161DC 0C40 1DA0                  		cmpi.w	#$1DA0,d0
000161E0 6500                       		bcs.s	loc_17F38
000161E2 317C FE80 0012             		move.w	#-$180,$12(a0)
000161E8 317C 0060 0010             		move.w	#$60,$10(a0)
000161EE 5428 0025                  		addq.b	#2,$25(a0)
000161F2                            
000161F2                            loc_17F38:
000161F2 6100 F974                  		bsr.w	BossMove
000161F6 3168 0038 000C             		move.w	$38(a0),$C(a0)
000161FC 3168 0030 0008             		move.w	$30(a0),8(a0)
00016202                            
00016202                            loc_17F48:
00016202 4A28 003D                  		tst.b	$3D(a0)
00016206 6600                       		bne.s	loc_17F8E
00016208 4A28 0022                  		tst.b	$22(a0)
0001620C 6B00                       		bmi.s	loc_17F92
0001620E 4A28 0020                  		tst.b	$20(a0)
00016212 6600                       		bne.s	locret_17F8C
00016214 4A28 003E                  		tst.b	$3E(a0)
00016218 6600                       		bne.s	loc_17F70
0001621A 117C 0020 003E             		move.b	#$20,$3E(a0)
00016220 303C 00AC                  		move.w	#$AC,d0
00016224 4EB9 0000 1020             		jsr	(PlaySound_Special).l
0001622A                            
0001622A                            loc_17F70:
0001622A 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001622E 7000                       		moveq	#0,d0
00016230 4A51                       		tst.w	(a1)
00016232 6600                       		bne.s	loc_17F7E
00016234 303C 0EEE                  		move.w	#$EEE,d0
00016238                            
00016238                            loc_17F7E:
00016238 3280                       		move.w	d0,(a1)
0001623A 5328 003E                  		subq.b	#1,$3E(a0)
0001623E 6600                       		bne.s	locret_17F8C
00016240 117C 000F 0020             		move.b	#$F,$20(a0)
00016246                            
00016246                            locret_17F8C:
00016246 4E75                       		rts	
00016248                            ; ===========================================================================
00016248                            
00016248                            loc_17F8E:				; XREF: loc_17F48
00016248 6000 F8DC                  		bra.w	BossDefeated
0001624C                            ; ===========================================================================
0001624C                            
0001624C                            loc_17F92:				; XREF: loc_17F48
0001624C 7064                       		moveq	#100,d0
0001624E 6100 0000                  		bsr.w	AddPoints
00016252 117C 00FF 003D             		move.b	#-1,$3D(a0)
00016258 4E75                       		rts	
0001625A                            ; ===========================================================================
0001625A                            
0001625A                            loc_17FA0:				; XREF: Obj77_ShipIndex
0001625A 70FE                       		moveq	#-2,d0
0001625C 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00016262 6500                       		bcs.s	loc_17FB6
00016264 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001626A 4268 0010                  		clr.w	$10(a0)
0001626E 5240                       		addq.w	#1,d0
00016270                            
00016270                            loc_17FB6:
00016270 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00016276 6E00                       		bgt.s	loc_17FCA
00016278 317C 0500 0038             		move.w	#$500,$38(a0)
0001627E 4268 0012                  		clr.w	$12(a0)
00016282 5240                       		addq.w	#1,d0
00016284                            
00016284                            loc_17FCA:
00016284 6600                       		bne.s	loc_17FDC
00016286 317C 0140 0010             		move.w	#$140,$10(a0)
0001628C 317C FE00 0012             		move.w	#-$200,$12(a0)
00016292 5428 0025                  		addq.b	#2,$25(a0)
00016296                            
00016296                            loc_17FDC:
00016296 6000 FF5A                  		bra.w	loc_17F38
0001629A                            ; ===========================================================================
0001629A                            
0001629A                            loc_17FE0:				; XREF: Obj77_ShipIndex
0001629A 70FE                       		moveq	#-2,d0
0001629C 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
000162A2 6500                       		bcs.s	loc_17FF6
000162A4 317C 1E70 0030             		move.w	#$1E70,$30(a0)
000162AA 4268 0010                  		clr.w	$10(a0)
000162AE 5240                       		addq.w	#1,d0
000162B0                            
000162B0                            loc_17FF6:
000162B0 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
000162B6 6E00                       		bgt.s	loc_1800A
000162B8 317C 04C0 0038             		move.w	#$4C0,$38(a0)
000162BE 4268 0012                  		clr.w	$12(a0)
000162C2 5240                       		addq.w	#1,d0
000162C4                            
000162C4                            loc_1800A:
000162C4 6600                       		bne.s	loc_1801A
000162C6 317C FE80 0012             		move.w	#-$180,$12(a0)
000162CC 5428 0025                  		addq.b	#2,$25(a0)
000162D0 4228 003F                  		clr.b	$3F(a0)
000162D4                            
000162D4                            loc_1801A:
000162D4 6000 FF1C                  		bra.w	loc_17F38
000162D8                            ; ===========================================================================
000162D8                            
000162D8                            loc_1801E:				; XREF: Obj77_ShipIndex
000162D8 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
000162DE 6E00                       		bgt.s	loc_1804E
000162E0 317C 0100 0038             		move.w	#$100,$38(a0)
000162E6 317C 0140 0010             		move.w	#$140,$10(a0)
000162EC 317C FF80 0012             		move.w	#-$80,$12(a0)
000162F2 4A28 003D                  		tst.b	$3D(a0)
000162F6 6700                       		beq.s	loc_18046
000162F8 E1E8 0010                  		asl	$10(a0)
000162FC E1E8 0012                  		asl	$12(a0)
00016300                            
00016300                            loc_18046:
00016300 5428 0025                  		addq.b	#2,$25(a0)
00016304 6000 FEEC                  		bra.w	loc_17F38
00016308                            ; ===========================================================================
00016308                            
00016308                            loc_1804E:
00016308 08E8 0000 0022             		bset	#0,$22(a0)
0001630E 5428 003F                  		addq.b	#2,$3F(a0)
00016312 1028 003F                  		move.b	$3F(a0),d0
00016316 4EB9 0000 2556             		jsr	(CalcSine).l
0001631C 4A41                       		tst.w	d1
0001631E 6A00                       		bpl.s	loc_1806C
00016320 08A8 0000 0022             		bclr	#0,$22(a0)
00016326                            
00016326                            loc_1806C:
00016326 E840                       		asr.w	#4,d0
00016328 4840                       		swap	d0
0001632A 4240                       		clr.w	d0
00016330 4840                       		swap	d0
00016332 3140 0008                  		move.w	d0,8(a0)
00016336 3028 0012                  		move.w	$12(a0),d0
0001633A 3238 D00C                  		move.w	($FFFFD00C).w,d1
00016342 6500                       		bcs.s	loc_180A2
00016344 0441 0048                  		subi.w	#$48,d1
00016348 6500                       		bcs.s	loc_180A2
0001634A E240                       		asr.w	#1,d0
0001634C 0441 0028                  		subi.w	#$28,d1
00016350 6500                       		bcs.s	loc_180A2
00016352 E240                       		asr.w	#1,d0
00016354 0441 0028                  		subi.w	#$28,d1
00016358 6500                       		bcs.s	loc_180A2
0001635A 7000                       		moveq	#0,d0
0001635C                            
0001635C                            loc_180A2:
0001635C 48C0                       		ext.l	d0
0001635E E180                       		asl.l	#8,d0
00016360 4A28 003D                  		tst.b	$3D(a0)
00016364 6700                       		beq.s	loc_180AE
00016368                            
00016368                            loc_180AE:
0001636C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00016372 6000 FE8E                  		bra.w	loc_17F48
00016376                            ; ===========================================================================
00016376                            
00016376                            loc_180BC:				; XREF: Obj77_ShipIndex
00016376 70FE                       		moveq	#-2,d0
00016378 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001637E 6500                       		bcs.s	loc_180D2
00016380 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
00016386 4268 0010                  		clr.w	$10(a0)
0001638A 5240                       		addq.w	#1,d0
0001638C                            
0001638C                            loc_180D2:
0001638C 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00016392 6E00                       		bgt.s	loc_180E6
00016394 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001639A 4268 0012                  		clr.w	$12(a0)
0001639E 5240                       		addq.w	#1,d0
000163A0                            
000163A0                            loc_180E6:
000163A0 6600                       		bne.s	loc_180F2
000163A2 5428 0025                  		addq.b	#2,$25(a0)
000163A6 08A8 0000 0022             		bclr	#0,$22(a0)
000163AC                            
000163AC                            loc_180F2:
000163AC 6000 FE44                  		bra.w	loc_17F38
000163B0                            ; ===========================================================================
000163B0                            
000163B0                            loc_180F6:				; XREF: Obj77_ShipIndex
000163B0 4A28 003D                  		tst.b	$3D(a0)
000163B4 6600                       		bne.s	loc_18112
000163B6 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
000163BC 6D00                       		blt.s	loc_18126
000163BE 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
000163C4 6E00                       		bgt.s	loc_18126
000163C6 117C 0032 003C             		move.b	#$32,$3C(a0)
000163CC                            
000163CC                            loc_18112:
000163CC 303C 0082                  		move.w	#$82,d0
000163D0 4EB9 0000 101A             		jsr	(PlaySound).l	; play LZ music
000163D6 08E8 0000 0022             		bset	#0,$22(a0)
000163DC 5428 0025                  		addq.b	#2,$25(a0)
000163E0                            
000163E0                            loc_18126:
000163E0 6000 FE10                  		bra.w	loc_17F38
000163E4                            ; ===========================================================================
000163E4                            
000163E4                            loc_1812A:				; XREF: Obj77_ShipIndex
000163E4 4A28 003D                  		tst.b	$3D(a0)
000163E8 6600                       		bne.s	loc_18136
000163EA 5328 003C                  		subq.b	#1,$3C(a0)
000163EE 6600                       		bne.s	loc_1814E
000163F0                            
000163F0                            loc_18136:
000163F0 4228 003C                  		clr.b	$3C(a0)
000163F4 317C 0400 0010             		move.w	#$400,$10(a0)
000163FA 317C FFC0 0012             		move.w	#-$40,$12(a0)
00016400 4228 003D                  		clr.b	$3D(a0)
00016404 5428 0025                  		addq.b	#2,$25(a0)
00016408                            
00016408                            loc_1814E:
00016408 6000 FDE8                  		bra.w	loc_17F38
0001640C                            ; ===========================================================================
0001640C                            
0001640C                            loc_18152:				; XREF: Obj77_ShipIndex
0001640C 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00016412 6400                       		bcc.s	loc_18160
00016414 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00016418 6000                       		bra.s	loc_18166
0001641A                            ; ===========================================================================
0001641A                            
0001641A                            loc_18160:
0001641A 4A28 0001                  		tst.b	1(a0)
0001641E 6A00                       		bpl.s	Obj77_ShipDel
00016420                            
00016420                            loc_18166:
00016420 6000 FDD0                  		bra.w	loc_17F38
00016424                            ; ===========================================================================
00016424                            
00016424                            Obj77_ShipDel:
00016424 4EF9 0000 B6D6             		jmp	DeleteObject
0001642A                            ; ===========================================================================
0001642A                            
0001642A                            Obj77_FaceMain:				; XREF: Obj77_Index
0001642A 2268 0034                  		movea.l	$34(a0),a1
0001642E 1011                       		move.b	(a1),d0
00016430 B010                       		cmp.b	(a0),d0
00016432 6600                       		bne.s	Obj77_FaceDel
00016434 7000                       		moveq	#0,d0
00016436 1029 0025                  		move.b	$25(a1),d0
0001643A 7201                       		moveq	#1,d1
0001643C 4A28 003D                  		tst.b	$3D(a0)
00016440 6700                       		beq.s	loc_1818C
00016442 720A                       		moveq	#$A,d1
00016444 6000                       		bra.s	loc_181A0
00016446                            ; ===========================================================================
00016446                            
00016446                            loc_1818C:
00016446 4A29 0020                  		tst.b	$20(a1)
0001644A 6600                       		bne.s	loc_18196
0001644C 7205                       		moveq	#5,d1
0001644E 6000                       		bra.s	loc_181A0
00016450                            ; ===========================================================================
00016450                            
00016450                            loc_18196:
00016450 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00016456 6500                       		bcs.s	loc_181A0
00016458 7204                       		moveq	#4,d1
0001645A                            
0001645A                            loc_181A0:
0001645A 1141 001C                  		move.b	d1,$1C(a0)
0001645E 0C00 000E                  		cmpi.b	#$E,d0
00016462 6600                       		bne.s	loc_181B6
00016464 117C 0006 001C             		move.b	#6,$1C(a0)
0001646A 4A28 0001                  		tst.b	1(a0)
0001646E 6A00                       		bpl.s	Obj77_FaceDel
00016470                            
00016470                            loc_181B6:
00016470 6000                       		bra.s	Obj77_Display
00016472                            ; ===========================================================================
00016472                            
00016472                            Obj77_FaceDel:
00016472 4EF9 0000 B6D6             		jmp	DeleteObject
00016478                            ; ===========================================================================
00016478                            
00016478                            Obj77_FlameMain:			; XREF: Obj77_Index
00016478 117C 0007 001C             		move.b	#7,$1C(a0)
0001647E 2268 0034                  		movea.l	$34(a0),a1
00016482 1011                       		move.b	(a1),d0
00016484 B010                       		cmp.b	(a0),d0
00016486 6600                       		bne.s	Obj77_FlameDel
00016488 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
0001648E 6600                       		bne.s	loc_181F0
00016490 117C 000B 001C             		move.b	#$B,$1C(a0)
00016496 4A28 0001                  		tst.b	1(a0)
0001649A 6A00                       		bpl.s	Obj77_FlameDel
0001649C 6000                       		bra.s	loc_181F0
0001649E                            ; ===========================================================================
0001649E 4A69 0010                  		tst.w	$10(a1)
000164A2 6700                       		beq.s	loc_181F0
000164A4 117C 0008 001C             		move.b	#8,$1C(a0)
000164AA                            
000164AA                            loc_181F0:
000164AA 6000                       		bra.s	Obj77_Display
000164AC                            ; ===========================================================================
000164AC                            
000164AC                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
000164AC 4EF9 0000 B6D6             		jmp	DeleteObject
000164B2                            ; ===========================================================================
000164B2                            
000164B2                            Obj77_Display:
000164B2 43F9 0001 5F78             		lea	(Ani_Eggman).l,a1
000164B8 4EB9 0000 87C0             		jsr	AnimateSprite
000164BE 2268 0034                  		movea.l	$34(a0),a1
000164C2 3169 0008 0008             		move.w	8(a1),8(a0)
000164C8 3169 000C 000C             		move.w	$C(a1),$C(a0)
000164CE 1169 0022 0022             		move.b	$22(a1),$22(a0)
000164D4 7003                       		moveq	#3,d0
000164DA 0228 00FC 0001             		andi.b	#-4,1(a0)
000164E4 4EF9 0000 B69A             		jmp	DisplaySprite
000164EA                            ; ===========================================================================
000164EA                            ; ---------------------------------------------------------------------------
000164EA                            ; Object 73 - Eggman (MZ)
000164EA                            ; ---------------------------------------------------------------------------
000164EA                            
000164EA                            Obj73:					; XREF: Obj_Index
000164EA 7000                       		moveq	#0,d0
000164EC 1028 0024                  		move.b	$24(a0),d0
000164F0 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
000164F4 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
000164F8                            ; ===========================================================================
000164F8 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
000164FA 0000                       		dc.w Obj73_ShipMain-Obj73_Index
000164FC 0000                       		dc.w Obj73_FaceMain-Obj73_Index
000164FE 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00016500 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00016502                            
00016502 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00016505 0401 04                    		dc.b 4,	1, 4
00016508 0607 04                    		dc.b 6,	7, 4
0001650B 0800 03                    		dc.b 8,	0, 3
0001650E                            ; ===========================================================================
0001650E                            
0001650E                            Obj73_Main:				; XREF: Obj73_Index
0001650E 3168 0008 0030             		move.w	8(a0),$30(a0)
00016514 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001651A 117C 000F 0020             		move.b	#$F,$20(a0)
00016520 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00016526 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001652A 2248                       		movea.l	a0,a1
0001652C 7203                       		moveq	#3,d1
0001652E 6000                       		bra.s	Obj73_LoadBoss
00016530                            ; ===========================================================================
00016530                            
00016530                            Obj73_Loop:
00016530 4EB9 0000 BB36             		jsr	SingleObjLoad2
00016536 6600                       		bne.s	Obj73_ShipMain
00016538 12BC 0073                  		move.b	#$73,0(a1)
0001653C 3368 0008 0008             		move.w	8(a0),8(a1)
00016542 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016548                            
00016548                            Obj73_LoadBoss:				; XREF: Obj73_Main
00016548 08A8 0000 0022             		bclr	#0,$22(a0)
0001654E 4229 0025                  		clr.b	$25(a1)
00016552 135A 0024                  		move.b	(a2)+,$24(a1)
00016556 135A 001C                  		move.b	(a2)+,$1C(a1)
0001655A 135A 0018                  		move.b	(a2)+,$18(a1)
0001655E 237C 0001 5FC8 0004        		move.l	#Map_Eggman,4(a1)
00016566 337C 0400 0002             		move.w	#$400,2(a1)
0001656C 137C 0004 0001             		move.b	#4,1(a1)
00016572 137C 0020 0019             		move.b	#$20,$19(a1)
00016578 2348 0034                  		move.l	a0,$34(a1)
0001657C 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00016580                            
00016580                            Obj73_ShipMain:
00016580 7000                       		moveq	#0,d0
00016582 1028 0025                  		move.b	$25(a0),d0
00016586 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001658A 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001658E 43F9 0001 5F78             		lea	(Ani_Eggman).l,a1
00016594 4EB9 0000 87C0             		jsr	AnimateSprite
0001659A 7003                       		moveq	#3,d0
000165A0 0228 00FC 0001             		andi.b	#$FC,1(a0)
000165AA 4EF9 0000 B69A             		jmp	DisplaySprite
000165B0                            ; ===========================================================================
000165B0 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
000165B2 0000                       		dc.w loc_183AA-Obj73_ShipIndex
000165B4 0000                       		dc.w loc_184F6-Obj73_ShipIndex
000165B6 0000                       		dc.w loc_1852C-Obj73_ShipIndex
000165B8 0000                       		dc.w loc_18582-Obj73_ShipIndex
000165BA                            ; ===========================================================================
000165BA                            
000165BA                            loc_18302:				; XREF: Obj73_ShipIndex
000165BA 1028 003F                  		move.b	$3F(a0),d0
000165BE 5428 003F                  		addq.b	#2,$3F(a0)
000165C2 4EB9 0000 2556             		jsr	(CalcSine).l
000165C8 E440                       		asr.w	#2,d0
000165CA 3140 0012                  		move.w	d0,$12(a0)
000165CE 317C FF00 0010             		move.w	#-$100,$10(a0)
000165D4 6100 F592                  		bsr.w	BossMove
000165D8 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
000165DE 6600                       		bne.s	loc_18334
000165E0 5428 0025                  		addq.b	#2,$25(a0)
000165E4 4228 0028                  		clr.b	$28(a0)
000165E8 42A8 0010                  		clr.l	$10(a0)
000165EC                            
000165EC                            loc_18334:
000165EC 4EB9 0000 2530             		jsr	(RandomNumber).l
000165F2 1140 0034                  		move.b	d0,$34(a0)
000165F6                            
000165F6                            loc_1833E:
000165F6 3168 0038 000C             		move.w	$38(a0),$C(a0)
000165FC 3168 0030 0008             		move.w	$30(a0),8(a0)
00016602 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00016608 6400                       		bcc.s	locret_18390
0001660A 4A28 0022                  		tst.b	$22(a0)
0001660E 6B00                       		bmi.s	loc_18392
00016610 4A28 0020                  		tst.b	$20(a0)
00016614 6600                       		bne.s	locret_18390
00016616 4A28 003E                  		tst.b	$3E(a0)
0001661A 6600                       		bne.s	loc_18374
0001661C 117C 0028 003E             		move.b	#$28,$3E(a0)
00016622 303C 00AC                  		move.w	#$AC,d0
00016626 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001662C                            
0001662C                            loc_18374:
0001662C 43F8 FB22                  		lea	($FFFFFB22).w,a1
00016630 7000                       		moveq	#0,d0
00016632 4A51                       		tst.w	(a1)
00016634 6600                       		bne.s	loc_18382
00016636 303C 0EEE                  		move.w	#$EEE,d0
0001663A                            
0001663A                            loc_18382:
0001663A 3280                       		move.w	d0,(a1)
0001663C 5328 003E                  		subq.b	#1,$3E(a0)
00016640 6600                       		bne.s	locret_18390
00016642 117C 000F 0020             		move.b	#$F,$20(a0)
00016648                            
00016648                            locret_18390:
00016648 4E75                       		rts	
0001664A                            ; ===========================================================================
0001664A                            
0001664A                            loc_18392:				; XREF: loc_1833E
0001664A 7064                       		moveq	#100,d0
0001664C 6100 0000                  		bsr.w	AddPoints
00016650 117C 0004 0025             		move.b	#4,$25(a0)
00016656 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001665C 4268 0010                  		clr.w	$10(a0)
00016660 4E75                       		rts	
00016662                            ; ===========================================================================
00016662                            
00016662                            loc_183AA:				; XREF: Obj73_ShipIndex
00016662 7000                       		moveq	#0,d0
00016664 1028 0028                  		move.b	$28(a0),d0
00016668 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001666C 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00016670 0228 0006 0028             		andi.b	#6,$28(a0)
00016676 6000 FF7E                  		bra.w	loc_1833E
0001667A                            ; ===========================================================================
0001667A 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001667C 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001667E 0000                       		dc.w loc_183CA-off_183C2
00016680 0000                       		dc.w Obj73_MakeLava2-off_183C2
00016682                            ; ===========================================================================
00016682                            
00016682                            loc_183CA:				; XREF: off_183C2
00016682 4A68 0010                  		tst.w	$10(a0)
00016686 6600                       		bne.s	loc_183FE
00016688 7040                       		moveq	#$40,d0
0001668A 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00016690 6700                       		beq.s	loc_183E6
00016692 6500                       		bcs.s	loc_183DE
00016694 4440                       		neg.w	d0
00016696                            
00016696                            loc_183DE:
00016696 3140 0012                  		move.w	d0,$12(a0)
0001669A 6000 F4CC                  		bra.w	BossMove
0001669E                            ; ===========================================================================
0001669E                            
0001669E                            loc_183E6:
0001669E 317C 0200 0010             		move.w	#$200,$10(a0)
000166A4 317C 0100 0012             		move.w	#$100,$12(a0)
000166AA 0828 0000 0022             		btst	#0,$22(a0)
000166B0 6600                       		bne.s	loc_183FE
000166B2 4468 0010                  		neg.w	$10(a0)
000166B6                            
000166B6                            loc_183FE:
000166B6 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
000166BC 6400                       		bcc.s	Obj73_MakeLava
000166BE 6100 F4A8                  		bsr.w	BossMove
000166C2 5968 0012                  		subq.w	#4,$12(a0)
000166C6                            
000166C6                            Obj73_MakeLava:
000166C6 5328 0034                  		subq.b	#1,$34(a0)
000166CA 6400                       		bcc.s	loc_1845C
000166CC 4EB9 0000 BB20             		jsr	SingleObjLoad
000166D2 6600                       		bne.s	loc_1844A
000166D4 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
000166D8 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
000166DE 4EB9 0000 2530             		jsr	(RandomNumber).l
000166E4 0280 0000 FFFF             		andi.l	#$FFFF,d0
000166EA 80FC 0050                  		divu.w	#$50,d0
000166EE 4840                       		swap	d0
000166F0 0640 1878                  		addi.w	#$1878,d0
000166F4 3340 0008                  		move.w	d0,8(a1)
000166F8 EE09                       		lsr.b	#7,d1
000166FA 337C 00FF 0028             		move.w	#$FF,$28(a1)
00016700                            
00016700                            loc_1844A:
00016700 4EB9 0000 2530             		jsr	(RandomNumber).l
00016706 0200 001F                  		andi.b	#$1F,d0
0001670A 0600 0040                  		addi.b	#$40,d0
0001670E 1140 0034                  		move.b	d0,$34(a0)
00016712                            
00016712                            loc_1845C:
00016712 0828 0000 0022             		btst	#0,$22(a0)
00016718 6700                       		beq.s	loc_18474
0001671A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00016720 6D00                       		blt.s	locret_1849C
00016722 317C 1910 0030             		move.w	#$1910,$30(a0)
00016728 6000                       		bra.s	loc_18482
0001672A                            ; ===========================================================================
0001672A                            
0001672A                            loc_18474:
0001672A 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00016730 6E00                       		bgt.s	locret_1849C
00016732 317C 1830 0030             		move.w	#$1830,$30(a0)
00016738                            
00016738                            loc_18482:
00016738 4268 0010                  		clr.w	$10(a0)
0001673C 317C FE80 0012             		move.w	#-$180,$12(a0)
00016742 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00016748 6400                       		bcc.s	loc_18498
0001674A 4468 0012                  		neg.w	$12(a0)
0001674E                            
0001674E                            loc_18498:
0001674E 5428 0028                  		addq.b	#2,$28(a0)
00016752                            
00016752                            locret_1849C:
00016752 4E75                       		rts	
00016754                            ; ===========================================================================
00016754                            
00016754                            Obj73_MakeLava2:			; XREF: off_183C2
00016754 6100 F412                  		bsr.w	BossMove
00016758 3028 0038                  		move.w	$38(a0),d0
0001675C 0440 022C                  		subi.w	#$22C,d0
00016760 6E00                       		bgt.s	locret_184F4
00016762 303C 022C                  		move.w	#$22C,d0
00016766 4A68 0012                  		tst.w	$12(a0)
0001676A 6700                       		beq.s	loc_184EA
0001676C 4268 0012                  		clr.w	$12(a0)
00016770 317C 0050 003C             		move.w	#$50,$3C(a0)
00016776 0868 0000 0022             		bchg	#0,$22(a0)
0001677C 4EB9 0000 BB20             		jsr	SingleObjLoad
00016782 6600                       		bne.s	loc_184EA
00016784 3368 0030 0008             		move.w	$30(a0),8(a1)
0001678A 3368 0038 000C             		move.w	$38(a0),$C(a1)
00016790 0669 0018 000C             		addi.w	#$18,$C(a1)
00016796 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001679A 137C 0001 0028             		move.b	#1,$28(a1)
000167A0                            
000167A0                            loc_184EA:
000167A0 5368 003C                  		subq.w	#1,$3C(a0)
000167A4 6600                       		bne.s	locret_184F4
000167A6 5428 0028                  		addq.b	#2,$28(a0)
000167AA                            
000167AA                            locret_184F4:
000167AA 4E75                       		rts	
000167AC                            ; ===========================================================================
000167AC                            
000167AC                            loc_184F6:				; XREF: Obj73_ShipIndex
000167AC 5368 003C                  		subq.w	#1,$3C(a0)
000167B0 6B00                       		bmi.s	loc_18500
000167B2 6000 F372                  		bra.w	BossDefeated
000167B6                            ; ===========================================================================
000167B6                            
000167B6                            loc_18500:
000167B6 08E8 0000 0022             		bset	#0,$22(a0)
000167BC 08A8 0007 0022             		bclr	#7,$22(a0)
000167C2 4268 0010                  		clr.w	$10(a0)
000167C6 5428 0025                  		addq.b	#2,$25(a0)
000167CA 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000167D0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000167D4 6600                       		bne.s	locret_1852A
000167D6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000167DC 4268 0012                  		clr.w	$12(a0)
000167E0                            
000167E0                            locret_1852A:
000167E0 4E75                       		rts	
000167E2                            ; ===========================================================================
000167E2                            
000167E2                            loc_1852C:				; XREF: Obj73_ShipIndex
000167E2 5268 003C                  		addq.w	#1,$3C(a0)
000167E6 6700                       		beq.s	loc_18544
000167E8 6A00                       		bpl.s	loc_1854E
000167EA 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
000167F0 6400                       		bcc.s	loc_18544
000167F2 0668 0018 0012             		addi.w	#$18,$12(a0)
000167F8 6000                       		bra.s	loc_1857A
000167FA                            ; ===========================================================================
000167FA                            
000167FA                            loc_18544:
000167FA 4268 0012                  		clr.w	$12(a0)
000167FE 4268 003C                  		clr.w	$3C(a0)
00016802 6000                       		bra.s	loc_1857A
00016804                            ; ===========================================================================
00016804                            
00016804                            loc_1854E:
00016804 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001680A 6500                       		bcs.s	loc_18566
0001680C 6700                       		beq.s	loc_1856C
0001680E 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00016814 6500                       		bcs.s	loc_1857A
00016816 5428 0025                  		addq.b	#2,$25(a0)
0001681A 6000                       		bra.s	loc_1857A
0001681C                            ; ===========================================================================
0001681C                            
0001681C                            loc_18566:
0001681C 5168 0012                  		subq.w	#8,$12(a0)
00016820 6000                       		bra.s	loc_1857A
00016822                            ; ===========================================================================
00016822                            
00016822                            loc_1856C:
00016822 4268 0012                  		clr.w	$12(a0)
00016826 303C 0083                  		move.w	#$83,d0
0001682A 4EB9 0000 101A             		jsr	(PlaySound).l	; play MZ music
00016830                            
00016830                            loc_1857A:
00016830 6100 F336                  		bsr.w	BossMove
00016834 6000 FDC0                  		bra.w	loc_1833E
00016838                            ; ===========================================================================
00016838                            
00016838                            loc_18582:				; XREF: Obj73_ShipIndex
00016838 317C 0500 0010             		move.w	#$500,$10(a0)
0001683E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00016844 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
0001684A 6400                       		bcc.s	loc_1859C
0001684C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00016850 6000                       		bra.s	loc_185A2
00016852                            ; ===========================================================================
00016852                            
00016852                            loc_1859C:
00016852 4A28 0001                  		tst.b	1(a0)
00016856 6A00                       		bpl.s	Obj73_ShipDel
00016858                            
00016858                            loc_185A2:
00016858 6100 F30E                  		bsr.w	BossMove
0001685C 6000 FD98                  		bra.w	loc_1833E
00016860                            ; ===========================================================================
00016860                            
00016860                            Obj73_ShipDel:
00016860 4EF9 0000 B6D6             		jmp	DeleteObject
00016866                            ; ===========================================================================
00016866                            
00016866                            Obj73_FaceMain:				; XREF: Obj73_Index
00016866 7000                       		moveq	#0,d0
00016868 7201                       		moveq	#1,d1
0001686A 2268 0034                  		movea.l	$34(a0),a1
0001686E 1029 0025                  		move.b	$25(a1),d0
00016872 5540                       		subq.w	#2,d0
00016874 6600                       		bne.s	loc_185D2
00016876 0829 0001 0028             		btst	#1,$28(a1)
0001687C 6700                       		beq.s	loc_185DA
0001687E 4A69 0012                  		tst.w	$12(a1)
00016882 6600                       		bne.s	loc_185DA
00016884 7204                       		moveq	#4,d1
00016886 6000                       		bra.s	loc_185EE
00016888                            ; ===========================================================================
00016888                            
00016888                            loc_185D2:
00016888 5500                       		subq.b	#2,d0
0001688A 6B00                       		bmi.s	loc_185DA
0001688C 720A                       		moveq	#$A,d1
0001688E 6000                       		bra.s	loc_185EE
00016890                            ; ===========================================================================
00016890                            
00016890                            loc_185DA:
00016890 4A29 0020                  		tst.b	$20(a1)
00016894 6600                       		bne.s	loc_185E4
00016896 7205                       		moveq	#5,d1
00016898 6000                       		bra.s	loc_185EE
0001689A                            ; ===========================================================================
0001689A                            
0001689A                            loc_185E4:
0001689A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000168A0 6500                       		bcs.s	loc_185EE
000168A2 7204                       		moveq	#4,d1
000168A4                            
000168A4                            loc_185EE:
000168A4 1141 001C                  		move.b	d1,$1C(a0)
000168A8 5900                       		subq.b	#4,d0
000168AA 6600                       		bne.s	loc_18602
000168AC 117C 0006 001C             		move.b	#6,$1C(a0)
000168B2 4A28 0001                  		tst.b	1(a0)
000168B6 6A00                       		bpl.s	Obj73_FaceDel
000168B8                            
000168B8                            loc_18602:
000168B8 6000                       		bra.s	Obj73_Display
000168BA                            ; ===========================================================================
000168BA                            
000168BA                            Obj73_FaceDel:
000168BA 4EF9 0000 B6D6             		jmp	DeleteObject
000168C0                            ; ===========================================================================
000168C0                            
000168C0                            Obj73_FlameMain:			; XREF: Obj73_Index
000168C0 117C 0007 001C             		move.b	#7,$1C(a0)
000168C6 2268 0034                  		movea.l	$34(a0),a1
000168CA 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000168D0 6D00                       		blt.s	loc_1862A
000168D2 117C 000B 001C             		move.b	#$B,$1C(a0)
000168D8 4A28 0001                  		tst.b	1(a0)
000168DC 6A00                       		bpl.s	Obj73_FlameDel
000168DE 6000                       		bra.s	loc_18636
000168E0                            ; ===========================================================================
000168E0                            
000168E0                            loc_1862A:
000168E0 4A69 0010                  		tst.w	$10(a1)
000168E4 6700                       		beq.s	loc_18636
000168E6 117C 0008 001C             		move.b	#8,$1C(a0)
000168EC                            
000168EC                            loc_18636:
000168EC 6000                       		bra.s	Obj73_Display
000168EE                            ; ===========================================================================
000168EE                            
000168EE                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
000168EE 4EF9 0000 B6D6             		jmp	DeleteObject
000168F4                            ; ===========================================================================
000168F4                            
000168F4                            Obj73_Display:
000168F4 43F9 0001 5F78             		lea	(Ani_Eggman).l,a1
000168FA 4EB9 0000 87C0             		jsr	AnimateSprite
00016900                            
00016900                            loc_1864A:
00016900 2268 0034                  		movea.l	$34(a0),a1
00016904 3169 0008 0008             		move.w	8(a1),8(a0)
0001690A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00016910 1169 0022 0022             		move.b	$22(a1),$22(a0)
00016916 7003                       		moveq	#3,d0
0001691C 0228 00FC 0001             		andi.b	#-4,1(a0)
00016926 4EF9 0000 B69A             		jmp	DisplaySprite
0001692C                            ; ===========================================================================
0001692C                            
0001692C                            Obj73_TubeMain:				; XREF: Obj73_Index
0001692C 2268 0034                  		movea.l	$34(a0),a1
00016930 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00016936 6600                       		bne.s	loc_18688
00016938 4A28 0001                  		tst.b	1(a0)
0001693C 6A00                       		bpl.s	Obj73_TubeDel
0001693E                            
0001693E                            loc_18688:
0001693E 217C 0001 6090 0004        		move.l	#Map_BossItems,4(a0)
00016946 317C 246C 0002             		move.w	#$246C,2(a0)
0001694C 117C 0004 001A             		move.b	#4,$1A(a0)
00016952 60AC                       		bra.s	loc_1864A
00016954                            ; ===========================================================================
00016954                            
00016954                            Obj73_TubeDel:
00016954 4EF9 0000 B6D6             		jmp	DeleteObject
0001695A                            ; ===========================================================================
0001695A                            ; ---------------------------------------------------------------------------
0001695A                            ; Object 74 - lava that	Eggman drops (MZ)
0001695A                            ; ---------------------------------------------------------------------------
0001695A                            
0001695A                            Obj74:					; XREF: Obj_Index
0001695A 7000                       		moveq	#0,d0
0001695C 1028 0024                  		move.b	$24(a0),d0
00016960 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00016964 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00016968 4EF9 0000 B69A             		jmp	DisplaySprite
0001696E                            ; ===========================================================================
0001696E 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00016970 0000                       		dc.w Obj74_Action-Obj74_Index
00016972 0000                       		dc.w loc_18886-Obj74_Index
00016974 0000                       		dc.w Obj74_Delete3-Obj74_Index
00016976                            ; ===========================================================================
00016976                            
00016976                            Obj74_Main:				; XREF: Obj74_Index
00016976 117C 0008 0016             		move.b	#8,$16(a0)
0001697C 117C 0008 0017             		move.b	#8,$17(a0)
00016982 217C 0000 9412 0004        		move.l	#Map_obj14,4(a0)
0001698A 317C 0345 0002             		move.w	#$345,2(a0)
00016990 117C 0004 0001             		move.b	#4,1(a0)
00016996 117C 0005 0018             		move.b	#5,$18(a0)
0001699C 3168 000C 0038             		move.w	$C(a0),$38(a0)
000169A2 117C 0008 0019             		move.b	#8,$19(a0)
000169A8 5428 0024                  		addq.b	#2,$24(a0)
000169AC 4A28 0028                  		tst.b	$28(a0)
000169B0 6600                       		bne.s	loc_1870A
000169B2 117C 008B 0020             		move.b	#$8B,$20(a0)
000169B8 5428 0024                  		addq.b	#2,$24(a0)
000169BC 6000 0000                  		bra.w	loc_18886
000169C0                            ; ===========================================================================
000169C0                            
000169C0                            loc_1870A:
000169C0 117C 001E 0029             		move.b	#$1E,$29(a0)
000169C6 303C 00AE                  		move.w	#$AE,d0
000169CA 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play lava sound
000169D0                            
000169D0                            Obj74_Action:				; XREF: Obj74_Index
000169D0 7000                       		moveq	#0,d0
000169D2 1028 0025                  		move.b	$25(a0),d0
000169D6 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
000169DA 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
000169DE 4EB9 0000 B674             		jsr	SpeedToPos
000169E4 43F9 0000 C554             		lea	(Ani_obj14).l,a1
000169EA 4EB9 0000 87C0             		jsr	AnimateSprite
000169F0 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
000169F6 6200                       		bhi.s	Obj74_Delete
000169F8 4E75                       		rts	
000169FA                            ; ===========================================================================
000169FA                            
000169FA                            Obj74_Delete:
000169FA 4EF9 0000 B6D6             		jmp	DeleteObject
00016A00                            ; ===========================================================================
00016A00 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00016A02 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00016A04 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00016A06 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00016A08                            ; ===========================================================================
00016A08                            
00016A08                            Obj74_Drop:				; XREF: Obj74_Index2
00016A08 08E8 0001 0022             		bset	#1,$22(a0)
00016A0E 5328 0029                  		subq.b	#1,$29(a0)
00016A12 6A00                       		bpl.s	locret_18780
00016A14 117C 008B 0020             		move.b	#$8B,$20(a0)
00016A1A 4228 0028                  		clr.b	$28(a0)
00016A1E 0668 0018 0012             		addi.w	#$18,$12(a0)
00016A24 08A8 0001 0022             		bclr	#1,$22(a0)
00016A2A 6100 CADC                  		bsr.w	ObjHitFloor
00016A2E 4A41                       		tst.w	d1
00016A30 6A00                       		bpl.s	locret_18780
00016A32 5428 0025                  		addq.b	#2,$25(a0)
00016A36                            
00016A36                            locret_18780:
00016A36 4E75                       		rts	
00016A38                            ; ===========================================================================
00016A38                            
00016A38                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00016A38 5568 000C                  		subq.w	#2,$C(a0)
00016A3C 08E8 0007 0002             		bset	#7,2(a0)
00016A42 317C 00A0 0010             		move.w	#$A0,$10(a0)
00016A48 4268 0012                  		clr.w	$12(a0)
00016A4C 3168 0008 0030             		move.w	8(a0),$30(a0)
00016A52 3168 000C 0038             		move.w	$C(a0),$38(a0)
00016A58 117C 0003 0029             		move.b	#3,$29(a0)
00016A5E 4EB9 0000 BB36             		jsr	SingleObjLoad2
00016A64 6600                       		bne.s	loc_187CA
00016A66 47D1                       		lea	(a1),a3
00016A68 45D0                       		lea	(a0),a2
00016A6A 7003                       		moveq	#3,d0
00016A6C                            
00016A6C                            Obj74_Loop:
00016A6C 26DA                       		move.l	(a2)+,(a3)+
00016A6E 26DA                       		move.l	(a2)+,(a3)+
00016A70 26DA                       		move.l	(a2)+,(a3)+
00016A72 26DA                       		move.l	(a2)+,(a3)+
00016A74 51C8 FFF6                  		dbf	d0,Obj74_Loop
00016A78                            
00016A78 4469 0010                  		neg.w	$10(a1)
00016A7C 5429 0025                  		addq.b	#2,$25(a1)
00016A80                            
00016A80                            loc_187CA:
00016A80 5428 0025                  		addq.b	#2,$25(a0)
00016A84 4E75                       		rts	
00016A86                            
00016A86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A86                            
00016A86                            
00016A86                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00016A86 4EB9 0000 BB36             		jsr	SingleObjLoad2
00016A8C 6600                       		bne.s	locret_187EE
00016A8E 3368 0008 0008             		move.w	8(a0),8(a1)
00016A94 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016A9A 12BC 0074                  		move.b	#$74,(a1)
00016A9E 337C 0067 0028             		move.w	#$67,$28(a1)
00016AA4                            
00016AA4                            locret_187EE:
00016AA4 4E75                       		rts	
00016AA6                            ; End of function Obj74_Duplicate2
00016AA6                            
00016AA6                            ; ===========================================================================
00016AA6                            
00016AA6                            Obj74_Duplicate:			; XREF: Obj74_Index2
00016AA6 6100 CA60                  		bsr.w	ObjHitFloor
00016AAA 4A41                       		tst.w	d1
00016AAC 6A00                       		bpl.s	loc_18826
00016AAE 3028 0008                  		move.w	8(a0),d0
00016AB2 0C40 1940                  		cmpi.w	#$1940,d0
00016AB6 6E00                       		bgt.s	loc_1882C
00016AB8 3228 0030                  		move.w	$30(a0),d1
00016ABC B240                       		cmp.w	d0,d1
00016ABE 6700                       		beq.s	loc_1881E
00016AC0 0240 0010                  		andi.w	#$10,d0
00016AC4 0241 0010                  		andi.w	#$10,d1
00016AC8 B240                       		cmp.w	d0,d1
00016ACA 6700                       		beq.s	loc_1881E
00016ACC 61B8                       		bsr.s	Obj74_Duplicate2
00016ACE 3168 0008 0032             		move.w	8(a0),$32(a0)
00016AD4                            
00016AD4                            loc_1881E:
00016AD4 3168 0008 0030             		move.w	8(a0),$30(a0)
00016ADA 4E75                       		rts	
00016ADC                            ; ===========================================================================
00016ADC                            
00016ADC                            loc_18826:
00016ADC 5428 0025                  		addq.b	#2,$25(a0)
00016AE0 4E75                       		rts	
00016AE2                            ; ===========================================================================
00016AE2                            
00016AE2                            loc_1882C:
00016AE2 5428 0024                  		addq.b	#2,$24(a0)
00016AE6 4E75                       		rts	
00016AE8                            ; ===========================================================================
00016AE8                            
00016AE8                            Obj74_FallEdge:				; XREF: Obj74_Index2
00016AE8 08A8 0001 0022             		bclr	#1,$22(a0)
00016AEE 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00016AF4 3028 0008                  		move.w	8(a0),d0
00016AFC 6A00                       		bpl.s	loc_1884A
00016AFE 4440                       		neg.w	d0
00016B00                            
00016B00                            loc_1884A:
00016B00 0C40 0012                  		cmpi.w	#$12,d0
00016B04 6600                       		bne.s	loc_18856
00016B06 08A8 0007 0002             		bclr	#7,2(a0)
00016B0C                            
00016B0C                            loc_18856:
00016B0C 6100 C9FA                  		bsr.w	ObjHitFloor
00016B10 4A41                       		tst.w	d1
00016B12 6A00                       		bpl.s	locret_1887E
00016B14 5328 0029                  		subq.b	#1,$29(a0)
00016B18 6700                       		beq.s	Obj74_Delete2
00016B1A 4268 0012                  		clr.w	$12(a0)
00016B1E 3168 0032 0008             		move.w	$32(a0),8(a0)
00016B24 3168 0038 000C             		move.w	$38(a0),$C(a0)
00016B2A 08E8 0007 0002             		bset	#7,2(a0)
00016B30 5528 0025                  		subq.b	#2,$25(a0)
00016B34                            
00016B34                            locret_1887E:
00016B34 4E75                       		rts	
00016B36                            ; ===========================================================================
00016B36                            
00016B36                            Obj74_Delete2:
00016B36 4EF9 0000 B6D6             		jmp	DeleteObject
00016B3C                            ; ===========================================================================
00016B3C                            
00016B3C                            loc_18886:				; XREF: Obj74_Index
00016B3C 08E8 0007 0002             		bset	#7,2(a0)
00016B42 5328 0029                  		subq.b	#1,$29(a0)
00016B46 6600                       		bne.s	Obj74_Animate
00016B48 117C 0001 001C             		move.b	#1,$1C(a0)
00016B4E 5968 000C                  		subq.w	#4,$C(a0)
00016B52 4228 0020                  		clr.b	$20(a0)
00016B56                            
00016B56                            Obj74_Animate:
00016B56 43F9 0000 C554             		lea	(Ani_obj14).l,a1
00016B5C 4EF9 0000 87C0             		jmp	AnimateSprite
00016B62                            ; ===========================================================================
00016B62                            
00016B62                            Obj74_Delete3:				; XREF: Obj74_Index
00016B62 4EF9 0000 B6D6             		jmp	DeleteObject
00016B68                            ; ===========================================================================
00016B68                            
00016B68                            Obj7A_Delete:
00016B68 4EF9 0000 B6D6             		jmp	DeleteObject
00016B6E                            ; ===========================================================================
00016B6E                            ; ---------------------------------------------------------------------------
00016B6E                            ; Object 7A - Eggman (SLZ)
00016B6E                            ; ---------------------------------------------------------------------------
00016B6E                            
00016B6E                            Obj7A:					; XREF: Obj_Index
00016B6E 7000                       		moveq	#0,d0
00016B70 1028 0024                  		move.b	$24(a0),d0
00016B74 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00016B78 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00016B7C                            ; ===========================================================================
00016B7C 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00016B7E 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00016B80 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00016B82 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00016B84 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00016B86                            
00016B86 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00016B89 0401 04                    		dc.b 4,	1, 4
00016B8C 0607 04                    		dc.b 6,	7, 4
00016B8F 0800 03                    		dc.b 8,	0, 3
00016B92                            ; ===========================================================================
00016B92                            
00016B92                            Obj7A_Main:				; XREF: Obj7A_Index
00016B92 317C 2188 0008             		move.w	#$2188,8(a0)
00016B98 317C 0228 000C             		move.w	#$228,$C(a0)
00016B9E 3168 0008 0030             		move.w	8(a0),$30(a0)
00016BA4 3168 000C 0038             		move.w	$C(a0),$38(a0)
00016BAA 117C 000F 0020             		move.b	#$F,$20(a0)
00016BB0 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00016BB6 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00016BBA 2248                       		movea.l	a0,a1
00016BBC 7203                       		moveq	#3,d1
00016BBE 6000                       		bra.s	Obj7A_LoadBoss
00016BC0                            ; ===========================================================================
00016BC0                            
00016BC0                            Obj7A_Loop:
00016BC0 4EB9 0000 BB36             		jsr	SingleObjLoad2
00016BC6 6600                       		bne.s	loc_1895C
00016BC8 12BC 007A                  		move.b	#$7A,0(a1)
00016BCC 3368 0008 0008             		move.w	8(a0),8(a1)
00016BD2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016BD8                            
00016BD8                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00016BD8 08A8 0000 0022             		bclr	#0,$22(a0)
00016BDE 4229 0025                  		clr.b	$25(a1)
00016BE2 135A 0024                  		move.b	(a2)+,$24(a1)
00016BE6 135A 001C                  		move.b	(a2)+,$1C(a1)
00016BEA 135A 0018                  		move.b	(a2)+,$18(a1)
00016BEE 237C 0001 5FC8 0004        		move.l	#Map_Eggman,4(a1)
00016BF6 337C 0400 0002             		move.w	#$400,2(a1)
00016BFC 137C 0004 0001             		move.b	#4,1(a1)
00016C02 137C 0020 0019             		move.b	#$20,$19(a1)
00016C08 2348 0034                  		move.l	a0,$34(a1)
00016C0C 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00016C10                            
00016C10                            loc_1895C:
00016C10 43F8 D040                  		lea	($FFFFD040).w,a1
00016C14 45E8 002A                  		lea	$2A(a0),a2
00016C18 705E                       		moveq	#$5E,d0
00016C1A 723E                       		moveq	#$3E,d1
00016C1C                            
00016C1C                            loc_18968:
00016C1C B011                       		cmp.b	(a1),d0
00016C1E 6600                       		bne.s	loc_18974
00016C20 4A29 0028                  		tst.b	$28(a1)
00016C24 6700                       		beq.s	loc_18974
00016C26 34C9                       		move.w	a1,(a2)+
00016C28                            
00016C28                            loc_18974:
00016C28 D2FC 0040                  		adda.w	#$40,a1
00016C2C 51C9 FFEE                  		dbf	d1,loc_18968
00016C30                            
00016C30                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00016C30 7000                       		moveq	#0,d0
00016C32 1028 0025                  		move.b	$25(a0),d0
00016C36 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00016C3A 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00016C3E 43F9 0001 5F78             		lea	(Ani_Eggman).l,a1
00016C44 4EB9 0000 87C0             		jsr	AnimateSprite
00016C4A 7003                       		moveq	#3,d0
00016C50 0228 00FC 0001             		andi.b	#$FC,1(a0)
00016C5A 4EF9 0000 B69A             		jmp	DisplaySprite
00016C60                            ; ===========================================================================
00016C60 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00016C62 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00016C64 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00016C66 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00016C68 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00016C6A 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00016C6C                            ; ===========================================================================
00016C6C                            
00016C6C                            loc_189B8:				; XREF: Obj7A_ShipIndex
00016C6C 317C FF00 0010             		move.w	#-$100,$10(a0)
00016C72 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00016C78 6400                       		bcc.s	loc_189CA
00016C7A 5428 0025                  		addq.b	#2,$25(a0)
00016C7E                            
00016C7E                            loc_189CA:
00016C7E 6100 EEE8                  		bsr.w	BossMove
00016C82 1028 003F                  		move.b	$3F(a0),d0
00016C86 5428 003F                  		addq.b	#2,$3F(a0)
00016C8A 4EB9 0000 2556             		jsr	(CalcSine).l
00016C90 EC40                       		asr.w	#6,d0
00016C96 3140 000C                  		move.w	d0,$C(a0)
00016C9A 3168 0030 0008             		move.w	$30(a0),8(a0)
00016CA0 6000                       		bra.s	loc_189FE
00016CA2                            ; ===========================================================================
00016CA2                            
00016CA2                            loc_189EE:
00016CA2 6100 EEC4                  		bsr.w	BossMove
00016CA6 3168 0038 000C             		move.w	$38(a0),$C(a0)
00016CAC 3168 0030 0008             		move.w	$30(a0),8(a0)
00016CB2                            
00016CB2                            loc_189FE:
00016CB2 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00016CB8 6400                       		bcc.s	locret_18A44
00016CBA 4A28 0022                  		tst.b	$22(a0)
00016CBE 6B00                       		bmi.s	loc_18A46
00016CC0 4A28 0020                  		tst.b	$20(a0)
00016CC4 6600                       		bne.s	locret_18A44
00016CC6 4A28 003E                  		tst.b	$3E(a0)
00016CCA 6600                       		bne.s	loc_18A28
00016CCC 117C 0020 003E             		move.b	#$20,$3E(a0)
00016CD2 303C 00AC                  		move.w	#$AC,d0
00016CD6 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play boss damage sound
00016CDC                            
00016CDC                            loc_18A28:
00016CDC 43F8 FB22                  		lea	($FFFFFB22).w,a1
00016CE0 7000                       		moveq	#0,d0
00016CE2 4A51                       		tst.w	(a1)
00016CE4 6600                       		bne.s	loc_18A36
00016CE6 303C 0EEE                  		move.w	#$EEE,d0
00016CEA                            
00016CEA                            loc_18A36:
00016CEA 3280                       		move.w	d0,(a1)
00016CEC 5328 003E                  		subq.b	#1,$3E(a0)
00016CF0 6600                       		bne.s	locret_18A44
00016CF2 117C 000F 0020             		move.b	#$F,$20(a0)
00016CF8                            
00016CF8                            locret_18A44:
00016CF8 4E75                       		rts	
00016CFA                            ; ===========================================================================
00016CFA                            
00016CFA                            loc_18A46:
00016CFA 7064                       		moveq	#100,d0
00016CFC 6100 0000                  		bsr.w	AddPoints
00016D00 117C 0006 0025             		move.b	#6,$25(a0)
00016D06 117C 0078 003C             		move.b	#$78,$3C(a0)
00016D0C 4268 0010                  		clr.w	$10(a0)
00016D10 4E75                       		rts	
00016D12                            ; ===========================================================================
00016D12                            
00016D12                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00016D12 3028 0030                  		move.w	$30(a0),d0
00016D16 317C 0200 0010             		move.w	#$200,$10(a0)
00016D1C 0828 0000 0022             		btst	#0,$22(a0)
00016D22 6600                       		bne.s	loc_18A7C
00016D24 4468 0010                  		neg.w	$10(a0)
00016D28 0C40 2008                  		cmpi.w	#$2008,d0
00016D2C 6E00                       		bgt.s	loc_18A88
00016D2E 6000                       		bra.s	loc_18A82
00016D30                            ; ===========================================================================
00016D30                            
00016D30                            loc_18A7C:
00016D30 0C40 2138                  		cmpi.w	#$2138,d0
00016D34 6D00                       		blt.s	loc_18A88
00016D36                            
00016D36                            loc_18A82:
00016D36 0868 0000 0022             		bchg	#0,$22(a0)
00016D3C                            
00016D3C                            loc_18A88:
00016D3C 3028 0008                  		move.w	8(a0),d0
00016D40 72FF                       		moveq	#-1,d1
00016D42 7402                       		moveq	#2,d2
00016D44 45E8 002A                  		lea	$2A(a0),a2
00016D48 7828                       		moveq	#$28,d4
00016D4A 4A68 0010                  		tst.w	$10(a0)
00016D4E 6A00                       		bpl.s	loc_18A9E
00016D50 4444                       		neg.w	d4
00016D52                            
00016D52                            loc_18A9E:
00016D52 321A                       		move.w	(a2)+,d1
00016D54 2641                       		movea.l	d1,a3
00016D56 082B 0003 0022             		btst	#3,$22(a3)
00016D5C 6600                       		bne.s	loc_18AB4
00016D5E 362B 0008                  		move.w	8(a3),d3
00016D66 6700                       		beq.s	loc_18AC0
00016D68                            
00016D68                            loc_18AB4:
00016D68 51CA FFE8                  		dbf	d2,loc_18A9E
00016D6C                            
00016D6C 1142 0028                  		move.b	d2,$28(a0)
00016D70 6000 FF0C                  		bra.w	loc_189CA
00016D74                            ; ===========================================================================
00016D74                            
00016D74                            loc_18AC0:
00016D74 1142 0028                  		move.b	d2,$28(a0)
00016D78 5428 0025                  		addq.b	#2,$25(a0)
00016D7C 117C 0028 003C             		move.b	#$28,$3C(a0)
00016D82 6000 FEFA                  		bra.w	loc_189CA
00016D86                            ; ===========================================================================
00016D86                            
00016D86                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00016D86 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00016D8C 6600                       		bne.s	loc_18B36
00016D8E 70FF                       		moveq	#-1,d0
00016D90 1028 0028                  		move.b	$28(a0),d0
00016D94 4880                       		ext.w	d0
00016D96 6B00                       		bmi.s	loc_18B40
00016D98 5540                       		subq.w	#2,d0
00016D9A 4440                       		neg.w	d0
00016D9E 43E8 002A                  		lea	$2A(a0),a1
00016DA2 3031 0000                  		move.w	(a1,d0.w),d0
00016DA6 2440                       		movea.l	d0,a2
00016DA8 43F8 D040                  		lea	($FFFFD040).w,a1
00016DAC 723E                       		moveq	#$3E,d1
00016DAE                            
00016DAE                            loc_18AFA:
00016DAE B0A9 003C                  		cmp.l	$3C(a1),d0
00016DB2 6700                       		beq.s	loc_18B40
00016DB4 D2FC 0040                  		adda.w	#$40,a1
00016DB8 51C9 FFF4                  		dbf	d1,loc_18AFA
00016DBC                            
00016DBC 2F08                       		move.l	a0,-(sp)
00016DBE 41D2                       		lea	(a2),a0
00016DC0 4EB9 0000 BB36             		jsr	SingleObjLoad2
00016DC6 205F                       		movea.l	(sp)+,a0
00016DC8 6600                       		bne.s	loc_18B40
00016DCA 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00016DCE 3368 0008 0008             		move.w	8(a0),8(a1)
00016DD4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016DDA 0669 0020 000C             		addi.w	#$20,$C(a1)
00016DE0 136A 0022 0022             		move.b	$22(a2),$22(a1)
00016DE6 234A 003C                  		move.l	a2,$3C(a1)
00016DEA                            
00016DEA                            loc_18B36:
00016DEA 5328 003C                  		subq.b	#1,$3C(a0)
00016DEE 6700                       		beq.s	loc_18B40
00016DF0 6000 FEC0                  		bra.w	loc_189FE
00016DF4                            ; ===========================================================================
00016DF4                            
00016DF4                            loc_18B40:
00016DF4 5528 0025                  		subq.b	#2,$25(a0)
00016DF8 6000 FE84                  		bra.w	loc_189CA
00016DFC                            ; ===========================================================================
00016DFC                            
00016DFC                            loc_18B48:				; XREF: Obj7A_ShipIndex
00016DFC 5328 003C                  		subq.b	#1,$3C(a0)
00016E00 6B00                       		bmi.s	loc_18B52
00016E02 6000 ED22                  		bra.w	BossDefeated
00016E06                            ; ===========================================================================
00016E06                            
00016E06                            loc_18B52:
00016E06 5428 0025                  		addq.b	#2,$25(a0)
00016E0A 4268 0012                  		clr.w	$12(a0)
00016E0E 08E8 0000 0022             		bset	#0,$22(a0)
00016E14 08A8 0007 0022             		bclr	#7,$22(a0)
00016E1A 4268 0010                  		clr.w	$10(a0)
00016E1E 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00016E24 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00016E28 6600                       		bne.s	loc_18B7C
00016E2A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00016E30                            
00016E30                            loc_18B7C:
00016E30 6000 FE80                  		bra.w	loc_189FE
00016E34                            ; ===========================================================================
00016E34                            
00016E34                            loc_18B80:				; XREF: Obj7A_ShipIndex
00016E34 5228 003C                  		addq.b	#1,$3C(a0)
00016E38 6700                       		beq.s	loc_18B90
00016E3A 6A00                       		bpl.s	loc_18B96
00016E3C 0668 0018 0012             		addi.w	#$18,$12(a0)
00016E42 6000                       		bra.s	loc_18BC2
00016E44                            ; ===========================================================================
00016E44                            
00016E44                            loc_18B90:
00016E44 4268 0012                  		clr.w	$12(a0)
00016E48 6000                       		bra.s	loc_18BC2
00016E4A                            ; ===========================================================================
00016E4A                            
00016E4A                            loc_18B96:
00016E4A 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00016E50 6500                       		bcs.s	loc_18BAE
00016E52 6700                       		beq.s	loc_18BB4
00016E54 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00016E5A 6500                       		bcs.s	loc_18BC2
00016E5C 5428 0025                  		addq.b	#2,$25(a0)
00016E60 6000                       		bra.s	loc_18BC2
00016E62                            ; ===========================================================================
00016E62                            
00016E62                            loc_18BAE:
00016E62 5168 0012                  		subq.w	#8,$12(a0)
00016E66 6000                       		bra.s	loc_18BC2
00016E68                            ; ===========================================================================
00016E68                            
00016E68                            loc_18BB4:
00016E68 4268 0012                  		clr.w	$12(a0)
00016E6C 303C 0084                  		move.w	#$84,d0
00016E70 4EB9 0000 101A             		jsr	(PlaySound).l	; play SLZ music
00016E76                            
00016E76                            loc_18BC2:
00016E76 6000 FE2A                  		bra.w	loc_189EE
00016E7A                            ; ===========================================================================
00016E7A                            
00016E7A                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00016E7A 317C 0400 0010             		move.w	#$400,$10(a0)
00016E80 317C FFC0 0012             		move.w	#-$40,$12(a0)
00016E86 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00016E8C 6400                       		bcc.s	loc_18BE0
00016E8E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00016E92 6000                       		bra.s	loc_18BE8
00016E94                            ; ===========================================================================
00016E94                            
00016E94                            loc_18BE0:
00016E94 4A28 0001                  		tst.b	1(a0)
00016E98 6A00 FCCE                  		bpl.w	Obj7A_Delete
00016E9C                            
00016E9C                            loc_18BE8:
00016E9C 6100 ECCA                  		bsr.w	BossMove
00016EA0 6000 FDDC                  		bra.w	loc_189CA
00016EA4                            ; ===========================================================================
00016EA4                            
00016EA4                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00016EA4 7000                       		moveq	#0,d0
00016EA6 7201                       		moveq	#1,d1
00016EA8 2268 0034                  		movea.l	$34(a0),a1
00016EAC 1029 0025                  		move.b	$25(a1),d0
00016EB0 0C00 0006                  		cmpi.b	#6,d0
00016EB4 6B00                       		bmi.s	loc_18C06
00016EB6 720A                       		moveq	#$A,d1
00016EB8 6000                       		bra.s	loc_18C1A
00016EBA                            ; ===========================================================================
00016EBA                            
00016EBA                            loc_18C06:
00016EBA 4A29 0020                  		tst.b	$20(a1)
00016EBE 6600                       		bne.s	loc_18C10
00016EC0 7205                       		moveq	#5,d1
00016EC2 6000                       		bra.s	loc_18C1A
00016EC4                            ; ===========================================================================
00016EC4                            
00016EC4                            loc_18C10:
00016EC4 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00016ECA 6500                       		bcs.s	loc_18C1A
00016ECC 7204                       		moveq	#4,d1
00016ECE                            
00016ECE                            loc_18C1A:
00016ECE 1141 001C                  		move.b	d1,$1C(a0)
00016ED2 0C00 000A                  		cmpi.b	#$A,d0
00016ED6 6600                       		bne.s	loc_18C32
00016ED8 117C 0006 001C             		move.b	#6,$1C(a0)
00016EDE 4A28 0001                  		tst.b	1(a0)
00016EE2 6A00 FC84                  		bpl.w	Obj7A_Delete
00016EE6                            
00016EE6                            loc_18C32:
00016EE6 6000                       		bra.s	loc_18C6C
00016EE8                            ; ===========================================================================
00016EE8                            
00016EE8                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00016EE8 117C 0008 001C             		move.b	#8,$1C(a0)
00016EEE 2268 0034                  		movea.l	$34(a0),a1
00016EF2 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00016EF8 6600                       		bne.s	loc_18C56
00016EFA 4A28 0001                  		tst.b	1(a0)
00016EFE 6A00 FC68                  		bpl.w	Obj7A_Delete
00016F02 117C 000B 001C             		move.b	#$B,$1C(a0)
00016F08 6000                       		bra.s	loc_18C6C
00016F0A                            ; ===========================================================================
00016F0A                            
00016F0A                            loc_18C56:
00016F0A 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00016F10 6E00                       		bgt.s	loc_18C6C
00016F12 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00016F18 6D00                       		blt.s	loc_18C6C
00016F1A 117C 0007 001C             		move.b	#7,$1C(a0)
00016F20                            
00016F20                            loc_18C6C:
00016F20 43F9 0001 5F78             		lea	(Ani_Eggman).l,a1
00016F26 4EB9 0000 87C0             		jsr	AnimateSprite
00016F2C                            
00016F2C                            loc_18C78:
00016F2C 2268 0034                  		movea.l	$34(a0),a1
00016F30 3169 0008 0008             		move.w	8(a1),8(a0)
00016F36 3169 000C 000C             		move.w	$C(a1),$C(a0)
00016F3C 1169 0022 0022             		move.b	$22(a1),$22(a0)
00016F42 7003                       		moveq	#3,d0
00016F48 0228 00FC 0001             		andi.b	#-4,1(a0)
00016F52 4EF9 0000 B69A             		jmp	DisplaySprite
00016F58                            ; ===========================================================================
00016F58                            
00016F58                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00016F58 2268 0034                  		movea.l	$34(a0),a1
00016F5C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00016F62 6600                       		bne.s	loc_18CB8
00016F64 4A28 0001                  		tst.b	1(a0)
00016F68 6A00 FBFE                  		bpl.w	Obj7A_Delete
00016F6C                            
00016F6C                            loc_18CB8:
00016F6C 217C 0001 6090 0004        		move.l	#Map_BossItems,4(a0)
00016F74 317C 246C 0002             		move.w	#$246C,2(a0)
00016F7A 117C 0003 001A             		move.b	#3,$1A(a0)
00016F80 60AA                       		bra.s	loc_18C78
00016F82                            ; ===========================================================================
00016F82                            ; ---------------------------------------------------------------------------
00016F82                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00016F82                            ; ---------------------------------------------------------------------------
00016F82                            
00016F82                            Obj7B:					; XREF: Obj_Index
00016F82 7000                       		moveq	#0,d0
00016F84 1028 0024                  		move.b	$24(a0),d0
00016F88 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00016F8C 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00016F90 3028 0030                  		move.w	$30(a0),d0
00016F94 0240 FF80                  		andi.w	#$FF80,d0
00016F98 3238 F700                  		move.w	($FFFFF700).w,d1
00016F9C 0441 0080                  		subi.w	#$80,d1
00016FA0 0241 FF80                  		andi.w	#$FF80,d1
00016FA6 6B00 FBC0                  		bmi.w	Obj7A_Delete
00016FAA 0C40 0280                  		cmpi.w	#$280,d0
00016FAE 6200 FBB8                  		bhi.w	Obj7A_Delete
00016FB2 4EF9 0000 B69A             		jmp	DisplaySprite
00016FB8                            ; ===========================================================================
00016FB8 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00016FBA 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00016FBC 0000                       		dc.w loc_18DC6-Obj7B_Index
00016FBE 0000                       		dc.w loc_18EAA-Obj7B_Index
00016FC0 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00016FC2 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00016FC4                            ; ===========================================================================
00016FC4                            
00016FC4                            Obj7B_Main:				; XREF: Obj7B_Index
00016FC4 217C 0000 FA56 0004        		move.l	#Map_obj5Ea,4(a0)
00016FCC 317C 0518 0002             		move.w	#$518,2(a0)
00016FD2 117C 0001 001A             		move.b	#1,$1A(a0)
00016FD8 0028 0004 0001             		ori.b	#4,1(a0)
00016FDE 117C 0004 0018             		move.b	#4,$18(a0)
00016FE4 117C 008B 0020             		move.b	#$8B,$20(a0)
00016FEA 117C 000C 0019             		move.b	#$C,$19(a0)
00016FF0 2268 003C                  		movea.l	$3C(a0),a1
00016FF4 3169 0008 0030             		move.w	8(a1),$30(a0)
00016FFA 3169 000C 0034             		move.w	$C(a1),$34(a0)
00017000 08E8 0000 0022             		bset	#0,$22(a0)
00017006 3028 0008                  		move.w	8(a0),d0
0001700A B069 0008                  		cmp.w	8(a1),d0
0001700E 6E00                       		bgt.s	loc_18D68
00017010 08A8 0000 0022             		bclr	#0,$22(a0)
00017016 117C 0002 003A             		move.b	#2,$3A(a0)
0001701C                            
0001701C                            loc_18D68:
0001701C 5428 0024                  		addq.b	#2,$24(a0)
00017020                            
00017020                            Obj7B_Fall:				; XREF: Obj7B_Index
00017020 4EB9 0000 B648             		jsr	ObjectFall
00017026 2268 003C                  		movea.l	$3C(a0),a1
0001702A 45F9 0000 0000             		lea	(word_19018).l,a2
00017030 7000                       		moveq	#0,d0
00017032 1029 001A                  		move.b	$1A(a1),d0
00017036 3228 0008                  		move.w	8(a0),d1
0001703E 6400                       		bcc.s	loc_18D8E
00017040 5440                       		addq.w	#2,d0
00017042                            
00017042                            loc_18D8E:
00017044 3228 0034                  		move.w	$34(a0),d1
0001704C B268 000C                  		cmp.w	$C(a0),d1
00017050 6E00                       		bgt.s	locret_18DC4
00017052 2268 003C                  		movea.l	$3C(a0),a1
00017056 7202                       		moveq	#2,d1
00017058 0828 0000 0022             		btst	#0,$22(a0)
0001705E 6700                       		beq.s	loc_18DAE
00017060 7200                       		moveq	#0,d1
00017062                            
00017062                            loc_18DAE:
00017062 317C 00F0 0028             		move.w	#$F0,$28(a0)
00017068 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001706E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00017074 6000 0000                  		bra.w	loc_18FA2
00017078                            ; ===========================================================================
00017078                            
00017078                            locret_18DC4:
00017078 4E75                       		rts	
0001707A                            ; ===========================================================================
0001707A                            
0001707A                            loc_18DC6:				; XREF: Obj7B_Index
0001707A 2268 003C                  		movea.l	$3C(a0),a1
0001707E 7000                       		moveq	#0,d0
00017080 1028 003A                  		move.b	$3A(a0),d0
00017088 6700                       		beq.s	loc_18E2A
0001708A 6400                       		bcc.s	loc_18DDA
0001708C 4400                       		neg.b	d0
0001708E                            
0001708E                            loc_18DDA:
0001708E 323C F7E8                  		move.w	#-$818,d1
00017092 343C FEEC                  		move.w	#-$114,d2
00017096 0C00 0001                  		cmpi.b	#1,d0
0001709A 6700                       		beq.s	loc_18E00
0001709C 323C F6A0                  		move.w	#-$960,d1
000170A0 343C FF0C                  		move.w	#-$F4,d2
000170A4 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000170AA 6D00                       		blt.s	loc_18E00
000170AC 323C F5E0                  		move.w	#-$A20,d1
000170B0 343C FF80                  		move.w	#-$80,d2
000170B4                            
000170B4                            loc_18E00:
000170B4 3141 0012                  		move.w	d1,$12(a0)
000170B8 3142 0010                  		move.w	d2,$10(a0)
000170BC 3028 0008                  		move.w	8(a0),d0
000170C4 6400                       		bcc.s	loc_18E16
000170C6 4468 0010                  		neg.w	$10(a0)
000170CA                            
000170CA                            loc_18E16:
000170CA 117C 0001 001A             		move.b	#1,$1A(a0)
000170D0 317C 0020 0028             		move.w	#$20,$28(a0)
000170D6 5428 0024                  		addq.b	#2,$24(a0)
000170DA 6000 0000                  		bra.w	loc_18EAA
000170DE                            ; ===========================================================================
000170DE                            
000170DE                            loc_18E2A:				; XREF: loc_18DC6
000170DE 45F9 0000 0000             		lea	(word_19018).l,a2
000170E4 7000                       		moveq	#0,d0
000170E6 1029 001A                  		move.b	$1A(a1),d0
000170EA 343C 0028                  		move.w	#$28,d2
000170EE 3228 0008                  		move.w	8(a0),d1
000170F6 6400                       		bcc.s	loc_18E48
000170F8 4442                       		neg.w	d2
000170FA 5440                       		addq.w	#2,d0
000170FC                            
000170FC                            loc_18E48:
000170FE 3228 0034                  		move.w	$34(a0),d1
00017106 3141 000C                  		move.w	d1,$C(a0)
0001710E 3142 0008                  		move.w	d2,8(a0)
00017112 4268 000E                  		clr.w	$E(a0)
00017116 4268 000A                  		clr.w	$A(a0)
0001711A 5368 0028                  		subq.w	#1,$28(a0)
0001711E 6600                       		bne.s	loc_18E7A
00017120 317C 0020 0028             		move.w	#$20,$28(a0)
00017126 117C 0008 0024             		move.b	#8,$24(a0)
0001712C 4E75                       		rts	
0001712E                            ; ===========================================================================
0001712E                            
0001712E                            loc_18E7A:
0001712E 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00017134 6600                       		bne.s	loc_18E88
00017136 117C 0005 001F             		move.b	#5,$1F(a0)
0001713C                            
0001713C                            loc_18E88:
0001713C 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00017142 6600                       		bne.s	loc_18E96
00017144 117C 0002 001F             		move.b	#2,$1F(a0)
0001714A                            
0001714A                            loc_18E96:
0001714A 5328 001E                  		subq.b	#1,$1E(a0)
0001714E 6E00                       		bgt.s	locret_18EA8
00017150 0868 0000 001A             		bchg	#0,$1A(a0)
00017156 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001715C                            
0001715C                            locret_18EA8:
0001715C 4E75                       		rts	
0001715E                            ; ===========================================================================
0001715E                            
0001715E                            loc_18EAA:				; XREF: Obj7B_Index
0001715E 43F8 D040                  		lea	($FFFFD040).w,a1
00017162 707A                       		moveq	#$7A,d0
00017164 7240                       		moveq	#$40,d1
00017166 743E                       		moveq	#$3E,d2
00017168                            
00017168                            loc_18EB4:
00017168 B011                       		cmp.b	(a1),d0
0001716A 6700                       		beq.s	loc_18EC0
0001716C D2C1                       		adda.w	d1,a1
0001716E 51CA FFF8                  		dbf	d2,loc_18EB4
00017172                            
00017172 6000                       		bra.s	loc_18F38
00017174                            ; ===========================================================================
00017174                            
00017174                            loc_18EC0:
00017174 3029 0008                  		move.w	8(a1),d0
00017178 3229 000C                  		move.w	$C(a1),d1
0001717C 3428 0008                  		move.w	8(a0),d2
00017180 3628 000C                  		move.w	$C(a0),d3
00017184 45FA 0000                  		lea	byte_19022(pc),a2
00017188 47FA 0000                  		lea	byte_19026(pc),a3
0001718C 181A                       		move.b	(a2)+,d4
0001718E 4884                       		ext.w	d4
00017192 181B                       		move.b	(a3)+,d4
00017194 4884                       		ext.w	d4
00017198 B440                       		cmp.w	d0,d2
0001719A 6500                       		bcs.s	loc_18F38
0001719C 181A                       		move.b	(a2)+,d4
0001719E 4884                       		ext.w	d4
000171A2 181B                       		move.b	(a3)+,d4
000171A4 4884                       		ext.w	d4
000171A8 B042                       		cmp.w	d2,d0
000171AA 6500                       		bcs.s	loc_18F38
000171AC 181A                       		move.b	(a2)+,d4
000171AE 4884                       		ext.w	d4
000171B2 181B                       		move.b	(a3)+,d4
000171B4 4884                       		ext.w	d4
000171B8 B641                       		cmp.w	d1,d3
000171BA 6500                       		bcs.s	loc_18F38
000171BC 181A                       		move.b	(a2)+,d4
000171BE 4884                       		ext.w	d4
000171C2 181B                       		move.b	(a3)+,d4
000171C4 4884                       		ext.w	d4
000171C8 B243                       		cmp.w	d3,d1
000171CA 6500                       		bcs.s	loc_18F38
000171CC 5428 0024                  		addq.b	#2,$24(a0)
000171D0 4268 0028                  		clr.w	$28(a0)
000171D4 4229 0020                  		clr.b	$20(a1)
000171D8 5329 0021                  		subq.b	#1,$21(a1)
000171DC 6600                       		bne.s	loc_18F38
000171DE 08E9 0007 0022             		bset	#7,$22(a1)
000171E4 4268 0010                  		clr.w	$10(a0)
000171E8 4268 0012                  		clr.w	$12(a0)
000171EC                            
000171EC                            loc_18F38:
000171EC 4A68 0012                  		tst.w	$12(a0)
000171F0 6A00                       		bpl.s	loc_18F5C
000171F2 4EB9 0000 B648             		jsr	ObjectFall
000171F8 3028 0034                  		move.w	$34(a0),d0
000171FC 0440 002F                  		subi.w	#$2F,d0
00017200 B068 000C                  		cmp.w	$C(a0),d0
00017204 6E00                       		bgt.s	loc_18F58
00017206 4EB9 0000 B648             		jsr	ObjectFall
0001720C                            
0001720C                            loc_18F58:
0001720C 6000 FF20                  		bra.w	loc_18E7A
00017210                            ; ===========================================================================
00017210                            
00017210                            loc_18F5C:
00017210 4EB9 0000 B648             		jsr	ObjectFall
00017216 2268 003C                  		movea.l	$3C(a0),a1
0001721A 45F9 0000 0000             		lea	(word_19018).l,a2
00017220 7000                       		moveq	#0,d0
00017222 1029 001A                  		move.b	$1A(a1),d0
00017226 3228 0008                  		move.w	8(a0),d1
0001722E 6400                       		bcc.s	loc_18F7E
00017230 5440                       		addq.w	#2,d0
00017232                            
00017232                            loc_18F7E:
00017234 3228 0034                  		move.w	$34(a0),d1
0001723C B268 000C                  		cmp.w	$C(a0),d1
00017240 6ECA                       		bgt.s	loc_18F58
00017242 2268 003C                  		movea.l	$3C(a0),a1
00017246 7202                       		moveq	#2,d1
00017248 4A68 0010                  		tst.w	$10(a0)
0001724C 6B00                       		bmi.s	loc_18F9C
0001724E 7200                       		moveq	#0,d1
00017250                            
00017250                            loc_18F9C:
00017250 317C 0000 0028             		move.w	#0,$28(a0)
00017256                            
00017256                            loc_18FA2:
00017256 1341 003A                  		move.b	d1,$3A(a1)
0001725A 1141 003A                  		move.b	d1,$3A(a0)
0001725E B229 001A                  		cmp.b	$1A(a1),d1
00017262 6700                       		beq.s	loc_19008
00017264 08A9 0003 0022             		bclr	#3,$22(a1)
0001726A 6700                       		beq.s	loc_19008
0001726C 4229 0025                  		clr.b	$25(a1)
00017270 137C 0002 0024             		move.b	#2,$24(a1)
00017276 45F8 D000                  		lea	($FFFFD000).w,a2
0001727A 3568 0012 0012             		move.w	$12(a0),$12(a2)
00017280 446A 0012                  		neg.w	$12(a2)
00017284 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001728A 6600                       		bne.s	loc_18FDC
0001728C E0EA 0012                  		asr	$12(a2)
00017290                            
00017290                            loc_18FDC:
00017290 08EA 0001 0022             		bset	#1,$22(a2)
00017296 08AA 0003 0022             		bclr	#3,$22(a2)
0001729C 422A 003C                  		clr.b	$3C(a2)
000172A0 2F08                       		move.l	a0,-(sp)
000172A2 41D2                       		lea	(a2),a0
000172A4                            ;		jsr	Obj01_ChkRoll
000172A4 205F                       		movea.l	(sp)+,a0
000172A6 157C 0002 0024             		move.b	#2,$24(a2)
000172AC 303C 00CC                  		move.w	#$CC,d0
000172B0 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play "spring" sound
000172B6                            
000172B6                            loc_19008:
000172B6 4268 0010                  		clr.w	$10(a0)
000172BA 4268 0012                  		clr.w	$12(a0)
000172BE 5428 0024                  		addq.b	#2,$24(a0)
000172C2 6000 FE6A                  		bra.w	loc_18E7A
000172C6                            ; ===========================================================================
000172C6 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000172D0                            		even
000172D0 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
000172D4                            		even
000172D4 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
000172D8                            		even
000172D8                            ; ===========================================================================
000172D8                            
000172D8                            Obj7B_Explode:				; XREF: Obj7B_Index
000172D8 10BC 003F                  		move.b	#$3F,(a0)
000172DC 4228 0024                  		clr.b	$24(a0)
000172E0 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
000172E6 6700                       		beq.s	Obj7B_MakeFrag
000172E8 4E75                       		rts	
000172EA                            ; ===========================================================================
000172EA                            
000172EA                            Obj7B_MakeFrag:
000172EA 3168 0034 000C             		move.w	$34(a0),$C(a0)
000172F0 7203                       		moveq	#3,d1
000172F2 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
000172F6                            
000172F6                            Obj7B_Loop:
000172F6 4EB9 0000 BB20             		jsr	SingleObjLoad
000172FC 6600                       		bne.s	loc_1909A
000172FE 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00017302 137C 000A 0024             		move.b	#$A,$24(a1)
00017308 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00017310 137C 0003 0018             		move.b	#3,$18(a1)
00017316 337C 0518 0002             		move.w	#$518,2(a1)
0001731C 3368 0008 0008             		move.w	8(a0),8(a1)
00017322 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017328 335A 0010                  		move.w	(a2)+,$10(a1)
0001732C 335A 0012                  		move.w	(a2)+,$12(a1)
00017330 137C 0098 0020             		move.b	#$98,$20(a1)
00017336 0029 0004 0001             		ori.b	#4,1(a1)
0001733C 08E9 0007 0001             		bset	#7,1(a1)
00017342 137C 000C 0019             		move.b	#$C,$19(a1)
00017348                            
00017348                            loc_1909A:
00017348 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001734C                            
0001734C 4E75                       		rts	
0001734E                            ; ===========================================================================
0001734E FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00017352 FF60 FDC0                  		dc.w $FF60, $FDC0
00017356 0100 FCC0                  		dc.w $100, $FCC0
0001735A 00A0 FDC0                  		dc.w $A0, $FDC0
0001735E                            ; ===========================================================================
0001735E                            
0001735E                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001735E 4EB9 0000 B674             		jsr	SpeedToPos
00017364 3168 0008 0030             		move.w	8(a0),$30(a0)
0001736A 3168 000C 0034             		move.w	$C(a0),$34(a0)
00017370 0668 0018 0012             		addi.w	#$18,$12(a0)
00017376 7004                       		moveq	#4,d0
0001737C E448                       		lsr.w	#2,d0
0001737E 1140 001A                  		move.b	d0,$1A(a0)
00017382 4A28 0001                  		tst.b	1(a0)
00017386 6A00 F7E0                  		bpl.w	Obj7A_Delete
0001738A 4E75                       		rts	
0001738C                            ; ===========================================================================
0001738C                            ; ---------------------------------------------------------------------------
0001738C                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001738C                            ; ---------------------------------------------------------------------------
0001738C                            Map_obj7B:
0001738C                            	include "_maps\obj7B.asm"
0001738C                            ; ---------------------------------------------------------------------------
0001738C                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001738C                            ; ---------------------------------------------------------------------------
0001738C 0000                       		dc.w byte_190E2-Map_obj7B
0001738E 0000                       		dc.w byte_190E8-Map_obj7B
00017390 01                         byte_190E2:	dc.b 1
00017391 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00017396 01                         byte_190E8:	dc.b 1
00017397 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001739C                            		even
0001739C                            		even
0001739C                            
0001739C                            ; ===========================================================================
0001739C                            ; ---------------------------------------------------------------------------
0001739C                            ; Object 75 - Eggman (SYZ)
0001739C                            ; ---------------------------------------------------------------------------
0001739C                            
0001739C                            Obj75:					; XREF: Obj_Index
0001739C 7000                       		moveq	#0,d0
0001739E 1028 0024                  		move.b	$24(a0),d0
000173A2 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
000173A6 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
000173AA                            ; ===========================================================================
000173AA 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
000173AC 0000                       		dc.w Obj75_ShipMain-Obj75_Index
000173AE 0000                       		dc.w Obj75_FaceMain-Obj75_Index
000173B0 0000                       		dc.w Obj75_FlameMain-Obj75_Index
000173B2 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
000173B4                            
000173B4 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
000173B7 0401 05                    		dc.b 4,	1, 5
000173BA 0607 05                    		dc.b 6,	7, 5
000173BD 0800 05                    		dc.b 8,	0, 5
000173C0                            ; ===========================================================================
000173C0                            
000173C0                            Obj75_Main:				; XREF: Obj75_Index
000173C0 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
000173C6 317C 04DA 000C             		move.w	#$4DA,$C(a0)
000173CC 3168 0008 0030             		move.w	8(a0),$30(a0)
000173D2 3168 000C 0038             		move.w	$C(a0),$38(a0)
000173D8 117C 000F 0020             		move.b	#$F,$20(a0)
000173DE 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000173E4 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
000173E8 2248                       		movea.l	a0,a1
000173EA 7203                       		moveq	#3,d1
000173EC 6000                       		bra.s	Obj75_LoadBoss
000173EE                            ; ===========================================================================
000173EE                            
000173EE                            Obj75_Loop:
000173EE 4EB9 0000 BB36             		jsr	SingleObjLoad2
000173F4 6600                       		bne.s	Obj75_ShipMain
000173F6 12BC 0075                  		move.b	#$75,(a1)
000173FA 3368 0008 0008             		move.w	8(a0),8(a1)
00017400 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017406                            
00017406                            Obj75_LoadBoss:				; XREF: Obj75_Main
00017406 08A8 0000 0022             		bclr	#0,$22(a0)
0001740C 4229 0025                  		clr.b	$25(a1)
00017410 135A 0024                  		move.b	(a2)+,$24(a1)
00017414 135A 001C                  		move.b	(a2)+,$1C(a1)
00017418 135A 0018                  		move.b	(a2)+,$18(a1)
0001741C 237C 0001 5FC8 0004        		move.l	#Map_Eggman,4(a1)
00017424 337C 0400 0002             		move.w	#$400,2(a1)
0001742A 137C 0004 0001             		move.b	#4,1(a1)
00017430 137C 0020 0019             		move.b	#$20,$19(a1)
00017436 2348 0034                  		move.l	a0,$34(a1)
0001743A 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001743E                            
0001743E                            Obj75_ShipMain:				; XREF: Obj75_Index
0001743E 7000                       		moveq	#0,d0
00017440 1028 0025                  		move.b	$25(a0),d0
00017444 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00017448 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001744C 43F9 0001 5F78             		lea	(Ani_Eggman).l,a1
00017452 4EB9 0000 87C0             		jsr	AnimateSprite
00017458 7003                       		moveq	#3,d0
0001745E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017468 4EF9 0000 B69A             		jmp	DisplaySprite
0001746E                            ; ===========================================================================
0001746E 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00017472 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00017476 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001747A                            ; ===========================================================================
0001747A                            
0001747A                            loc_191CC:				; XREF: Obj75_ShipIndex
0001747A 317C FF00 0010             		move.w	#-$100,$10(a0)
00017480 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00017486 6400                       		bcc.s	loc_191DE
00017488 5428 0025                  		addq.b	#2,$25(a0)
0001748C                            
0001748C                            loc_191DE:
0001748C 1028 003F                  		move.b	$3F(a0),d0
00017490 5428 003F                  		addq.b	#2,$3F(a0)
00017494 4EB9 0000 2556             		jsr	(CalcSine).l
0001749A E440                       		asr.w	#2,d0
0001749C 3140 0012                  		move.w	d0,$12(a0)
000174A0                            
000174A0                            loc_191F2:
000174A0 6100 E6C6                  		bsr.w	BossMove
000174A4 3168 0038 000C             		move.w	$38(a0),$C(a0)
000174AA 3168 0030 0008             		move.w	$30(a0),8(a0)
000174B0                            
000174B0                            loc_19202:
000174B0 3028 0008                  		move.w	8(a0),d0
000174B4 0440 2C00                  		subi.w	#$2C00,d0
000174B8 EA48                       		lsr.w	#5,d0
000174BA 1140 0034                  		move.b	d0,$34(a0)
000174BE 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000174C4 6400                       		bcc.s	locret_19256
000174C6 4A28 0022                  		tst.b	$22(a0)
000174CA 6B00                       		bmi.s	loc_19258
000174CC 4A28 0020                  		tst.b	$20(a0)
000174D0 6600                       		bne.s	locret_19256
000174D2 4A28 003E                  		tst.b	$3E(a0)
000174D6 6600                       		bne.s	loc_1923A
000174D8 117C 0020 003E             		move.b	#$20,$3E(a0)
000174DE 303C 00AC                  		move.w	#$AC,d0
000174E2 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play boss damage sound
000174E8                            
000174E8                            loc_1923A:
000174E8 43F8 FB22                  		lea	($FFFFFB22).w,a1
000174EC 7000                       		moveq	#0,d0
000174EE 4A51                       		tst.w	(a1)
000174F0 6600                       		bne.s	loc_19248
000174F2 303C 0EEE                  		move.w	#$EEE,d0
000174F6                            
000174F6                            loc_19248:
000174F6 3280                       		move.w	d0,(a1)
000174F8 5328 003E                  		subq.b	#1,$3E(a0)
000174FC 6600                       		bne.s	locret_19256
000174FE 117C 000F 0020             		move.b	#$F,$20(a0)
00017504                            
00017504                            locret_19256:
00017504 4E75                       		rts	
00017506                            ; ===========================================================================
00017506                            
00017506                            loc_19258:				; XREF: loc_19202
00017506 7064                       		moveq	#100,d0
00017508 6100 0000                  		bsr.w	AddPoints
0001750C 117C 0006 0025             		move.b	#6,$25(a0)
00017512 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00017518 4268 0010                  		clr.w	$10(a0)
0001751C 4E75                       		rts	
0001751E                            ; ===========================================================================
0001751E                            
0001751E                            loc_19270:				; XREF: Obj75_ShipIndex
0001751E 3028 0030                  		move.w	$30(a0),d0
00017522 317C 0140 0010             		move.w	#$140,$10(a0)
00017528 0828 0000 0022             		btst	#0,$22(a0)
0001752E 6600                       		bne.s	loc_1928E
00017530 4468 0010                  		neg.w	$10(a0)
00017534 0C40 2C08                  		cmpi.w	#$2C08,d0
00017538 6E00                       		bgt.s	loc_1929E
0001753A 6000                       		bra.s	loc_19294
0001753C                            ; ===========================================================================
0001753C                            
0001753C                            loc_1928E:
0001753C 0C40 2D38                  		cmpi.w	#$2D38,d0
00017540 6D00                       		blt.s	loc_1929E
00017542                            
00017542                            loc_19294:
00017542 0868 0000 0022             		bchg	#0,$22(a0)
00017548 4228 003D                  		clr.b	$3D(a0)
0001754C                            
0001754C                            loc_1929E:
0001754C 0440 2C10                  		subi.w	#$2C10,d0
00017550 0240 001F                  		andi.w	#$1F,d0
00017554 0440 001F                  		subi.w	#$1F,d0
00017558 6A00                       		bpl.s	loc_192AE
0001755A 4440                       		neg.w	d0
0001755C                            
0001755C                            loc_192AE:
0001755C 5340                       		subq.w	#1,d0
0001755E 6E00                       		bgt.s	loc_192E8
00017560 4A28 003D                  		tst.b	$3D(a0)
00017564 6600                       		bne.s	loc_192E8
00017566 3238 D008                  		move.w	($FFFFD008).w,d1
0001756A 0441 2C00                  		subi.w	#$2C00,d1
0001756E EA41                       		asr.w	#5,d1
00017570 B228 0034                  		cmp.b	$34(a0),d1
00017574 6600                       		bne.s	loc_192E8
00017576 7000                       		moveq	#0,d0
00017578 1028 0034                  		move.b	$34(a0),d0
0001757C EB40                       		asl.w	#5,d0
0001757E 0640 2C10                  		addi.w	#$2C10,d0
00017582 3140 0030                  		move.w	d0,$30(a0)
00017586 6100 0000                  		bsr.w	Obj75_FindBlocks
0001758A 5428 0025                  		addq.b	#2,$25(a0)
0001758E 4268 0028                  		clr.w	$28(a0)
00017592 4268 0010                  		clr.w	$10(a0)
00017596                            
00017596                            loc_192E8:
00017596 6000 FEF4                  		bra.w	loc_191DE
0001759A                            ; ===========================================================================
0001759A                            
0001759A                            loc_192EC:				; XREF: Obj75_ShipIndex
0001759A 7000                       		moveq	#0,d0
0001759C 1028 0028                  		move.b	$28(a0),d0
000175A0 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
000175A4 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
000175A8                            ; ===========================================================================
000175A8 0000                       off_192FA:	dc.w loc_19302-off_192FA
000175AA 0000                       		dc.w loc_19348-off_192FA
000175AC 0000                       		dc.w loc_1938E-off_192FA
000175AE 0000                       		dc.w loc_193D0-off_192FA
000175B0                            ; ===========================================================================
000175B0                            
000175B0                            loc_19302:				; XREF: off_192FA
000175B0 317C 0180 0012             		move.w	#$180,$12(a0)
000175B6 3028 0038                  		move.w	$38(a0),d0
000175BA 0C40 0556                  		cmpi.w	#$556,d0
000175BE 6500                       		bcs.s	loc_19344
000175C0 317C 0556 0038             		move.w	#$556,$38(a0)
000175C6 4268 003C                  		clr.w	$3C(a0)
000175CA 70FF                       		moveq	#-1,d0
000175CC 3028 0036                  		move.w	$36(a0),d0
000175D0 6700                       		beq.s	loc_1933C
000175D2 2240                       		movea.l	d0,a1
000175D4 137C 00FF 0029             		move.b	#-1,$29(a1)
000175DA 117C 00FF 0029             		move.b	#-1,$29(a0)
000175E0 2348 0034                  		move.l	a0,$34(a1)
000175E4 317C 0032 003C             		move.w	#$32,$3C(a0)
000175EA                            
000175EA                            loc_1933C:
000175EA 4268 0012                  		clr.w	$12(a0)
000175EE 5428 0028                  		addq.b	#2,$28(a0)
000175F2                            
000175F2                            loc_19344:
000175F2 6000 FEAC                  		bra.w	loc_191F2
000175F6                            ; ===========================================================================
000175F6                            
000175F6                            loc_19348:				; XREF: off_192FA
000175F6 5368 003C                  		subq.w	#1,$3C(a0)
000175FA 6A00                       		bpl.s	loc_19366
000175FC 5428 0028                  		addq.b	#2,$28(a0)
00017600 317C F800 0012             		move.w	#-$800,$12(a0)
00017606 4A68 0036                  		tst.w	$36(a0)
0001760A 6600                       		bne.s	loc_19362
0001760C E0E8 0012                  		asr	$12(a0)
00017610                            
00017610                            loc_19362:
00017610 7000                       		moveq	#0,d0
00017612 6000                       		bra.s	loc_1937C
00017614                            ; ===========================================================================
00017614                            
00017614                            loc_19366:
00017614 7000                       		moveq	#0,d0
00017616 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001761C 6E00                       		bgt.s	loc_1937C
0001761E 7002                       		moveq	#2,d0
00017620 0828 0001 003D             		btst	#1,$3D(a0)
00017626 6700                       		beq.s	loc_1937C
00017628 4440                       		neg.w	d0
0001762A                            
0001762A                            loc_1937C:
0001762E 3140 000C                  		move.w	d0,$C(a0)
00017632 3168 0030 0008             		move.w	$30(a0),8(a0)
00017638 6000 FE76                  		bra.w	loc_19202
0001763C                            ; ===========================================================================
0001763C                            
0001763C                            loc_1938E:				; XREF: off_192FA
0001763C 303C 04DA                  		move.w	#$4DA,d0
00017640 4A68 0036                  		tst.w	$36(a0)
00017644 6700                       		beq.s	loc_1939C
00017646 0440 0018                  		subi.w	#$18,d0
0001764A                            
0001764A                            loc_1939C:
0001764A B068 0038                  		cmp.w	$38(a0),d0
0001764E 6D00                       		blt.s	loc_193BE
00017650 317C 0008 003C             		move.w	#8,$3C(a0)
00017656 4A68 0036                  		tst.w	$36(a0)
0001765A 6700                       		beq.s	loc_193B4
0001765C 317C 002D 003C             		move.w	#$2D,$3C(a0)
00017662                            
00017662                            loc_193B4:
00017662 5428 0028                  		addq.b	#2,$28(a0)
00017666 4268 0012                  		clr.w	$12(a0)
0001766A 6000                       		bra.s	loc_193CC
0001766C                            ; ===========================================================================
0001766C                            
0001766C                            loc_193BE:
0001766C 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00017672 6C00                       		bge.s	loc_193CC
00017674 0668 000C 0012             		addi.w	#$C,$12(a0)
0001767A                            
0001767A                            loc_193CC:
0001767A 6000 FE24                  		bra.w	loc_191F2
0001767E                            ; ===========================================================================
0001767E                            
0001767E                            loc_193D0:				; XREF: off_192FA
0001767E 5368 003C                  		subq.w	#1,$3C(a0)
00017682 6E00                       		bgt.s	loc_19406
00017684 6B00                       		bmi.s	loc_193EE
00017686 70FF                       		moveq	#-1,d0
00017688 3028 0036                  		move.w	$36(a0),d0
0001768C 6700                       		beq.s	loc_193E8
0001768E 2240                       		movea.l	d0,a1
00017690 137C 000A 0029             		move.b	#$A,$29(a1)
00017696                            
00017696                            loc_193E8:
00017696 4268 0036                  		clr.w	$36(a0)
0001769A 6000                       		bra.s	loc_19406
0001769C                            ; ===========================================================================
0001769C                            
0001769C                            loc_193EE:
0001769C 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
000176A2 6600                       		bne.s	loc_19406
000176A4 4228 0029                  		clr.b	$29(a0)
000176A8 5528 0025                  		subq.b	#2,$25(a0)
000176AC 117C 00FF 003D             		move.b	#-1,$3D(a0)
000176B2 6000                       		bra.s	loc_19446
000176B4                            ; ===========================================================================
000176B4                            
000176B4                            loc_19406:
000176B4 7001                       		moveq	#1,d0
000176B6 4A68 0036                  		tst.w	$36(a0)
000176BA 6700                       		beq.s	loc_19410
000176BC 7002                       		moveq	#2,d0
000176BE                            
000176BE                            loc_19410:
000176BE 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
000176C4 6700                       		beq.s	loc_19424
000176C6 6D00                       		blt.s	loc_1941C
000176C8 4440                       		neg.w	d0
000176CA                            
000176CA                            loc_1941C:
000176CA 4A68 0036                  		tst.w	$36(a0)
000176D2                            
000176D2                            loc_19424:
000176D2 7000                       		moveq	#0,d0
000176D4 4A68 0036                  		tst.w	$36(a0)
000176D8 6700                       		beq.s	loc_19438
000176DA 7002                       		moveq	#2,d0
000176DC 0828 0000 003D             		btst	#0,$3D(a0)
000176E2 6700                       		beq.s	loc_19438
000176E4 4440                       		neg.w	d0
000176E6                            
000176E6                            loc_19438:
000176EA 3140 000C                  		move.w	d0,$C(a0)
000176EE 3168 0030 0008             		move.w	$30(a0),8(a0)
000176F4                            
000176F4                            loc_19446:
000176F4 6000 FDBA                  		bra.w	loc_19202
000176F8                            
000176F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000176F8                            
000176F8                            
000176F8                            Obj75_FindBlocks:			; XREF: loc_192AE
000176F8 4268 0036                  		clr.w	$36(a0)
000176FC 43F8 D040                  		lea	($FFFFD040).w,a1
00017700 703E                       		moveq	#$3E,d0
00017702 7276                       		moveq	#$76,d1
00017704 1428 0034                  		move.b	$34(a0),d2
00017708                            
00017708                            Obj75_FindLoop:
00017708 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001770A 6600                       		bne.s	loc_1946A	; if not, branch
0001770C B429 0028                  		cmp.b	$28(a1),d2
00017710 6600                       		bne.s	loc_1946A
00017712 3149 0036                  		move.w	a1,$36(a0)
00017716 6000                       		bra.s	locret_19472
00017718                            ; ===========================================================================
00017718                            
00017718                            loc_1946A:
00017718 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001771C 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00017720                            
00017720                            locret_19472:
00017720 4E75                       		rts	
00017722                            ; End of function Obj75_FindBlocks
00017722                            
00017722                            ; ===========================================================================
00017722                            
00017722                            loc_19474:				; XREF: Obj75_ShipIndex
00017722 5368 003C                  		subq.w	#1,$3C(a0)
00017726 6B00                       		bmi.s	loc_1947E
00017728 6000 E3FC                  		bra.w	BossDefeated
0001772C                            ; ===========================================================================
0001772C                            
0001772C                            loc_1947E:
0001772C 5428 0025                  		addq.b	#2,$25(a0)
00017730 4268 0012                  		clr.w	$12(a0)
00017734 08E8 0000 0022             		bset	#0,$22(a0)
0001773A 08A8 0007 0022             		bclr	#7,$22(a0)
00017740 4268 0010                  		clr.w	$10(a0)
00017744 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001774A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001774E 6600                       		bne.s	loc_194A8
00017750 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00017756                            
00017756                            loc_194A8:
00017756 6000 FD58                  		bra.w	loc_19202
0001775A                            ; ===========================================================================
0001775A                            
0001775A                            loc_194AC:				; XREF: Obj75_ShipIndex
0001775A 5268 003C                  		addq.w	#1,$3C(a0)
0001775E 6700                       		beq.s	loc_194BC
00017760 6A00                       		bpl.s	loc_194C2
00017762 0668 0018 0012             		addi.w	#$18,$12(a0)
00017768 6000                       		bra.s	loc_194EE
0001776A                            ; ===========================================================================
0001776A                            
0001776A                            loc_194BC:
0001776A 4268 0012                  		clr.w	$12(a0)
0001776E 6000                       		bra.s	loc_194EE
00017770                            ; ===========================================================================
00017770                            
00017770                            loc_194C2:
00017770 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00017776 6500                       		bcs.s	loc_194DA
00017778 6700                       		beq.s	loc_194E0
0001777A 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00017780 6500                       		bcs.s	loc_194EE
00017782 5428 0025                  		addq.b	#2,$25(a0)
00017786 6000                       		bra.s	loc_194EE
00017788                            ; ===========================================================================
00017788                            
00017788                            loc_194DA:
00017788 5168 0012                  		subq.w	#8,$12(a0)
0001778C 6000                       		bra.s	loc_194EE
0001778E                            ; ===========================================================================
0001778E                            
0001778E                            loc_194E0:
0001778E 4268 0012                  		clr.w	$12(a0)
00017792 303C 0085                  		move.w	#$85,d0
00017796 4EB9 0000 101A             		jsr	(PlaySound).l	; play SYZ music
0001779C                            
0001779C                            loc_194EE:
0001779C 6000 FD02                  		bra.w	loc_191F2
000177A0                            ; ===========================================================================
000177A0                            
000177A0                            loc_194F2:				; XREF: Obj75_ShipIndex
000177A0 317C 0400 0010             		move.w	#$400,$10(a0)
000177A6 317C FFC0 0012             		move.w	#-$40,$12(a0)
000177AC 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
000177B2 6400                       		bcc.s	loc_1950C
000177B4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000177B8 6000                       		bra.s	loc_19512
000177BA                            ; ===========================================================================
000177BA                            
000177BA                            loc_1950C:
000177BA 4A28 0001                  		tst.b	1(a0)
000177BE 6A00                       		bpl.s	Obj75_ShipDelete
000177C0                            
000177C0                            loc_19512:
000177C0 6100 E3A6                  		bsr.w	BossMove
000177C4 6000 FCC6                  		bra.w	loc_191DE
000177C8                            ; ===========================================================================
000177C8                            
000177C8                            Obj75_ShipDelete:
000177C8 4EF9 0000 B6D6             		jmp	DeleteObject
000177CE                            ; ===========================================================================
000177CE                            
000177CE                            Obj75_FaceMain:				; XREF: Obj75_Index
000177CE 7201                       		moveq	#1,d1
000177D0 2268 0034                  		movea.l	$34(a0),a1
000177D4 7000                       		moveq	#0,d0
000177D6 1029 0025                  		move.b	$25(a1),d0
000177DA 303B 0000                  		move.w	off_19546(pc,d0.w),d0
000177DE 4EBB 0000                  		jsr	off_19546(pc,d0.w)
000177E2 1141 001C                  		move.b	d1,$1C(a0)
000177E6 1010                       		move.b	(a0),d0
000177E8 B011                       		cmp.b	(a1),d0
000177EA 6600                       		bne.s	Obj75_FaceDelete
000177EC 6000                       		bra.s	loc_195BE
000177EE                            ; ===========================================================================
000177EE                            
000177EE                            Obj75_FaceDelete:
000177EE 4EF9 0000 B6D6             		jmp	DeleteObject
000177F4                            ; ===========================================================================
000177F4 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
000177F8 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
000177FC 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00017800                            ; ===========================================================================
00017800                            
00017800                            loc_19552:				; XREF: off_19546
00017800 720A                       		moveq	#$A,d1
00017802 4E75                       		rts	
00017804                            ; ===========================================================================
00017804                            
00017804                            loc_19556:				; XREF: off_19546
00017804 7206                       		moveq	#6,d1
00017806 4E75                       		rts	
00017808                            ; ===========================================================================
00017808                            
00017808                            loc_1955A:				; XREF: off_19546
00017808 7000                       		moveq	#0,d0
0001780A 1029 0028                  		move.b	$28(a1),d0
0001780E 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00017812 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00017816                            ; ===========================================================================
00017816 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001781A 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001781E                            ; ===========================================================================
0001781E                            
0001781E                            loc_19570:				; XREF: off_19568
0001781E 6000                       		bra.s	loc_19574
00017820                            ; ===========================================================================
00017820                            
00017820                            loc_19572:				; XREF: off_19568
00017820 7206                       		moveq	#6,d1
00017822                            
00017822                            loc_19574:				; XREF: off_19546
00017822 4A29 0020                  		tst.b	$20(a1)
00017826 6600                       		bne.s	loc_1957E
00017828 7205                       		moveq	#5,d1
0001782A 4E75                       		rts	
0001782C                            ; ===========================================================================
0001782C                            
0001782C                            loc_1957E:
0001782C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00017832 6500                       		bcs.s	locret_19588
00017834 7204                       		moveq	#4,d1
00017836                            
00017836                            locret_19588:
00017836 4E75                       		rts	
00017838                            ; ===========================================================================
00017838                            
00017838                            Obj75_FlameMain:			; XREF: Obj75_Index
00017838 117C 0007 001C             		move.b	#7,$1C(a0)
0001783E 2268 0034                  		movea.l	$34(a0),a1
00017842 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00017848 6600                       		bne.s	loc_195AA
0001784A 117C 000B 001C             		move.b	#$B,$1C(a0)
00017850 4A28 0001                  		tst.b	1(a0)
00017854 6A00                       		bpl.s	Obj75_FlameDelete
00017856 6000                       		bra.s	loc_195B6
00017858                            ; ===========================================================================
00017858                            
00017858                            loc_195AA:
00017858 4A69 0010                  		tst.w	$10(a1)
0001785C 6700                       		beq.s	loc_195B6
0001785E 117C 0008 001C             		move.b	#8,$1C(a0)
00017864                            
00017864                            loc_195B6:
00017864 6000                       		bra.s	loc_195BE
00017866                            ; ===========================================================================
00017866                            
00017866                            Obj75_FlameDelete:
00017866 4EF9 0000 B6D6             		jmp	DeleteObject
0001786C                            ; ===========================================================================
0001786C                            
0001786C                            loc_195BE:
0001786C 43F9 0001 5F78             		lea	(Ani_Eggman).l,a1
00017872 4EB9 0000 87C0             		jsr	AnimateSprite
00017878 2268 0034                  		movea.l	$34(a0),a1
0001787C 3169 0008 0008             		move.w	8(a1),8(a0)
00017882 3169 000C 000C             		move.w	$C(a1),$C(a0)
00017888                            
00017888                            loc_195DA:
00017888 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001788E 7003                       		moveq	#3,d0
00017894 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001789E 4EF9 0000 B69A             		jmp	DisplaySprite
000178A4                            ; ===========================================================================
000178A4                            
000178A4                            Obj75_SpikeMain:			; XREF: Obj75_Index
000178A4 217C 0001 6090 0004        		move.l	#Map_BossItems,4(a0)
000178AC 317C 246C 0002             		move.w	#$246C,2(a0)
000178B2 117C 0005 001A             		move.b	#5,$1A(a0)
000178B8 2268 0034                  		movea.l	$34(a0),a1
000178BC 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000178C2 6600                       		bne.s	loc_1961C
000178C4 4A28 0001                  		tst.b	1(a0)
000178C8 6A00                       		bpl.s	Obj75_SpikeDelete
000178CA                            
000178CA                            loc_1961C:
000178CA 3169 0008 0008             		move.w	8(a1),8(a0)
000178D0 3169 000C 000C             		move.w	$C(a1),$C(a0)
000178D6 3028 003C                  		move.w	$3C(a0),d0
000178DA 0C29 0004 0025             		cmpi.b	#4,$25(a1)
000178E0 6600                       		bne.s	loc_19652
000178E2 0C29 0006 0028             		cmpi.b	#6,$28(a1)
000178E8 6700                       		beq.s	loc_1964C
000178EA 4A29 0028                  		tst.b	$28(a1)
000178EE 6600                       		bne.s	loc_19658
000178F0 0C40 0094                  		cmpi.w	#$94,d0
000178F4 6C00                       		bge.s	loc_19658
000178F6 5E40                       		addq.w	#7,d0
000178F8 6000                       		bra.s	loc_19658
000178FA                            ; ===========================================================================
000178FA                            
000178FA                            loc_1964C:
000178FA 4A69 003C                  		tst.w	$3C(a1)
000178FE 6A00                       		bpl.s	loc_19658
00017900                            
00017900                            loc_19652:
00017900 4A40                       		tst.w	d0
00017902 6F00                       		ble.s	loc_19658
00017904 5B40                       		subq.w	#5,d0
00017906                            
00017906                            loc_19658:
00017906 3140 003C                  		move.w	d0,$3C(a0)
0001790A E440                       		asr.w	#2,d0
00017910 117C 0008 0019             		move.b	#8,$19(a0)
00017916 117C 000C 0016             		move.b	#$C,$16(a0)
0001791C 4228 0020                  		clr.b	$20(a0)
00017920 2268 0034                  		movea.l	$34(a0),a1
00017924 4A29 0020                  		tst.b	$20(a1)
00017928 6700                       		beq.s	loc_19688
0001792A 4A29 0029                  		tst.b	$29(a1)
0001792E 6600                       		bne.s	loc_19688
00017930 117C 0084 0020             		move.b	#$84,$20(a0)
00017936                            
00017936                            loc_19688:
00017936 6000 FF50                  		bra.w	loc_195DA
0001793A                            ; ===========================================================================
0001793A                            
0001793A                            Obj75_SpikeDelete:
0001793A 4EF9 0000 B6D6             		jmp	DeleteObject
00017940                            ; ===========================================================================
00017940                            ; ---------------------------------------------------------------------------
00017940                            ; Object 76 - blocks that Eggman picks up (SYZ)
00017940                            ; ---------------------------------------------------------------------------
00017940                            
00017940                            Obj76:					; XREF: Obj_Index
00017940 7000                       		moveq	#0,d0
00017942 1028 0024                  		move.b	$24(a0),d0
00017946 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001794A 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001794E                            ; ===========================================================================
0001794E 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00017950 0000                       		dc.w Obj76_Action-Obj76_Index
00017952 0000                       		dc.w loc_19762-Obj76_Index
00017954                            ; ===========================================================================
00017954                            
00017954                            Obj76_Main:				; XREF: Obj76_Index
00017954 7800                       		moveq	#0,d4
00017956 3A3C 2C10                  		move.w	#$2C10,d5
0001795A 7C09                       		moveq	#9,d6
0001795C 43D0                       		lea	(a0),a1
0001795E 6000                       		bra.s	Obj76_MakeBlock
00017960                            ; ===========================================================================
00017960                            
00017960                            Obj76_Loop:
00017960 4EB9 0000 BB20             		jsr	SingleObjLoad
00017966 6600                       		bne.s	Obj76_ExitLoop
00017968                            
00017968                            Obj76_MakeBlock:			; XREF: Obj76_Main
00017968 12BC 0076                  		move.b	#$76,(a1)
0001796C 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00017974 337C 4000 0002             		move.w	#$4000,2(a1)
0001797A 137C 0004 0001             		move.b	#4,1(a1)
00017980 137C 0010 0019             		move.b	#$10,$19(a1)
00017986 137C 0010 0016             		move.b	#$10,$16(a1)
0001798C 137C 0003 0018             		move.b	#3,$18(a1)
00017992 3345 0008                  		move.w	d5,8(a1)	; set x-position
00017996 337C 0582 000C             		move.w	#$582,$C(a1)
0001799C 3344 0028                  		move.w	d4,$28(a1)
000179A0 0644 0101                  		addi.w	#$101,d4
000179A4 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
000179A8 5429 0024                  		addq.b	#2,$24(a1)
000179AC 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
000179B0                            
000179B0                            Obj76_ExitLoop:
000179B0 4E75                       		rts	
000179B2                            ; ===========================================================================
000179B2                            
000179B2                            Obj76_Action:				; XREF: Obj76_Index
000179B2 1028 0029                  		move.b	$29(a0),d0
000179B6 B028 0028                  		cmp.b	$28(a0),d0
000179BA 6700                       		beq.s	Obj76_Solid
000179BC 4A00                       		tst.b	d0
000179BE 6B00                       		bmi.s	loc_19718
000179C0                            
000179C0                            loc_19712:
000179C0 6100 0000                  		bsr.w	Obj76_Break
000179C4 6000                       		bra.s	Obj76_Display
000179C6                            ; ===========================================================================
000179C6                            
000179C6                            loc_19718:
000179C6 2268 0034                  		movea.l	$34(a0),a1
000179CA 4A29 0021                  		tst.b	$21(a1)
000179CE 67F0                       		beq.s	loc_19712
000179D0 3169 0008 0008             		move.w	8(a1),8(a0)
000179D6 3169 000C 000C             		move.w	$C(a1),$C(a0)
000179DC 0668 002C 000C             		addi.w	#$2C,$C(a0)
000179E2 B2C8                       		cmpa.w	a0,a1
000179E4 6500                       		bcs.s	Obj76_Display
000179E6 3029 0012                  		move.w	$12(a1),d0
000179EA 48C0                       		ext.l	d0
000179EC E080                       		asr.l	#8,d0
000179F2 6000                       		bra.s	Obj76_Display
000179F4                            ; ===========================================================================
000179F4                            
000179F4                            Obj76_Solid:				; XREF: Obj76_Action
000179F4 323C 001B                  		move.w	#$1B,d1
000179F8 343C 0010                  		move.w	#$10,d2
000179FC 363C 0011                  		move.w	#$11,d3
00017A00 3828 0008                  		move.w	8(a0),d4
00017A04 4EB9 0000 DA5A             		jsr	SolidObject
00017A0A                            
00017A0A                            Obj76_Display:				; XREF: Obj76_Action
00017A0A 4EF9 0000 B69A             		jmp	DisplaySprite
00017A10                            ; ===========================================================================
00017A10                            
00017A10                            loc_19762:				; XREF: Obj76_Index
00017A10 4A28 0001                  		tst.b	1(a0)
00017A14 6A00                       		bpl.s	Obj76_Delete
00017A16 4EB9 0000 B648             		jsr	ObjectFall
00017A1C 4EF9 0000 B69A             		jmp	DisplaySprite
00017A22                            ; ===========================================================================
00017A22                            
00017A22                            Obj76_Delete:
00017A22 4EF9 0000 B6D6             		jmp	DeleteObject
00017A28                            
00017A28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A28                            
00017A28                            
00017A28                            Obj76_Break:				; XREF: Obj76_Action
00017A28 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00017A2C 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00017A30 7801                       		moveq	#1,d4
00017A32 7203                       		moveq	#3,d1
00017A34 7438                       		moveq	#$38,d2
00017A36 5428 0024                  		addq.b	#2,$24(a0)
00017A3A 117C 0008 0019             		move.b	#8,$19(a0)
00017A40 117C 0008 0016             		move.b	#8,$16(a0)
00017A46 43D0                       		lea	(a0),a1
00017A48 6000                       		bra.s	Obj76_MakeFrag
00017A4A                            ; ===========================================================================
00017A4A                            
00017A4A                            Obj76_LoopFrag:
00017A4A 4EB9 0000 BB36             		jsr	SingleObjLoad2
00017A50 6600                       		bne.s	loc_197D4
00017A52                            
00017A52                            Obj76_MakeFrag:
00017A52 45D0                       		lea	(a0),a2
00017A54 47D1                       		lea	(a1),a3
00017A56 7603                       		moveq	#3,d3
00017A58                            
00017A58                            loc_197AA:
00017A58 26DA                       		move.l	(a2)+,(a3)+
00017A5A 26DA                       		move.l	(a2)+,(a3)+
00017A5C 26DA                       		move.l	(a2)+,(a3)+
00017A5E 26DA                       		move.l	(a2)+,(a3)+
00017A60 51CB FFF6                  		dbf	d3,loc_197AA
00017A64                            
00017A64 335C 0010                  		move.w	(a4)+,$10(a1)
00017A68 335C 0012                  		move.w	(a4)+,$12(a1)
00017A6C 361D                       		move.w	(a5)+,d3
00017A72 361D                       		move.w	(a5)+,d3
00017A78 1344 001A                  		move.b	d4,$1A(a1)
00017A7C 5244                       		addq.w	#1,d4
00017A7E 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
00017A82                            
00017A82                            loc_197D4:
00017A82 303C 00CB                  		move.w	#$CB,d0
00017A86 4EF9 0000 1020             		jmp	(PlaySound_Special).l ;	play smashing sound
00017A8C                            ; End of function Obj76_Break
00017A8C                            
00017A8C                            ; ===========================================================================
00017A8C FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00017A90 0180 FE00                  		dc.w $180, $FE00
00017A94 FF00 FF00                  		dc.w $FF00, $FF00
00017A98 0100 FF00                  		dc.w $100, $FF00
00017A9C FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00017AA0 0010 0000                  		dc.w $10, 0
00017AA4 0000 0010                  		dc.w 0,	$10
00017AA8 0010 0010                  		dc.w $10, $10
00017AAC                            ; ---------------------------------------------------------------------------
00017AAC                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00017AAC                            ; ---------------------------------------------------------------------------
00017AAC                            Map_obj76:
00017AAC                            	include "_maps\obj76.asm"
00017AAC                            ; ---------------------------------------------------------------------------
00017AAC                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00017AAC                            ; ---------------------------------------------------------------------------
00017AAC 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00017AB0 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
00017AB4 0000                       		dc.w byte_19826-Map_obj76
00017AB6 02                         byte_19808:	dc.b 2
00017AB7 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00017ABC 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00017AC1 00                         		dc.b 0
00017AC2 01                         byte_19814:	dc.b 1
00017AC3 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00017AC8 01                         byte_1981A:	dc.b 1
00017AC9 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00017ACE 01                         byte_19820:	dc.b 1
00017ACF F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
00017AD4 01                         byte_19826:	dc.b 1
00017AD5 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00017ADA                            		even
00017ADA                            		even
00017ADA                            
00017ADA                            ; ===========================================================================
00017ADA                            
00017ADA                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00017ADA 4EF9 0000 B6D6             		jmp	DeleteObject
00017AE0                            ; ===========================================================================
00017AE0                            ; ---------------------------------------------------------------------------
00017AE0                            ; Object 82 - Eggman (SBZ2)
00017AE0                            ; ---------------------------------------------------------------------------
00017AE0                            
00017AE0                            Obj82:					; XREF: Obj_Index
00017AE0 7000                       		moveq	#0,d0
00017AE2 1028 0024                  		move.b	$24(a0),d0
00017AE6 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00017AEA 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00017AEE                            ; ===========================================================================
00017AEE 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
00017AF0 0000                       		dc.w Obj82_Eggman-Obj82_Index
00017AF2 0000                       		dc.w Obj82_Switch-Obj82_Index
00017AF4                            
00017AF4 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
00017AF7 0400 03                    		dc.b 4,	0, 3
00017AFA                            ; ===========================================================================
00017AFA                            
00017AFA                            Obj82_Main:				; XREF: Obj82_Index
00017AFA 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00017AFE 317C 2160 0008             		move.w	#$2160,8(a0)
00017B04 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00017B0A 117C 000F 0020             		move.b	#$F,$20(a0)
00017B10 117C 0010 0021             		move.b	#$10,$21(a0)
00017B16 08A8 0000 0022             		bclr	#0,$22(a0)
00017B1C 4228 0025                  		clr.b	$25(a0)
00017B20 115A 0024                  		move.b	(a2)+,$24(a0)
00017B24 115A 001C                  		move.b	(a2)+,$1C(a0)
00017B28 115A 0018                  		move.b	(a2)+,$18(a0)
00017B2C 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
00017B34 317C 0400 0002             		move.w	#$400,2(a0)
00017B3A 117C 0004 0001             		move.b	#4,1(a0)
00017B40 08E8 0007 0001             		bset	#7,1(a0)
00017B46 117C 0020 0019             		move.b	#$20,$19(a0)
00017B4C 4EB9 0000 BB36             		jsr	SingleObjLoad2
00017B52 6600                       		bne.s	Obj82_Eggman
00017B54 2348 0034                  		move.l	a0,$34(a1)
00017B58 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00017B5C 337C 2130 0008             		move.w	#$2130,8(a1)
00017B62 337C 05BC 000C             		move.w	#$5BC,$C(a1)
00017B68 4228 0025                  		clr.b	$25(a0)
00017B6C 135A 0024                  		move.b	(a2)+,$24(a1)
00017B70 135A 001C                  		move.b	(a2)+,$1C(a1)
00017B74 135A 0018                  		move.b	(a2)+,$18(a1)
00017B78 237C 0000 9F42 0004        		move.l	#Map_obj32,4(a1)
00017B80 337C 04A4 0002             		move.w	#$4A4,2(a1)
00017B86 137C 0004 0001             		move.b	#4,1(a1)
00017B8C 08E9 0007 0001             		bset	#7,1(a1)
00017B92 137C 0010 0019             		move.b	#$10,$19(a1)
00017B98 137C 0000 001A             		move.b	#0,$1A(a1)
00017B9E                            
00017B9E                            Obj82_Eggman:				; XREF: Obj82_Index
00017B9E 7000                       		moveq	#0,d0
00017BA0 1028 0025                  		move.b	$25(a0),d0
00017BA4 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
00017BA8 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
00017BAC 43FA 0000                  		lea	Ani_obj82(pc),a1
00017BB0 4EB9 0000 87C0             		jsr	AnimateSprite
00017BB6 4EF9 0000 B69A             		jmp	DisplaySprite
00017BBC                            ; ===========================================================================
00017BBC 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
00017BBE 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
00017BC0 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
00017BC2 0000                       		dc.w loc_19934-Obj82_EggIndex
00017BC4                            ; ===========================================================================
00017BC4                            
00017BC4                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
00017BC4 3028 0008                  		move.w	8(a0),d0
00017BCC 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
00017BD0 6400                       		bcc.s	loc_19934	; if not, branch
00017BD2 5428 0025                  		addq.b	#2,$25(a0)
00017BD6 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
00017BDC 117C 0001 001C             		move.b	#1,$1C(a0)
00017BE2                            
00017BE2                            loc_19934:				; XREF: Obj82_EggIndex
00017BE2 4EF9 0000 B674             		jmp	SpeedToPos
00017BE8                            ; ===========================================================================
00017BE8                            
00017BE8                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
00017BE8 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
00017BEC 6600                       		bne.s	loc_19954	; if time remains, branch
00017BEE 5428 0025                  		addq.b	#2,$25(a0)
00017BF2 117C 0002 001C             		move.b	#2,$1C(a0)
00017BF8 5868 000C                  		addq.w	#4,$C(a0)
00017BFC 317C 000F 003C             		move.w	#15,$3C(a0)
00017C02                            
00017C02                            loc_19954:
00017C02 60DE                       		bra.s	loc_19934
00017C04                            ; ===========================================================================
00017C04                            
00017C04                            Obj82_Leap:				; XREF: Obj82_EggIndex
00017C04 5368 003C                  		subq.w	#1,$3C(a0)
00017C08 6E00                       		bgt.s	loc_199D0
00017C0A 6600                       		bne.s	loc_1996A
00017C0C 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
00017C12 317C FC40 0012             		move.w	#-$3C0,$12(a0)
00017C18                            
00017C18                            loc_1996A:
00017C18 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
00017C1E 6E00                       		bgt.s	loc_19976
00017C20 4268 0010                  		clr.w	$10(a0)
00017C24                            
00017C24                            loc_19976:
00017C24 0668 0024 0012             		addi.w	#$24,$12(a0)
00017C2A 4A68 0012                  		tst.w	$12(a0)
00017C2E 6B00                       		bmi.s	Obj82_FindBlocks
00017C30 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
00017C36 6500                       		bcs.s	Obj82_FindBlocks
00017C38 317C 5357 0028             		move.w	#$5357,$28(a0)
00017C3E 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
00017C44 6500                       		bcs.s	Obj82_FindBlocks
00017C46 317C 059B 000C             		move.w	#$59B,$C(a0)
00017C4C 4268 0012                  		clr.w	$12(a0)
00017C50                            
00017C50                            Obj82_FindBlocks:
00017C50 3028 0010                  		move.w	$10(a0),d0
00017C58 6600                       		bne.s	loc_199D0
00017C5A 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
00017C5E 703E                       		moveq	#$3E,d0
00017C60 7240                       		moveq	#$40,d1
00017C62                            
00017C62                            Obj82_FindLoop:	
00017C62 D2C1                       		adda.w	d1,a1		; jump to next object RAM
00017C64 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
00017C68 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
00017C6C                            
00017C6C 6600                       		bne.s	loc_199D0
00017C6E 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
00017C74 5428 0025                  		addq.b	#2,$25(a0)
00017C78 117C 0001 001C             		move.b	#1,$1C(a0)
00017C7E                            
00017C7E                            loc_199D0:
00017C7E 6000 FF62                  		bra.w	loc_19934
00017C82                            ; ===========================================================================
00017C82                            
00017C82                            Obj82_Switch:				; XREF: Obj82_Index
00017C82 7000                       		moveq	#0,d0
00017C84 1028 0025                  		move.b	$25(a0),d0
00017C88 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
00017C8C 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
00017C90                            ; ===========================================================================
00017C90 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
00017C92 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
00017C94                            ; ===========================================================================
00017C94                            
00017C94                            loc_199E6:				; XREF: Obj82_SwIndex
00017C94 2268 0034                  		movea.l	$34(a0),a1
00017C98 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
00017C9E 6600                       		bne.s	Obj82_SwDisplay
00017CA0 117C 0001 001A             		move.b	#1,$1A(a0)
00017CA6 5428 0025                  		addq.b	#2,$25(a0)
00017CAA                            
00017CAA                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
00017CAA 4EF9 0000 B69A             		jmp	DisplaySprite
00017CB0                            ; ===========================================================================
00017CB0                            Ani_obj82:
00017CB0                            	include "_anim\obj82.asm"
00017CB0                            ; ---------------------------------------------------------------------------
00017CB0                            ; Animation script - Eggman (SBZ2)
00017CB0                            ; ---------------------------------------------------------------------------
00017CB0 0000                       		dc.w byte_19A10-Ani_obj82
00017CB2 0000                       		dc.w byte_19A14-Ani_obj82
00017CB4 0000                       		dc.w byte_19A18-Ani_obj82
00017CB6 0000                       		dc.w byte_19A20-Ani_obj82
00017CB8 0000                       		dc.w byte_19A24-Ani_obj82
00017CBA 0000                       		dc.w byte_19A2A-Ani_obj82
00017CBC 0000                       		dc.w byte_19A30-Ani_obj82
00017CBE 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
00017CC2 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
00017CC6 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
00017CCE 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
00017CD2 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
00017CD8 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
00017CDE 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
00017CE2                            		even
00017CE2                            		even
00017CE2                            
00017CE2                            ; ---------------------------------------------------------------------------
00017CE2                            ; Sprite mappings - Eggman (SBZ2)
00017CE2                            ; ---------------------------------------------------------------------------
00017CE2                            Map_obj82:
00017CE2                            	include "_maps\obj82.asm"
00017CE2                            ; ---------------------------------------------------------------------------
00017CE2                            ; Sprite mappings - Eggman (SBZ2)
00017CE2                            ; ---------------------------------------------------------------------------
00017CE2 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
00017CE6 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
00017CEA 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
00017CEE 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
00017CF2 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
00017CF6 0000                       		dc.w byte_19B4F-Map_obj82
00017CF8 03                         byte_19A4A:	dc.b 3
00017CF9 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00017CFE E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00017D03 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00017D08 04                         byte_19A5A:	dc.b 4
00017D09 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
00017D0E E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00017D13 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00017D18 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00017D1D 00                         		dc.b 0
00017D1E 04                         byte_19A70:	dc.b 4
00017D1F E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
00017D24 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
00017D29 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
00017D2E FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
00017D33 00                         		dc.b 0
00017D34 04                         byte_19A86:	dc.b 4
00017D35 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
00017D3A F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
00017D3F 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
00017D44 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
00017D49 00                         		dc.b 0
00017D4A 04                         byte_19A9C:	dc.b 4
00017D4B F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00017D50 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
00017D55 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
00017D5A E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00017D5F 00                         		dc.b 0
00017D60 04                         byte_19AB2:	dc.b 4
00017D61 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00017D66 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00017D6B E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00017D70 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00017D75 00                         		dc.b 0
00017D76 07                         byte_19AC8:	dc.b 7
00017D77 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00017D7C E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00017D81 0409 0834 00               		dc.b 4,	9, 8, $34, 0
00017D86 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
00017D8B F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00017D90 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
00017D95 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
00017D9A 05                         byte_19AEC:	dc.b 5
00017D9B F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00017DA0 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
00017DA5 0409 0834 00               		dc.b 4,	9, 8, $34, 0
00017DAA 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
00017DAF E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00017DB4 06                         byte_19B06:	dc.b 6
00017DB5 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
00017DBA EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
00017DBF 0905 0844 00               		dc.b 9,	5, 8, $44, 0
00017DC4 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
00017DC9 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
00017DCE E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
00017DD3 00                         		dc.b 0
00017DD4 08                         byte_19B26:	dc.b 8
00017DD5 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00017DDA E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00017DDF E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00017DE4 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00017DE9 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
00017DEE F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
00017DF3 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
00017DF8 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
00017DFD 03                         byte_19B4F:	dc.b 3
00017DFE EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
00017E03 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
00017E08 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
00017E0E 00                         		even
00017E0E 00                         		even
00017E0E                            
00017E0E                            ; ===========================================================================
00017E0E                            ; ---------------------------------------------------------------------------
00017E0E                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
00017E0E                            ; ---------------------------------------------------------------------------
00017E0E                            
00017E0E                            Obj83:					; XREF: Obj_Index
00017E0E 7000                       		moveq	#0,d0
00017E10 1028 0024                  		move.b	$24(a0),d0
00017E14 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
00017E18 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
00017E1C                            ; ===========================================================================
00017E1C 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
00017E1E 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
00017E20 0000                       		dc.w loc_19C36-Obj83_Index
00017E22 0000                       		dc.w loc_19C62-Obj83_Index
00017E24 0000                       		dc.w loc_19C72-Obj83_Index
00017E26 0000                       		dc.w loc_19C80-Obj83_Index
00017E28                            ; ===========================================================================
00017E28                            
00017E28                            Obj83_Main:				; XREF: Obj83_Index
00017E28 317C 2080 0008             		move.w	#$2080,8(a0)
00017E2E 317C 05D0 000C             		move.w	#$5D0,$C(a0)
00017E34 117C 0080 0019             		move.b	#$80,$19(a0)
00017E3A 117C 0010 0016             		move.b	#$10,$16(a0)
00017E40 117C 0004 0001             		move.b	#4,1(a0)
00017E46 08E8 0007 0001             		bset	#7,1(a0)
00017E4C 7800                       		moveq	#0,d4
00017E4E 3A3C 2010                  		move.w	#$2010,d5
00017E52 7C07                       		moveq	#7,d6
00017E54 45E8 0030                  		lea	$30(a0),a2
00017E58                            
00017E58                            Obj83_MakeBlock:
00017E58 4EB9 0000 BB20             		jsr	SingleObjLoad
00017E5E 6600                       		bne.s	Obj83_ExitMake
00017E60 34C9                       		move.w	a1,(a2)+
00017E62 12BC 0083                  		move.b	#$83,(a1)	; load block object
00017E66 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
00017E6E 337C 4518 0002             		move.w	#$4518,2(a1)
00017E74 137C 0004 0001             		move.b	#4,1(a1)
00017E7A 137C 0010 0019             		move.b	#$10,$19(a1)
00017E80 137C 0010 0016             		move.b	#$10,$16(a1)
00017E86 137C 0003 0018             		move.b	#3,$18(a1)
00017E8C 3345 0008                  		move.w	d5,8(a1)	; set X	position
00017E90 337C 05D0 000C             		move.w	#$5D0,$C(a1)
00017E96 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
00017E9A 137C 0008 0024             		move.b	#8,$24(a1)
00017EA0 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
00017EA4                            
00017EA4                            Obj83_ExitMake:
00017EA4 5428 0024                  		addq.b	#2,$24(a0)
00017EA8 4E75                       		rts	
00017EAA                            ; ===========================================================================
00017EAA                            
00017EAA                            Obj83_ChkBreak:				; XREF: Obj83_Index
00017EAA 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
00017EB0 6600                       		bne.s	Obj83_Solid	; if not, branch
00017EB2 4228 001A                  		clr.b	$1A(a0)
00017EB6 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
00017EBA                            
00017EBA                            Obj83_Solid:
00017EBA 7000                       		moveq	#0,d0
00017EBC 1028 001A                  		move.b	$1A(a0),d0
00017EC0 4400                       		neg.b	d0
00017EC2 4880                       		ext.w	d0
00017EC4 5040                       		addq.w	#8,d0
00017EC6 E940                       		asl.w	#4,d0
00017EC8 383C 2100                  		move.w	#$2100,d4
00017ECE 1140 0019                  		move.b	d0,$19(a0)
00017ED2 3144 0008                  		move.w	d4,8(a0)
00017ED6 720B                       		moveq	#$B,d1
00017EDA 7410                       		moveq	#$10,d2
00017EDC 7611                       		moveq	#$11,d3
00017EDE 4EF9 0000 DA5A             		jmp	SolidObject
00017EE4                            ; ===========================================================================
00017EE4                            
00017EE4                            loc_19C36:				; XREF: Obj83_Index
00017EE4 0428 000E 001E             		subi.b	#$E,$1E(a0)
00017EEA 6400                       		bcc.s	Obj83_Solid2
00017EEC 70FF                       		moveq	#-1,d0
00017EEE 1028 001A                  		move.b	$1A(a0),d0
00017EF2 4880                       		ext.w	d0
00017EF6 3030 0030                  		move.w	$30(a0,d0.w),d0
00017EFA 2240                       		movea.l	d0,a1
00017EFC 337C 474F 0028             		move.w	#$474F,$28(a1)
00017F02 5228 001A                  		addq.b	#1,$1A(a0)
00017F06 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
00017F0C 6700                       		beq.s	loc_19C62
00017F0E                            
00017F0E                            Obj83_Solid2:
00017F0E 60AA                       		bra.s	Obj83_Solid
00017F10                            ; ===========================================================================
00017F10                            
00017F10                            loc_19C62:				; XREF: Obj83_Index
00017F10 08A8 0003 0022             		bclr	#3,$22(a0)
00017F16 08B8 0003 D022             		bclr	#3,($FFFFD022).w
00017F1C 6000 FBBC                  		bra.w	loc_1982C
00017F20                            ; ===========================================================================
00017F20                            
00017F20                            loc_19C72:				; XREF: Obj83_Index
00017F20 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
00017F26 6700                       		beq.s	Obj83_Break	; if yes, branch
00017F28 4EF9 0000 B69A             		jmp	DisplaySprite
00017F2E                            ; ===========================================================================
00017F2E                            
00017F2E                            loc_19C80:				; XREF: Obj83_Index
00017F2E 4A28 0001                  		tst.b	1(a0)
00017F32 6A00 FBA6                  		bpl.w	loc_1982C
00017F36 4EB9 0000 B648             		jsr	ObjectFall
00017F3C 4EF9 0000 B69A             		jmp	DisplaySprite
00017F42                            ; ===========================================================================
00017F42                            
00017F42                            Obj83_Break:				; XREF: loc_19C72
00017F42 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
00017F46 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
00017F4A 7801                       		moveq	#1,d4
00017F4C 7203                       		moveq	#3,d1
00017F4E 7438                       		moveq	#$38,d2
00017F50 5428 0024                  		addq.b	#2,$24(a0)
00017F54 117C 0008 0019             		move.b	#8,$19(a0)
00017F5A 117C 0008 0016             		move.b	#8,$16(a0)
00017F60 43D0                       		lea	(a0),a1
00017F62 6000                       		bra.s	Obj83_MakeFrag
00017F64                            ; ===========================================================================
00017F64                            
00017F64                            Obj83_LoopFrag:
00017F64 4EB9 0000 BB36             		jsr	SingleObjLoad2
00017F6A 6600                       		bne.s	Obj83_BreakSnd
00017F6C                            
00017F6C                            Obj83_MakeFrag:				; XREF: Obj83_Break
00017F6C 45D0                       		lea	(a0),a2
00017F6E 47D1                       		lea	(a1),a3
00017F70 7603                       		moveq	#3,d3
00017F72                            
00017F72                            loc_19CC4:
00017F72 26DA                       		move.l	(a2)+,(a3)+
00017F74 26DA                       		move.l	(a2)+,(a3)+
00017F76 26DA                       		move.l	(a2)+,(a3)+
00017F78 26DA                       		move.l	(a2)+,(a3)+
00017F7A 51CB FFF6                  		dbf	d3,loc_19CC4
00017F7E                            
00017F7E 335C 0012                  		move.w	(a4)+,$12(a1)
00017F82 361D                       		move.w	(a5)+,d3
00017F88 361D                       		move.w	(a5)+,d3
00017F8E 1344 001A                  		move.b	d4,$1A(a1)
00017F92 5244                       		addq.w	#1,d4
00017F94 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
00017F98                            
00017F98                            Obj83_BreakSnd:
00017F98 303C 00CB                  		move.w	#$CB,d0
00017F9C 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play smashing sound
00017FA2 4EF9 0000 B69A             		jmp	DisplaySprite
00017FA8                            ; ===========================================================================
00017FA8 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
00017FAC 0120 00C0                  		dc.w $120, $C0
00017FB0 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
00017FB4 0010 0000                  		dc.w $10, 0
00017FB8 0000 0010                  		dc.w 0,	$10
00017FBC 0010 0010                  		dc.w $10, $10
00017FC0                            ; ---------------------------------------------------------------------------
00017FC0                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
00017FC0                            ; ---------------------------------------------------------------------------
00017FC0                            Map_obj83:
00017FC0                            	include "_maps\obj83.asm"
00017FC0                            ; ---------------------------------------------------------------------------
00017FC0                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
00017FC0                            ; ---------------------------------------------------------------------------
00017FC0 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
00017FC4 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
00017FC8 0000                       		dc.w byte_19D46-Map_obj83
00017FCA 01                         byte_19D1C:	dc.b 1
00017FCB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00017FD0 02                         byte_19D22:	dc.b 2
00017FD1 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
00017FD6 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
00017FDB 00                         		dc.b 0
00017FDC 02                         byte_19D2E:	dc.b 2
00017FDD F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017FE2 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
00017FE7 00                         		dc.b 0
00017FE8 02                         byte_19D3A:	dc.b 2
00017FE9 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
00017FEE F801 0006 00               		dc.b $F8, 1, 0,	6, 0
00017FF3 00                         		dc.b 0
00017FF4 02                         byte_19D46:	dc.b 2
00017FF5 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
00017FFA F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
00018000 00                         		even
00018000 00                         		even
00018000                            
00018000                            ; ===========================================================================
00018000                            ; ---------------------------------------------------------------------------
00018000                            ; Object 85 - Eggman (FZ)
00018000                            ; ---------------------------------------------------------------------------
00018000                            
00018000                            Obj85_Delete:
00018000 4EF9 0000 B6D6             		jmp	DeleteObject
00018006                            ; ===========================================================================
00018006                            
00018006                            Obj85:					; XREF: Obj_Index
00018006 7000                       		moveq	#0,d0
00018008 1028 0024                  		move.b	$24(a0),d0
0001800C 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
00018010 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
00018014                            ; ===========================================================================
00018014 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
00018016 0000                       		dc.w Obj85_Eggman-Obj85_Index
00018018 0000                       		dc.w loc_1A38E-Obj85_Index
0001801A 0000                       		dc.w loc_1A346-Obj85_Index
0001801C 0000                       		dc.w loc_1A2C6-Obj85_Index
0001801E 0000                       		dc.w loc_1A3AC-Obj85_Index
00018020 0000                       		dc.w loc_1A264-Obj85_Index
00018022                            
00018022 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
00018028 0001 7CE2                  		dc.l Map_obj82		; mappings pointer
0001802C 25B0 0590 0300             		dc.w $25B0, $590, $300
00018032 0000 0000                  		dc.l Map_obj84
00018036 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001803C 0000 0000                  		dc.l Map_FZBoss
00018040 26E0 0596 0470             		dc.w $26E0, $596, $470
00018046 0001 7CE2                  		dc.l Map_obj82
0001804A 26E0 0596 0400             		dc.w $26E0, $596, $400
00018050 0001 5FC8                  		dc.l Map_Eggman
00018054 26E0 0596 0400             		dc.w $26E0, $596, $400
0001805A 0001 5FC8                  		dc.l Map_Eggman
0001805E                            
0001805E 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
00018063 0400 0112 08               		dc.b 4,	0, 1, $12, 8
00018068 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001806D 0800 0300 00               		dc.b 8,	0, 3, 0, 0
00018072 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
00018077 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001807C                            ; ===========================================================================
0001807C                            
0001807C                            Obj85_Main:				; XREF: Obj85_Index
0001807C 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
00018080 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
00018084 2248                       		movea.l	a0,a1
00018086 7205                       		moveq	#5,d1
00018088 6000                       		bra.s	Obj85_LoadBoss
0001808A                            ; ===========================================================================
0001808A                            
0001808A                            Obj85_Loop:
0001808A 4EB9 0000 BB36             		jsr	SingleObjLoad2
00018090 6600                       		bne.s	loc_19E20
00018092                            
00018092                            Obj85_LoadBoss:				; XREF: Obj85_Main
00018092 12BC 0085                  		move.b	#$85,(a1)
00018096 335A 0008                  		move.w	(a2)+,8(a1)
0001809A 335A 000C                  		move.w	(a2)+,$C(a1)
0001809E 335A 0002                  		move.w	(a2)+,2(a1)
000180A2 235A 0004                  		move.l	(a2)+,4(a1)
000180A6 135B 0024                  		move.b	(a3)+,$24(a1)
000180AA 135B 001C                  		move.b	(a3)+,$1C(a1)
000180AE 135B 0018                  		move.b	(a3)+,$18(a1)
000180B2 135B 0017                  		move.b	(a3)+,$17(a1)
000180B6 135B 0016                  		move.b	(a3)+,$16(a1)
000180BA 137C 0004 0001             		move.b	#4,1(a1)
000180C0 08E8 0007 0001             		bset	#7,1(a0)
000180C6 2348 0034                  		move.l	a0,$34(a1)
000180CA 51C9 FFBE                  		dbf	d1,Obj85_Loop
000180CE                            
000180CE                            loc_19E20:
000180CE 45E8 0036                  		lea	$36(a0),a2
000180D2 4EB9 0000 BB20             		jsr	SingleObjLoad
000180D8 6600                       		bne.s	loc_19E5A
000180DA 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
000180DE 3489                       		move.w	a1,(a2)
000180E0 2348 0034                  		move.l	a0,$34(a1)
000180E4 45E8 0038                  		lea	$38(a0),a2
000180E8 7400                       		moveq	#0,d2
000180EA 7203                       		moveq	#3,d1
000180EC                            
000180EC                            loc_19E3E:
000180EC 4EB9 0000 BB36             		jsr	SingleObjLoad2
000180F2 6600                       		bne.s	loc_19E5A
000180F4 34C9                       		move.w	a1,(a2)+
000180F6 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
000180FA 2348 0034                  		move.l	a0,$34(a1)
000180FE 1342 0028                  		move.b	d2,$28(a1)
00018102 5442                       		addq.w	#2,d2
00018104 51C9 FFE6                  		dbf	d1,loc_19E3E
00018108                            
00018108                            loc_19E5A:
00018108 317C 0000 0034             		move.w	#0,$34(a0)
0001810E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018114 317C FFFF 0030             		move.w	#-1,$30(a0)
0001811A                            
0001811A                            Obj85_Eggman:				; XREF: Obj85_Index
0001811A 7000                       		moveq	#0,d0
0001811C 1028 0034                  		move.b	$34(a0),d0
00018120 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
00018124 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
00018128 4EF9 0000 B69A             		jmp	DisplaySprite
0001812E                            ; ===========================================================================
0001812E 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
00018132 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
00018136 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001813A 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001813E                            ; ===========================================================================
0001813E                            
0001813E                            loc_19E90:				; XREF: off_19E80
0001813E 4AB8 F680                  		tst.l	($FFFFF680).w
00018142 6600                       		bne.s	loc_19EA2
00018144 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001814A 6500                       		bcs.s	loc_19EA2
0001814C 5428 0034                  		addq.b	#2,$34(a0)
00018150                            
00018150                            loc_19EA2:
00018150 52B8 F636                  		addq.l	#1,($FFFFF636).w
00018154 4E75                       		rts	
00018156                            ; ===========================================================================
00018156                            
00018156                            loc_19EA8:				; XREF: off_19E80
00018156 4A68 0030                  		tst.w	$30(a0)
0001815A 6A00                       		bpl.s	loc_19F10
0001815C 4268 0030                  		clr.w	$30(a0)
00018160 4EB9 0000 2530             		jsr	(RandomNumber).l
00018166 0240 000C                  		andi.w	#$C,d0
0001816A 3200                       		move.w	d0,d1
0001816C 5441                       		addq.w	#2,d1
0001816E 4A80                       		tst.l	d0
00018170 6A00                       		bpl.s	loc_19EC6
00018172 C340                       		exg	d1,d0
00018174                            
00018174                            loc_19EC6:
00018174 43FA 0000                  		lea	word_19FD6(pc),a1
00018178 3031 0000                  		move.w	(a1,d0.w),d0
0001817C 3231 1000                  		move.w	(a1,d1.w),d1
00018180 3140 0030                  		move.w	d0,$30(a0)
00018184 74FF                       		moveq	#-1,d2
00018186 3430 0038                  		move.w	$38(a0,d0.w),d2
0001818A 2242                       		movea.l	d2,a1
0001818C 137C 00FF 0029             		move.b	#-1,$29(a1)
00018192 337C FFFF 0030             		move.w	#-1,$30(a1)
00018198 3430 1038                  		move.w	$38(a0,d1.w),d2
0001819C 2242                       		movea.l	d2,a1
0001819E 137C 0001 0029             		move.b	#1,$29(a1)
000181A4 337C 0000 0030             		move.w	#0,$30(a1)
000181AA 317C 0001 0032             		move.w	#1,$32(a0)
000181B0 4228 0035                  		clr.b	$35(a0)
000181B4 303C 00B7                  		move.w	#$B7,d0
000181B8 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play rumbling sound
000181BE                            
000181BE                            loc_19F10:
000181BE 4A68 0032                  		tst.w	$32(a0)
000181C2 6B00 0000                  		bmi.w	loc_19FA6
000181C6 08A8 0000 0022             		bclr	#0,$22(a0)
000181CC 3038 D008                  		move.w	($FFFFD008).w,d0
000181D4 6500                       		bcs.s	loc_19F2E
000181D6 08E8 0000 0022             		bset	#0,$22(a0)
000181DC                            
000181DC                            loc_19F2E:
000181DC 323C 002B                  		move.w	#$2B,d1
000181E0 343C 0014                  		move.w	#$14,d2
000181E4 363C 0014                  		move.w	#$14,d3
000181E8 3828 0008                  		move.w	8(a0),d4
000181EC 4EB9 0000 DA5A             		jsr	SolidObject
000181F2 4A44                       		tst.w	d4
000181F4 6E00                       		bgt.s	loc_19F50
000181F6                            
000181F6                            loc_19F48:
000181F6 4A28 0035                  		tst.b	$35(a0)
000181FA 6600                       		bne.s	loc_19F88
000181FC 6000                       		bra.s	loc_19F96
000181FE                            ; ===========================================================================
000181FE                            
000181FE                            loc_19F50:
000181FE 5E78 F636                  		addq.w	#7,($FFFFF636).w
00018202 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
00018208 66EC                       		bne.s	loc_19F48
0001820A 303C 0300                  		move.w	#$300,d0
0001820E 0828 0000 0022             		btst	#0,$22(a0)
00018214 6600                       		bne.s	loc_19F6A
00018216 4440                       		neg.w	d0
00018218                            
00018218                            loc_19F6A:
00018218 31C0 D010                  		move.w	d0,($FFFFD010).w
0001821C 4A28 0035                  		tst.b	$35(a0)
00018220 6600                       		bne.s	loc_19F88
00018222 5328 0021                  		subq.b	#1,$21(a0)
00018226 117C 0064 0035             		move.b	#$64,$35(a0)
0001822C 303C 00AC                  		move.w	#$AC,d0
00018230 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018236                            
00018236                            loc_19F88:
00018236 5328 0035                  		subq.b	#1,$35(a0)
0001823A 6700                       		beq.s	loc_19F96
0001823C 117C 0003 001C             		move.b	#3,$1C(a0)
00018242 6000                       		bra.s	loc_19F9C
00018244                            ; ===========================================================================
00018244                            
00018244                            loc_19F96:
00018244 117C 0001 001C             		move.b	#1,$1C(a0)
0001824A                            
0001824A                            loc_19F9C:
0001824A 43FA FA64                  		lea	Ani_obj82(pc),a1
0001824E 4EF9 0000 87C0             		jmp	AnimateSprite
00018254                            ; ===========================================================================
00018254                            
00018254                            loc_19FA6:
00018254 4A28 0021                  		tst.b	$21(a0)
00018258 6700                       		beq.s	loc_19FBC
0001825A 5428 0034                  		addq.b	#2,$34(a0)
0001825E 317C FFFF 0030             		move.w	#-1,$30(a0)
00018264 4268 0032                  		clr.w	$32(a0)
00018268 4E75                       		rts	
0001826A                            ; ===========================================================================
0001826A                            
0001826A                            loc_19FBC:
0001826A 117C 0006 0034             		move.b	#6,$34(a0)
00018270 317C 25C0 0008             		move.w	#$25C0,8(a0)
00018276 317C 053C 000C             		move.w	#$53C,$C(a0)
0001827C 117C 0014 0016             		move.b	#$14,$16(a0)
00018282 4E75                       		rts	
00018284                            ; ===========================================================================
00018284 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
00018294                            ; ===========================================================================
00018294                            
00018294                            loc_19FE6:				; XREF: off_19E80
00018294 70FF                       		moveq	#-1,d0
00018296 3028 0036                  		move.w	$36(a0),d0
0001829A 2240                       		movea.l	d0,a1
0001829C 4A68 0030                  		tst.w	$30(a0)
000182A0 6A00                       		bpl.s	loc_1A000
000182A2 4268 0030                  		clr.w	$30(a0)
000182A6 137C 00FF 0029             		move.b	#-1,$29(a1)
000182AC 6100                       		bsr.s	loc_1A020
000182AE                            
000182AE                            loc_1A000:
000182AE 700F                       		moveq	#$F,d0
000182B4 6600                       		bne.s	loc_1A00A
000182B6 6100                       		bsr.s	loc_1A020
000182B8                            
000182B8                            loc_1A00A:
000182B8 4A68 0032                  		tst.w	$32(a0)
000182BC 6700                       		beq.s	locret_1A01E
000182BE 5528 0034                  		subq.b	#2,$34(a0)
000182C2 317C FFFF 0030             		move.w	#-1,$30(a0)
000182C8 4268 0032                  		clr.w	$32(a0)
000182CC                            
000182CC                            locret_1A01E:
000182CC 4E75                       		rts	
000182CE                            ; ===========================================================================
000182CE                            
000182CE                            loc_1A020:
000182CE 303C 00B1                  		move.w	#$B1,d0
000182D2 4EF9 0000 1020             		jmp	(PlaySound_Special).l ;	play electricity sound
000182D8                            ; ===========================================================================
000182D8                            
000182D8                            loc_1A02A:				; XREF: off_19E80
000182D8 117C 0030 0017             		move.b	#$30,$17(a0)
000182DE 08E8 0000 0022             		bset	#0,$22(a0)
000182E4 4EB9 0000 B674             		jsr	SpeedToPos
000182EA 117C 0006 001A             		move.b	#6,$1A(a0)
000182F0 0668 0010 0012             		addi.w	#$10,$12(a0)
000182F6 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
000182FC 6500                       		bcs.s	loc_1A070
000182FE 317C 059C 000C             		move.w	#$59C,$C(a0)
00018304 5428 0034                  		addq.b	#2,$34(a0)
00018308 117C 0020 0017             		move.b	#$20,$17(a0)
0001830E 317C 0100 0010             		move.w	#$100,$10(a0)
00018314 317C FF00 0012             		move.w	#-$100,$12(a0)
0001831A 5438 F742                  		addq.b	#2,($FFFFF742).w
0001831E                            
0001831E                            loc_1A070:
0001831E 6000 0000                  		bra.w	loc_1A166
00018322                            ; ===========================================================================
00018322                            
00018322                            loc_1A074:				; XREF: off_19E80
00018322 08E8 0000 0022             		bset	#0,$22(a0)
00018328 117C 0004 001C             		move.b	#4,$1C(a0)
0001832E 4EB9 0000 B674             		jsr	SpeedToPos
00018334 0668 0010 0012             		addi.w	#$10,$12(a0)
0001833A 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
00018340 6500                       		bcs.s	loc_1A09A
00018342 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018348                            
00018348                            loc_1A09A:
00018348 317C 0400 0010             		move.w	#$400,$10(a0)
0001834E 3028 0008                  		move.w	8(a0),d0
00018356 6A00                       		bpl.s	loc_1A0B4
00018358 317C 0500 0010             		move.w	#$500,$10(a0)
0001835E 6000 0000                  		bra.w	loc_1A0F2
00018362                            ; ===========================================================================
00018362                            
00018362                            loc_1A0B4:
00018362 0440 0070                  		subi.w	#$70,d0
00018366 6500                       		bcs.s	loc_1A0F2
00018368 0468 0100 0010             		subi.w	#$100,$10(a0)
0001836E 5140                       		subq.w	#8,d0
00018370 6500                       		bcs.s	loc_1A0F2
00018372 0468 0100 0010             		subi.w	#$100,$10(a0)
00018378 5140                       		subq.w	#8,d0
0001837A 6500                       		bcs.s	loc_1A0F2
0001837C 0468 0080 0010             		subi.w	#$80,$10(a0)
00018382 5140                       		subq.w	#8,d0
00018384 6500                       		bcs.s	loc_1A0F2
00018386 0468 0080 0010             		subi.w	#$80,$10(a0)
0001838C 5140                       		subq.w	#8,d0
0001838E 6500                       		bcs.s	loc_1A0F2
00018390 0468 0080 0010             		subi.w	#$80,$10(a0)
00018396 0440 0038                  		subi.w	#$38,d0
0001839A 6500                       		bcs.s	loc_1A0F2
0001839C 4268 0010                  		clr.w	$10(a0)
000183A0                            
000183A0                            loc_1A0F2:
000183A0 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
000183A6 6500                       		bcs.s	loc_1A110
000183A8 317C 26A0 0008             		move.w	#$26A0,8(a0)
000183AE 317C 0240 0010             		move.w	#$240,$10(a0)
000183B4 317C FB40 0012             		move.w	#-$4C0,$12(a0)
000183BA 5428 0034                  		addq.b	#2,$34(a0)
000183BE                            
000183BE                            loc_1A110:
000183BE 6000                       		bra.s	loc_1A15C
000183C0                            ; ===========================================================================
000183C0                            
000183C0                            loc_1A112:				; XREF: off_19E80
000183C0 4EB9 0000 B674             		jsr	SpeedToPos
000183C6 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
000183CC 6500                       		bcs.s	loc_1A124
000183CE 4268 0010                  		clr.w	$10(a0)
000183D2                            
000183D2                            loc_1A124:
000183D2 0668 0034 0012             		addi.w	#$34,$12(a0)
000183D8 4A68 0012                  		tst.w	$12(a0)
000183DC 6B00                       		bmi.s	loc_1A142
000183DE 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
000183E4 6500                       		bcs.s	loc_1A142
000183E6 317C 0592 000C             		move.w	#$592,$C(a0)
000183EC 4268 0012                  		clr.w	$12(a0)
000183F0                            
000183F0                            loc_1A142:
000183F0 3028 0010                  		move.w	$10(a0),d0
000183F8 6600                       		bne.s	loc_1A15C
000183FA 5428 0034                  		addq.b	#2,$34(a0)
000183FE 317C FE80 0012             		move.w	#-$180,$12(a0)
00018404 117C 0001 0021             		move.b	#1,$21(a0)
0001840A                            
0001840A                            loc_1A15C:
0001840A 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001840E 4EB9 0000 87C0             		jsr	AnimateSprite
00018414                            
00018414                            loc_1A166:
00018414 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001841A 6C00                       		bge.s	loc_1A172
0001841C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018420                            
00018420                            loc_1A172:
00018420 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
00018426 6C00                       		bge.s	locret_1A190
00018428 323C 001B                  		move.w	#$1B,d1
0001842C 343C 0070                  		move.w	#$70,d2
00018430 363C 0071                  		move.w	#$71,d3
00018434 3828 0008                  		move.w	8(a0),d4
00018438 4EF9 0000 DA5A             		jmp	SolidObject
0001843E                            ; ===========================================================================
0001843E                            
0001843E                            locret_1A190:
0001843E 4E75                       		rts	
00018440                            ; ===========================================================================
00018440                            
00018440                            loc_1A192:				; XREF: off_19E80
00018440 217C 0001 5FC8 0004        		move.l	#Map_Eggman,4(a0)
00018448 317C 0400 0002             		move.w	#$400,2(a0)
0001844E 117C 0000 001C             		move.b	#0,$1C(a0)
00018454 08E8 0000 0022             		bset	#0,$22(a0)
0001845A 4EB9 0000 B674             		jsr	SpeedToPos
00018460 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
00018466 6400                       		bcc.s	loc_1A1D0
00018468 317C 0180 0010             		move.w	#$180,$10(a0)
0001846E 317C FFE8 0012             		move.w	#-$18,$12(a0)
00018474 117C 000F 0020             		move.b	#$F,$20(a0)
0001847A 5428 0034                  		addq.b	#2,$34(a0)
0001847E                            
0001847E                            loc_1A1D0:
0001847E 6000 FF8A                  		bra.w	loc_1A15C
00018482                            ; ===========================================================================
00018482                            
00018482                            loc_1A1D4:				; XREF: off_19E80
00018482 08E8 0000 0022             		bset	#0,$22(a0)
00018488 4EB9 0000 B674             		jsr	SpeedToPos
0001848E 4A68 0030                  		tst.w	$30(a0)
00018492 6600                       		bne.s	loc_1A1FC
00018494 4A28 0020                  		tst.b	$20(a0)
00018498 6600                       		bne.s	loc_1A216
0001849A 317C 001E 0030             		move.w	#$1E,$30(a0)
000184A0 303C 00AC                  		move.w	#$AC,d0
000184A4 4EB9 0000 1020             		jsr	(PlaySound_Special).l ;	play boss damage sound
000184AA                            
000184AA                            loc_1A1FC:
000184AA 5368 0030                  		subq.w	#1,$30(a0)
000184AE 6600                       		bne.s	loc_1A216
000184B0 4A28 0022                  		tst.b	$22(a0)
000184B4 6A00                       		bpl.s	loc_1A210
000184B6 317C 0060 0012             		move.w	#$60,$12(a0)
000184BC 6000                       		bra.s	loc_1A216
000184BE                            ; ===========================================================================
000184BE                            
000184BE                            loc_1A210:
000184BE 117C 000F 0020             		move.b	#$F,$20(a0)
000184C4                            
000184C4                            loc_1A216:
000184C4 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
000184CA 6D00                       		blt.s	loc_1A23A
000184CC 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
000184D2 31FC 0000 F602             		move.w	#0,($FFFFF602).w
000184D8 4278 D014                  		clr.w	($FFFFD014).w
000184DC 4A68 0012                  		tst.w	$12(a0)
000184E0 6A00                       		bpl.s	loc_1A248
000184E2 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
000184E8                            
000184E8                            loc_1A23A:
000184E8 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
000184EE 6D00                       		blt.s	loc_1A248
000184F0 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
000184F6                            
000184F6                            loc_1A248:
000184F6 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
000184FC 6500                       		bcs.s	loc_1A260
000184FE 4A28 0001                  		tst.b	1(a0)
00018502 6B00                       		bmi.s	loc_1A260
00018504 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001850A 6000 FAF4                  		bra.w	Obj85_Delete
0001850E                            ; ===========================================================================
0001850E                            
0001850E                            loc_1A260:
0001850E 6000 FEFA                  		bra.w	loc_1A15C
00018512                            ; ===========================================================================
00018512                            
00018512                            loc_1A264:				; XREF: Obj85_Index
00018512 2268 0034                  		movea.l	$34(a0),a1
00018516 1011                       		move.b	(a1),d0
00018518 B010                       		cmp.b	(a0),d0
0001851A 6600 FAE4                  		bne.w	Obj85_Delete
0001851E 117C 0007 001C             		move.b	#7,$1C(a0)
00018524 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001852A 6C00                       		bge.s	loc_1A280
0001852C 6000                       		bra.s	loc_1A2A6
0001852E                            ; ===========================================================================
0001852E                            
0001852E                            loc_1A280:
0001852E 4A69 0010                  		tst.w	$10(a1)
00018532 6700                       		beq.s	loc_1A28C
00018534 117C 000B 001C             		move.b	#$B,$1C(a0)
0001853A                            
0001853A                            loc_1A28C:
0001853A 43FA DA3C                  		lea	Ani_Eggman(pc),a1
0001853E 4EB9 0000 87C0             		jsr	AnimateSprite
00018544                            
00018544                            loc_1A296:
00018544 2268 0034                  		movea.l	$34(a0),a1
00018548 3169 0008 0008             		move.w	8(a1),8(a0)
0001854E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018554                            
00018554                            loc_1A2A6:
00018554 2268 0034                  		movea.l	$34(a0),a1
00018558 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001855E 7003                       		moveq	#3,d0
00018564 0228 00FC 0001             		andi.b	#-4,1(a0)
0001856E 4EF9 0000 B69A             		jmp	DisplaySprite
00018574                            ; ===========================================================================
00018574                            
00018574                            loc_1A2C6:				; XREF: Obj85_Index
00018574 2268 0034                  		movea.l	$34(a0),a1
00018578 1011                       		move.b	(a1),d0
0001857A B010                       		cmp.b	(a0),d0
0001857C 6600 FA82                  		bne.w	Obj85_Delete
00018580 0CA9 0001 5FC8 0004        		cmpi.l	#Map_Eggman,4(a1)
00018588 6700                       		beq.s	loc_1A2E4
0001858A 117C 000A 001A             		move.b	#$A,$1A(a0)
00018590 60C2                       		bra.s	loc_1A2A6
00018592                            ; ===========================================================================
00018592                            
00018592                            loc_1A2E4:
00018592 117C 0001 001C             		move.b	#1,$1C(a0)
00018598 4A29 0021                  		tst.b	$21(a1)
0001859C 6F00                       		ble.s	loc_1A312
0001859E 117C 0006 001C             		move.b	#6,$1C(a0)
000185A4 217C 0001 5FC8 0004        		move.l	#Map_Eggman,4(a0)
000185AC 317C 0400 0002             		move.w	#$400,2(a0)
000185B2 43FA D9C4                  		lea	Ani_Eggman(pc),a1
000185B6 4EB9 0000 87C0             		jsr	AnimateSprite
000185BC 6000 FF86                  		bra.w	loc_1A296
000185C0                            ; ===========================================================================
000185C0                            
000185C0                            loc_1A312:
000185C0 4A28 0001                  		tst.b	1(a0)
000185C4 6A00 FA3A                  		bpl.w	Obj85_Delete
000185C8 6100 D55C                  		bsr.w	BossDefeated
000185CC 117C 0002 0018             		move.b	#2,$18(a0)
000185D2 117C 0000 001C             		move.b	#0,$1C(a0)
000185D8 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
000185E0 317C 03A0 0002             		move.w	#$3A0,2(a0)
000185E6 43FA 0000                  		lea	Ani_obj85(pc),a1
000185EA 4EB9 0000 87C0             		jsr	AnimateSprite
000185F0 6000 FF52                  		bra.w	loc_1A296
000185F4                            ; ===========================================================================
000185F4                            
000185F4                            loc_1A346:				; XREF: Obj85_Index
000185F4 08E8 0000 0022             		bset	#0,$22(a0)
000185FA 2268 0034                  		movea.l	$34(a0),a1
000185FE 0CA9 0001 5FC8 0004        		cmpi.l	#Map_Eggman,4(a1)
00018606 6700                       		beq.s	loc_1A35E
00018608 6000 FF4A                  		bra.w	loc_1A2A6
0001860C                            ; ===========================================================================
0001860C                            
0001860C                            loc_1A35E:
0001860C 3169 0008 0008             		move.w	8(a1),8(a0)
00018612 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018618 4A28 001E                  		tst.b	$1E(a0)
0001861C 6600                       		bne.s	loc_1A376
0001861E 117C 0014 001E             		move.b	#$14,$1E(a0)
00018624                            
00018624                            loc_1A376:
00018624 5328 001E                  		subq.b	#1,$1E(a0)
00018628 6E00                       		bgt.s	loc_1A38A
0001862A 5228 001A                  		addq.b	#1,$1A(a0)
0001862E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00018634 6E00 F9CA                  		bgt.w	Obj85_Delete
00018638                            
00018638                            loc_1A38A:
00018638 6000 FF0A                  		bra.w	loc_1A296
0001863C                            ; ===========================================================================
0001863C                            
0001863C                            loc_1A38E:				; XREF: Obj85_Index
0001863C 117C 000B 001A             		move.b	#$B,$1A(a0)
00018642 3038 D008                  		move.w	($FFFFD008).w,d0
0001864A 6500                       		bcs.s	loc_1A3A6
0001864C 4A28 0001                  		tst.b	1(a0)
00018650 6A00 F9AE                  		bpl.w	Obj85_Delete
00018654                            
00018654                            loc_1A3A6:
00018654 4EF9 0000 B69A             		jmp	DisplaySprite
0001865A                            ; ===========================================================================
0001865A                            
0001865A                            loc_1A3AC:				; XREF: Obj85_Index
0001865A 117C 0000 001A             		move.b	#0,$1A(a0)
00018660 08E8 0000 0022             		bset	#0,$22(a0)
00018666 2268 0034                  		movea.l	$34(a0),a1
0001866A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
00018670 6600                       		bne.s	loc_1A3D0
00018672 0CA9 0001 5FC8 0004        		cmpi.l	#Map_Eggman,4(a1)
0001867A 6700 F984                  		beq.w	Obj85_Delete
0001867E                            
0001867E                            loc_1A3D0:
0001867E 6000 FED4                  		bra.w	loc_1A2A6
00018682                            ; ===========================================================================
00018682                            Ani_obj85:
00018682                            	include "_anim\obj85.asm"
00018682                            ; ---------------------------------------------------------------------------
00018682                            ; Animation script - Eggman (FZ)
00018682                            ; ---------------------------------------------------------------------------
00018682 0000                       		dc.w byte_1A3D6-Ani_obj85
00018684 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
00018688                            		even
00018688                            		even
00018688                            
00018688                            Map_Eggman2:
00018688                            	include "_maps\Eggman2.asm"
00018688                            ; ---------------------------------------------------------------------------
00018688                            ; Sprite mappings - Eggman (FZ)
00018688                            ; ---------------------------------------------------------------------------
00018688 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001868A 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001868C 06                         byte_1A3DE:	dc.b 6
0001868D E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
00018692 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
00018697 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001869C FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
000186A1 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
000186A6 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
000186AB 06                         byte_1A3FD:	dc.b 6
000186AC E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
000186B1 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
000186B6 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
000186BB FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
000186C0 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
000186C5 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
000186CA                            		even
000186CA                            		even
000186CA                            
000186CA                            Map_FZBoss:
000186CA                            	include "_maps\FZ boss.asm"
000186CA                            ; ---------------------------------------------------------------------------
000186CA                            ; Sprite mappings - boss (FZ)
000186CA                            ; ---------------------------------------------------------------------------
000186CA 0000                       		dc.w byte_1A422-Map_FZBoss
000186CC 0000                       		dc.w byte_1A42D-Map_FZBoss
000186CE 0000                       		dc.w byte_1A43D-Map_FZBoss
000186D0 02                         byte_1A422:	dc.b 2
000186D1 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
000186D6 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
000186DB 03                         byte_1A42D:	dc.b 3
000186DC 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
000186E1 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
000186E6 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
000186EB 02                         byte_1A43D:	dc.b 2
000186EC 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
000186F1 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
000186F6                            		even
000186F6                            		even
000186F6                            
000186F6                            ; ===========================================================================
000186F6                            
000186F6                            Obj84_Delete:
000186F6 4EF9 0000 B6D6             		jmp	DeleteObject
000186FC                            ; ===========================================================================
000186FC                            ; ---------------------------------------------------------------------------
000186FC                            ; Object 84 - cylinder Eggman	hides in (FZ)
000186FC                            ; ---------------------------------------------------------------------------
000186FC                            
000186FC                            Obj84:					; XREF: Obj_Index
000186FC 7000                       		moveq	#0,d0
000186FE 1028 0024                  		move.b	$24(a0),d0
00018702 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
00018706 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001870A                            ; ===========================================================================
0001870A 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001870C 0000                       		dc.w loc_1A4CE-Obj84_Index
0001870E 0000                       		dc.w loc_1A57E-Obj84_Index
00018710                            
00018710 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
00018714 2550 0620                  		dc.w $2550, $620
00018718 2490 04C0                  		dc.w $2490, $4C0
0001871C 2510 04C0                  		dc.w $2510, $4C0
00018720                            ; ===========================================================================
00018720                            
00018720                            Obj84_Main:				; XREF: Obj84_Index
00018720 43FA FFEE                  		lea	Obj84_PosData(pc),a1
00018724 7000                       		moveq	#0,d0
00018726 1028 0028                  		move.b	$28(a0),d0
0001872C D2C0                       		adda.w	d0,a1
0001872E 117C 0004 0001             		move.b	#4,1(a0)
00018734 08E8 0007 0001             		bset	#7,1(a0)
0001873A 08E8 0004 0001             		bset	#4,1(a0)
00018740 317C 0300 0002             		move.w	#$300,2(a0)
00018746 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001874E 3159 0008                  		move.w	(a1)+,8(a0)
00018752 3151 000C                  		move.w	(a1),$C(a0)
00018756 3159 0038                  		move.w	(a1)+,$38(a0)
0001875A 117C 0020 0016             		move.b	#$20,$16(a0)
00018760 117C 0060 0017             		move.b	#$60,$17(a0)
00018766 117C 0020 0019             		move.b	#$20,$19(a0)
0001876C 117C 0060 0016             		move.b	#$60,$16(a0)
00018772 117C 0003 0018             		move.b	#3,$18(a0)
00018778 5428 0024                  		addq.b	#2,$24(a0)
0001877C                            
0001877C                            loc_1A4CE:				; XREF: Obj84_Index
0001877C 0C28 0002 0028             		cmpi.b	#2,$28(a0)
00018782 6F00                       		ble.s	loc_1A4DC
00018784 08E8 0001 0001             		bset	#1,1(a0)
0001878A                            
0001878A                            loc_1A4DC:
0001878A 42A8 003C                  		clr.l	$3C(a0)
0001878E 4A28 0029                  		tst.b	$29(a0)
00018792 6700                       		beq.s	loc_1A4EA
00018794 5428 0024                  		addq.b	#2,$24(a0)
00018798                            
00018798                            loc_1A4EA:
00018798 2028 003C                  		move.l	$3C(a0),d0
0001879C 2228 0038                  		move.l	$38(a0),d1
000187A2 4841                       		swap	d1
000187A4 3141 000C                  		move.w	d1,$C(a0)
000187A8 0C28 0004 0024             		cmpi.b	#4,$24(a0)
000187AE 6600                       		bne.s	loc_1A524
000187B0 4A68 0030                  		tst.w	$30(a0)
000187B4 6A00                       		bpl.s	loc_1A524
000187B6 70F6                       		moveq	#-$A,d0
000187B8 0C28 0002 0028             		cmpi.b	#2,$28(a0)
000187BE 6F00                       		ble.s	loc_1A514
000187C0 700E                       		moveq	#$E,d0
000187C2                            
000187C2                            loc_1A514:
000187C4 2268 0034                  		movea.l	$34(a0),a1
000187C8 3341 000C                  		move.w	d1,$C(a1)
000187CC 3368 0008 0008             		move.w	8(a0),8(a1)
000187D2                            
000187D2                            loc_1A524:
000187D2 323C 002B                  		move.w	#$2B,d1
000187D6 343C 0060                  		move.w	#$60,d2
000187DA 363C 0061                  		move.w	#$61,d3
000187DE 3828 0008                  		move.w	8(a0),d4
000187E2 4EB9 0000 DA5A             		jsr	SolidObject
000187E8 7000                       		moveq	#0,d0
000187EA 3228 003C                  		move.w	$3C(a0),d1
000187EE 6A00                       		bpl.s	loc_1A550
000187F0 4441                       		neg.w	d1
000187F2 5141                       		subq.w	#8,d1
000187F4 6500                       		bcs.s	loc_1A55C
000187F6 5200                       		addq.b	#1,d0
000187F8 E841                       		asr.w	#4,d1
000187FC 6000                       		bra.s	loc_1A55C
000187FE                            ; ===========================================================================
000187FE                            
000187FE                            loc_1A550:
000187FE 0441 0027                  		subi.w	#$27,d1
00018802 6500                       		bcs.s	loc_1A55C
00018804 5200                       		addq.b	#1,d0
00018806 E841                       		asr.w	#4,d1
0001880A                            
0001880A                            loc_1A55C:
0001880A 1140 001A                  		move.b	d0,$1A(a0)
0001880E 3038 D008                  		move.w	($FFFFD008).w,d0
00018816 6B00                       		bmi.s	loc_1A578
00018818 0440 0140                  		subi.w	#$140,d0
0001881C 6B00                       		bmi.s	loc_1A578
0001881E 4A28 0001                  		tst.b	1(a0)
00018822 6A00 FED2                  		bpl.w	Obj84_Delete
00018826                            
00018826                            loc_1A578:
00018826 4EF9 0000 B69A             		jmp	DisplaySprite
0001882C                            ; ===========================================================================
0001882C                            
0001882C                            loc_1A57E:				; XREF: Obj84_Index
0001882C 7000                       		moveq	#0,d0
0001882E 1028 0028                  		move.b	$28(a0),d0
00018832 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
00018836 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001883A 6000 FF5C                  		bra.w	loc_1A4EA
0001883E                            ; ===========================================================================
0001883E 0000                       off_1A590:	dc.w loc_1A598-off_1A590
00018840 0000                       		dc.w loc_1A598-off_1A590
00018842 0000                       		dc.w loc_1A604-off_1A590
00018844 0000                       		dc.w loc_1A604-off_1A590
00018846                            ; ===========================================================================
00018846                            
00018846                            loc_1A598:				; XREF: off_1A590
00018846 4A28 0029                  		tst.b	$29(a0)
0001884A 6600                       		bne.s	loc_1A5D4
0001884C 2268 0034                  		movea.l	$34(a0),a1
00018850 4A29 0021                  		tst.b	$21(a1)
00018854 6600                       		bne.s	loc_1A5B4
00018856 6100 D2CE                  		bsr.w	BossDefeated
0001885A 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
00018862                            
00018862                            loc_1A5B4:
00018862 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001886A 6400                       		bcc.s	locret_1A602
0001886C 42A8 003C                  		clr.l	$3C(a0)
00018870 2268 0034                  		movea.l	$34(a0),a1
00018874 5369 0032                  		subq.w	#1,$32(a1)
00018878 4269 0030                  		clr.w	$30(a1)
0001887C 5528 0024                  		subq.b	#2,$24(a0)
00018880 4E75                       		rts	
00018882                            ; ===========================================================================
00018882                            
00018882                            loc_1A5D4:
00018882 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
00018888 6C00                       		bge.s	loc_1A5E4
0001888A 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
00018892                            
00018892                            loc_1A5E4:
00018892 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001889A 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
000188A0 6E00                       		bgt.s	locret_1A602
000188A2 4268 003E                  		clr.w	$3E(a0)
000188A6 317C FF60 003C             		move.w	#-$A0,$3C(a0)
000188AC 4228 0029                  		clr.b	$29(a0)
000188B0                            
000188B0                            locret_1A602:
000188B0 4E75                       		rts	
000188B2                            ; ===========================================================================
000188B2                            
000188B2                            loc_1A604:				; XREF: off_1A590
000188B2 08E8 0001 0001             		bset	#1,1(a0)
000188B8 4A28 0029                  		tst.b	$29(a0)
000188BC 6600                       		bne.s	loc_1A646
000188BE 2268 0034                  		movea.l	$34(a0),a1
000188C2 4A29 0021                  		tst.b	$21(a1)
000188C6 6600                       		bne.s	loc_1A626
000188C8 6100 D25C                  		bsr.w	BossDefeated
000188CC 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
000188D4                            
000188D4                            loc_1A626:
000188D4 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
000188DC 6400                       		bcc.s	locret_1A674
000188DE 42A8 003C                  		clr.l	$3C(a0)
000188E2 2268 0034                  		movea.l	$34(a0),a1
000188E6 5369 0032                  		subq.w	#1,$32(a1)
000188EA 4269 0030                  		clr.w	$30(a1)
000188EE 5528 0024                  		subq.b	#2,$24(a0)
000188F2 4E75                       		rts	
000188F4                            ; ===========================================================================
000188F4                            
000188F4                            loc_1A646:
000188F4 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
000188FA 6D00                       		blt.s	loc_1A656
000188FC 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
00018904                            
00018904                            loc_1A656:
00018904 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001890C 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
00018912 6D00                       		blt.s	locret_1A674
00018914 4268 003E                  		clr.w	$3E(a0)
00018918 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001891E 4228 0029                  		clr.b	$29(a0)
00018922                            
00018922                            locret_1A674:
00018922 4E75                       		rts	
00018924                            ; ===========================================================================
00018924                            ; ---------------------------------------------------------------------------
00018924                            ; Sprite mappings - cylinders Eggman hides in (FZ)
00018924                            ; ---------------------------------------------------------------------------
00018924                            Map_obj84:
00018924                            	include "_maps\obj84.asm"
00018924                            ; ---------------------------------------------------------------------------
00018924                            ; Sprite mappings - cylinders Eggman hides in (FZ)
00018924                            ; ---------------------------------------------------------------------------
00018924 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
00018928 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001892C 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
00018930 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
00018934 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
00018938 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001893C 06                         byte_1A68E:	dc.b 6
0001893D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
00018942 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
00018947 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001894C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
00018951 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
00018956 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001895B 08                         byte_1A6AD:	dc.b 8
0001895C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
00018961 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
00018966 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001896B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
00018970 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
00018975 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001897A D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001897F D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
00018984 0A                         byte_1A6D6:	dc.b $A
00018985 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001898A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001898F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
00018994 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
00018999 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001899E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
000189A3 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
000189A8 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
000189AD F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
000189B2 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
000189B7 0C                         byte_1A709:	dc.b $C
000189B8 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
000189BD A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
000189C2 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
000189C7 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
000189CC B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
000189D1 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
000189D6 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
000189DB D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
000189E0 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
000189E5 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
000189EA 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
000189EF 180F 4840 00               		dc.b $18, $F, $48, $40,	0
000189F4 0D                         byte_1A746:	dc.b $D
000189F5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
000189FA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
000189FF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
00018A04 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
00018A09 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
00018A0E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
00018A13 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
00018A18 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
00018A1D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
00018A22 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
00018A27 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
00018A2C 180F 4840 00               		dc.b $18, $F, $48, $40,	0
00018A31 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
00018A36 0E                         byte_1A788:	dc.b $E
00018A37 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
00018A3C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
00018A41 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
00018A46 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
00018A4B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
00018A50 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
00018A55 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
00018A5A D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
00018A5F F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
00018A64 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
00018A69 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
00018A6E 180F 4840 00               		dc.b $18, $F, $48, $40,	0
00018A73 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
00018A78 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
00018A7D 02                         byte_1A7CF:	dc.b 2
00018A7E F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
00018A83 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
00018A88                            		even
00018A88                            		even
00018A88                            
00018A88                            ; ===========================================================================
00018A88                            ; ---------------------------------------------------------------------------
00018A88                            ; Object 86 - energy balls (FZ)
00018A88                            ; ---------------------------------------------------------------------------
00018A88                            
00018A88                            Obj86:					; XREF: Obj_Index
00018A88 7000                       		moveq	#0,d0
00018A8A 1028 0024                  		move.b	$24(a0),d0
00018A8E 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
00018A92 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
00018A96                            ; ===========================================================================
00018A96 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
00018A98 0000                       		dc.w Obj86_Generator-Obj86_Index
00018A9A 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
00018A9C 0000                       		dc.w loc_1A962-Obj86_Index
00018A9E 0000                       		dc.w loc_1A982-Obj86_Index
00018AA0                            ; ===========================================================================
00018AA0                            
00018AA0                            Obj86_Main:				; XREF: Obj86_Index
00018AA0 317C 2588 0008             		move.w	#$2588,8(a0)
00018AA6 317C 053C 000C             		move.w	#$53C,$C(a0)
00018AAC 317C 0300 0002             		move.w	#$300,2(a0)
00018AB2 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
00018ABA 117C 0000 001C             		move.b	#0,$1C(a0)
00018AC0 117C 0003 0018             		move.b	#3,$18(a0)
00018AC6 117C 0008 0017             		move.b	#8,$17(a0)
00018ACC 117C 0008 0016             		move.b	#8,$16(a0)
00018AD2 117C 0004 0001             		move.b	#4,1(a0)
00018AD8 08E8 0007 0001             		bset	#7,1(a0)
00018ADE 5428 0024                  		addq.b	#2,$24(a0)
00018AE2                            
00018AE2                            Obj86_Generator:			; XREF: Obj86_Index
00018AE2 2268 0034                  		movea.l	$34(a0),a1
00018AE6 0C29 0006 0034             		cmpi.b	#6,$34(a1)
00018AEC 6600                       		bne.s	loc_1A850
00018AEE 10BC 003F                  		move.b	#$3F,(a0)
00018AF2 117C 0000 0024             		move.b	#0,$24(a0)
00018AF8 4EF9 0000 B69A             		jmp	DisplaySprite
00018AFE                            ; ===========================================================================
00018AFE                            
00018AFE                            loc_1A850:
00018AFE 117C 0000 001C             		move.b	#0,$1C(a0)
00018B04 4A28 0029                  		tst.b	$29(a0)
00018B08 6700                       		beq.s	loc_1A86C
00018B0A 5428 0024                  		addq.b	#2,$24(a0)
00018B0E 117C 0001 001C             		move.b	#1,$1C(a0)
00018B14 117C 003E 0028             		move.b	#$3E,$28(a0)
00018B1A                            
00018B1A                            loc_1A86C:
00018B1A 323C 0013                  		move.w	#$13,d1
00018B1E 343C 0008                  		move.w	#8,d2
00018B22 363C 0011                  		move.w	#$11,d3
00018B26 3828 0008                  		move.w	8(a0),d4
00018B2A 4EB9 0000 DA5A             		jsr	SolidObject
00018B30 3038 D008                  		move.w	($FFFFD008).w,d0
00018B38 6B00                       		bmi.s	loc_1A89A
00018B3A 0440 0140                  		subi.w	#$140,d0
00018B3E 6B00                       		bmi.s	loc_1A89A
00018B40 4A28 0001                  		tst.b	1(a0)
00018B44 6A00 FBB0                  		bpl.w	Obj84_Delete
00018B48                            
00018B48                            loc_1A89A:
00018B48 43FA 0000                  		lea	Ani_obj86(pc),a1
00018B4C 4EB9 0000 87C0             		jsr	AnimateSprite
00018B52 4EF9 0000 B69A             		jmp	DisplaySprite
00018B58                            ; ===========================================================================
00018B58                            
00018B58                            Obj86_MakeBalls:			; XREF: Obj86_Index
00018B58 4A28 0029                  		tst.b	$29(a0)
00018B5C 6700 0000                  		beq.w	loc_1A954
00018B60 4228 0029                  		clr.b	$29(a0)
00018B68 0240 001E                  		andi.w	#$1E,d0
00018B6C D4C0                       		adda.w	d0,a2
00018B6E 5868 0030                  		addq.w	#4,$30(a0)
00018B72 4268 0032                  		clr.w	$32(a0)
00018B76 7403                       		moveq	#3,d2
00018B78                            
00018B78                            Obj86_Loop:
00018B78 4EB9 0000 BB36             		jsr	SingleObjLoad2
00018B7E 6600 0000                  		bne.w	loc_1A954
00018B82 12BC 0086                  		move.b	#$86,(a1)
00018B86 3368 0008 0008             		move.w	8(a0),8(a1)
00018B8C 337C 053C 000C             		move.w	#$53C,$C(a1)
00018B92 137C 0008 0024             		move.b	#8,$24(a1)
00018B98 337C 2300 0002             		move.w	#$2300,2(a1)
00018B9E 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
00018BA6 137C 000C 0016             		move.b	#$C,$16(a1)
00018BAC 137C 000C 0017             		move.b	#$C,$17(a1)
00018BB2 137C 0000 0020             		move.b	#0,$20(a1)
00018BB8 137C 0003 0018             		move.b	#3,$18(a1)
00018BBE 337C 003E 0028             		move.w	#$3E,$28(a1)
00018BC4 137C 0004 0001             		move.b	#4,1(a1)
00018BCA 08E9 0007 0001             		bset	#7,1(a1)
00018BD0 2348 0034                  		move.l	a0,$34(a1)
00018BD4 4EB9 0000 2530             		jsr	(RandomNumber).l
00018BDA 3228 0032                  		move.w	$32(a0),d1
00018BDE C3FC FFB1                  		muls.w	#-$4F,d1
00018BE2 0641 2578                  		addi.w	#$2578,d1
00018BE6 0240 001F                  		andi.w	#$1F,d0
00018BEA 0440 0010                  		subi.w	#$10,d0
00018BF0 3340 0030                  		move.w	d0,$30(a1)
00018BF4 5268 0032                  		addq.w	#1,$32(a0)
00018BF8 3168 0032 0038             		move.w	$32(a0),$38(a0)
00018BFE 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
00018C02                            
00018C02                            loc_1A954:
00018C02 4A68 0032                  		tst.w	$32(a0)
00018C06 6600                       		bne.s	loc_1A95E
00018C08 5428 0024                  		addq.b	#2,$24(a0)
00018C0C                            
00018C0C                            loc_1A95E:
00018C0C 6000 FF0C                  		bra.w	loc_1A86C
00018C10                            ; ===========================================================================
00018C10                            
00018C10                            loc_1A962:				; XREF: Obj86_Index
00018C10 117C 0002 001C             		move.b	#2,$1C(a0)
00018C16 4A68 0038                  		tst.w	$38(a0)
00018C1A 6600                       		bne.s	loc_1A97E
00018C1C 117C 0002 0024             		move.b	#2,$24(a0)
00018C22 2268 0034                  		movea.l	$34(a0),a1
00018C26 337C FFFF 0032             		move.w	#-1,$32(a1)
00018C2C                            
00018C2C                            loc_1A97E:
00018C2C 6000 FEEC                  		bra.w	loc_1A86C
00018C30                            ; ===========================================================================
00018C30                            
00018C30                            loc_1A982:				; XREF: Obj86_Index
00018C30 7000                       		moveq	#0,d0
00018C32 1028 0025                  		move.b	$25(a0),d0
00018C36 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
00018C3A 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
00018C3E 43FA 0000                  		lea	Ani_obj86a(pc),a1
00018C42 4EB9 0000 87C0             		jsr	AnimateSprite
00018C48 4EF9 0000 B69A             		jmp	DisplaySprite
00018C4E                            ; ===========================================================================
00018C4E 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
00018C50 0000                       		dc.w loc_1A9C0-Obj86_Index2
00018C52 0000                       		dc.w loc_1AA1E-Obj86_Index2
00018C54                            ; ===========================================================================
00018C54                            
00018C54                            loc_1A9A6:				; XREF: Obj86_Index2
00018C54 3028 0030                  		move.w	$30(a0),d0
00018C5C E940                       		asl.w	#4,d0
00018C5E 3140 0010                  		move.w	d0,$10(a0)
00018C62 317C 00B4 0028             		move.w	#$B4,$28(a0)
00018C68 5428 0025                  		addq.b	#2,$25(a0)
00018C6C 4E75                       		rts	
00018C6E                            ; ===========================================================================
00018C6E                            
00018C6E                            loc_1A9C0:				; XREF: Obj86_Index2
00018C6E 4A68 0010                  		tst.w	$10(a0)
00018C72 6700                       		beq.s	loc_1A9E6
00018C74 4EB9 0000 B674             		jsr	SpeedToPos
00018C7A 3028 0008                  		move.w	8(a0),d0
00018C82 6400                       		bcc.s	loc_1A9E6
00018C84 4268 0010                  		clr.w	$10(a0)
00018C8C 2268 0034                  		movea.l	$34(a0),a1
00018C90 5369 0032                  		subq.w	#1,$32(a1)
00018C94                            
00018C94                            loc_1A9E6:
00018C94 117C 0000 001C             		move.b	#0,$1C(a0)
00018C9A 5368 0028                  		subq.w	#1,$28(a0)
00018C9E 6600                       		bne.s	locret_1AA1C
00018CA0 5428 0025                  		addq.b	#2,$25(a0)
00018CA4 117C 0001 001C             		move.b	#1,$1C(a0)
00018CAA 117C 009A 0020             		move.b	#$9A,$20(a0)
00018CB0 317C 00B4 0028             		move.w	#$B4,$28(a0)
00018CB6 7000                       		moveq	#0,d0
00018CB8 3038 D008                  		move.w	($FFFFD008).w,d0
00018CC0 3140 0010                  		move.w	d0,$10(a0)
00018CC4 317C 0140 0012             		move.w	#$140,$12(a0)
00018CCA                            
00018CCA                            locret_1AA1C:
00018CCA 4E75                       		rts	
00018CCC                            ; ===========================================================================
00018CCC                            
00018CCC                            loc_1AA1E:				; XREF: Obj86_Index2
00018CCC 4EB9 0000 B674             		jsr	SpeedToPos
00018CD2 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
00018CD8 6400                       		bcc.s	loc_1AA34
00018CDA 5368 0028                  		subq.w	#1,$28(a0)
00018CDE 6700                       		beq.s	loc_1AA34
00018CE0 4E75                       		rts	
00018CE2                            ; ===========================================================================
00018CE2                            
00018CE2                            loc_1AA34:
00018CE2 2268 0034                  		movea.l	$34(a0),a1
00018CE6 5369 0038                  		subq.w	#1,$38(a1)
00018CEA 6000 FA0A                  		bra.w	Obj84_Delete
00018CEE                            ; ===========================================================================
00018CEE                            Ani_obj86:
00018CEE                            	include "_anim\obj86.asm"
00018CEE                            ; ---------------------------------------------------------------------------
00018CEE                            ; Animation script - energy ball launcher (FZ)
00018CEE                            ; ---------------------------------------------------------------------------
00018CEE 0000                       		dc.w byte_1AA46-Ani_obj86
00018CF0 0000                       		dc.w byte_1AA4A-Ani_obj86
00018CF2 0000                       		dc.w byte_1AA50-Ani_obj86
00018CF4 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
00018CF8 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
00018CFE 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
00018D04                            		even
00018D04                            		even
00018D04                            
00018D04                            ; ---------------------------------------------------------------------------
00018D04                            ; Sprite mappings - energy ball	launcher (FZ)
00018D04                            ; ---------------------------------------------------------------------------
00018D04                            Map_obj86:
00018D04                            	include "_maps\obj86.asm"
00018D04                            ; ---------------------------------------------------------------------------
00018D04                            ; Sprite mappings - energy ball	launcher (FZ)
00018D04                            ; ---------------------------------------------------------------------------
00018D04 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
00018D08 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
00018D0C 01                         byte_1AA5E:	dc.b 1
00018D0D F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
00018D12 01                         byte_1AA64:	dc.b 1
00018D13 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
00018D18 01                         byte_1AA6A:	dc.b 1
00018D19 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
00018D1E 01                         byte_1AA70:	dc.b 1
00018D1F F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
00018D24                            		even
00018D24                            		even
00018D24                            
00018D24                            Ani_obj86a:
00018D24                            	include "_anim\obj86a.asm"
00018D24                            ; ---------------------------------------------------------------------------
00018D24                            ; Animation script - energy balls (FZ)
00018D24                            ; ---------------------------------------------------------------------------
00018D24 0000                       		dc.w byte_1AA7A-Ani_obj86a
00018D26 0000                       		dc.w byte_1AA9C-Ani_obj86a
00018D28 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
00018D37 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
00018D46 0A05 FF00                  		dc.b $A, 5, $FF, 0
00018D4A 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
00018D54                            		even
00018D54                            		even
00018D54                            
00018D54                            ; ---------------------------------------------------------------------------
00018D54                            ; Sprite mappings - energy balls (FZ)
00018D54                            ; ---------------------------------------------------------------------------
00018D54                            Map_obj86a:
00018D54                            	include "_maps\obj86a.asm"
00018D54                            ; ---------------------------------------------------------------------------
00018D54                            ; Sprite mappings - energy balls (FZ)
00018D54                            ; ---------------------------------------------------------------------------
00018D54 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
00018D58 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
00018D5C 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
00018D60 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
00018D64 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
00018D68 0000                       		dc.w byte_1AB20-Map_obj86a
00018D6A 02                         byte_1AABC:	dc.b 2
00018D6B F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
00018D70 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
00018D75 02                         byte_1AAC7:	dc.b 2
00018D76 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
00018D7B F402 1882 04               		dc.b $F4, 2, $18, $82, 4
00018D80 02                         byte_1AAD2:	dc.b 2
00018D81 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
00018D86 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
00018D8B 02                         byte_1AADD:	dc.b 2
00018D8C F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
00018D91 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
00018D96 02                         byte_1AAE8:	dc.b 2
00018D97 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
00018D9C 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
00018DA1 02                         byte_1AAF3:	dc.b 2
00018DA2 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
00018DA7 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
00018DAC 01                         byte_1AAFE:	dc.b 1
00018DAD F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
00018DB2 01                         byte_1AB04:	dc.b 1
00018DB3 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
00018DB8 02                         byte_1AB0A:	dc.b 2
00018DB9 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
00018DBE 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
00018DC3 02                         byte_1AB15:	dc.b 2
00018DC4 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
00018DC9 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
00018DCE 00                         byte_1AB20:	dc.b 0
00018DD0 00                         		even
00018DD0 00                         		even
00018DD0                            
00018DD0                            ; ===========================================================================
00018DD0                            ; ---------------------------------------------------------------------------
00018DD0                            ; Object 3E - prison capsule
00018DD0                            ; ---------------------------------------------------------------------------
00018DD0                            
00018DD0                            Obj3E:					; XREF: Obj_Index
00018DD0 7000                       		moveq	#0,d0
00018DD2 1028 0024                  		move.b	$24(a0),d0
00018DD6 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
00018DDA 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
00018DDE 3028 0008                  		move.w	8(a0),d0
00018DE2 0240 FF80                  		andi.w	#$FF80,d0
00018DE6 3238 F700                  		move.w	($FFFFF700).w,d1
00018DEA 0441 0080                  		subi.w	#$80,d1
00018DEE 0241 FF80                  		andi.w	#$FF80,d1
00018DF4 0C40 0280                  		cmpi.w	#$280,d0
00018DF8 6200                       		bhi.s	Obj3E_Delete
00018DFA 4EF9 0000 B69A             		jmp	DisplaySprite
00018E00                            ; ===========================================================================
00018E00                            
00018E00                            Obj3E_Delete:
00018E00 4EF9 0000 B6D6             		jmp	DeleteObject
00018E06                            ; ===========================================================================
00018E06 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
00018E08 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
00018E0A 0000                       		dc.w Obj3E_Switched-Obj3E_Index
00018E0C 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
00018E0E 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
00018E10 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
00018E12 0000                       		dc.w Obj3E_Animals-Obj3E_Index
00018E14 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
00018E16                            
00018E16 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
00018E1A 040C 0501                  		dc.b 4,	$C, 5, 1
00018E1E 0610 0403                  		dc.b 6,	$10, 4,	3
00018E22 0810 0305                  		dc.b 8,	$10, 3,	5
00018E26                            ; ===========================================================================
00018E26                            
00018E26                            Obj3E_Main:				; XREF: Obj3E_Index
00018E26 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
00018E2E 317C 049D 0002             		move.w	#$49D,2(a0)
00018E34 117C 0004 0001             		move.b	#4,1(a0)
00018E3A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00018E40 7000                       		moveq	#0,d0
00018E42 1028 0028                  		move.b	$28(a0),d0
00018E46 E548                       		lsl.w	#2,d0
00018E48 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
00018E4C 1159 0024                  		move.b	(a1)+,$24(a0)
00018E50 1159 0019                  		move.b	(a1)+,$19(a0)
00018E54 1159 0018                  		move.b	(a1)+,$18(a0)
00018E58 1159 001A                  		move.b	(a1)+,$1A(a0)
00018E5C 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
00018E60 6600                       		bne.s	Obj3E_Not02	; if not, branch
00018E62 117C 0006 0020             		move.b	#6,$20(a0)
00018E68 117C 0008 0021             		move.b	#8,$21(a0)
00018E6E                            
00018E6E                            Obj3E_Not02:
00018E6E 4E75                       		rts	
00018E70                            ; ===========================================================================
00018E70                            
00018E70                            Obj3E_BodyMain:				; XREF: Obj3E_Index
00018E70 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
00018E76 6700                       		beq.s	Obj3E_ChkOpened
00018E78 323C 002B                  		move.w	#$2B,d1
00018E7C 343C 0018                  		move.w	#$18,d2
00018E80 363C 0018                  		move.w	#$18,d3
00018E84 3828 0008                  		move.w	8(a0),d4
00018E88 4EF9 0000 DA5A             		jmp	SolidObject
00018E8E                            ; ===========================================================================
00018E8E                            
00018E8E                            Obj3E_ChkOpened:
00018E8E 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
00018E92 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
00018E94 4228 0025                  		clr.b	$25(a0)
00018E98 08B8 0003 D022             		bclr	#3,($FFFFD022).w
00018E9E 08F8 0001 D022             		bset	#1,($FFFFD022).w
00018EA4                            
00018EA4                            Obj3E_DoOpen:
00018EA4 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
00018EAA 4E75                       		rts	
00018EAC                            ; ===========================================================================
00018EAC                            
00018EAC                            Obj3E_Switched:				; XREF: Obj3E_Index
00018EAC 323C 0017                  		move.w	#$17,d1
00018EB0 343C 0008                  		move.w	#8,d2
00018EB4 363C 0008                  		move.w	#8,d3
00018EB8 3828 0008                  		move.w	8(a0),d4
00018EBC 4EB9 0000 DA5A             		jsr	SolidObject
00018EC2 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
00018EC8 4EB9 0000 87C0             		jsr	AnimateSprite
00018ECE 3168 0030 000C             		move.w	$30(a0),$C(a0)
00018ED4 4A28 0025                  		tst.b	$25(a0)
00018ED8 6700                       		beq.s	locret_1AC60
00018EDA 5068 000C                  		addq.w	#8,$C(a0)
00018EDE 117C 000A 0024             		move.b	#$A,$24(a0)
00018EE4 317C 003C 001E             		move.w	#$3C,$1E(a0)
00018EEA 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00018EEE 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
00018EF2 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00018EF8 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
00018EFE 4228 0025                  		clr.b	$25(a0)
00018F02 08B8 0003 D022             		bclr	#3,($FFFFD022).w
00018F08 08F8 0001 D022             		bset	#1,($FFFFD022).w
00018F0E                            
00018F0E                            locret_1AC60:
00018F0E 4E75                       		rts	
00018F10                            ; ===========================================================================
00018F10                            
00018F10                            Obj3E_Explosion:			; XREF: Obj3E_Index
00018F10 7007                       		moveq	#7,d0
00018F16 6600                       		bne.s	loc_1ACA0
00018F18 4EB9 0000 BB20             		jsr	SingleObjLoad
00018F1E 6600                       		bne.s	loc_1ACA0
00018F20 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00018F24 3368 0008 0008             		move.w	8(a0),8(a1)
00018F2A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018F30 4EB9 0000 2530             		jsr	(RandomNumber).l
00018F36 7200                       		moveq	#0,d1
00018F38 1200                       		move.b	d0,d1
00018F3A E409                       		lsr.b	#2,d1
00018F3C 0441 0020                  		subi.w	#$20,d1
00018F44 E048                       		lsr.w	#8,d0
00018F46 E608                       		lsr.b	#3,d0
00018F4C                            
00018F4C                            loc_1ACA0:
00018F4C 5368 001E                  		subq.w	#1,$1E(a0)
00018F50 6700                       		beq.s	Obj3E_MakeAnimal
00018F52 4E75                       		rts	
00018F54                            ; ===========================================================================
00018F54                            
00018F54                            Obj3E_MakeAnimal:
00018F54 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
00018F5A 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
00018F60 117C 0006 001A             		move.b	#6,$1A(a0)
00018F66 317C 0096 001E             		move.w	#$96,$1E(a0)
00018F6C 0668 0020 000C             		addi.w	#$20,$C(a0)
00018F72 7C07                       		moveq	#7,d6
00018F74 3A3C 009A                  		move.w	#$9A,d5
00018F78 78E4                       		moveq	#-$1C,d4
00018F7A                            
00018F7A                            Obj3E_Loop:
00018F7A 4EB9 0000 BB20             		jsr	SingleObjLoad
00018F80 6600                       		bne.s	locret_1ACF8
00018F82 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00018F86 3368 0008 0008             		move.w	8(a0),8(a1)
00018F8C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018F96 5E44                       		addq.w	#7,d4
00018F98 3345 0036                  		move.w	d5,$36(a1)
00018F9C 5145                       		subq.w	#8,d5
00018F9E 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
00018FA2                            
00018FA2                            locret_1ACF8:
00018FA2 4E75                       		rts	
00018FA4                            ; ===========================================================================
00018FA4                            
00018FA4                            Obj3E_Animals:				; XREF: Obj3E_Index
00018FA4 7007                       		moveq	#7,d0
00018FAA 6600                       		bne.s	loc_1AD38
00018FAC 4EB9 0000 BB20             		jsr	SingleObjLoad
00018FB2 6600                       		bne.s	loc_1AD38
00018FB4 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00018FB8 3368 0008 0008             		move.w	8(a0),8(a1)
00018FBE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018FC4 4EB9 0000 2530             		jsr	(RandomNumber).l
00018FCA 0240 001F                  		andi.w	#$1F,d0
00018FCE 5D40                       		subq.w	#6,d0
00018FD0 4A41                       		tst.w	d1
00018FD2 6A00                       		bpl.s	loc_1AD2E
00018FD4 4440                       		neg.w	d0
00018FD6                            
00018FD6                            loc_1AD2E:
00018FDA 337C 000C 0036             		move.w	#$C,$36(a1)
00018FE0                            
00018FE0                            loc_1AD38:
00018FE0 5368 001E                  		subq.w	#1,$1E(a0)
00018FE4 6600                       		bne.s	locret_1AD48
00018FE6 5428 0024                  		addq.b	#2,$24(a0)
00018FEA 317C 00B4 001E             		move.w	#180,$1E(a0)
00018FF0                            
00018FF0                            locret_1AD48:
00018FF0 4E75                       		rts	
00018FF2                            ; ===========================================================================
00018FF2                            
00018FF2                            Obj3E_EndAct:				; XREF: Obj3E_Index
00018FF2 703E                       		moveq	#$3E,d0
00018FF4 7228                       		moveq	#$28,d1
00018FF6 7440                       		moveq	#$40,d2
00018FF8 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
00018FFC                            
00018FFC                            Obj3E_FindObj28:
00018FFC B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
00018FFE 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
00019000 D2C2                       		adda.w	d2,a1		; next object RAM
00019002 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
00019006                            
00019006 4EB9 0000 CD16             		jsr	GotThroughAct
0001900C 4EF9 0000 B6D6             		jmp	DeleteObject
00019012                            ; ===========================================================================
00019012                            
00019012                            Obj3E_Obj28Found:
00019012 4E75                       		rts	
00019014                            ; ===========================================================================
00019014                            Ani_obj3E:
00019014                            	include "_anim\obj3E.asm"
00019014                            ; ---------------------------------------------------------------------------
00019014                            ; Animation script - prison capsule
00019014                            ; ---------------------------------------------------------------------------
00019014 0000                       		dc.w byte_1AD70-Ani_obj3E
00019016 0000                       		dc.w byte_1AD70-Ani_obj3E
00019018 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001901C                            		even
0001901C                            		even
0001901C                            
0001901C                            ; ---------------------------------------------------------------------------
0001901C                            ; Sprite mappings - prison capsule
0001901C                            ; ---------------------------------------------------------------------------
0001901C                            Map_obj3E:
0001901C                            	include "_maps\obj3E.asm"
0001901C                            ; ---------------------------------------------------------------------------
0001901C                            ; Sprite mappings - prison capsule
0001901C                            ; ---------------------------------------------------------------------------
0001901C 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
00019020 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
00019024 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
00019028 0000                       		dc.w byte_1ADE2-Map_obj3E
0001902A 07                         byte_1AD82:	dc.b 7
0001902B E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
00019030 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
00019035 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001903A F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001903F F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
00019044 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
00019049 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001904E 01                         byte_1ADA6:	dc.b 1
0001904F F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
00019054 06                         byte_1ADAC:	dc.b 6
00019055 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001905A 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001905F 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
00019064 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
00019069 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001906E 100D 2034 00               		dc.b $10, $D, $20, $34,	0
00019073 01                         byte_1ADCB:	dc.b 1
00019074 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
00019079 02                         byte_1ADD1:	dc.b 2
0001907A E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001907F 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
00019084 01                         byte_1ADDC:	dc.b 1
00019085 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001908A 00                         byte_1ADE2:	dc.b 0
0001908C 00                         		even
0001908C 00                         		even
0001908C                            
0001908C                            ; ---------------------------------------------------------------------------
0001908C                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001908C                            ; ---------------------------------------------------------------------------
0001908C                            
0001908C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001908C                            
0001908C                            
0001908C                            TouchResponse:				; XREF: Obj01
0001908E 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
00019092 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
00019096 5142                       		subq.w	#8,d2
00019098 7A00                       		moveq	#0,d5
0001909A 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001909E 5705                       		subq.b	#3,d5
000190A2 0C28 0008 001C             		cmpi.b	#8,$1C(a0)	; is Sonic ducking?
000190A8 6600                       		bne.s	Touch_NoDuck	; if not, branch
000190AA 0643 000C                  		addi.w	#$C,d3
000190AE 7A0A                       		moveq	#$A,d5
000190B0                            
000190B0                            Touch_NoDuck:
000190B0 383C 0010                  		move.w	#$10,d4
000190B6 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
000190BA 3C3C 005F                  		move.w	#$5F,d6
000190BE                            
000190BE                            Touch_Loop:
000190BE 4A29 0001                  		tst.b	1(a1)
000190C2 6A00                       		bpl.s	Touch_NextObj
000190C4 1029 0020                  		move.b	$20(a1),d0	; load touch response number
000190C8 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
000190CA                            
000190CA                            Touch_NextObj:
000190CA 43E9 0040                  		lea	$40(a1),a1	; next object RAM
000190CE 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
000190D2                            
000190D2 7000                       		moveq	#0,d0
000190D4 4E75                       		rts	
000190D6                            ; ===========================================================================
000190D6 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
000190D8 0C14                       		dc.b   $C, $14
000190DA 140C                       		dc.b  $14,  $C
000190DC 0410                       		dc.b	4, $10
000190DE 0C12                       		dc.b   $C, $12
000190E0 1010                       		dc.b  $10, $10
000190E2 0606                       		dc.b	6,   6
000190E4 180C                       		dc.b  $18,  $C
000190E6 0C10                       		dc.b   $C, $10
000190E8 100C                       		dc.b  $10,  $C
000190EA 0808                       		dc.b	8,   8
000190EC 1410                       		dc.b  $14, $10
000190EE 1408                       		dc.b  $14,   8
000190F0 0E0E                       		dc.b   $E,  $E
000190F2 1818                       		dc.b  $18, $18
000190F4 2810                       		dc.b  $28, $10
000190F6 1018                       		dc.b  $10, $18
000190F8 0810                       		dc.b	8, $10
000190FA 2070                       		dc.b  $20, $70
000190FC 4020                       		dc.b  $40, $20
000190FE 8020                       		dc.b  $80, $20
00019100 2020                       		dc.b  $20, $20
00019102 0808                       		dc.b	8,   8
00019104 0404                       		dc.b	4,   4
00019106 2008                       		dc.b  $20,   8
00019108 0C0C                       		dc.b   $C,  $C
0001910A 0804                       		dc.b	8,   4
0001910C 1804                       		dc.b  $18,   4
0001910E 2804                       		dc.b  $28,   4
00019110 0408                       		dc.b	4,   8
00019112 0418                       		dc.b	4, $18
00019114 0428                       		dc.b	4, $28
00019116 0420                       		dc.b	4, $20
00019118 1818                       		dc.b  $18, $18
0001911A 0C18                       		dc.b   $C, $18
0001911C 4808                       		dc.b  $48,   8
0001911E                            ; ===========================================================================
0001911E                            
0001911E                            Touch_Height:				; XREF: TouchResponse
0001911E 0240 003F                  		andi.w	#$3F,d0
00019124 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
00019128 7200                       		moveq	#0,d1
0001912A 121A                       		move.b	(a2)+,d1
0001912C 3029 0008                  		move.w	8(a1),d0
00019134 6400                       		bcc.s	loc_1AE98
0001913A 6500                       		bcs.s	Touch_Width
0001913C 6000 FF8C                  		bra.w	Touch_NextObj
00019140                            ; ===========================================================================
00019140                            
00019140                            loc_1AE98:
00019140 B044                       		cmp.w	d4,d0
00019142 6200 FF86                  		bhi.w	Touch_NextObj
00019146                            
00019146                            Touch_Width:
00019146 7200                       		moveq	#0,d1
00019148 121A                       		move.b	(a2)+,d1
0001914A 3029 000C                  		move.w	$C(a1),d0
00019152 6400                       		bcc.s	loc_1AEB6
00019158 6500                       		bcs.s	Touch_ChkValue
0001915A 6000 FF6E                  		bra.w	Touch_NextObj
0001915E                            ; ===========================================================================
0001915E                            
0001915E                            loc_1AEB6:
0001915E B045                       		cmp.w	d5,d0
00019160 6200 FF68                  		bhi.w	Touch_NextObj
00019164                            
00019164                            Touch_ChkValue:
00019164 1229 0020                  		move.b	$20(a1),d1	; load touch response number
00019168 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001916C 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
00019170 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
00019174 6700 0000                  		beq.w	Touch_Special	; if yes, branch
00019178 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001917A 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001917E                            
0001917E                            ; touch	response is $40-$7F
0001917E                            
0001917E 1029 0020                  		move.b	$20(a1),d0
00019182 0200 003F                  		andi.b	#$3F,d0
00019186 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001918A 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001918C 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
00019192 6400 0000                  		bcc.w	locret_1AEF2
00019196 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001919A                            
0001919A                            locret_1AEF2:
0001919A 4E75                       		rts	
0001919C                            ; ===========================================================================
0001919C                            
0001919C                            Touch_Monitor:
0001919C 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
000191A0 6A00                       		bpl.s	loc_1AF1E	; if not, branch
000191A2 3028 000C                  		move.w	$C(a0),d0
000191A6 0440 0010                  		subi.w	#$10,d0
000191AA B069 000C                  		cmp.w	$C(a1),d0
000191AE 6500                       		bcs.s	locret_1AF2E
000191B0 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
000191B4 337C FE80 0012             		move.w	#-$180,$12(a1)
000191BA 4A29 0025                  		tst.b	$25(a1)
000191BE 6600                       		bne.s	locret_1AF2E
000191C0 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
000191C4 4E75                       		rts	
000191C6                            ; ===========================================================================
000191C6                            
000191C6                            loc_1AF1E:
000191C6 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
000191CC 6600                       		bne.s	locret_1AF2E
000191CE 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
000191D2 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
000191D6                            
000191D6                            locret_1AF2E:
000191D6 4E75                       		rts	
000191D8                            ; ===========================================================================
000191D8                            
000191D8                            Touch_Enemy:				; XREF: Touch_ChkValue
000191D8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
000191DC 6600                       		bne.s	loc_1AF40	; if yes, branch
000191DE 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; is Sonic rolling?
000191E4 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
000191E8                            
000191E8                            loc_1AF40:
000191E8 4A29 0021                  		tst.b	$21(a1)
000191EC 6700                       		beq.s	Touch_KillEnemy
000191EE 4468 0010                  		neg.w	$10(a0)
000191F2 4468 0012                  		neg.w	$12(a0)
000191F6 E0E8 0010                  		asr	$10(a0)
000191FA E0E8 0012                  		asr	$12(a0)
000191FE 137C 0000 0020             		move.b	#0,$20(a1)
00019204 5329 0021                  		subq.b	#1,$21(a1)
00019208 6600                       		bne.s	locret_1AF68
0001920A 08E9 0007 0022             		bset	#7,$22(a1)
00019210                            
00019210                            locret_1AF68:
00019210 4E75                       		rts	
00019212                            ; ===========================================================================
00019212                            
00019212                            Touch_KillEnemy:
00019212 08E9 0007 0022             		bset	#7,$22(a1)
00019218 7000                       		moveq	#0,d0
0001921A 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001921E 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
00019222 0C40 0006                  		cmpi.w	#6,d0
00019226 6500                       		bcs.s	loc_1AF82
00019228 7006                       		moveq	#6,d0
0001922A                            
0001922A                            loc_1AF82:
0001922A 3340 003E                  		move.w	d0,$3E(a1)
0001922E 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
00019232 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
00019238 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001923A 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001923E 337C 000A 003E             		move.w	#$A,$3E(a1)
00019244                            
00019244                            loc_1AF9C:
00019244 6100 0000                  		bsr.w	AddPoints
00019248 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001924C 137C 0000 0024             		move.b	#0,$24(a1)
00019252 4A68 0012                  		tst.w	$12(a0)
00019256 6B00                       		bmi.s	loc_1AFC2
00019258 3028 000C                  		move.w	$C(a0),d0
0001925C B069 000C                  		cmp.w	$C(a1),d0
00019260 6400                       		bcc.s	loc_1AFCA
00019262 4468 0012                  		neg.w	$12(a0)
00019266 4E75                       		rts	
00019268                            ; ===========================================================================
00019268                            
00019268                            loc_1AFC2:
00019268 0668 0100 0012             		addi.w	#$100,$12(a0)
0001926E 4E75                       		rts	
00019270                            ; ===========================================================================
00019270                            
00019270                            loc_1AFCA:
00019270 0468 0100 0012             		subi.w	#$100,$12(a0)
00019276 4E75                       		rts	
00019278                            ; ===========================================================================
00019278 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
00019280                            ; ===========================================================================
00019280                            
00019280                            loc_1AFDA:				; XREF: Touch_CatKiller
00019280 08E9 0007 0022             		bset	#7,$22(a1)
00019286                            
00019286                            Touch_ChkHurt:				; XREF: Touch_ChkValue
00019286 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001928A 6700                       		beq.s	Touch_Hurt	; if not, branch
0001928C                            
0001928C                            loc_1AFE6:				; XREF: Touch_Hurt
0001928C 70FF                       		moveq	#-1,d0
0001928E 4E75                       		rts	
00019290                            ; ===========================================================================
00019290                            
00019290                            Touch_Hurt:				; XREF: Touch_ChkHurt
00019292 4A68 0030                  		tst.w	$30(a0)
00019296 66F4                       		bne.s	loc_1AFE6
00019298 2449                       		movea.l	a1,a2
0001929A                            
0001929A                            ; End of function TouchResponse
0001929A                            ; continue straight to HurtSonic
0001929A                            
0001929A                            ; ---------------------------------------------------------------------------
0001929A                            ; Hurting Sonic	subroutine
0001929A                            ; ---------------------------------------------------------------------------
0001929A                            
0001929A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001929A                            
0001929A                            
0001929A                            HurtSonic:
0001929A 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001929E 6600                       		bne.s	Hurt_Shield	; if yes, branch
000192A0 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
000192A4 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
000192A8 4EB9 0000 BB20             		jsr	SingleObjLoad
000192AE 6600                       		bne.s	Hurt_Shield
000192B0 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
000192B4 3368 0008 0008             		move.w	8(a0),8(a1)
000192BA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000192C0                            
000192C0                            Hurt_Shield:
000192C0 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
000192C6 117C 0004 0024             		move.b	#4,$24(a0)
000192CC 6100 8676                  		bsr.w	Sonic_ResetOnFloor
000192D0 08E8 0001 0022             		bset	#1,$22(a0)
000192D6 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
000192DC 317C FE00 0010             		move.w	#-$200,$10(a0)
000192E2 0828 0006 0022             		btst	#6,$22(a0)
000192E8 6700                       		beq.s	Hurt_Reverse
000192EA 317C FE00 0012             		move.w	#-$200,$12(a0)
000192F0 317C FF00 0010             		move.w	#-$100,$10(a0)
000192F6                            
000192F6                            Hurt_Reverse:
000192F6 3028 0008                  		move.w	8(a0),d0
000192FA B06A 0008                  		cmp.w	8(a2),d0
000192FE 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
00019300 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
00019304                            
00019304                            Hurt_ChkSpikes:
00019304 317C 0000 0014             		move.w	#0,$14(a0)
0001930A 117C 001A 001C             		move.b	#$1A,$1C(a0)
00019310 317C 0078 0030             		move.w	#$78,$30(a0)
00019316 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001931A 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001931E 6600                       		bne.s	Hurt_Sound	; if not, branch
00019320 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
00019324 6600                       		bne.s	Hurt_Sound	; if not, branch
00019326 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001932A                            
0001932A                            Hurt_Sound:
0001932A 4EB9 0000 1020             		jsr	(PlaySound_Special).l
00019330 70FF                       		moveq	#-1,d0
00019332 4E75                       		rts	
00019334                            ; ===========================================================================
00019334                            
00019334                            Hurt_NoRings:
00019334 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
00019338 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001933C                            ; End of function HurtSonic
0001933C                            
0001933C                            ; ---------------------------------------------------------------------------
0001933C                            ; Subroutine to	kill Sonic
0001933C                            ; ---------------------------------------------------------------------------
0001933C                            
0001933C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001933C                            
0001933C                            
0001933C                            KillSonic:
0001933C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
00019340 6600                       		bne.s	Kill_NoDeath	; if yes, branch
00019342 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
00019348 117C 0006 0024             		move.b	#6,$24(a0)
0001934E 6100 85F4                  		bsr.w	Sonic_ResetOnFloor
00019352 08E8 0001 0022             		bset	#1,$22(a0)
00019358 317C F900 0012             		move.w	#-$700,$12(a0)
0001935E 317C 0000 0010             		move.w	#0,$10(a0)
00019364 317C 0000 0014             		move.w	#0,$14(a0)
0001936A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019370 117C 0018 001C             		move.b	#$18,$1C(a0)
00019376 08E8 0007 0002             		bset	#7,2(a0)
0001937C 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
00019380 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
00019384 6600                       		bne.s	Kill_Sound
00019386 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001938A                            
0001938A                            Kill_Sound:
0001938A 4EB9 0000 1020             		jsr	(PlaySound_Special).l
00019390                            
00019390                            Kill_NoDeath:
00019390 70FF                       		moveq	#-1,d0
00019392 4E75                       		rts	
00019394                            ; End of function KillSonic
00019394                            
00019394                            
00019394                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019394                            
00019394                            
00019394                            Touch_Special:				; XREF: Touch_ChkValue
00019394 1229 0020                  		move.b	$20(a1),d1
00019398 0201 003F                  		andi.b	#$3F,d1
0001939C 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
000193A0 6700                       		beq.s	Touch_CatKiller	; if yes, branch
000193A2 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
000193A6 6700                       		beq.s	Touch_Yadrin	; if yes, branch
000193A8 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
000193AC 6700                       		beq.s	Touch_D7orE1	; if yes, branch
000193AE 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
000193B2 6700                       		beq.s	Touch_D7orE1	; if yes, branch
000193B4 4E75                       		rts	
000193B6                            ; ===========================================================================
000193B6                            
000193B6                            Touch_CatKiller:			; XREF: Touch_Special
000193B6 6000 FEC8                  		bra.w	loc_1AFDA
000193BA                            ; ===========================================================================
000193BA                            
000193BA                            Touch_Yadrin:				; XREF: Touch_Special
000193BC 0C45 0008                  		cmpi.w	#8,d5
000193C0 6400                       		bcc.s	loc_1B144
000193C2 3029 0008                  		move.w	8(a1),d0
000193C6 5940                       		subq.w	#4,d0
000193C8 0829 0000 0022             		btst	#0,$22(a1)
000193CE 6700                       		beq.s	loc_1B130
000193D0 0440 0010                  		subi.w	#$10,d0
000193D4                            
000193D4                            loc_1B130:
000193D6 6400                       		bcc.s	loc_1B13C
000193D8 0640 0018                  		addi.w	#$18,d0
000193DC 6500                       		bcs.s	loc_1B140
000193DE 6000                       		bra.s	loc_1B144
000193E0                            ; ===========================================================================
000193E0                            
000193E0                            loc_1B13C:
000193E0 B044                       		cmp.w	d4,d0
000193E2 6200                       		bhi.s	loc_1B144
000193E4                            
000193E4                            loc_1B140:
000193E4 6000 FEA0                  		bra.w	Touch_ChkHurt
000193E8                            ; ===========================================================================
000193E8                            
000193E8                            loc_1B144:
000193E8 6000 FDEE                  		bra.w	Touch_Enemy
000193EC                            ; ===========================================================================
000193EC                            
000193EC                            Touch_D7orE1:				; XREF: Touch_Special
000193EC 5229 0021                  		addq.b	#1,$21(a1)
000193F0 4E75                       		rts	
000193F2                            ; End of function Touch_Special
000193F2                            
000193F2                            ; ---------------------------------------------------------------------------
000193F2                            ; Subroutine to	animate	level graphics
000193F2                            ; ---------------------------------------------------------------------------
000193F2                            
000193F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000193F2                            
000193F2                            
000193F2                            AniArt_Load:				; XREF: Demo_Time; loc_F54
000193F2 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
000193F6 6600                       		bne.s	AniArt_Pause	; if yes, branch
000193F8 4DF9 00C0 0000             		lea	($C00000).l,a6
000193FE 6100 0000                  		bsr.w	AniArt_GiantRing
00019402 7000                       		moveq	#0,d0
00019404 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001940A 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001940E 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
00019412                            ; ===========================================================================
00019412                            
00019412                            AniArt_Pause:
00019412 4E75                       		rts	
00019414                            ; End of function AniArt_Load
00019414                            
00019414                            ; ===========================================================================
00019414 0000 0000                  AniArt_Index:	dc.w AniArt_none-AniArt_Index, AniArt_none-AniArt_Index
00019418 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001941C 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
00019420 0000                       		dc.w AniArt_Ending-AniArt_Index
00019422                            ; ===========================================================================
00019422                            ; ===========================================================================
00019422                            ; ---------------------------------------------------------------------------
00019422                            ; Animated pattern routine - Marble
00019422                            ; ---------------------------------------------------------------------------
00019422                            
00019422                            AniArt_MZ:				; XREF: AniArt_Index
00019422 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
00019426 6A00                       		bpl.s	loc_1C150
00019428 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001942E 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
00019434 7000                       		moveq	#0,d0
00019436 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001943A 5200                       		addq.b	#1,d0
0001943C 0C00 0003                  		cmpi.b	#3,d0
00019440 6600                       		bne.s	loc_1C134
00019442 7000                       		moveq	#0,d0
00019444                            
00019444                            loc_1C134:
00019444 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
00019448 C0FC 0100                  		mulu.w	#$100,d0
0001944C D2C0                       		adda.w	d0,a1
0001944E 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
00019458 323C 0007                  		move.w	#7,d1
0001945C 6100 0000                  		bsr.w	LoadTiles
00019460                            
00019460                            loc_1C150:
00019460 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
00019464 6A00                       		bpl.s	loc_1C1AE
00019466 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001946C 7000                       		moveq	#0,d0
0001946E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
00019472 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
00019478 EE58                       		ror.w	#7,d0
0001947A D8C0                       		adda.w	d0,a4
0001947C 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
00019486 7600                       		moveq	#0,d3
00019488 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001948C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
00019490 1638 FE68                  		move.b	($FFFFFE68).w,d3
00019494 343C 0003                  		move.w	#3,d2
00019498                            
00019498                            loc_1C188:
00019498 3003                       		move.w	d3,d0
0001949C 0240 001E                  		andi.w	#$1E,d0
000194A0 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
000194A6 3033 0000                  		move.w	(a3,d0.w),d0
000194AA 47F3 0000                  		lea	(a3,d0.w),a3
000194AE 224C                       		movea.l	a4,a1
000194B0 323C 001F                  		move.w	#$1F,d1
000194B4 4E93                       		jsr	(a3)
000194B6 5843                       		addq.w	#4,d3
000194B8 51CA FFDE                  		dbf	d2,loc_1C188
000194BC 4E75                       		rts	
000194BE                            ; ===========================================================================
000194BE                            
000194BE                            loc_1C1AE:
000194BE 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
000194C2 6A00 0000                  		bpl.w	locret_1C1EA
000194C6 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
000194CC 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
000194D2 7000                       		moveq	#0,d0
000194D4 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
000194D8 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
000194DC 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
000194E2 C0FC 00C0                  		mulu.w	#$C0,d0
000194E6 D2C0                       		adda.w	d0,a1
000194E8 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
000194F2 323C 0005                  		move.w	#5,d1
000194F6 6000 0000                  		bra.w	LoadTiles
000194FA                            ; ===========================================================================
000194FA                            
000194FA                            locret_1C1EA:
000194FA 4E75                       		rts	
000194FC                            ; ===========================================================================
000194FC                            ; ---------------------------------------------------------------------------
000194FC                            ; Animated pattern routine - Scrap Brain
000194FC                            ; ---------------------------------------------------------------------------
000194FC                            
000194FC                            AniArt_SBZ:				; XREF: AniArt_Index
000194FC 4A38 F7B4                  		tst.b	($FFFFF7B4).w
00019500 6700                       		beq.s	loc_1C1F8
00019502 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
00019506 6000                       		bra.s	loc_1C250
00019508                            ; ===========================================================================
00019508                            
00019508                            loc_1C1F8:
00019508 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001950C 6A00                       		bpl.s	loc_1C250
0001950E 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
00019514 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001951A 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
00019524 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
00019528 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001952C 0240 0007                  		andi.w	#7,d0
00019530 6700                       		beq.s	loc_1C234
00019532 5340                       		subq.w	#1,d0
00019534 C0FC 0180                  		mulu.w	#$180,d0
00019538 43F1 0000                  		lea	(a1,d0.w),a1
0001953C 323C 000B                  		move.w	#$B,d1
00019540 6000 0000                  		bra.w	LoadTiles
00019544                            ; ===========================================================================
00019544                            
00019544                            loc_1C234:
00019544 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001954A                            
0001954A                            loc_1C23A:
0001954A 323C 0005                  		move.w	#5,d1
0001954E 6100 0000                  		bsr.w	LoadTiles
00019552 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
00019558 323C 0005                  		move.w	#5,d1
0001955C 6000 0000                  		bra.w	LoadTiles
00019560                            ; ===========================================================================
00019560                            
00019560                            loc_1C250:
00019560 4A38 F7B5                  		tst.b	($FFFFF7B5).w
00019564 6700                       		beq.s	loc_1C25C
00019566 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001956A 6000                       		bra.s	locret_1C2A0
0001956C                            ; ===========================================================================
0001956C                            
0001956C                            loc_1C25C:
0001956C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
00019570 6A00                       		bpl.s	locret_1C2A0
00019572 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
00019578 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001957E 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
00019588 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001958C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
00019590 0240 0007                  		andi.w	#7,d0
00019594 6700                       		beq.s	loc_1C298
00019596 5340                       		subq.w	#1,d0
00019598 C0FC 0180                  		mulu.w	#$180,d0
0001959C 43F1 0000                  		lea	(a1,d0.w),a1
000195A0 323C 000B                  		move.w	#$B,d1
000195A4 6000 0000                  		bra.w	LoadTiles
000195A8                            ; ===========================================================================
000195A8                            
000195A8                            loc_1C298:
000195A8 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
000195AE 609A                       		bra.s	loc_1C23A
000195B0                            ; ===========================================================================
000195B0                            
000195B0                            locret_1C2A0:
000195B0 4E75                       		rts	
000195B2                            ; ===========================================================================
000195B2                            ; ---------------------------------------------------------------------------
000195B2                            ; Animated pattern routine - ending sequence
000195B2                            ; ---------------------------------------------------------------------------
000195B2                            
000195B2                            AniArt_Ending:				; XREF: AniArt_Index
000195B2 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
000195B6 6A00                       		bpl.s	loc_1C2F4
000195B8 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
000195BE 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
000195C4 45F8 9400                  		lea	($FFFF9400).w,a2
000195C8 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
000195CC 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
000195D0 0240 0001                  		andi.w	#1,d0
000195D4 6700                       		beq.s	loc_1C2CE
000195D6 43E9 0200                  		lea	$200(a1),a1
000195DA 45EA 0200                  		lea	$200(a2),a2
000195DE                            
000195DE                            loc_1C2CE:
000195DE 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
000195E8 323C 000F                  		move.w	#$F,d1
000195EC 6100 0000                  		bsr.w	LoadTiles
000195F0 224A                       		movea.l	a2,a1
000195F2 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
000195FC 323C 000F                  		move.w	#$F,d1
00019600 6000 0000                  		bra.w	LoadTiles
00019604                            ; ===========================================================================
00019604                            
00019604                            loc_1C2F4:
00019604 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
00019608 6A00                       		bpl.s	loc_1C33C
0001960A 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
00019610 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
00019614 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
00019618 0240 0007                  		andi.w	#7,d0
0001961C 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
00019620 EF48                       		lsl.w	#7,d0
00019622 3200                       		move.w	d0,d1
00019628 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
00019632 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
00019638 43F1 0000                  		lea	(a1,d0.w),a1
0001963C 323C 000B                  		move.w	#$B,d1
00019640 6000 0000                  		bra.w	LoadTiles
00019644                            ; ===========================================================================
00019644 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001964C                            ; ===========================================================================
0001964C                            
0001964C                            loc_1C33C:
0001964C 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
00019650 6A00                       		bpl.s	loc_1C37A
00019652 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
00019658 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001965C 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
00019660 0240 0003                  		andi.w	#3,d0
00019664 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
00019668 E148                       		lsl.w	#8,d0
0001966C 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
00019676 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001967A 43F1 0000                  		lea	(a1,d0.w),a1
0001967E 323C 000F                  		move.w	#$F,d1
00019682 6000 0000                  		bra.w	LoadTiles
00019686                            ; ===========================================================================
00019686 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001968A                            ; ===========================================================================
0001968A                            
0001968A                            loc_1C37A:
0001968A 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001968E 6A00                       		bpl.s	locret_1C3B4
00019690 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
00019696 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001969A 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001969E 0240 0003                  		andi.w	#3,d0
000196A2 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
000196A6 E148                       		lsl.w	#8,d0
000196AA 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
000196B4 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
000196B8 43F1 0000                  		lea	(a1,d0.w),a1
000196BC 323C 000F                  		move.w	#$F,d1
000196C0 6000 0000                  		bra.w	LoadTiles
000196C4                            ; ===========================================================================
000196C4                            
000196C4                            locret_1C3B4:
000196C4 4E75                       		rts	
000196C6                            ; ===========================================================================
000196C6                            
000196C6                            AniArt_none:				; XREF: AniArt_Index
000196C6 4E75                       		rts	
000196C8                            
000196C8                            ; ---------------------------------------------------------------------------
000196C8                            ; Subroutine to	load (d1 - 1) 8x8 tiles
000196C8                            ; ---------------------------------------------------------------------------
000196C8                            
000196C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000196C8                            
000196C8                            
000196C8                            LoadTiles:
000196C8 2C99                       		move.l	(a1)+,(a6)
000196CA 2C99                       		move.l	(a1)+,(a6)
000196CC 2C99                       		move.l	(a1)+,(a6)
000196CE 2C99                       		move.l	(a1)+,(a6)
000196D0 2C99                       		move.l	(a1)+,(a6)
000196D2 2C99                       		move.l	(a1)+,(a6)
000196D4 2C99                       		move.l	(a1)+,(a6)
000196D6 2C99                       		move.l	(a1)+,(a6)
000196D8 51C9 FFEE                  		dbf	d1,LoadTiles
000196DC 4E75                       		rts	
000196DE                            ; End of function LoadTiles
000196DE                            
000196DE                            ; ===========================================================================
000196DE                            ; ---------------------------------------------------------------------------
000196DE                            ; Animated pattern routine - more Marble Zone
000196DE                            ; ---------------------------------------------------------------------------
000196DE 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
000196E2 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
000196E6 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
000196EA 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
000196EE 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
000196F2 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
000196F6 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
000196FA 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
000196FE                            ; ===========================================================================
000196FE                            
000196FE                            loc_1C3EE:				; XREF: AniArt_MZextra
000196FE 2C91                       		move.l	(a1),(a6)
00019700 43E9 0010                  		lea	$10(a1),a1
00019704 51C9 FFF8                  		dbf	d1,loc_1C3EE
00019708 4E75                       		rts	
0001970A                            ; ===========================================================================
0001970A                            
0001970A                            loc_1C3FA:				; XREF: AniArt_MZextra
0001970A 2029 0002                  		move.l	2(a1),d0
0001970E 1029 0001                  		move.b	1(a1),d0
00019712 E098                       		ror.l	#8,d0
00019714 2C80                       		move.l	d0,(a6)
00019716 43E9 0010                  		lea	$10(a1),a1
0001971A 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001971E 4E75                       		rts	
00019720                            ; ===========================================================================
00019720                            
00019720                            loc_1C410:				; XREF: AniArt_MZextra
00019720 2CA9 0002                  		move.l	2(a1),(a6)
00019724 43E9 0010                  		lea	$10(a1),a1
00019728 51C9 FFF6                  		dbf	d1,loc_1C410
0001972C 4E75                       		rts	
0001972E                            ; ===========================================================================
0001972E                            
0001972E                            loc_1C41E:				; XREF: AniArt_MZextra
0001972E 2029 0004                  		move.l	4(a1),d0
00019732 1029 0003                  		move.b	3(a1),d0
00019736 E098                       		ror.l	#8,d0
00019738 2C80                       		move.l	d0,(a6)
0001973A 43E9 0010                  		lea	$10(a1),a1
0001973E 51C9 FFEE                  		dbf	d1,loc_1C41E
00019742 4E75                       		rts	
00019744                            ; ===========================================================================
00019744                            
00019744                            loc_1C434:				; XREF: AniArt_MZextra
00019744 2CA9 0004                  		move.l	4(a1),(a6)
00019748 43E9 0010                  		lea	$10(a1),a1
0001974C 51C9 FFF6                  		dbf	d1,loc_1C434
00019750 4E75                       		rts	
00019752                            ; ===========================================================================
00019752                            
00019752                            loc_1C442:				; XREF: AniArt_MZextra
00019752 2029 0006                  		move.l	6(a1),d0
00019756 1029 0005                  		move.b	5(a1),d0
0001975A E098                       		ror.l	#8,d0
0001975C 2C80                       		move.l	d0,(a6)
0001975E 43E9 0010                  		lea	$10(a1),a1
00019762 51C9 FFEE                  		dbf	d1,loc_1C442
00019766 4E75                       		rts	
00019768                            ; ===========================================================================
00019768                            
00019768                            loc_1C458:				; XREF: AniArt_MZextra
00019768 2CA9 0006                  		move.l	6(a1),(a6)
0001976C 43E9 0010                  		lea	$10(a1),a1
00019770 51C9 FFF6                  		dbf	d1,loc_1C458
00019774 4E75                       		rts	
00019776                            ; ===========================================================================
00019776                            
00019776                            loc_1C466:				; XREF: AniArt_MZextra
00019776 2029 0008                  		move.l	8(a1),d0
0001977A 1029 0007                  		move.b	7(a1),d0
0001977E E098                       		ror.l	#8,d0
00019780 2C80                       		move.l	d0,(a6)
00019782 43E9 0010                  		lea	$10(a1),a1
00019786 51C9 FFEE                  		dbf	d1,loc_1C466
0001978A 4E75                       		rts	
0001978C                            ; ===========================================================================
0001978C                            
0001978C                            loc_1C47C:				; XREF: AniArt_MZextra
0001978C 2CA9 0008                  		move.l	8(a1),(a6)
00019790 43E9 0010                  		lea	$10(a1),a1
00019794 51C9 FFF6                  		dbf	d1,loc_1C47C
00019798 4E75                       		rts	
0001979A                            ; ===========================================================================
0001979A                            
0001979A                            loc_1C48A:				; XREF: AniArt_MZextra
0001979A 2029 000A                  		move.l	$A(a1),d0
0001979E 1029 0009                  		move.b	9(a1),d0
000197A2 E098                       		ror.l	#8,d0
000197A4 2C80                       		move.l	d0,(a6)
000197A6 43E9 0010                  		lea	$10(a1),a1
000197AA 51C9 FFEE                  		dbf	d1,loc_1C48A
000197AE 4E75                       		rts	
000197B0                            ; ===========================================================================
000197B0                            
000197B0                            loc_1C4A0:				; XREF: AniArt_MZextra
000197B0 2CA9 000A                  		move.l	$A(a1),(a6)
000197B4 43E9 0010                  		lea	$10(a1),a1
000197B8 51C9 FFF6                  		dbf	d1,loc_1C4A0
000197BC 4E75                       		rts	
000197BE                            ; ===========================================================================
000197BE                            
000197BE                            loc_1C4AE:				; XREF: AniArt_MZextra
000197BE 2029 000C                  		move.l	$C(a1),d0
000197C2 1029 000B                  		move.b	$B(a1),d0
000197C6 E098                       		ror.l	#8,d0
000197C8 2C80                       		move.l	d0,(a6)
000197CA 43E9 0010                  		lea	$10(a1),a1
000197CE 51C9 FFEE                  		dbf	d1,loc_1C4AE
000197D2 4E75                       		rts	
000197D4                            ; ===========================================================================
000197D4                            
000197D4                            loc_1C4C4:				; XREF: AniArt_MZextra
000197D4 2CA9 000C                  		move.l	$C(a1),(a6)
000197D8 43E9 0010                  		lea	$10(a1),a1
000197DC 51C9 FFF6                  		dbf	d1,loc_1C4C4
000197E0 4E75                       		rts	
000197E2                            ; ===========================================================================
000197E2                            
000197E2                            loc_1C4D2:				; XREF: AniArt_MZextra
000197E2 2029 000C                  		move.l	$C(a1),d0
000197E6 E198                       		rol.l	#8,d0
000197E8 1011                       		move.b	0(a1),d0
000197EA 2C80                       		move.l	d0,(a6)
000197EC 43E9 0010                  		lea	$10(a1),a1
000197F0 51C9 FFF0                  		dbf	d1,loc_1C4D2
000197F4 4E75                       		rts	
000197F6                            ; ===========================================================================
000197F6                            
000197F6                            loc_1C4E8:				; XREF: AniArt_MZextra
000197F6 3CA9 000E                  		move.w	$E(a1),(a6)
000197FA 3C91                       		move.w	0(a1),(a6)
000197FC 43E9 0010                  		lea	$10(a1),a1
00019800 51C9 FFF4                  		dbf	d1,loc_1C4E8
00019804 4E75                       		rts	
00019806                            ; ===========================================================================
00019806                            
00019806                            loc_1C4FA:				; XREF: AniArt_MZextra
00019806 2011                       		move.l	0(a1),d0
00019808 1029 000F                  		move.b	$F(a1),d0
0001980C E098                       		ror.l	#8,d0
0001980E 2C80                       		move.l	d0,(a6)
00019810 43E9 0010                  		lea	$10(a1),a1
00019814 51C9 FFF0                  		dbf	d1,loc_1C4FA
00019818 4E75                       		rts	
0001981A                            
0001981A                            ; ---------------------------------------------------------------------------
0001981A                            ; Animated pattern routine - giant ring
0001981A                            ; ---------------------------------------------------------------------------
0001981A                            
0001981A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001981A                            
0001981A                            
0001981A                            AniArt_GiantRing:			; XREF: AniArt_Load
0001981A 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001981E 6600                       		bne.s	loc_1C518
00019820 4E75                       		rts	
00019822                            ; ===========================================================================
00019822                            
00019822                            loc_1C518:
00019822 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
00019828 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001982E 7000                       		moveq	#0,d0
00019830 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
00019834 43F1 0000                  		lea	(a1,d0.w),a1
00019838 0640 8000                  		addi.w	#$8000,d0
0001983C E588                       		lsl.l	#2,d0
0001983E E448                       		lsr.w	#2,d0
00019840 0040 4000                  		ori.w	#$4000,d0
00019844 4840                       		swap	d0
00019846 2D40 0004                  		move.l	d0,4(a6)
0001984A 323C 000D                  		move.w	#$D,d1
0001984E 6000 FE78                  		bra.w	LoadTiles
00019852                            ; End of function AniArt_GiantRing
00019852                            
00019852                            ; ===========================================================================
00019852                            ; ---------------------------------------------------------------------------
00019852                            ; Object 21 - SCORE, TIME, RINGS
00019852                            ; ---------------------------------------------------------------------------
00019852                            
00019852                            Obj21:					; XREF: Obj_Index
00019852 7000                       		moveq	#0,d0
00019854 1028 0024                  		move.b	$24(a0),d0
00019858 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001985C 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
00019860                            ; ===========================================================================
00019860 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
00019862 0000                       		dc.w Obj21_Display-Obj21_Index
00019864                            ; ===========================================================================
00019864                            
00019864                            Obj21_Main:				; XREF: Obj21_Main
00019864 5428 0024                  		addq.b	#2,$24(a0)
00019868 317C 00F8 0008             		move.w	#$F8,8(a0)
0001986E 317C 0097 000A             		move.w	#$97,$A(a0)
00019874 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001987C 317C 06CA 0002             		move.w	#$6CA,2(a0)
00019882 117C 0000 0001             		move.b	#0,1(a0)
00019888 117C 0000 0018             		move.b	#0,$18(a0)
0001988E                            
0001988E                            Obj21_Display:
0001988E 4EF9 0000 B69A             		jmp	DisplaySprite
00019894                            ; ===========================================================================
00019894                            ; ---------------------------------------------------------------------------
00019894                            ; Sprite mappings - SCORE, TIME, RINGS
00019894                            ; ---------------------------------------------------------------------------
00019894                            Map_obj21:
00019894                            	include "_maps\obj21.asm"
00019894                            Map_1d57:
00019894 0000                       Map_1d57_0: 	dc.w Map_1d57_2-Map_1d57
00019896 09                         Map_1d57_2: 	dc.b $9
00019897 F005 8000 F8               	dc.b $F0, $5, $80, $0, $F8
0001989C F005 8800 08               	dc.b $F0, $5, $88, $0, $8
000198A1 0005 9000 F8               	dc.b $0, $5, $90, $0, $F8
000198A6 0005 9800 08               	dc.b $0, $5, $98, $0, $8
000198AB F708 8004 20               	dc.b $F7, $8, $80, $4, $20
000198B0 F804 8007 50               	dc.b $F8, $4, $80, $7, $50
000198B5 0000 8008 D8               	dc.b $0, $0, $80, $8, $D8
000198BA 0000 8009 D0               	dc.b $0, $0, $80, $9, $D0
000198BF 0000 8008 A0               	dc.b $0, $0, $80, $8, $A0
000198C4                            	even
000198C4                            	even
000198C4                            
000198C4                            ; ---------------------------------------------------------------------------
000198C4                            ; Add points subroutine
000198C4                            ; ---------------------------------------------------------------------------
000198C4                            
000198C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000198C4                            
000198C4                            
000198C4                            AddPoints:
000198C4 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
000198CA 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
000198CE 47F8 FE26                  		lea	($FFFFFE26).w,a3
000198D4 223C 000F 423F             		move.l	#999999,d1
000198DA B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
000198DC 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
000198E0 2681                       		move.l	d1,(a3)		; reset	score to #999999
000198E2 2481                       		move.l	d1,(a2)
000198E4                            
000198E4                            loc_1C6AC:
000198E4 2013                       		move.l	(a3),d0
000198E6 B092                       		cmp.l	(a2),d0
000198E8 6500 0000                  		bcs.w	locret_1C6B6
000198EC 2480                       		move.l	d0,(a2)
000198EE                            
000198EE                            locret_1C6B6:
000198EE 4E75                       		rts	
000198F0                            ; End of function AddPoints
000198F0                            
000198F0                            ; ---------------------------------------------------------------------------
000198F0                            ; Subroutine to	update the HUD
000198F0                            ; ---------------------------------------------------------------------------
000198F0                            
000198F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000198F0                            
000198F0                            
000198F0                            HudUpdate:
000198F0 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
000198F4 6600 0000                  		bne.w	HudDebug	; if yes, branch
000198F8 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
000198FC 6700                       		beq.s	Hud_ChkRings	; if not, branch
000198FE 4238 FE1F                  		clr.b	($FFFFFE1F).w
00019902 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
00019908 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001990C 6100 0000                  		bsr.w	Hud_Score
00019910                            
00019910                            Hud_ChkRings:
00019910 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
00019914 6700                       		beq.s	Hud_ChkTime	; if not, branch
00019916 6A00                       		bpl.s	loc_1C6E4
00019918 6100 0000                  		bsr.w	Hud_LoadZero
0001991C                            
0001991C                            loc_1C6E4:
0001991C 4238 FE1D                  		clr.b	($FFFFFE1D).w
00019920 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
00019926 7200                       		moveq	#0,d1
00019928 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001992C 6100 0000                  		bsr.w	Hud_Rings
00019930                            
00019930                            Hud_ChkTime:
00019930 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
00019934 6700                       		beq.s	Hud_ChkLives	; if not, branch
00019936 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001993A 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001993C 43F8 FE22                  		lea	($FFFFFE22).w,a1
00019940 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
00019946 6700                       		beq.s	TimeOver	; if yes, branch
00019948 5221                       		addq.b	#1,-(a1)
0001994A 0C11 003C                  		cmpi.b	#60,(a1)
0001994E 6500                       		bcs.s	Hud_ChkLives
00019950 12BC 0000                  		move.b	#0,(a1)
00019954 5221                       		addq.b	#1,-(a1)
00019956 0C11 003C                  		cmpi.b	#60,(a1)
0001995A 6500                       		bcs.s	loc_1C734
0001995C 12BC 0000                  		move.b	#0,(a1)
00019960 5221                       		addq.b	#1,-(a1)
00019962 0C11 0009                  		cmpi.b	#9,(a1)
00019966 6500                       		bcs.s	loc_1C734
00019968 12BC 0009                  		move.b	#9,(a1)
0001996C                            
0001996C                            loc_1C734:
0001996C 203C 5E40 0003             		move.l	#$5E400003,d0
00019972 7200                       		moveq	#0,d1
00019974 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
00019978 6100 0000                  		bsr.w	Hud_Mins
0001997C 203C 5EC0 0003             		move.l	#$5EC00003,d0
00019982 7200                       		moveq	#0,d1
00019984 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
00019988 6100 0000                  		bsr.w	Hud_Secs
0001998C                            
0001998C                            Hud_ChkLives:
0001998C 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
00019990 6700                       		beq.s	Hud_ChkBonus	; if not, branch
00019992 4238 FE1C                  		clr.b	($FFFFFE1C).w
00019996 6100 0000                  		bsr.w	Hud_Lives
0001999A                            
0001999A                            Hud_ChkBonus:
0001999A 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001999E 6700                       		beq.s	Hud_End		; if not, branch
000199A0 4238 F7D6                  		clr.b	($FFFFF7D6).w
000199A4 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
000199AE 7200                       		moveq	#0,d1
000199B0 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
000199B4 6100 0000                  		bsr.w	Hud_TimeRingBonus
000199B8 7200                       		moveq	#0,d1
000199BA 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
000199BE 6100 0000                  		bsr.w	Hud_TimeRingBonus
000199C2                            
000199C2                            Hud_End:
000199C2 4E75                       		rts	
000199C4                            ; ===========================================================================
000199C4                            
000199C4                            TimeOver:				; XREF: Hud_ChkTime
000199C4 4238 FE1E                  		clr.b	($FFFFFE1E).w
000199C8 41F8 D000                  		lea	($FFFFD000).w,a0
000199CC 2448                       		movea.l	a0,a2
000199CE 6100 F96C                  		bsr.w	KillSonic
000199D2 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
000199D8 4E75                       		rts	
000199DA                            ; ===========================================================================
000199DA                            
000199DA                            HudDebug:				; XREF: HudUpdate
000199DA 6100 0000                  		bsr.w	HudDb_XY
000199DE 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
000199E2 6700                       		beq.s	HudDb_ObjCount	; if not, branch
000199E4 6A00                       		bpl.s	HudDb_Rings
000199E6 6100 0000                  		bsr.w	Hud_LoadZero
000199EA                            
000199EA                            HudDb_Rings:
000199EA 4238 FE1D                  		clr.b	($FFFFFE1D).w
000199EE 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
000199F4 7200                       		moveq	#0,d1
000199F6 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
000199FA 6100 0000                  		bsr.w	Hud_Rings
000199FE                            
000199FE                            HudDb_ObjCount:
000199FE 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
00019A04 7200                       		moveq	#0,d1
00019A06 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
00019A0A 6100 0000                  		bsr.w	Hud_Secs
00019A0E 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
00019A12 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
00019A14 4238 FE1C                  		clr.b	($FFFFFE1C).w
00019A18 6100 0000                  		bsr.w	Hud_Lives
00019A1C                            
00019A1C                            HudDb_ChkBonus:
00019A1C 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
00019A20 6700                       		beq.s	HudDb_End	; if not, branch
00019A22 4238 F7D6                  		clr.b	($FFFFF7D6).w
00019A26 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
00019A30 7200                       		moveq	#0,d1
00019A32 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
00019A36 6100 0000                  		bsr.w	Hud_TimeRingBonus
00019A3A 7200                       		moveq	#0,d1
00019A3C 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
00019A40 6100 0000                  		bsr.w	Hud_TimeRingBonus
00019A44                            
00019A44                            HudDb_End:
00019A44 4E75                       		rts	
00019A46                            ; End of function HudUpdate
00019A46                            
00019A46                            ; ---------------------------------------------------------------------------
00019A46                            ; Subroutine to	load "0" on the	HUD
00019A46                            ; ---------------------------------------------------------------------------
00019A46                            
00019A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019A46                            
00019A46                            
00019A46                            Hud_LoadZero:				; XREF: HudUpdate
00019A46 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
00019A50 45FA 0000                  		lea	Hud_TilesZero(pc),a2
00019A54 343C 0002                  		move.w	#2,d2
00019A58 6000                       		bra.s	loc_1C83E
00019A5A                            ; End of function Hud_LoadZero
00019A5A                            
00019A5A                            ; ---------------------------------------------------------------------------
00019A5A                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
00019A5A                            ; ---------------------------------------------------------------------------
00019A5A                            
00019A5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019A5A                            
00019A5A                            
00019A5A                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
00019A5A 4DF9 00C0 0000             		lea	($C00000).l,a6
00019A60 6100 0000                  		bsr.w	Hud_Lives
00019A64 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
00019A6E 45FA 0000                  		lea	Hud_TilesBase(pc),a2
00019A72 343C 000E                  		move.w	#$E,d2
00019A76                            
00019A76                            loc_1C83E:				; XREF: Hud_LoadZero
00019A76 43FA 0000                  		lea	Art_Hud(pc),a1
00019A7A                            
00019A7A                            loc_1C842:
00019A7A 323C 000F                  		move.w	#$F,d1
00019A7E 101A                       		move.b	(a2)+,d0
00019A80 6B00                       		bmi.s	loc_1C85E
00019A82 4880                       		ext.w	d0
00019A84 EB48                       		lsl.w	#5,d0
00019A86 47F1 0000                  		lea	(a1,d0.w),a3
00019A8A                            
00019A8A                            loc_1C852:
00019A8A 2C9B                       		move.l	(a3)+,(a6)
00019A8C 51C9 FFFC                  		dbf	d1,loc_1C852
00019A90                            
00019A90                            loc_1C858:
00019A90 51CA FFE8                  		dbf	d2,loc_1C842
00019A94                            
00019A94 4E75                       		rts	
00019A96                            ; ===========================================================================
00019A96                            
00019A96                            loc_1C85E:
00019A96 2CBC 0000 0000             		move.l	#0,(a6)
00019A9C 51C9 FFF8                  		dbf	d1,loc_1C85E
00019AA0                            
00019AA0 60EE                       		bra.s	loc_1C858
00019AA2                            ; End of function Hud_Base
00019AA2                            
00019AA2                            ; ===========================================================================
00019AA2 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
00019AAE FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
00019AB2                            ; ---------------------------------------------------------------------------
00019AB2                            ; Subroutine to	load debug mode	numbers	patterns
00019AB2                            ; ---------------------------------------------------------------------------
00019AB2                            
00019AB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019AB2                            
00019AB2                            
00019AB2                            HudDb_XY:				; XREF: HudDebug
00019AB2 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
00019ABC 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
00019AC0 4841                       		swap	d1
00019AC2 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
00019AC6 6100                       		bsr.s	HudDb_XY2
00019AC8 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
00019ACC 4841                       		swap	d1
00019ACE 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
00019AD2                            ; End of function HudDb_XY
00019AD2                            
00019AD2                            
00019AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019AD2                            
00019AD2                            
00019AD2                            HudDb_XY2:
00019AD2 7C07                       		moveq	#7,d6
00019AD4 43F9 0000 03C6             		lea	(Art_Text).l,a1
00019ADA                            
00019ADA                            HudDb_XYLoop:
00019ADA E959                       		rol.w	#4,d1
00019ADC 3401                       		move.w	d1,d2
00019ADE 0242 000F                  		andi.w	#$F,d2
00019AE2 0C42 000A                  		cmpi.w	#$A,d2
00019AE6 6500                       		bcs.s	loc_1C8B2
00019AE8 5E42                       		addq.w	#7,d2
00019AEA                            
00019AEA                            loc_1C8B2:
00019AEA EB4A                       		lsl.w	#5,d2
00019AEC 47F1 2000                  		lea	(a1,d2.w),a3
00019AF0 2C9B                       		move.l	(a3)+,(a6)
00019AF2 2C9B                       		move.l	(a3)+,(a6)
00019AF4 2C9B                       		move.l	(a3)+,(a6)
00019AF6 2C9B                       		move.l	(a3)+,(a6)
00019AF8 2C9B                       		move.l	(a3)+,(a6)
00019AFA 2C9B                       		move.l	(a3)+,(a6)
00019AFC 2C9B                       		move.l	(a3)+,(a6)
00019AFE 2C9B                       		move.l	(a3)+,(a6)
00019B00 4841                       		swap	d1
00019B02 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
00019B06                            
00019B06 4E75                       		rts	
00019B08                            ; End of function HudDb_XY2
00019B08                            
00019B08                            ; ---------------------------------------------------------------------------
00019B08                            ; Subroutine to	load rings numbers patterns
00019B08                            ; ---------------------------------------------------------------------------
00019B08                            
00019B08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019B08                            
00019B08                            
00019B08                            Hud_Rings:				; XREF: HudUpdate
00019B08 45F9 0000 0000             		lea	(Hud_100).l,a2
00019B0E 7C02                       		moveq	#2,d6
00019B10 6000                       		bra.s	Hud_LoadArt
00019B12                            ; End of function Hud_Rings
00019B12                            
00019B12                            ; ---------------------------------------------------------------------------
00019B12                            ; Subroutine to	load score numbers patterns
00019B12                            ; ---------------------------------------------------------------------------
00019B12                            
00019B12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019B12                            
00019B12                            
00019B12                            Hud_Score:				; XREF: HudUpdate
00019B12 45F9 0000 0000             		lea	(Hud_100000).l,a2
00019B18 7C05                       		moveq	#5,d6
00019B1A                            
00019B1A                            Hud_LoadArt:
00019B1A 7800                       		moveq	#0,d4
00019B1C 43FA 0000                  		lea	Art_Hud(pc),a1
00019B20                            
00019B20                            Hud_ScoreLoop:
00019B20 7400                       		moveq	#0,d2
00019B22 261A                       		move.l	(a2)+,d3
00019B24                            
00019B24                            loc_1C8EC:
00019B26 6500                       		bcs.s	loc_1C8F4
00019B28 5242                       		addq.w	#1,d2
00019B2A 60F8                       		bra.s	loc_1C8EC
00019B2C                            ; ===========================================================================
00019B2C                            
00019B2C                            loc_1C8F4:
00019B2E 4A42                       		tst.w	d2
00019B30 6700                       		beq.s	loc_1C8FE
00019B32 383C 0001                  		move.w	#1,d4
00019B36                            
00019B36                            loc_1C8FE:
00019B36 4A44                       		tst.w	d4
00019B38 6700                       		beq.s	loc_1C92C
00019B3A ED4A                       		lsl.w	#6,d2
00019B3C 2D40 0004                  		move.l	d0,4(a6)
00019B40 47F1 2000                  		lea	(a1,d2.w),a3
00019B44 2C9B                       		move.l	(a3)+,(a6)
00019B46 2C9B                       		move.l	(a3)+,(a6)
00019B48 2C9B                       		move.l	(a3)+,(a6)
00019B4A 2C9B                       		move.l	(a3)+,(a6)
00019B4C 2C9B                       		move.l	(a3)+,(a6)
00019B4E 2C9B                       		move.l	(a3)+,(a6)
00019B50 2C9B                       		move.l	(a3)+,(a6)
00019B52 2C9B                       		move.l	(a3)+,(a6)
00019B54 2C9B                       		move.l	(a3)+,(a6)
00019B56 2C9B                       		move.l	(a3)+,(a6)
00019B58 2C9B                       		move.l	(a3)+,(a6)
00019B5A 2C9B                       		move.l	(a3)+,(a6)
00019B5C 2C9B                       		move.l	(a3)+,(a6)
00019B5E 2C9B                       		move.l	(a3)+,(a6)
00019B60 2C9B                       		move.l	(a3)+,(a6)
00019B62 2C9B                       		move.l	(a3)+,(a6)
00019B64                            
00019B64                            loc_1C92C:
00019B64 0680 0040 0000             		addi.l	#$400000,d0
00019B6A 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
00019B6E                            
00019B6E 4E75                       		rts	
00019B70                            ; End of function Hud_Score
00019B70                            
00019B70                            ; ---------------------------------------------------------------------------
00019B70                            ; Subroutine to	load countdown numbers on the continue screen
00019B70                            ; ---------------------------------------------------------------------------
00019B70                            
00019B70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019B70                            
00019B70                            
00019B70                            ContScrCounter:				; XREF: ContinueScreen
00019B70 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
00019B7A 4DF9 00C0 0000             		lea	($C00000).l,a6
00019B80 45F9 0000 0000             		lea	(Hud_10).l,a2
00019B86 7C01                       		moveq	#1,d6
00019B88 7800                       		moveq	#0,d4
00019B8A 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
00019B8E                            
00019B8E                            ContScr_Loop:
00019B8E 7400                       		moveq	#0,d2
00019B90 261A                       		move.l	(a2)+,d3
00019B92                            
00019B92                            loc_1C95A:
00019B94 6500                       		bcs.s	loc_1C962
00019B96 5242                       		addq.w	#1,d2
00019B98 60F8                       		bra.s	loc_1C95A
00019B9A                            ; ===========================================================================
00019B9A                            
00019B9A                            loc_1C962:
00019B9C ED4A                       		lsl.w	#6,d2
00019B9E 47F1 2000                  		lea	(a1,d2.w),a3
00019BA2 2C9B                       		move.l	(a3)+,(a6)
00019BA4 2C9B                       		move.l	(a3)+,(a6)
00019BA6 2C9B                       		move.l	(a3)+,(a6)
00019BA8 2C9B                       		move.l	(a3)+,(a6)
00019BAA 2C9B                       		move.l	(a3)+,(a6)
00019BAC 2C9B                       		move.l	(a3)+,(a6)
00019BAE 2C9B                       		move.l	(a3)+,(a6)
00019BB0 2C9B                       		move.l	(a3)+,(a6)
00019BB2 2C9B                       		move.l	(a3)+,(a6)
00019BB4 2C9B                       		move.l	(a3)+,(a6)
00019BB6 2C9B                       		move.l	(a3)+,(a6)
00019BB8 2C9B                       		move.l	(a3)+,(a6)
00019BBA 2C9B                       		move.l	(a3)+,(a6)
00019BBC 2C9B                       		move.l	(a3)+,(a6)
00019BBE 2C9B                       		move.l	(a3)+,(a6)
00019BC0 2C9B                       		move.l	(a3)+,(a6)
00019BC2 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
00019BC6                            
00019BC6 4E75                       		rts	
00019BC8                            ; End of function ContScrCounter
00019BC8                            
00019BC8                            ; ===========================================================================
00019BC8                            ; ---------------------------------------------------------------------------
00019BC8                            ; HUD counter sizes
00019BC8                            ; ---------------------------------------------------------------------------
00019BC8 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
00019BCC 0000 2710                  Hud_10000:	dc.l 10000
00019BD0 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
00019BD4 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
00019BD8 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
00019BDC 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
00019BE0                            
00019BE0                            ; ---------------------------------------------------------------------------
00019BE0                            ; Subroutine to	load time numbers patterns
00019BE0                            ; ---------------------------------------------------------------------------
00019BE0                            
00019BE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019BE0                            
00019BE0                            
00019BE0                            Hud_Mins:				; XREF: Hud_ChkTime
00019BE0 45F9 0001 9BDC             		lea	(Hud_1).l,a2
00019BE6 7C00                       		moveq	#0,d6
00019BE8 6000                       		bra.s	loc_1C9BA
00019BEA                            ; End of function Hud_Mins
00019BEA                            
00019BEA                            
00019BEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019BEA                            
00019BEA                            
00019BEA                            Hud_Secs:				; XREF: Hud_ChkTime
00019BEA 45F9 0001 9BD8             		lea	(Hud_10).l,a2
00019BF0 7C01                       		moveq	#1,d6
00019BF2                            
00019BF2                            loc_1C9BA:
00019BF2 7800                       		moveq	#0,d4
00019BF4 43FA 0000                  		lea	Art_Hud(pc),a1
00019BF8                            
00019BF8                            Hud_TimeLoop:
00019BF8 7400                       		moveq	#0,d2
00019BFA 261A                       		move.l	(a2)+,d3
00019BFC                            
00019BFC                            loc_1C9C4:
00019BFE 6500                       		bcs.s	loc_1C9CC
00019C00 5242                       		addq.w	#1,d2
00019C02 60F8                       		bra.s	loc_1C9C4
00019C04                            ; ===========================================================================
00019C04                            
00019C04                            loc_1C9CC:
00019C06 4A42                       		tst.w	d2
00019C08 6700                       		beq.s	loc_1C9D6
00019C0A 383C 0001                  		move.w	#1,d4
00019C0E                            
00019C0E                            loc_1C9D6:
00019C0E ED4A                       		lsl.w	#6,d2
00019C10 2D40 0004                  		move.l	d0,4(a6)
00019C14 47F1 2000                  		lea	(a1,d2.w),a3
00019C18 2C9B                       		move.l	(a3)+,(a6)
00019C1A 2C9B                       		move.l	(a3)+,(a6)
00019C1C 2C9B                       		move.l	(a3)+,(a6)
00019C1E 2C9B                       		move.l	(a3)+,(a6)
00019C20 2C9B                       		move.l	(a3)+,(a6)
00019C22 2C9B                       		move.l	(a3)+,(a6)
00019C24 2C9B                       		move.l	(a3)+,(a6)
00019C26 2C9B                       		move.l	(a3)+,(a6)
00019C28 2C9B                       		move.l	(a3)+,(a6)
00019C2A 2C9B                       		move.l	(a3)+,(a6)
00019C2C 2C9B                       		move.l	(a3)+,(a6)
00019C2E 2C9B                       		move.l	(a3)+,(a6)
00019C30 2C9B                       		move.l	(a3)+,(a6)
00019C32 2C9B                       		move.l	(a3)+,(a6)
00019C34 2C9B                       		move.l	(a3)+,(a6)
00019C36 2C9B                       		move.l	(a3)+,(a6)
00019C38 0680 0040 0000             		addi.l	#$400000,d0
00019C3E 51CE FFB8                  		dbf	d6,Hud_TimeLoop
00019C42                            
00019C42 4E75                       		rts	
00019C44                            ; End of function Hud_Secs
00019C44                            
00019C44                            ; ---------------------------------------------------------------------------
00019C44                            ; Subroutine to	load time/ring bonus numbers patterns
00019C44                            ; ---------------------------------------------------------------------------
00019C44                            
00019C44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019C44                            
00019C44                            
00019C44                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
00019C44 45F9 0001 9BD0             		lea	(Hud_1000).l,a2
00019C4A 7C03                       		moveq	#3,d6
00019C4C 7800                       		moveq	#0,d4
00019C4E 43FA 0000                  		lea	Art_Hud(pc),a1
00019C52                            
00019C52                            Hud_BonusLoop:
00019C52 7400                       		moveq	#0,d2
00019C54 261A                       		move.l	(a2)+,d3
00019C56                            
00019C56                            loc_1CA1E:
00019C58 6500                       		bcs.s	loc_1CA26
00019C5A 5242                       		addq.w	#1,d2
00019C5C 60F8                       		bra.s	loc_1CA1E
00019C5E                            ; ===========================================================================
00019C5E                            
00019C5E                            loc_1CA26:
00019C60 4A42                       		tst.w	d2
00019C62 6700                       		beq.s	loc_1CA30
00019C64 383C 0001                  		move.w	#1,d4
00019C68                            
00019C68                            loc_1CA30:
00019C68 4A44                       		tst.w	d4
00019C6A 6700                       		beq.s	Hud_ClrBonus
00019C6C ED4A                       		lsl.w	#6,d2
00019C6E 47F1 2000                  		lea	(a1,d2.w),a3
00019C72 2C9B                       		move.l	(a3)+,(a6)
00019C74 2C9B                       		move.l	(a3)+,(a6)
00019C76 2C9B                       		move.l	(a3)+,(a6)
00019C78 2C9B                       		move.l	(a3)+,(a6)
00019C7A 2C9B                       		move.l	(a3)+,(a6)
00019C7C 2C9B                       		move.l	(a3)+,(a6)
00019C7E 2C9B                       		move.l	(a3)+,(a6)
00019C80 2C9B                       		move.l	(a3)+,(a6)
00019C82 2C9B                       		move.l	(a3)+,(a6)
00019C84 2C9B                       		move.l	(a3)+,(a6)
00019C86 2C9B                       		move.l	(a3)+,(a6)
00019C88 2C9B                       		move.l	(a3)+,(a6)
00019C8A 2C9B                       		move.l	(a3)+,(a6)
00019C8C 2C9B                       		move.l	(a3)+,(a6)
00019C8E 2C9B                       		move.l	(a3)+,(a6)
00019C90 2C9B                       		move.l	(a3)+,(a6)
00019C92                            
00019C92                            loc_1CA5A:
00019C92 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
00019C96                            
00019C96 4E75                       		rts	
00019C98                            ; ===========================================================================
00019C98                            
00019C98                            Hud_ClrBonus:
00019C98 7A0F                       		moveq	#$F,d5
00019C9A                            
00019C9A                            Hud_ClrBonusLoop:
00019C9A 2CBC 0000 0000             		move.l	#0,(a6)
00019CA0 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
00019CA4                            
00019CA4 60EC                       		bra.s	loc_1CA5A
00019CA6                            ; End of function Hud_TimeRingBonus
00019CA6                            
00019CA6                            ; ---------------------------------------------------------------------------
00019CA6                            ; Subroutine to	load uncompressed lives	counter	patterns
00019CA6                            ; ---------------------------------------------------------------------------
00019CA6                            
00019CA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019CA6                            
00019CA6                            
00019CA6                            Hud_Lives:				; XREF: Hud_ChkLives
00019CA6 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
00019CAC 7200                       		moveq	#0,d1
00019CAE 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
00019CB2 45F9 0001 9BD8             		lea	(Hud_10).l,a2
00019CB8 7C01                       		moveq	#1,d6
00019CBA 7800                       		moveq	#0,d4
00019CBC 43FA 0000                  		lea	Art_LivesNums(pc),a1
00019CC0                            
00019CC0                            Hud_LivesLoop:
00019CC0 2D40 0004                  		move.l	d0,4(a6)
00019CC4 7400                       		moveq	#0,d2
00019CC6 261A                       		move.l	(a2)+,d3
00019CC8                            
00019CC8                            loc_1CA90:
00019CCA 6500                       		bcs.s	loc_1CA98
00019CCC 5242                       		addq.w	#1,d2
00019CCE 60F8                       		bra.s	loc_1CA90
00019CD0                            ; ===========================================================================
00019CD0                            
00019CD0                            loc_1CA98:
00019CD2 4A42                       		tst.w	d2
00019CD4 6700                       		beq.s	loc_1CAA2
00019CD6 383C 0001                  		move.w	#1,d4
00019CDA                            
00019CDA                            loc_1CAA2:
00019CDA 4A44                       		tst.w	d4
00019CDC 6700                       		beq.s	Hud_ClrLives
00019CDE                            
00019CDE                            loc_1CAA6:
00019CDE EB4A                       		lsl.w	#5,d2
00019CE0 47F1 2000                  		lea	(a1,d2.w),a3
00019CE4 2C9B                       		move.l	(a3)+,(a6)
00019CE6 2C9B                       		move.l	(a3)+,(a6)
00019CE8 2C9B                       		move.l	(a3)+,(a6)
00019CEA 2C9B                       		move.l	(a3)+,(a6)
00019CEC 2C9B                       		move.l	(a3)+,(a6)
00019CEE 2C9B                       		move.l	(a3)+,(a6)
00019CF0 2C9B                       		move.l	(a3)+,(a6)
00019CF2 2C9B                       		move.l	(a3)+,(a6)
00019CF4                            
00019CF4                            loc_1CABC:
00019CF4 0680 0040 0000             		addi.l	#$400000,d0
00019CFA 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
00019CFE                            
00019CFE 4E75                       		rts	
00019D00                            ; ===========================================================================
00019D00                            
00019D00                            Hud_ClrLives:
00019D00 4A46                       		tst.w	d6
00019D02 67DA                       		beq.s	loc_1CAA6
00019D04 7A07                       		moveq	#7,d5
00019D06                            
00019D06                            Hud_ClrLivesLoop:
00019D06 2CBC 0000 0000             		move.l	#0,(a6)
00019D0C 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
00019D10 60E2                       		bra.s	loc_1CABC
00019D12                            ; End of function Hud_Lives
00019D12                            
00019D12                            ; ===========================================================================
00019D12                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001A012                            		even
0001A012                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001A152                            		even
0001A152                            ; ===========================================================================
0001A152                            ; ---------------------------------------------------------------------------
0001A152                            ; When debug mode is currently in use
0001A152                            ; ---------------------------------------------------------------------------
0001A152                            
0001A152                            DebugMode:				; XREF: Obj01; Obj09
0001A152 7000                       		moveq	#0,d0
0001A154 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001A158 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001A15C 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001A160                            ; ===========================================================================
0001A160 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001A162 0000                       		dc.w Debug_Skip-Debug_Index
0001A164                            ; ===========================================================================
0001A164                            
0001A164                            Debug_Main:				; XREF: Debug_Index
0001A164 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001A168 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001A16E 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001A174 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001A17A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001A180 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001A186 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001A18C 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001A192 117C 0000 001A             		move.b	#0,$1A(a0)
0001A198 117C 0000 001C             		move.b	#0,$1C(a0)
0001A19E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001A1A4 6600                       		bne.s	Debug_Zone	; if not, branch
0001A1A6 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001A1AC 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001A1B2 7006                       		moveq	#6,d0		; use 6th debug	item list
0001A1B4 6000                       		bra.s	Debug_UseList
0001A1B6                            ; ===========================================================================
0001A1B6                            
0001A1B6                            Debug_Zone:
0001A1B6 7000                       		moveq	#0,d0
0001A1B8 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001A1BC                            
0001A1BC                            Debug_UseList:
0001A1BC 45F9 0000 0000             		lea	(DebugList).l,a2
0001A1C4 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001A1C8 3C1A                       		move.w	(a2)+,d6
0001A1CA BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001A1CE 6200                       		bhi.s	loc_1CF9E
0001A1D0 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001A1D6                            
0001A1D6                            loc_1CF9E:
0001A1D6 6100 0000                  		bsr.w	Debug_ShowItem
0001A1DA 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001A1E0 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001A1E6                            
0001A1E6                            Debug_Skip:				; XREF: Debug_Index
0001A1E6 7006                       		moveq	#6,d0
0001A1E8 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001A1EE 6700                       		beq.s	loc_1CFBE
0001A1F0 7000                       		moveq	#0,d0
0001A1F2 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001A1F6                            
0001A1F6                            loc_1CFBE:
0001A1F6 45F9 0000 0000             		lea	(DebugList).l,a2
0001A1FE D4F2 0000                  		adda.w	(a2,d0.w),a2
0001A202 3C1A                       		move.w	(a2)+,d6
0001A204 6100 0000                  		bsr.w	Debug_Control
0001A208 4EF9 0000 B69A             		jmp	DisplaySprite
0001A20E                            
0001A20E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A20E                            
0001A20E                            
0001A20E                            Debug_Control:
0001A20E 7800                       		moveq	#0,d4
0001A210 323C 0001                  		move.w	#1,d1
0001A214 1838 F605                  		move.b	($FFFFF605).w,d4
0001A218 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001A21C 6600                       		bne.s	loc_1D018	; if yes, branch
0001A21E 1038 F604                  		move.b	($FFFFF604).w,d0
0001A222 0240 000F                  		andi.w	#$F,d0
0001A226 6600                       		bne.s	loc_1D000
0001A228 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001A22E 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001A234 6000 0000                  		bra.w	Debug_BackItem
0001A238                            ; ===========================================================================
0001A238                            
0001A238                            loc_1D000:
0001A238 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001A23C 6600                       		bne.s	loc_1D01C
0001A23E 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001A244 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001A248 6600                       		bne.s	loc_1D018
0001A24A 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001A250                            
0001A250                            loc_1D018:
0001A250 1838 F604                  		move.b	($FFFFF604).w,d4
0001A254                            
0001A254                            loc_1D01C:
0001A254 7200                       		moveq	#0,d1
0001A256 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001A25A 5241                       		addq.w	#1,d1
0001A25C 4841                       		swap	d1
0001A25E E881                       		asr.l	#4,d1
0001A260 2428 000C                  		move.l	$C(a0),d2
0001A264 2628 0008                  		move.l	8(a0),d3
0001A268 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001A26C 6700                       		beq.s	loc_1D03C	; if not, branch
0001A270 6400                       		bcc.s	loc_1D03C
0001A272 7400                       		moveq	#0,d2
0001A274                            
0001A274                            loc_1D03C:
0001A274 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001A278 6700                       		beq.s	loc_1D052	; if not, branch
0001A27C 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001A282 6500                       		bcs.s	loc_1D052
0001A284 243C 07FF 0000             		move.l	#$7FF0000,d2
0001A28A                            
0001A28A                            loc_1D052:
0001A28A 0804 0002                  		btst	#2,d4
0001A28E 6700                       		beq.s	loc_1D05E
0001A292 6400                       		bcc.s	loc_1D05E
0001A294 7600                       		moveq	#0,d3
0001A296                            
0001A296                            loc_1D05E:
0001A296 0804 0003                  		btst	#3,d4
0001A29A 6700                       		beq.s	loc_1D066
0001A29E                            
0001A29E                            loc_1D066:
0001A29E 2142 000C                  		move.l	d2,$C(a0)
0001A2A2 2143 0008                  		move.l	d3,8(a0)
0001A2A6                            
0001A2A6                            Debug_BackItem:
0001A2A6 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001A2AC 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001A2AE 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001A2B4 6700                       		beq.s	Debug_NextItem	; if not, branch
0001A2B6 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001A2BA 6400                       		bcc.s	Debug_NoLoop
0001A2C0 6000                       		bra.s	Debug_NoLoop
0001A2C2                            ; ===========================================================================
0001A2C2                            
0001A2C2                            Debug_NextItem:
0001A2C2 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001A2C8 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001A2CA 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001A2CE BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001A2D2 6200                       		bhi.s	Debug_NoLoop
0001A2D4 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001A2DA                            
0001A2DA                            Debug_NoLoop:
0001A2DA 6000 0000                  		bra.w	Debug_ShowItem
0001A2DE                            ; ===========================================================================
0001A2DE                            
0001A2DE                            Debug_MakeItem:
0001A2DE 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001A2E4 6700                       		beq.s	Debug_Exit	; if not, branch
0001A2E6 4EB9 0000 BB20             		jsr	SingleObjLoad
0001A2EC 6600                       		bne.s	Debug_Exit
0001A2EE 3368 0008 0008             		move.w	8(a0),8(a1)
0001A2F4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A2FA 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001A2FE 1368 0001 0001             		move.b	1(a0),1(a1)
0001A304 1368 0001 0022             		move.b	1(a0),$22(a1)
0001A30A 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001A310 7000                       		moveq	#0,d0
0001A312 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001A316 E748                       		lsl.w	#3,d0
0001A318 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001A31E 4E75                       		rts	
0001A320                            ; ===========================================================================
0001A320                            
0001A320                            Debug_Exit:
0001A320 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001A326 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001A328 7000                       		moveq	#0,d0
0001A32A 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001A32E 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001A336 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001A33C 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001A340 3140 000A                  		move.w	d0,$A(a0)
0001A344 3140 000E                  		move.w	d0,$E(a0)
0001A348 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001A34E 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001A354 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001A35A 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001A35C 4278 F780                  		clr.w	($FFFFF780).w
0001A360 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001A366 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001A36E 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001A374 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001A37A 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001A380 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001A386                            
0001A386                            Debug_DoNothing:
0001A386 4E75                       		rts	
0001A388                            ; End of function Debug_Control
0001A388                            
0001A388                            
0001A388                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A388                            
0001A388                            
0001A388                            Debug_ShowItem:				; XREF: Debug_Main
0001A388 7000                       		moveq	#0,d0
0001A38A 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001A38E E748                       		lsl.w	#3,d0
0001A390 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001A396 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001A39C 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001A3A2 4E75                       		rts	
0001A3A4                            ; End of function Debug_ShowItem
0001A3A4                            
0001A3A4                            ; ===========================================================================
0001A3A4                            ; ---------------------------------------------------------------------------
0001A3A4                            ; Debug	list pointers
0001A3A4                            ; ---------------------------------------------------------------------------
0001A3A4                            DebugList:
0001A3A4                            	include "_inc\Debug list pointers.asm"
0001A3A4                            ; ---------------------------------------------------------------------------
0001A3A4                            ; Debug	list pointers
0001A3A4                            ; ---------------------------------------------------------------------------
0001A3A4 0000                       	dc.w Debug_GHZ-DebugList
0001A3A6 0000                       	dc.w Debug_LZ-DebugList
0001A3A8 0000                       	dc.w Debug_MZ-DebugList
0001A3AA 0000                       	dc.w Debug_SLZ-DebugList
0001A3AC 0000                       	dc.w Debug_SYZ-DebugList
0001A3AE 0000                       	dc.w Debug_SBZ-DebugList
0001A3B0 0000                       	dc.w Debug_Ending-DebugList
0001A3B0 0000                       	dc.w Debug_Ending-DebugList
0001A3B2                            
0001A3B2                            ; ---------------------------------------------------------------------------
0001A3B2                            ; Debug	list - Green Hill
0001A3B2                            ; ---------------------------------------------------------------------------
0001A3B2                            Debug_GHZ:
0001A3B2                            	include "_inc\Debug list - GHZ.asm"
0001A3B2                            ; ---------------------------------------------------------------------------
0001A3B2                            ; Debug	list - Green Hill
0001A3B2                            ; ---------------------------------------------------------------------------
0001A3B2 0010                       	dc.w $10			; number of items in list
0001A3B4 2500 803E                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001A3B8 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001A3BC 2600 8632                  	dc.l Map_obj26+$26000000
0001A3C0 0000 0680                  	dc.b 0,	0, 6, $80
0001A3C4 1F00 7808                  	dc.l Map_obj1F+$1F000000
0001A3C8 0000 0400                  	dc.b 0,	0, 4, 0
0001A3CC 2200 7AE8                  	dc.l Map_obj22+$22000000
0001A3D0 0000 0444                  	dc.b 0,	0, 4, $44
0001A3D4 2B00 8C72                  	dc.l Map_obj2B+$2B000000
0001A3D8 0000 047B                  	dc.b 0,	0, 4, $7B
0001A3DC 3600 B082                  	dc.l Map_obj36+$36000000
0001A3E0 0000 051B                  	dc.b 0,	0, 5, $1B
0001A3E4 1800 6208                  	dc.l Map_obj18+$18000000
0001A3E8 0000 4000                  	dc.b 0,	0, $40,	0
0001A3EC 3B00 B1A8                  	dc.l Map_obj3B+$3B000000
0001A3F0 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001A3F4 4000 D824                  	dc.l Map_obj40+$40000000
0001A3F8 0000 04F0                  	dc.b 0,	0, 4, $F0
0001A3FC 4100 BDAE                  	dc.l Map_obj41+$41000000
0001A400 0000 0523                  	dc.b 0,	0, 5, $23
0001A404 4200 BFD4                  	dc.l Map_obj42+$42000000
0001A408 0000 249B                  	dc.b 0,	0, $24,	$9B
0001A40C 4400 C2E2                  	dc.l Map_obj44+$44000000
0001A410 0000 434C                  	dc.b 0,	0, $43,	$4C
0001A414 1900 6274                  	dc.l Map_obj48+$19000000
0001A418 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001A41C 7901 57D6                  	dc.l Map_obj79+$79000000
0001A420 0100 07A0                  	dc.b 1,	0, 7, $A0
0001A424 4B00 807E                  	dc.l Map_obj4B+$4B000000
0001A428 0000 2400                  	dc.b 0,	0, $24,	0
0001A42C 7D01 5926                  	dc.l Map_obj7D+$7D000000
0001A430 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001A434                            	even
0001A434                            	even
0001A434                            
0001A434                            ; ---------------------------------------------------------------------------
0001A434                            ; Debug	list - Labyrinth
0001A434                            ; ---------------------------------------------------------------------------
0001A434                            Debug_LZ:
0001A434                            	include "_inc\Debug list - LZ.asm"
0001A434                            ; ---------------------------------------------------------------------------
0001A434                            ; Debug	list - Labyrinth
0001A434                            ; ---------------------------------------------------------------------------
0001A434 0019                       	dc.w $19
0001A436 2500 803E                  	dc.l Map_obj25+$25000000
0001A43A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001A43E 2600 8632                  	dc.l Map_obj26+$26000000
0001A442 0000 0680                  	dc.b 0,	0, 6, $80
0001A446 4100 BDAE                  	dc.l Map_obj41+$41000000
0001A44A 0000 0523                  	dc.b 0,	0, 5, $23
0001A44E 2C00 8D18                  	dc.l Map_obj2C+$2C000000
0001A452 0800 2486                  	dc.b 8,	0, $24,	$86
0001A456 2D00 8F04                  	dc.l Map_obj2D+$2D000000
0001A45A 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001A45E 1600 FFFE                  	dc.l Map_obj16+$16000000
0001A462 0000 03CC                  	dc.b 0,	0, 3, $CC
0001A466 1600 FFFE                  	dc.l Map_obj16+$16000000
0001A46A 0203 03CC                  	dc.b 2,	3, 3, $CC
0001A46E 3300 A382                  	dc.l Map_obj33+$33000000
0001A472 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001A476 3200 9F42                  	dc.l Map_obj32+$32000000
0001A47A 0000 0513                  	dc.b 0,	0, 5, $13
0001A47E 3600 B082                  	dc.l Map_obj36+$36000000
0001A482 0000 051B                  	dc.b 0,	0, 5, $1B
0001A486 5200 E122                  	dc.l Map_obj52a+$52000000
0001A48A 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001A48E 6101 0226                  	dc.l Map_obj61+$61000000
0001A492 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001A496 6101 0226                  	dc.l Map_obj61+$61000000
0001A49A 1301 43E6                  	dc.b $13, 1, $43, $E6
0001A49E 6101 0226                  	dc.l Map_obj61+$61000000
0001A4A2 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001A4A6 6201 037A                  	dc.l Map_obj62+$62000000
0001A4AA 0000 443E                  	dc.b 0,	0, $44,	$3E
0001A4AE 6101 0226                  	dc.l Map_obj61+$61000000
0001A4B2 2702 43E6                  	dc.b $27, 2, $43, $E6
0001A4B6 6101 0226                  	dc.l Map_obj61+$61000000
0001A4BA 3003 43E6                  	dc.b $30, 3, $43, $E6
0001A4BE 6301 06DC                  	dc.l Map_obj63+$63000000
0001A4C2 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001A4C6 6000 FF48                  	dc.l Map_obj60+$60000000
0001A4CA 0000 0467                  	dc.b 0,	0, 4, $67
0001A4CE 6401 0A20                  	dc.l Map_obj64+$64000000
0001A4D2 8413 8348                  	dc.b $84, $13, $83, $48
0001A4D6 6501 0BA8                  	dc.l Map_obj65+$65000000
0001A4DA 0202 C259                  	dc.b 2,	2, $C2,	$59
0001A4DE 6501 0BA8                  	dc.l Map_obj65+$65000000
0001A4E2 0909 C259                  	dc.b 9,	9, $C2,	$59
0001A4E6 0B00 F39A                  	dc.l Map_obj0B+$B000000
0001A4EA 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001A4EE 0C00 F46A                  	dc.l Map_obj0C+$C000000
0001A4F2 0200 4328                  	dc.b 2,	0, $43,	$28
0001A4F6 7901 57D6                  	dc.l Map_obj79+$79000000
0001A4FA 0100 07A0                  	dc.b 1,	0, 7, $A0
0001A4FE                            	even
0001A4FE                            	even
0001A4FE                            
0001A4FE                            ; ---------------------------------------------------------------------------
0001A4FE                            ; Debug	list - Marble
0001A4FE                            ; ---------------------------------------------------------------------------
0001A4FE                            Debug_MZ:
0001A4FE                            	include "_inc\Debug list - MZ.asm"
0001A4FE                            ; ---------------------------------------------------------------------------
0001A4FE                            ; Debug	list - Marble
0001A4FE                            ; ---------------------------------------------------------------------------
0001A4FE 0012                       	dc.w $12
0001A500 2500 803E                  	dc.l Map_obj25+$25000000
0001A504 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001A508 2600 8632                  	dc.l Map_obj26+$26000000
0001A50C 0000 0680                  	dc.b 0,	0, 6, $80
0001A510 2200 7AE8                  	dc.l Map_obj22+$22000000
0001A514 0000 0444                  	dc.b 0,	0, 4, $44
0001A518 3600 B082                  	dc.l Map_obj36+$36000000
0001A51C 0000 051B                  	dc.b 0,	0, 5, $1B
0001A520 4100 BDAE                  	dc.l Map_obj41+$41000000
0001A524 0000 0523                  	dc.b 0,	0, 5, $23
0001A528 1300 9412                  	dc.l Map_obj14+$13000000
0001A52C 0000 0345                  	dc.b 0,	0, 3, $45
0001A530 4600 C994                  	dc.l Map_obj46+$46000000
0001A534 0000 4000                  	dc.b 0,	0, $40,	0
0001A538 4C00 D2D0                  	dc.l Map_obj4C+$4C000000
0001A53C 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001A540 4E00 D5B4                  	dc.l Map_obj4E+$4E000000
0001A544 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001A548 3300 A382                  	dc.l Map_obj33+$33000000
0001A54C 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001A550 5000 D9B2                  	dc.l Map_obj50+$50000000
0001A554 0000 247B                  	dc.b 0,	0, $24,	$7B
0001A558 5100 DE56                  	dc.l Map_obj51+$51000000
0001A55C 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001A560 5200 E0CC                  	dc.l Map_obj52+$52000000
0001A564 0000 02B8                  	dc.b 0,	0, 2, $B8
0001A568 5300 680C                  	dc.l Map_obj53+$53000000
0001A56C 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001A570 5400 D296                  	dc.l Map_obj54+$54000000
0001A574 0000 8680                  	dc.b 0,	0, $86,	$80
0001A578 5500 E2C0                  	dc.l Map_obj55+$55000000
0001A57C 0000 04B8                  	dc.b 0,	0, 4, $B8
0001A580 7801 5450                  	dc.l Map_obj78+$78000000
0001A584 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001A588 7901 57D6                  	dc.l Map_obj79+$79000000
0001A58C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001A590                            	even
0001A590                            	even
0001A590                            
0001A590                            ; ---------------------------------------------------------------------------
0001A590                            ; Debug	list - Star Light
0001A590                            ; ---------------------------------------------------------------------------
0001A590                            Debug_SLZ:
0001A590                            	include "_inc\Debug list - SLZ.asm"
0001A590                            ; ---------------------------------------------------------------------------
0001A590                            ; Debug	list - Star Light
0001A590                            ; ---------------------------------------------------------------------------
0001A590 000F                       	dc.w $F
0001A592 2500 803E                  	dc.l Map_obj25+$25000000
0001A596 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001A59A 2600 8632                  	dc.l Map_obj26+$26000000
0001A59E 0000 0680                  	dc.b 0,	0, 6, $80
0001A5A2 5900 EDC2                  	dc.l Map_obj59+$59000000
0001A5A6 0000 4000                  	dc.b 0,	0, $40,	0
0001A5AA 5300 680C                  	dc.l Map_obj53+$53000000
0001A5AE 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001A5B2 1800 6266                  	dc.l Map_obj18b+$18000000
0001A5B6 0000 4000                  	dc.b 0,	0, $40,	0
0001A5BA 5A00 EEFC                  	dc.l Map_obj5A+$5A000000
0001A5BE 0000 4000                  	dc.b 0,	0, $40,	0
0001A5C2 5B00 F0B4                  	dc.l Map_obj5B+$5B000000
0001A5C6 0000 4000                  	dc.b 0,	0, $40,	0
0001A5CA 5D00 F684                  	dc.l Map_obj5D+$5D000000
0001A5CE 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001A5D2 5E00 FA14                  	dc.l Map_obj5E+$5E000000
0001A5D6 0000 0374                  	dc.b 0,	0, 3, $74
0001A5DA 4100 BDAE                  	dc.l Map_obj41+$41000000
0001A5DE 0000 0523                  	dc.b 0,	0, 5, $23
0001A5E2 1300 9412                  	dc.l Map_obj14+$13000000
0001A5E6 0000 0480                  	dc.b 0,	0, 4, $80
0001A5EA 1C00 691C                  	dc.l Map_obj1C+$1C000000
0001A5EE 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001A5F2 5F00 FC92                  	dc.l Map_obj5F+$5F000000
0001A5F6 0000 0400                  	dc.b 0,	0, 4, 0
0001A5FA 6000 FF48                  	dc.l Map_obj60+$60000000
0001A5FE 0000 2429                  	dc.b 0,	0, $24,	$29
0001A602 7901 57D6                  	dc.l Map_obj79+$79000000
0001A606 0100 07A0                  	dc.b 1,	0, 7, $A0
0001A60A                            	even
0001A60A                            	even
0001A60A                            
0001A60A                            ; ---------------------------------------------------------------------------
0001A60A                            ; Debug	list - Spring Yard
0001A60A                            ; ---------------------------------------------------------------------------
0001A60A                            Debug_SYZ:
0001A60A                            	include "_inc\Debug list - SYZ.asm"
0001A60A                            ; ---------------------------------------------------------------------------
0001A60A                            ; Debug	list - Spring Yard
0001A60A                            ; ---------------------------------------------------------------------------
0001A60A 000F                       	dc.w $F
0001A60C 2500 803E                  	dc.l Map_obj25+$25000000
0001A610 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001A614 2600 8632                  	dc.l Map_obj26+$26000000
0001A618 0000 0680                  	dc.b 0,	0, 6, $80
0001A61C 3600 B082                  	dc.l Map_obj36+$36000000
0001A620 0000 051B                  	dc.b 0,	0, 5, $1B
0001A624 4100 BDAE                  	dc.l Map_obj41+$41000000
0001A628 0000 0523                  	dc.b 0,	0, 5, $23
0001A62C 4300 C234                  	dc.l Map_obj43+$43000000
0001A630 0000 04B8                  	dc.b 0,	0, 4, $B8
0001A634 1200 CA12                  	dc.l Map_obj12+$12000000
0001A638 0000 0000                  	dc.b 0,	0, 0, 0
0001A63C 4700 CB8E                  	dc.l Map_obj47+$47000000
0001A640 0000 0380                  	dc.b 0,	0, 3, $80
0001A644 1F00 7808                  	dc.l Map_obj1F+$1F000000
0001A648 0000 0400                  	dc.b 0,	0, 4, 0
0001A64C 2200 7AE8                  	dc.l Map_obj22+$22000000
0001A650 0000 0444                  	dc.b 0,	0, 4, $44
0001A654 5000 D9B2                  	dc.l Map_obj50+$50000000
0001A658 0000 247B                  	dc.b 0,	0, $24,	$7B
0001A65C 1800 6254                  	dc.l Map_obj18a+$18000000
0001A660 0000 4000                  	dc.b 0,	0, $40,	0
0001A664 5600 E782                  	dc.l Map_obj56+$56000000
0001A668 0000 4000                  	dc.b 0,	0, $40,	0
0001A66C 3200 9F42                  	dc.l Map_obj32+$32000000
0001A670 0000 0513                  	dc.b 0,	0, 5, $13
0001A674 7801 5450                  	dc.l Map_obj78+$78000000
0001A678 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001A67C 7901 57D6                  	dc.l Map_obj79+$79000000
0001A680 0100 07A0                  	dc.b 1,	0, 7, $A0
0001A684                            	even
0001A684                            	even
0001A684                            
0001A684                            ; ---------------------------------------------------------------------------
0001A684                            ; Debug	list - Scrap Brain
0001A684                            ; ---------------------------------------------------------------------------
0001A684                            Debug_SBZ:
0001A684                            	include "_inc\Debug list - SBZ.asm"
0001A684                            ; ---------------------------------------------------------------------------
0001A684                            ; Debug	list - Scrap Brain
0001A684                            ; ---------------------------------------------------------------------------
0001A684 001D                       	dc.w $1D
0001A686 2500 803E                  	dc.l Map_obj25+$25000000
0001A68A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001A68E 2600 8632                  	dc.l Map_obj26+$26000000
0001A692 0000 0680                  	dc.b 0,	0, 6, $80
0001A696 5F00 FC92                  	dc.l Map_obj5F+$5F000000
0001A69A 0000 0400                  	dc.b 0,	0, 4, 0
0001A69E 6000 FF48                  	dc.l Map_obj60+$60000000
0001A6A2 0000 0429                  	dc.b 0,	0, 4, $29
0001A6A6 7801 5450                  	dc.l Map_obj78+$78000000
0001A6AA 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001A6AE 1500 EB1E                  	dc.l Map_obj15b+$15000000
0001A6B2 0702 4391                  	dc.b 7,	2, $43,	$91
0001A6B6 6701 3D74                  	dc.l Map_obj67+$67000000
0001A6BA E000 C344                  	dc.b $E0, 0, $C3, $44
0001A6BE 5200 E0CC                  	dc.l Map_obj52+$52000000
0001A6C2 2802 22C0                  	dc.b $28, 2, $22, $C0
0001A6C6 3200 9F42                  	dc.l Map_obj32+$32000000
0001A6CA 0000 0513                  	dc.b 0,	0, 5, $13
0001A6CE 6901 3FCE                  	dc.l Map_obj69+$69000000
0001A6D2 0300 4492                  	dc.b 3,	0, $44,	$92
0001A6D6 6901 4028                  	dc.l Map_obj69a+$69000000
0001A6DA 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001A6DE 6A01 4286                  	dc.l Map_obj6A+$6A000000
0001A6E2 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001A6E6 5300 680C                  	dc.l Map_obj53+$53000000
0001A6EA 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001A6EE 5200 E0CC                  	dc.l Map_obj52+$52000000
0001A6F2 3903 4460                  	dc.b $39, 3, $44, $60
0001A6F6 6B01 4656                  	dc.l Map_obj6B+$6B000000
0001A6FA 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001A6FE 2A00 6AB2                  	dc.l Map_obj2A+$2A000000
0001A702 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001A706 6B01 4656                  	dc.l Map_obj6B+$6B000000
0001A70A 1301 22C0                  	dc.b $13, 1, $22, $C0
0001A70E 6A01 4286                  	dc.l Map_obj6A+$6A000000
0001A712 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001A716 6B01 4656                  	dc.l Map_obj6B+$6B000000
0001A71A 2401 22C0                  	dc.b $24, 1, $22, $C0
0001A71E 6A01 4286                  	dc.l Map_obj6A+$6A000000
0001A722 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001A726 6B01 4656                  	dc.l Map_obj6B+$6B000000
0001A72A 3401 22C0                  	dc.b $34, 1, $22, $C0
0001A72E 6C01 4818                  	dc.l Map_obj6C+$6C000000
0001A732 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001A736 6D00 C684                  	dc.l Map_obj6D+$6D000000
0001A73A 6400 83D9                  	dc.b $64, 0, $83, $D9
0001A73E 6D00 C684                  	dc.l Map_obj6D+$6D000000
0001A742 640B 83D9                  	dc.b $64, $B, $83, $D9
0001A746 6E01 48CE                  	dc.l Map_obj6E+$6E000000
0001A74A 0400 047E                  	dc.b 4,	0, 4, $7E
0001A74E 7001 4D14                  	dc.l Map_obj70+$70000000
0001A752 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001A756 7100 F52A                  	dc.l Map_obj71+$71000000
0001A75A 1100 8680                  	dc.b $11, 0, $86, $80
0001A75E 1E00 6F20                  	dc.l Map_obj1E+$1E000000
0001A762 0400 2302                  	dc.b 4,	0, $23,	2
0001A766 7901 57D6                  	dc.l Map_obj79+$79000000
0001A76A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001A76E                            	even
0001A76E                            	even
0001A76E                            
0001A76E                            ; ---------------------------------------------------------------------------
0001A76E                            ; Debug	list - ending sequence / special stage
0001A76E                            ; ---------------------------------------------------------------------------
0001A76E                            Debug_Ending:
0001A76E                            	include "_inc\Debug list - Ending and SS.asm"
0001A76E                            ; ---------------------------------------------------------------------------
0001A76E                            ; Debug	list - ending sequence / special stage
0001A76E                            ; ---------------------------------------------------------------------------
0001A76E 000D                       	dc.w $D
0001A770 2500 803E                  	dc.l Map_obj25+$25000000
0001A774 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001A778 4700 CB8E                  	dc.l Map_obj47+$47000000
0001A77C 0000 0380                  	dc.b 0,	0, 3, $80
0001A780 2800 753A                  	dc.l Map_obj28a+$28000000
0001A784 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001A788 2800 753A                  	dc.l Map_obj28a+$28000000
0001A78C 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001A790 2800 753A                  	dc.l Map_obj28a+$28000000
0001A794 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001A798 2800 7522                  	dc.l Map_obj28+$28000000
0001A79C 0D00 0553                  	dc.b $D, 0, 5, $53
0001A7A0 2800 7522                  	dc.l Map_obj28+$28000000
0001A7A4 0E00 0553                  	dc.b $E, 0, 5, $53
0001A7A8 2800 7522                  	dc.l Map_obj28+$28000000
0001A7AC 0F00 0573                  	dc.b $F, 0, 5, $73
0001A7B0 2800 7522                  	dc.l Map_obj28+$28000000
0001A7B4 1000 0573                  	dc.b $10, 0, 5,	$73
0001A7B8 2800 753A                  	dc.l Map_obj28a+$28000000
0001A7BC 1100 0585                  	dc.b $11, 0, 5,	$85
0001A7C0 2800 7552                  	dc.l Map_obj28b+$28000000
0001A7C4 1200 0593                  	dc.b $12, 0, 5,	$93
0001A7C8 2800 753A                  	dc.l Map_obj28a+$28000000
0001A7CC 1300 0565                  	dc.b $13, 0, 5,	$65
0001A7D0 2800 7552                  	dc.l Map_obj28b+$28000000
0001A7D4 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001A7D8                            	even
0001A7D8                            	even
0001A7D8                            
0001A7D8                            ; ---------------------------------------------------------------------------
0001A7D8                            ; Main level load blocks
0001A7D8                            ; ---------------------------------------------------------------------------
0001A7D8                            MainLoadBlocks:
0001A7D8                            	include "_inc\Main level load blocks.asm"
0001A7D8                            ; ---------------------------------------------------------------------------
0001A7D8                            ; Main level load blocks
0001A7D8                            ;
0001A7D8                            ; ===FORMAT===
0001A7D8                            ; level	patterns + (1st	PLC num	* 10^6)
0001A7D8                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001A7D8                            ; 256x256 mappings
0001A7D8                            ; blank, music (unused), pal index (unused), pal index
0001A7D8                            ; ---------------------------------------------------------------------------
0001A7D8 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001A7DC 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001A7E0 0000 0000                  	dc.l Blk256_GHZ
0001A7E4 0081 0404                  	dc.b 0,	$81, 4,	4
0001A7E8 0000 0000                  	dc.l Nem_LZ+$6000000
0001A7EC 0000 0000                  	dc.l Blk16_LZ+$7000000
0001A7F0 0000 0000                  	dc.l Blk256_LZ
0001A7F4 0082 0505                  	dc.b 0,	$82, 5,	5
0001A7F8 0000 0000                  	dc.l Nem_MZ+$8000000
0001A7FC 0000 0000                  	dc.l Blk16_MZ+$9000000
0001A800 0000 0000                  	dc.l Blk256_MZ
0001A804 0083 0606                  	dc.b 0,	$83, 6,	6
0001A808 0000 0000                  	dc.l Nem_SLZ+$A000000
0001A80C 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001A810 0000 0000                  	dc.l Blk256_SLZ
0001A814 0084 0707                  	dc.b 0,	$84, 7,	7
0001A818 0000 0000                  	dc.l Nem_SYZ+$C000000
0001A81C 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001A820 0000 0000                  	dc.l Blk256_SYZ
0001A824 0085 0808                  	dc.b 0,	$85, 8,	8
0001A828 0000 0000                  	dc.l Nem_SBZ+$E000000
0001A82C 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001A830 0000 0000                  	dc.l Blk256_SBZ
0001A834 0086 0909                  	dc.b 0,	$86, 9,	9
0001A838 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001A83C 0000 0000                  	dc.l Blk16_GHZ
0001A840 0000 0000                  	dc.l Blk256_GHZ
0001A844 0086 1313                  	dc.b 0,	$86, $13, $13
0001A848                            	even
0001A848                            	even
0001A848                            
0001A848                            ; ---------------------------------------------------------------------------
0001A848                            ; Pattern load cues
0001A848                            ; ---------------------------------------------------------------------------
0001A848                            ArtLoadCues:
0001A848                            	include "_inc\Pattern load cues.asm"
0001A848                            ; ---------------------------------------------------------------------------
0001A848                            ; Pattern load cues - index
0001A848                            ; ---------------------------------------------------------------------------
0001A848 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001A84C 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001A850 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001A854 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001A858 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001A85C 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001A860 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001A864 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001A868 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001A86C 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001A870 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001A874 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001A878 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001A87C 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001A880 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001A884 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001A888                            ; ---------------------------------------------------------------------------
0001A888                            ; Pattern load cues - standard block 1
0001A888                            ; ---------------------------------------------------------------------------
0001A888 0004                       PLC_Main:	dc.w 4
0001A88A 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001A88E F400                       		dc.w $F400
0001A890 0000 0000                  		dc.l Nem_Hud		; HUD
0001A894 D940                       		dc.w $D940
0001A896 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001A89A FA80                       		dc.w $FA80
0001A89C 0000 0000                  		dc.l Nem_Ring		; rings
0001A8A0 F640                       		dc.w $F640
0001A8A2 0000 0000                  		dc.l Nem_Points		; points from enemy
0001A8A6 F2E0                       		dc.w $F2E0
0001A8A8                            ; ---------------------------------------------------------------------------
0001A8A8                            ; Pattern load cues - standard block 2
0001A8A8                            ; ---------------------------------------------------------------------------
0001A8A8 0002                       PLC_Main2:	dc.w 2
0001A8AA 0001 1E40                  		dc.l Nem_PowerUps	; monitors
0001A8AE D000                       		dc.w $D000
0001A8B0 0000 0000                  		dc.l Nem_Shield		; shield
0001A8B4 A820                       		dc.w $A820
0001A8B6 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001A8BA AB80                       		dc.w $AB80
0001A8BC                            ; ---------------------------------------------------------------------------
0001A8BC                            ; Pattern load cues - explosion
0001A8BC                            ; ---------------------------------------------------------------------------
0001A8BC 0000                       PLC_Explode:	dc.w 0
0001A8BE 0000 0000                  		dc.l Nem_Explode	; explosion
0001A8C2 B400                       		dc.w $B400
0001A8C4                            ; ---------------------------------------------------------------------------
0001A8C4                            ; Pattern load cues - game/time	over
0001A8C4                            ; ---------------------------------------------------------------------------
0001A8C4 0000                       PLC_GameOver:	dc.w 0
0001A8C6 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001A8CA ABC0                       		dc.w $ABC0
0001A8CC                            ; ---------------------------------------------------------------------------
0001A8CC                            ; Pattern load cues - Green Hill
0001A8CC                            ; ---------------------------------------------------------------------------
0001A8CC 0000                       PLC_GHZ:	dc.w 0
0001A8CE 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001A8D2 0000                       		dc.w 0
0001A8D4 0000                       PLC_GHZ2:	dc.w 0
0001A8D6 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001A8DA 7000                       		dc.w $7000
0001A8DC                            ; ---------------------------------------------------------------------------
0001A8DC                            ; Pattern load cues - Labyrinth
0001A8DC                            ; ---------------------------------------------------------------------------
0001A8DC 000B                       PLC_LZ:		dc.w $B
0001A8DE 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001A8E2 0000                       		dc.w 0
0001A8E4 0000 0000                  		dc.l Nem_LzBlock1	; block
0001A8E8 3C00                       		dc.w $3C00
0001A8EA 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001A8EE 3E00                       		dc.w $3E00
0001A8F0 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001A8F4 4B20                       		dc.w $4B20
0001A8F6 0000 0000                  		dc.l Nem_Water		; water	surface
0001A8FA 6000                       		dc.w $6000
0001A8FC 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001A900 6200                       		dc.w $6200
0001A902 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001A906 6500                       		dc.w $6500
0001A908 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001A90C 6900                       		dc.w $6900
0001A90E 0000 0000                  		dc.l Nem_LzBlock3	; block
0001A912 7780                       		dc.w $7780
0001A914 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001A918 7880                       		dc.w $7880
0001A91A 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001A91E 7980                       		dc.w $7980
0001A920 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001A924 94C0                       		dc.w $94C0
0001A926 000B                       PLC_LZ2:	dc.w $B
0001A928 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001A92C 7BC0                       		dc.w $7BC0
0001A92E 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001A932 7CC0                       		dc.w $7CC0
0001A934 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001A938 7EC0                       		dc.w $7EC0
0001A93A 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001A93E 5D20                       		dc.w $5D20
0001A940 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001A944 89E0                       		dc.w $89E0
0001A946 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001A94A 8CE0                       		dc.w $8CE0
0001A94C 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001A950 90C0                       		dc.w $90C0
0001A952 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001A956 A1E0                       		dc.w $A1E0
0001A958 0000 0000                  		dc.l Nem_Cork		; cork block
0001A95C A000                       		dc.w $A000
0001A95E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001A962 A360                       		dc.w $A360
0001A964 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001A968 A460                       		dc.w $A460
0001A96A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001A96E A660                       		dc.w $A660
0001A970                            ; ---------------------------------------------------------------------------
0001A970                            ; Pattern load cues - Marble
0001A970                            ; ---------------------------------------------------------------------------
0001A970 0001                       PLC_MZ:		dc.w 1
0001A972 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001A976 0000                       		dc.w 0
0001A978 0001 1FB4                  		dc.l Nem_GreenBubble	; metal	blocks
0001A97C 6000                       		dc.w $6000
0001A97E                            
0001A97E 0000                       PLC_MZ2:	dc.w 0
0001A980 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001A984 A260                       		dc.w $A260
0001A986                            ; ---------------------------------------------------------------------------
0001A986                            ; Pattern load cues - Star Light
0001A986                            ; ---------------------------------------------------------------------------
0001A986 0008                       PLC_SLZ:	dc.w 8
0001A988 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001A98C 0000                       		dc.w 0
0001A98E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001A992 8000                       		dc.w $8000
0001A994 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001A998 8520                       		dc.w $8520
0001A99A 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001A99E 9000                       		dc.w $9000
0001A9A0 0000 0000                  		dc.l Nem_SlzBlock	; block
0001A9A4 9C00                       		dc.w $9C00
0001A9A6 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001A9AA A260                       		dc.w $A260
0001A9AC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001A9B0 A360                       		dc.w $A360
0001A9B2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001A9B6 A460                       		dc.w $A460
0001A9B8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001A9BC A660                       		dc.w $A660
0001A9BE 0005                       PLC_SLZ2:	dc.w 5
0001A9C0 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001A9C4 6E80                       		dc.w $6E80
0001A9C6 0000 0000                  		dc.l Nem_Fan		; fan
0001A9CA 7400                       		dc.w $7400
0001A9CC 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001A9D0 7980                       		dc.w $7980
0001A9D2 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001A9D6 7B80                       		dc.w $7B80
0001A9D8 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001A9DC 9B00                       		dc.w $9B00
0001A9DE 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001A9E2 9E00                       		dc.w $9E00
0001A9E4                            ; ---------------------------------------------------------------------------
0001A9E4                            ; Pattern load cues - Spring Yard
0001A9E4                            ; ---------------------------------------------------------------------------
0001A9E4 0004                       PLC_SYZ:	dc.w 4
0001A9E6 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001A9EA 0000                       		dc.w 0
0001A9EC 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001A9F0 8000                       		dc.w $8000
0001A9F2 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001A9F6 8880                       		dc.w $8880
0001A9F8 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001A9FC 8F60                       		dc.w $8F60
0001A9FE 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001AA02 9700                       		dc.w $9700
0001AA04 0007                       PLC_SYZ2:	dc.w 7
0001AA06 0000 0000                  		dc.l Nem_Bumper		; bumper
0001AA0A 7000                       		dc.w $7000
0001AA0C 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001AA10 72C0                       		dc.w $72C0
0001AA12 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001AA16 7740                       		dc.w $7740
0001AA18 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001AA1C 9FE0                       		dc.w $9FE0
0001AA1E 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001AA22 A1E0                       		dc.w $A1E0
0001AA24 0000 0000                  		dc.l Nem_Spikes		; spikes
0001AA28 A360                       		dc.w $A360
0001AA2A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001AA2E A460                       		dc.w $A460
0001AA30 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001AA34 A660                       		dc.w $A660
0001AA36                            ; ---------------------------------------------------------------------------
0001AA36                            ; Pattern load cues - Scrap Brain
0001AA36                            ; ---------------------------------------------------------------------------
0001AA36 000B                       PLC_SBZ:	dc.w $B
0001AA38 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001AA3C 0000                       		dc.w 0
0001AA3E 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001AA42 5800                       		dc.w $5800
0001AA44 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001AA48 5D00                       		dc.w $5D00
0001AA4A 0000 0000                  		dc.l Nem_Girder		; girder
0001AA4E 5E00                       		dc.w $5E00
0001AA50 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001AA54 6040                       		dc.w $6040
0001AA56 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001AA5A 6880                       		dc.w $6880
0001AA5C 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001AA60 6900                       		dc.w $6900
0001AA62 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001AA66 7220                       		dc.w $7220
0001AA68 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001AA6C 76A0                       		dc.w $76A0
0001AA6E 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001AA72 7B20                       		dc.w $7B20
0001AA74 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001AA78 7EA0                       		dc.w $7EA0
0001AA7A 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001AA7E 9860                       		dc.w $9860
0001AA80 000C                       PLC_SBZ2:	dc.w $C
0001AA82 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001AA86 5600                       		dc.w $5600
0001AA88 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001AA8C 8000                       		dc.w $8000
0001AA8E 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001AA92 8520                       		dc.w $8520
0001AA94 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001AA98 8C00                       		dc.w $8C00
0001AA9A 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001AA9E 8DE0                       		dc.w $8DE0
0001AAA0 0000 0000                  		dc.l Nem_Electric	; electric orb
0001AAA4 8FC0                       		dc.w $8FC0
0001AAA6 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001AAAA 9240                       		dc.w $9240
0001AAAC 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001AAB0 7F20                       		dc.w $7F20
0001AAB2 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001AAB6 9BE0                       		dc.w $9BE0
0001AAB8 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001AABC A1E0                       		dc.w $A1E0
0001AABE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001AAC2 A360                       		dc.w $A360
0001AAC4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001AAC8 A460                       		dc.w $A460
0001AACA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001AACE A660                       		dc.w $A660
0001AAD0                            ; ---------------------------------------------------------------------------
0001AAD0                            ; Pattern load cues - title card
0001AAD0                            ; ---------------------------------------------------------------------------
0001AAD0 0000                       PLC_TitleCard:	dc.w 0
0001AAD2 0000 0000                  		dc.l Nem_TitleCard
0001AAD6 B000                       		dc.w $B000
0001AAD8                            ; ---------------------------------------------------------------------------
0001AAD8                            ; Pattern load cues - act 3 boss
0001AAD8                            ; ---------------------------------------------------------------------------
0001AAD8 0005                       PLC_Boss:	dc.w 5
0001AADA 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001AADE 8000                       		dc.w $8000
0001AAE0 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001AAE4 8D80                       		dc.w $8D80
0001AAE6 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001AAEA 93A0                       		dc.w $93A0
0001AAEC 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001AAF0 A300                       		dc.w $A300
0001AAF2 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001AAF6 A300                       		dc.w $A300
0001AAF8 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001AAFC A540                       		dc.w $A540
0001AAFE                            ; ---------------------------------------------------------------------------
0001AAFE                            ; Pattern load cues - act 1/2 signpost
0001AAFE                            ; ---------------------------------------------------------------------------
0001AAFE 0002                       PLC_Signpost:	dc.w 2
0001AB00 0000 0000                  		dc.l Nem_SignPost	; signpost
0001AB04 D000                       		dc.w $D000
0001AB06 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001AB0A 96C0                       		dc.w $96C0
0001AB0C 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001AB10 8C40                       		dc.w $8C40
0001AB12                            ; ---------------------------------------------------------------------------
0001AB12                            ; Pattern load cues - beta special stage warp effect
0001AB12                            ; ---------------------------------------------------------------------------
0001AB12                            PLC_Warp:
0001AB12                            ; ---------------------------------------------------------------------------
0001AB12                            ; Pattern load cues - special stage
0001AB12                            ; ---------------------------------------------------------------------------
0001AB12                            PLC_SpeStage:
0001AB12                            ; ---------------------------------------------------------------------------
0001AB12                            ; Pattern load cues - GHZ animals
0001AB12                            ; ---------------------------------------------------------------------------
0001AB12 0001                       PLC_GHZAnimals:	dc.w 1
0001AB14 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001AB18 B000                       		dc.w $B000
0001AB1A 0000 0000                  		dc.l Nem_Flicky		; flicky
0001AB1E B240                       		dc.w $B240
0001AB20                            ; ---------------------------------------------------------------------------
0001AB20                            ; Pattern load cues - LZ animals
0001AB20                            ; ---------------------------------------------------------------------------
0001AB20 0001                       PLC_LZAnimals:	dc.w 1
0001AB22 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001AB26 B000                       		dc.w $B000
0001AB28 0000 0000                  		dc.l Nem_Seal		; seal
0001AB2C B240                       		dc.w $B240
0001AB2E                            ; ---------------------------------------------------------------------------
0001AB2E                            ; Pattern load cues - MZ animals
0001AB2E                            ; ---------------------------------------------------------------------------
0001AB2E 0001                       PLC_MZAnimals:	dc.w 1
0001AB30 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001AB34 B000                       		dc.w $B000
0001AB36 0000 0000                  		dc.l Nem_Seal		; seal
0001AB3A B240                       		dc.w $B240
0001AB3C                            ; ---------------------------------------------------------------------------
0001AB3C                            ; Pattern load cues - SLZ animals
0001AB3C                            ; ---------------------------------------------------------------------------
0001AB3C 0001                       PLC_SLZAnimals:	dc.w 1
0001AB3E 0000 0000                  		dc.l Nem_Pig		; pig
0001AB42 B000                       		dc.w $B000
0001AB44 0000 0000                  		dc.l Nem_Flicky		; flicky
0001AB48 B240                       		dc.w $B240
0001AB4A                            ; ---------------------------------------------------------------------------
0001AB4A                            ; Pattern load cues - SYZ animals
0001AB4A                            ; ---------------------------------------------------------------------------
0001AB4A 0001                       PLC_SYZAnimals:	dc.w 1
0001AB4C 0000 0000                  		dc.l Nem_Pig		; pig
0001AB50 B000                       		dc.w $B000
0001AB52 0000 0000                  		dc.l Nem_Chicken	; chicken
0001AB56 B240                       		dc.w $B240
0001AB58                            ; ---------------------------------------------------------------------------
0001AB58                            ; Pattern load cues - SBZ animals
0001AB58                            ; ---------------------------------------------------------------------------
0001AB58 0001                       PLC_SBZAnimals:	dc.w 1
0001AB5A 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001AB5E B000                       		dc.w $B000
0001AB60 0000 0000                  		dc.l Nem_Chicken	; chicken
0001AB64 B240                       		dc.w $B240
0001AB66                            ; ---------------------------------------------------------------------------
0001AB66                            ; Pattern load cues - special stage results screen
0001AB66                            ; ---------------------------------------------------------------------------
0001AB66                            PLC_SpeStResult:
0001AB66                            ; ---------------------------------------------------------------------------
0001AB66                            ; Pattern load cues - ending sequence
0001AB66                            ; ---------------------------------------------------------------------------
0001AB66 000C                       PLC_Ending:	dc.w $C
0001AB68 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001AB6C 0000                       		dc.w 0
0001AB6E 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001AB72 6B00                       		dc.w $6B00
0001AB74 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001AB78 7400                       		dc.w $7400
0001AB7A 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001AB7E 78A0                       		dc.w $78A0
0001AB80 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001AB84 7C20                       		dc.w $7C20
0001AB86 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001AB8A AA60                       		dc.w $AA60
0001AB8C 0000 0000                  		dc.l Nem_Chicken	; chicken
0001AB90 ACA0                       		dc.w $ACA0
0001AB92 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001AB96 AE60                       		dc.w $AE60
0001AB98 0000 0000                  		dc.l Nem_Seal		; seal
0001AB9C B0A0                       		dc.w $B0A0
0001AB9E 0000 0000                  		dc.l Nem_Pig		; pig
0001ABA2 B260                       		dc.w $B260
0001ABA4 0000 0000                  		dc.l Nem_Flicky		; flicky
0001ABA8 B4A0                       		dc.w $B4A0
0001ABAA 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001ABAE B660                       		dc.w $B660
0001ABB0 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001ABB4 B8A0                       		dc.w $B8A0
0001ABB6                            ; ---------------------------------------------------------------------------
0001ABB6                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001ABB6                            ; ---------------------------------------------------------------------------
0001ABB6 0002                       PLC_TryAgain:	dc.w 2
0001ABB8 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001ABBC 78A0                       		dc.w $78A0
0001ABBE 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001ABC2 7C20                       		dc.w $7C20
0001ABC4 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001ABC8 B400                       		dc.w $B400
0001ABCA                            ; ---------------------------------------------------------------------------
0001ABCA                            ; Pattern load cues - Eggman on SBZ 2
0001ABCA                            ; ---------------------------------------------------------------------------
0001ABCA 0002                       PLC_EggmanSBZ2:	dc.w 2
0001ABCC 0000 0000                  		dc.l Nem_SbzBlock	; block
0001ABD0 A300                       		dc.w $A300
0001ABD2 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001ABD6 8000                       		dc.w $8000
0001ABD8 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001ABDC 9400                       		dc.w $9400
0001ABDE                            ; ---------------------------------------------------------------------------
0001ABDE                            ; Pattern load cues - final boss
0001ABDE                            ; ---------------------------------------------------------------------------
0001ABDE 0004                       PLC_FZBoss:	dc.w 4
0001ABE0 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001ABE4 7400                       		dc.w $7400
0001ABE6 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001ABEA 6000                       		dc.w $6000
0001ABEC 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001ABF0 8000                       		dc.w $8000
0001ABF2 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001ABF6 8E00                       		dc.w $8E00
0001ABF8 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001ABFC A540                       		dc.w $A540
0001ABFE                            		even
0001ABFE                            		even
0001ABFE                            
0001ABFE                            		incbin	misc\padding.bin
0001ACEC                            		even
0001ACEC                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001B14E                            		even
0001B14E                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001B246                            		even
0001B246                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001B35A                            		even
0001B35A                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001C366                            		even
0001C366                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
0001DD34                            		even
0001DD34                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
0001DD68                            		even
0001DD68                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
0001DE26                            		even
0001DE26                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0001E2CE                            		even
0001E2CE                            ; ---------------------------------------------------------------------------
0001E2CE                            ; Sprite mappings - Sonic
0001E2CE                            ; ---------------------------------------------------------------------------
0001E2CE                            Map_Sonic:
0001E2CE                            	include "_maps\Sonic.asm"
0001E2CE                            Map_feca:
0001E2CE 0000                       Map_feca_0: 	dc.w Map_feca_6A-Map_feca
0001E2D0 0000                       Map_feca_2: 	dc.w Map_feca_6B-Map_feca
0001E2D2 0000                       Map_feca_4: 	dc.w Map_feca_71-Map_feca
0001E2D4 0000                       Map_feca_6: 	dc.w Map_feca_77-Map_feca
0001E2D6 0000                       Map_feca_8: 	dc.w Map_feca_7D-Map_feca
0001E2D8 0000                       Map_feca_A: 	dc.w Map_feca_83-Map_feca
0001E2DA 0000                       Map_feca_C: 	dc.w Map_feca_89-Map_feca
0001E2DC 0000                       Map_feca_E: 	dc.w Map_feca_8F-Map_feca
0001E2DE 0000                       Map_feca_10: 	dc.w Map_feca_9F-Map_feca
0001E2E0 0000                       Map_feca_12: 	dc.w Map_feca_A0-Map_feca
0001E2E2 0000                       Map_feca_14: 	dc.w Map_feca_A1-Map_feca
0001E2E4 0000                       Map_feca_16: 	dc.w Map_feca_A2-Map_feca
0001E2E6 0000                       Map_feca_18: 	dc.w Map_feca_A8-Map_feca
0001E2E8 0000                       Map_feca_1A: 	dc.w Map_feca_AE-Map_feca
0001E2EA 0000                       Map_feca_1C: 	dc.w Map_feca_B4-Map_feca
0001E2EC 0000                       Map_feca_1E: 	dc.w Map_feca_BA-Map_feca
0001E2EE 0000                       Map_feca_20: 	dc.w Map_feca_C0-Map_feca
0001E2F0 0000                       Map_feca_22: 	dc.w Map_feca_C6-Map_feca
0001E2F2 0000                       Map_feca_24: 	dc.w Map_feca_CC-Map_feca
0001E2F4 0000                       Map_feca_26: 	dc.w Map_feca_D2-Map_feca
0001E2F6 0000                       Map_feca_28: 	dc.w Map_feca_D8-Map_feca
0001E2F8 0000                       Map_feca_2A: 	dc.w Map_feca_DE-Map_feca
0001E2FA 0000                       Map_feca_2C: 	dc.w Map_feca_E4-Map_feca
0001E2FC 0000                       Map_feca_2E: 	dc.w Map_feca_EA-Map_feca
0001E2FE 0000                       Map_feca_30: 	dc.w Map_feca_F0-Map_feca
0001E300 0000                       Map_feca_32: 	dc.w Map_feca_F6-Map_feca
0001E302 0000                       Map_feca_34: 	dc.w Map_feca_FC-Map_feca
0001E304 0000                       Map_feca_36: 	dc.w Map_feca_102-Map_feca
0001E306 0000                       Map_feca_38: 	dc.w Map_feca_108-Map_feca
0001E308 0000                       Map_feca_3A: 	dc.w Map_feca_10E-Map_feca
0001E30A 0000                       Map_feca_3C: 	dc.w Map_feca_114-Map_feca
0001E30C 0000                       Map_feca_3E: 	dc.w Map_feca_11A-Map_feca
0001E30E 0000                       Map_feca_40: 	dc.w Map_feca_120-Map_feca
0001E310 0000                       Map_feca_42: 	dc.w Map_feca_126-Map_feca
0001E312 0000                       Map_feca_44: 	dc.w Map_feca_12C-Map_feca
0001E314 0000                       Map_feca_46: 	dc.w Map_feca_132-Map_feca
0001E316 0000                       Map_feca_48: 	dc.w Map_feca_138-Map_feca
0001E318 0000                       Map_feca_4A: 	dc.w Map_feca_13E-Map_feca
0001E31A 0000                       Map_feca_4C: 	dc.w Map_feca_144-Map_feca
0001E31C 0000                       Map_feca_4E: 	dc.w Map_feca_14A-Map_feca
0001E31E 0000                       Map_feca_50: 	dc.w Map_feca_150-Map_feca
0001E320 0000                       Map_feca_52: 	dc.w Map_feca_156-Map_feca
0001E322 0000                       Map_feca_54: 	dc.w Map_feca_15C-Map_feca
0001E324 0000                       Map_feca_56: 	dc.w Map_feca_162-Map_feca
0001E326 0000                       Map_feca_58: 	dc.w Map_feca_168-Map_feca
0001E328 0000                       Map_feca_5A: 	dc.w Map_feca_16E-Map_feca
0001E32A 0000                       Map_feca_5C: 	dc.w Map_feca_174-Map_feca
0001E32C 0000                       Map_feca_5E: 	dc.w Map_feca_17A-Map_feca
0001E32E 0000                       Map_feca_60: 	dc.w Map_feca_180-Map_feca
0001E330 0000                       Map_feca_62: 	dc.w Map_feca_186-Map_feca
0001E332 0000                       Map_feca_64: 	dc.w Map_feca_18C-Map_feca
0001E334 0000                       Map_feca_66: 	dc.w Map_feca_192-Map_feca
0001E336 0000                       Map_feca_68: 	dc.w Map_feca_198-Map_feca
0001E338 00                         Map_feca_6A: 	dc.b $0
0001E339 01                         Map_feca_6B: 	dc.b $1
0001E33A F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E33F 01                         Map_feca_71: 	dc.b $1
0001E340 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E345 01                         Map_feca_77: 	dc.b $1
0001E346 FC05 0000 F8               	dc.b $FC, $5, $0, $0, $F8
0001E34B 01                         Map_feca_7D: 	dc.b $1
0001E34C F306 0000 F8               	dc.b $F3, $6, $0, $0, $F8
0001E351 01                         Map_feca_83: 	dc.b $1
0001E352 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E357 01                         Map_feca_89: 	dc.b $1
0001E358 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E35D 03                         Map_feca_8F: 	dc.b $3
0001E35E F704 0000 EA               	dc.b $F7, $4, $0, $0, $EA
0001E363 FF08 0002 EA               	dc.b $FF, $8, $0, $2, $EA
0001E368 0704 0005 F2               	dc.b $7, $4, $0, $5, $F2
0001E36D 00                         Map_feca_9F: 	dc.b $0
0001E36E 00                         Map_feca_A0: 	dc.b $0
0001E36F 00                         Map_feca_A1: 	dc.b $0
0001E370 01                         Map_feca_A2: 	dc.b $1
0001E371 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E376 01                         Map_feca_A8: 	dc.b $1
0001E377 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E37C 01                         Map_feca_AE: 	dc.b $1
0001E37D F406 0800 F8               	dc.b $F4, $6, $8, $0, $F8
0001E382 01                         Map_feca_B4: 	dc.b $1
0001E383 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E388 01                         Map_feca_BA: 	dc.b $1
0001E389 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E38E 01                         Map_feca_C0: 	dc.b $1
0001E38F F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E394 01                         Map_feca_C6: 	dc.b $1
0001E395 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E39A 01                         Map_feca_CC: 	dc.b $1
0001E39B F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E3A0 01                         Map_feca_D2: 	dc.b $1
0001E3A1 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E3A6 01                         Map_feca_D8: 	dc.b $1
0001E3A7 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E3AC 01                         Map_feca_DE: 	dc.b $1
0001E3AD F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E3B2 01                         Map_feca_E4: 	dc.b $1
0001E3B3 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E3B8 01                         Map_feca_EA: 	dc.b $1
0001E3B9 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E3BE 01                         Map_feca_F0: 	dc.b $1
0001E3BF F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E3C4 01                         Map_feca_F6: 	dc.b $1
0001E3C5 FC05 0000 F8               	dc.b $FC, $5, $0, $0, $F8
0001E3CA 01                         Map_feca_FC: 	dc.b $1
0001E3CB F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E3D0 01                         Map_feca_102: 	dc.b $1
0001E3D1 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E3D6 01                         Map_feca_108: 	dc.b $1
0001E3D7 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E3DC 01                         Map_feca_10E: 	dc.b $1
0001E3DD F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E3E2 01                         Map_feca_114: 	dc.b $1
0001E3E3 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E3E8 01                         Map_feca_11A: 	dc.b $1
0001E3E9 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E3EE 01                         Map_feca_120: 	dc.b $1
0001E3EF F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E3F4 01                         Map_feca_126: 	dc.b $1
0001E3F5 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E3FA 01                         Map_feca_12C: 	dc.b $1
0001E3FB F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E400 01                         Map_feca_132: 	dc.b $1
0001E401 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E406 01                         Map_feca_138: 	dc.b $1
0001E407 F406 0800 F8               	dc.b $F4, $6, $8, $0, $F8
0001E40C 01                         Map_feca_13E: 	dc.b $1
0001E40D F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E412 01                         Map_feca_144: 	dc.b $1
0001E413 F406 0800 F8               	dc.b $F4, $6, $8, $0, $F8
0001E418 01                         Map_feca_14A: 	dc.b $1
0001E419 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E41E 01                         Map_feca_150: 	dc.b $1
0001E41F F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E424 01                         Map_feca_156: 	dc.b $1
0001E425 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E42A 01                         Map_feca_15C: 	dc.b $1
0001E42B F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E430 01                         Map_feca_162: 	dc.b $1
0001E431 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E436 01                         Map_feca_168: 	dc.b $1
0001E437 F406 0800 F8               	dc.b $F4, $6, $8, $0, $F8
0001E43C 01                         Map_feca_16E: 	dc.b $1
0001E43D F107 0000 F8               	dc.b $F1, $7, $0, $0, $F8
0001E442 01                         Map_feca_174: 	dc.b $1
0001E443 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E448 01                         Map_feca_17A: 	dc.b $1
0001E449 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E44E 01                         Map_feca_180: 	dc.b $1
0001E44F F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E454 01                         Map_feca_186: 	dc.b $1
0001E455 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E45A 01                         Map_feca_18C: 	dc.b $1
0001E45B F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0001E460 01                         Map_feca_192: 	dc.b $1
0001E461 FC05 0000 F8               	dc.b $FC, $5, $0, $0, $F8
0001E466 02                         Map_feca_198: 	dc.b $2
0001E467 FC05 0000 F8               	dc.b $FC, $5, $0, $0, $F8
0001E46C F406 0004 F8               	dc.b $F4, $6, $0, $4, $F8
0001E472 00                         	even
0001E472 00                         	even
0001E472                            
0001E472                            ; ---------------------------------------------------------------------------
0001E472                            ; Uncompressed graphics	loading	array for Sonic
0001E472                            ; ---------------------------------------------------------------------------
0001E472                            SonicDynPLC:
0001E472                            	include "_inc\Sonic dynamic pattern load cues.asm"
0001E472                            DPLC_ca30:
0001E472 0000                       DPLC_ca30_0: 	dc.w DPLC_ca30_6A-DPLC_ca30
0001E474 0000                       DPLC_ca30_2: 	dc.w DPLC_ca30_6B-DPLC_ca30
0001E476 0000                       DPLC_ca30_4: 	dc.w DPLC_ca30_6E-DPLC_ca30
0001E478 0000                       DPLC_ca30_6: 	dc.w DPLC_ca30_71-DPLC_ca30
0001E47A 0000                       DPLC_ca30_8: 	dc.w DPLC_ca30_74-DPLC_ca30
0001E47C 0000                       DPLC_ca30_A: 	dc.w DPLC_ca30_77-DPLC_ca30
0001E47E 0000                       DPLC_ca30_C: 	dc.w DPLC_ca30_7A-DPLC_ca30
0001E480 0000                       DPLC_ca30_E: 	dc.w DPLC_ca30_7D-DPLC_ca30
0001E482 0000                       DPLC_ca30_10: 	dc.w DPLC_ca30_80-DPLC_ca30
0001E484 0000                       DPLC_ca30_12: 	dc.w DPLC_ca30_81-DPLC_ca30
0001E486 0000                       DPLC_ca30_14: 	dc.w DPLC_ca30_82-DPLC_ca30
0001E488 0000                       DPLC_ca30_16: 	dc.w DPLC_ca30_83-DPLC_ca30
0001E48A 0000                       DPLC_ca30_18: 	dc.w DPLC_ca30_86-DPLC_ca30
0001E48C 0000                       DPLC_ca30_1A: 	dc.w DPLC_ca30_89-DPLC_ca30
0001E48E 0000                       DPLC_ca30_1C: 	dc.w DPLC_ca30_8C-DPLC_ca30
0001E490 0000                       DPLC_ca30_1E: 	dc.w DPLC_ca30_8F-DPLC_ca30
0001E492 0000                       DPLC_ca30_20: 	dc.w DPLC_ca30_92-DPLC_ca30
0001E494 0000                       DPLC_ca30_22: 	dc.w DPLC_ca30_95-DPLC_ca30
0001E496 0000                       DPLC_ca30_24: 	dc.w DPLC_ca30_98-DPLC_ca30
0001E498 0000                       DPLC_ca30_26: 	dc.w DPLC_ca30_9B-DPLC_ca30
0001E49A 0000                       DPLC_ca30_28: 	dc.w DPLC_ca30_9E-DPLC_ca30
0001E49C 0000                       DPLC_ca30_2A: 	dc.w DPLC_ca30_A1-DPLC_ca30
0001E49E 0000                       DPLC_ca30_2C: 	dc.w DPLC_ca30_A4-DPLC_ca30
0001E4A0 0000                       DPLC_ca30_2E: 	dc.w DPLC_ca30_A7-DPLC_ca30
0001E4A2 0000                       DPLC_ca30_30: 	dc.w DPLC_ca30_AA-DPLC_ca30
0001E4A4 0000                       DPLC_ca30_32: 	dc.w DPLC_ca30_AD-DPLC_ca30
0001E4A6 0000                       DPLC_ca30_34: 	dc.w DPLC_ca30_B0-DPLC_ca30
0001E4A8 0000                       DPLC_ca30_36: 	dc.w DPLC_ca30_B3-DPLC_ca30
0001E4AA 0000                       DPLC_ca30_38: 	dc.w DPLC_ca30_B6-DPLC_ca30
0001E4AC 0000                       DPLC_ca30_3A: 	dc.w DPLC_ca30_B9-DPLC_ca30
0001E4AE 0000                       DPLC_ca30_3C: 	dc.w DPLC_ca30_BC-DPLC_ca30
0001E4B0 0000                       DPLC_ca30_3E: 	dc.w DPLC_ca30_BF-DPLC_ca30
0001E4B2 0000                       DPLC_ca30_40: 	dc.w DPLC_ca30_C2-DPLC_ca30
0001E4B4 0000                       DPLC_ca30_42: 	dc.w DPLC_ca30_C5-DPLC_ca30
0001E4B6 0000                       DPLC_ca30_44: 	dc.w DPLC_ca30_C8-DPLC_ca30
0001E4B8 0000                       DPLC_ca30_46: 	dc.w DPLC_ca30_CB-DPLC_ca30
0001E4BA 0000                       DPLC_ca30_48: 	dc.w DPLC_ca30_CE-DPLC_ca30
0001E4BC 0000                       DPLC_ca30_4A: 	dc.w DPLC_ca30_D1-DPLC_ca30
0001E4BE 0000                       DPLC_ca30_4C: 	dc.w DPLC_ca30_D4-DPLC_ca30
0001E4C0 0000                       DPLC_ca30_4E: 	dc.w DPLC_ca30_D7-DPLC_ca30
0001E4C2 0000                       DPLC_ca30_50: 	dc.w DPLC_ca30_DA-DPLC_ca30
0001E4C4 0000                       DPLC_ca30_52: 	dc.w DPLC_ca30_DD-DPLC_ca30
0001E4C6 0000                       DPLC_ca30_54: 	dc.w DPLC_ca30_E0-DPLC_ca30
0001E4C8 0000                       DPLC_ca30_56: 	dc.w DPLC_ca30_E3-DPLC_ca30
0001E4CA 0000                       DPLC_ca30_58: 	dc.w DPLC_ca30_E6-DPLC_ca30
0001E4CC 0000                       DPLC_ca30_5A: 	dc.w DPLC_ca30_E9-DPLC_ca30
0001E4CE 0000                       DPLC_ca30_5C: 	dc.w DPLC_ca30_EC-DPLC_ca30
0001E4D0 0000                       DPLC_ca30_5E: 	dc.w DPLC_ca30_EF-DPLC_ca30
0001E4D2 0000                       DPLC_ca30_60: 	dc.w DPLC_ca30_F2-DPLC_ca30
0001E4D4 0000                       DPLC_ca30_62: 	dc.w DPLC_ca30_F5-DPLC_ca30
0001E4D6 0000                       DPLC_ca30_64: 	dc.w DPLC_ca30_F8-DPLC_ca30
0001E4D8 0000                       DPLC_ca30_66: 	dc.w DPLC_ca30_FB-DPLC_ca30
0001E4DA 0000                       DPLC_ca30_68: 	dc.w DPLC_ca30_FE-DPLC_ca30
0001E4DC 00                         DPLC_ca30_6A: 	dc.b $0
0001E4DD 01                         DPLC_ca30_6B: 	dc.b $1
0001E4DE 5000                       	dc.b $50, $0
0001E4E0 01                         DPLC_ca30_6E: 	dc.b $1
0001E4E1 5006                       	dc.b $50, $6
0001E4E3 01                         DPLC_ca30_71: 	dc.b $1
0001E4E4 300C                       	dc.b $30, $C
0001E4E6 01                         DPLC_ca30_74: 	dc.b $1
0001E4E7 5010                       	dc.b $50, $10
0001E4E9 01                         DPLC_ca30_77: 	dc.b $1
0001E4EA 5016                       	dc.b $50, $16
0001E4EC 01                         DPLC_ca30_7A: 	dc.b $1
0001E4ED 501C                       	dc.b $50, $1C
0001E4EF 01                         DPLC_ca30_7D: 	dc.b $1
0001E4F0 6022                       	dc.b $60, $22
0001E4F2 00                         DPLC_ca30_80: 	dc.b $0
0001E4F3 00                         DPLC_ca30_81: 	dc.b $0
0001E4F4 00                         DPLC_ca30_82: 	dc.b $0
0001E4F5 01                         DPLC_ca30_83: 	dc.b $1
0001E4F6 5029                       	dc.b $50, $29
0001E4F8 01                         DPLC_ca30_86: 	dc.b $1
0001E4F9 502F                       	dc.b $50, $2F
0001E4FB 01                         DPLC_ca30_89: 	dc.b $1
0001E4FC 5000                       	dc.b $50, $0
0001E4FE 01                         DPLC_ca30_8C: 	dc.b $1
0001E4FF 5035                       	dc.b $50, $35
0001E501 01                         DPLC_ca30_8F: 	dc.b $1
0001E502 503B                       	dc.b $50, $3B
0001E504 01                         DPLC_ca30_92: 	dc.b $1
0001E505 5041                       	dc.b $50, $41
0001E507 01                         DPLC_ca30_95: 	dc.b $1
0001E508 5047                       	dc.b $50, $47
0001E50A 01                         DPLC_ca30_98: 	dc.b $1
0001E50B 504D                       	dc.b $50, $4D
0001E50D 01                         DPLC_ca30_9B: 	dc.b $1
0001E50E 5053                       	dc.b $50, $53
0001E510 01                         DPLC_ca30_9E: 	dc.b $1
0001E511 5059                       	dc.b $50, $59
0001E513 01                         DPLC_ca30_A1: 	dc.b $1
0001E514 505F                       	dc.b $50, $5F
0001E516 01                         DPLC_ca30_A4: 	dc.b $1
0001E517 5065                       	dc.b $50, $65
0001E519 01                         DPLC_ca30_A7: 	dc.b $1
0001E51A 506B                       	dc.b $50, $6B
0001E51C 01                         DPLC_ca30_AA: 	dc.b $1
0001E51D 5071                       	dc.b $50, $71
0001E51F 01                         DPLC_ca30_AD: 	dc.b $1
0001E520 3077                       	dc.b $30, $77
0001E522 01                         DPLC_ca30_B0: 	dc.b $1
0001E523 507B                       	dc.b $50, $7B
0001E525 01                         DPLC_ca30_B3: 	dc.b $1
0001E526 5081                       	dc.b $50, $81
0001E528 01                         DPLC_ca30_B6: 	dc.b $1
0001E529 5087                       	dc.b $50, $87
0001E52B 01                         DPLC_ca30_B9: 	dc.b $1
0001E52C 508D                       	dc.b $50, $8D
0001E52E 01                         DPLC_ca30_BC: 	dc.b $1
0001E52F 5093                       	dc.b $50, $93
0001E531 01                         DPLC_ca30_BF: 	dc.b $1
0001E532 5099                       	dc.b $50, $99
0001E534 01                         DPLC_ca30_C2: 	dc.b $1
0001E535 509F                       	dc.b $50, $9F
0001E537 01                         DPLC_ca30_C5: 	dc.b $1
0001E538 50A5                       	dc.b $50, $A5
0001E53A 01                         DPLC_ca30_C8: 	dc.b $1
0001E53B 50AB                       	dc.b $50, $AB
0001E53D 01                         DPLC_ca30_CB: 	dc.b $1
0001E53E 50B1                       	dc.b $50, $B1
0001E540 01                         DPLC_ca30_CE: 	dc.b $1
0001E541 50B1                       	dc.b $50, $B1
0001E543 01                         DPLC_ca30_D1: 	dc.b $1
0001E544 50B7                       	dc.b $50, $B7
0001E546 01                         DPLC_ca30_D4: 	dc.b $1
0001E547 50B7                       	dc.b $50, $B7
0001E549 01                         DPLC_ca30_D7: 	dc.b $1
0001E54A 50BD                       	dc.b $50, $BD
0001E54C 01                         DPLC_ca30_DA: 	dc.b $1
0001E54D 50C3                       	dc.b $50, $C3
0001E54F 01                         DPLC_ca30_DD: 	dc.b $1
0001E550 50C9                       	dc.b $50, $C9
0001E552 01                         DPLC_ca30_E0: 	dc.b $1
0001E553 50CF                       	dc.b $50, $CF
0001E555 01                         DPLC_ca30_E3: 	dc.b $1
0001E556 50D5                       	dc.b $50, $D5
0001E558 01                         DPLC_ca30_E6: 	dc.b $1
0001E559 50D5                       	dc.b $50, $D5
0001E55B 01                         DPLC_ca30_E9: 	dc.b $1
0001E55C 70DB                       	dc.b $70, $DB
0001E55E 01                         DPLC_ca30_EC: 	dc.b $1
0001E55F 50E3                       	dc.b $50, $E3
0001E561 01                         DPLC_ca30_EF: 	dc.b $1
0001E562 50E9                       	dc.b $50, $E9
0001E564 01                         DPLC_ca30_F2: 	dc.b $1
0001E565 50EF                       	dc.b $50, $EF
0001E567 01                         DPLC_ca30_F5: 	dc.b $1
0001E568 50F5                       	dc.b $50, $F5
0001E56A 01                         DPLC_ca30_F8: 	dc.b $1
0001E56B 50FB                       	dc.b $50, $FB
0001E56D 01                         DPLC_ca30_FB: 	dc.b $1
0001E56E 3101                       	dc.b $31, $1
0001E570 02                         DPLC_ca30_FE: 	dc.b $2
0001E571 3105                       	dc.b $31, $5
0001E573 5000                       	dc.b $50, $0
0001E576 00                         	even
0001E576 00                         	even
0001E576                            
0001E576                            ; ---------------------------------------------------------------------------
0001E576                            ; Uncompressed graphics	- Sonic and spindust
0001E576                            ; ---------------------------------------------------------------------------
0001E576                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
00020696                            		even
00020696                            		
00020696                            Art_Dust:	incbin	artunc\spindust.bin
00021FD6                            		even
00021FD6                            ; ---------------------------------------------------------------------------
00021FD6                            ; Compressed graphics - various
00021FD6                            ; ---------------------------------------------------------------------------
00021FD6                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0002216C                            		even
0002216C                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
000222B4                            		even
000222B4                            ; ---------------------------------------------------------------------------
000222B4                            ; Compressed graphics - GHZ stuff
000222B4                            ; ---------------------------------------------------------------------------
000222B4                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
000222FE                            		even
000222FE                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00022418                            		even
00022418                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00022504                            		even
00022504                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
000226A2                            		even
000226A2                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0002271E                            		even
0002271E                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0002284A                            		even
0002284A                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00022978                            		even
00022978                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00022A16                            		even
00022A16                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00022A76                            		even
00022A76                            ; ---------------------------------------------------------------------------
00022A76                            ; Compressed graphics - LZ stuff
00022A76                            ; ---------------------------------------------------------------------------
00022A76                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00022B9A                            		even
00022B9A                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
0002338E                            		even
0002338E                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
0002350E                            		even
0002350E                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00023678                            		even
00023678                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00023CCE                            		even
00023CCE                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00023D84                            		even
00023D84                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00023E26                            		even
00023E26                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00023F82                            		even
00023F82                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00023FE6                            		even
00023FE6                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00024138                            		even
00024138                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0002461A                            		even
0002461A                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0002478A                            		even
0002478A                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00024A42                            		even
00024A42                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00024B7A                            		even
00024B7A                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00024CA4                            		even
00024CA4                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00024DB4                            		even
00024DB4                            ; ---------------------------------------------------------------------------
00024DB4                            ; Compressed graphics - MZ stuff
00024DB4                            ; ---------------------------------------------------------------------------
00024DB4                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00025042                            		even
00025042                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00025100                            		even
00025100                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
000251B8                            		even
000251B8                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00025496                            		even
00025496                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00025DAC                            		even
00025DAC                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00025F10                            		even
00025F10                            ; ---------------------------------------------------------------------------
00025F10                            ; Compressed graphics - SLZ stuff
00025F10                            ; ---------------------------------------------------------------------------
00025F10                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0002614C                            		even
0002614C                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00026292                            		even
00026292                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
000264D6                            		even
000264D6                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00026538                            		even
00026538                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
0002661A                            		even
0002661A                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
000267FC                            		even
000267FC                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00026908                            		even
00026908                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
000269AC                            		even
000269AC                            ; ---------------------------------------------------------------------------
000269AC                            ; Compressed graphics - SYZ stuff
000269AC                            ; ---------------------------------------------------------------------------
000269AC                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00026B16                            		even
00026B16                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00026B78                            		even
00026B78                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00026C5A                            		even
00026C5A                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00026EE8                            		even
00026EE8                            ; ---------------------------------------------------------------------------
00026EE8                            ; Compressed graphics - SBZ stuff
00026EE8                            ; ---------------------------------------------------------------------------
00026EE8                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00026F3C                            		even
00026F3C                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
000271D8                            		even
000271D8                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
000273DC                            		even
000273DC                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0002757A                            		even
0002757A                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
000278AA                            		even
000278AA                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00027A88                            		even
00027A88                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00027AE0                            		even
00027AE0                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00027C60                            		even
00027C60                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
00027D5E                            		even
00027D5E                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
00027EEA                            		even
00027EEA                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00027F3A                            		even
00027F3A                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00027F92                            		even
00027F92                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0002808E                            		even
0002808E                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
000281A4                            		even
000281A4                            ; ---------------------------------------------------------------------------
000281A4                            ; Compressed graphics - enemies
000281A4                            ; ---------------------------------------------------------------------------
000281A4                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00028564                            		even
00028564                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00028A52                            		even
00028A52                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
00028DF8                            		even
00028DF8                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
000294E2                            		even
000294E2                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0002974A                            		even
0002974A                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
000299D4                            		even
000299D4                            Nem_Roller:	incbin	artnem\roller.bin	; roller
00029EF8                            		even
00029EF8                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0002A182                            		even
0002A182                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0002A7A0                            		even
0002A7A0                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0002AB88                            		even
0002AB88                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0002AE84                            		even
0002AE84                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0002B0CC                            		even
0002B0CC                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0002B364                            		even
0002B364                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0002B542                            		even
0002B542                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0002B6D0                            		even
0002B6D0                            ; ---------------------------------------------------------------------------
0002B6D0                            ; Compressed graphics - various
0002B6D0                            ; ---------------------------------------------------------------------------
0002B6D0                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0002BCDE                            		even
0002BCDE                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0002BD7A                            		even
0002BD7A                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0002BE80                            		even
0002BE80                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0002BF74                            		even
0002BF74                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0002C3D4                            		even
0002C3D4                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0002CA3A                            		even
0002CA3A                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0002CAEA                            		even
0002CAEA                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0002CC7C                            		even
0002CC7C                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0002CD7E                            		even
0002CD7E                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0002CE5A                            		even
0002CE5A                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0002D2D6                            		even
0002D2D6                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0002D396                            		even
0002D396                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0002D50A                            		even
0002D50A                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0002D80C                            		even
0002D80C                            ; ---------------------------------------------------------------------------
0002D80C                            ; Compressed graphics - continue screen
0002D80C                            ; ---------------------------------------------------------------------------
0002D80C                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0002DABC                            		even
0002DABC                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0002DCF6                            		even
0002DCF6                            ; ---------------------------------------------------------------------------
0002DCF6                            ; Compressed graphics - animals
0002DCF6                            ; ---------------------------------------------------------------------------
0002DCF6                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0002DE4E                            		even
0002DE4E                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0002DFAA                            		even
0002DFAA                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0002E126                            		even
0002E126                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0002E242                            		even
0002E242                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0002E378                            		even
0002E378                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0002E4B2                            		even
0002E4B2                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0002E60E                            		even
0002E60E                            ; ---------------------------------------------------------------------------
0002E60E                            ; Compressed graphics - primary patterns and block mappings
0002E60E                            ; ---------------------------------------------------------------------------
0002E60E                            Blk16_GHZ:	incbin	map16\ghz.bin
0002E71C                            		even
0002E71C                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
0002EC84                            		even
0002EC84                            Blk256_GHZ:	incbin	map256\ghz.bin
0002EECA                            		even
0002EECA                            Blk16_LZ:	incbin	map16\lz.bin
0002F1F4                            		even
0002F1F4                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00030D3C                            		even
00030D3C                            Blk256_LZ:	incbin	map256\lz.bin
0003352C                            		even
0003352C                            Blk16_MZ:	incbin	map16\mz.bin
00033C88                            		even
00033C88                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0003640E                            		even
0003640E                            Blk256_MZ:	incbin	map256\mz.bin
00037B8C                            		even
00037B8C                            Blk16_SLZ:	incbin	map16\slz.bin
00038370                            		even
00038370                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0003BEC4                            		even
0003BEC4                            Blk256_SLZ:	incbin	map256\slz.bin
0003E2F4                            		even
0003E2F4                            Blk16_SYZ:	incbin	map16\syz.bin
0003EC62                            		even
0003EC62                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
0004238E                            		even
0004238E                            Blk256_SYZ:	incbin	map256\syz.bin
0004473E                            		even
0004473E                            Blk16_SBZ:	incbin	map16\sbz.bin
000455D8                            		even
000455D8                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
00047D84                            		even
00047D84                            Blk256_SBZ:	incbin	map256\sbz.bin
0004A7D4                            		even
0004A7D4                            ; ---------------------------------------------------------------------------
0004A7D4                            ; Compressed graphics - bosses and ending sequence
0004A7D4                            ; ---------------------------------------------------------------------------
0004A7D4                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0004B038                            		even
0004B038                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0004B322                            		even
0004B322                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0004BBA6                            		even
0004BBA6                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0004C3D2                            		even
0004C3D2                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0004CB3A                            		even
0004CB3A                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0004D0BA                            		even
0004D0BA                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0004D1DA                            		even
0004D1DA                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0004D3D8                            		even
0004D3D8                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0004E5B6                            		even
0004E5B6                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0004EEFA                            		even
0004EEFA                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0004F48A                            		even
0004F48A                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0004F712                            		even
0004F712                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0004F7A4                            		even
0004F7A4                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0004FA2C                            		even
0004FA2C                            		incbin	misc\padding2.bin
0004FB30                            		even
0004FB30                            ; ---------------------------------------------------------------------------
0004FB30                            ; Collision data
0004FB30                            ; ---------------------------------------------------------------------------
0004FB30                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0004FC30                            		even
0004FC30                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00050C30                            		even
00050C30                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00051C30                            		even
00051C30                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00051C6A                            		even
00051C6A                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00051D32                            		even
00051D32                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00051EC2                            		even
00051EC2                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
000520B6                            		even
000520B6                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
000522AA                            		even
000522AA                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00052502                            		even
00052502                            ; ---------------------------------------------------------------------------
00052502                            ; Animated uncompressed graphics
00052502                            ; ---------------------------------------------------------------------------
00052502                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00052702                            		even
00052702                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00052B02                            		even
00052B02                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00052F82                            		even
00052F82                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
00053282                            		even
00053282                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00053882                            		even
00053882                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00053B82                            		even
00053B82                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00054602                            		even
00054602                            
00054602                            ; ---------------------------------------------------------------------------
00054602                            ; Level	layout index
00054602                            ; ---------------------------------------------------------------------------
00054602 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00054608 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0005460E 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00054614 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0005461A 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00054620 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00054626 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0005462C 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00054632 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00054638 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0005463E 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00054644 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0005464A 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00054650 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00054656 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0005465C 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00054662 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00054668 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0005466E 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00054674 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0005467A 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00054680 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00054686 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0005468C 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00054692 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00054698 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0005469E 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000546A4 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000546AA                            
000546AA                            Level_GHZ1:	incbin	levels\ghz1.bin
000546D4                            		even
000546D4 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
000546D8                            Level_GHZ2:	incbin	levels\ghz2.bin
000547A0                            		even
000547A0 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
000547A4                            Level_GHZ3:	incbin	levels\ghz3.bin
000548C6                            		even
000548C6                            Level_GHZbg:	incbin	levels\ghzbg.bin
000548CC                            		even
000548CC 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
000548D0 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
000548D4                            
000548D4                            Level_LZ1:	incbin	levels\lz1.bin
000549D6                            		even
000549D6                            Level_LZbg:	incbin	levels\lzbg.bin
00054AD8                            		even
00054AD8 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00054ADC                            Level_LZ2:	incbin	levels\lz2.bin
00054B76                            		even
00054B76 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00054B7A                            Level_LZ3:	incbin	levels\lz3.bin
00054C94                            		even
00054C94 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00054C98                            Level_SBZ3:	incbin	levels\sbz3.bin
00054D52                            		even
00054D52 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00054D56                            
00054D56                            Level_MZ1:	incbin	levels\mz1.bin
00054DF4                            		even
00054DF4                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00054E6E                            		even
00054E6E                            Level_MZ2:	incbin	levels\mz2.bin
00054F12                            		even
00054F12                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00054FA4                            		even
00054FA4 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00054FA8                            Level_MZ3:	incbin	levels\mz3.bin
0005508A                            		even
0005508A                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0005512E 00                         		even
0005512E 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
00055132 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00055136                            
00055136                            Level_SLZ1:	incbin	levels\slz1.bin
00055248                            		even
00055248                            Level_SLZbg:	incbin	levels\slzbg.bin
000552C2                            		even
000552C2                            Level_SLZ2:	incbin	levels\slz2.bin
000553B2                            		even
000553B2                            Level_SLZ3:	incbin	levels\slz3.bin
000554CC                            		even
000554CC 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
000554D0                            
000554D0                            Level_SYZ1:	incbin	levels\syz1.bin
0005558C                            		even
0005558C                            Level_SYZbg:	incbin	levels\syzbg.bin
000555C6                            		even
000555C6 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
000555CA                            Level_SYZ2:	incbin	levels\syz2.bin
000556CE                            		even
000556CE 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
000556D2                            Level_SYZ3:	incbin	levels\syz3.bin
0005582C                            		even
0005582C 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00055830 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00055834                            
00055834                            Level_SBZ1:	incbin	levels\sbz1.bin
00055956                            		even
00055956                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00055994                            		even
00055994                            Level_SBZ2:	incbin	levels\sbz2.bin
00055AD6                            		even
00055AD6                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00055C40                            		even
00055C40 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00055C44 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00055C48                            Level_End:	incbin	levels\ending.bin
00055C78 00                         		even
00055C78 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00055C7C                            
00055C7C                            ; ---------------------------------------------------------------------------
00055C7C                            ; Animated uncompressed giant ring graphics
00055C7C                            ; ---------------------------------------------------------------------------
00055C7C                            Art_BigRing:	incbin	artunc\bigring.bin
000568BC                            		even
000568BC                            
000568BC                            		incbin	misc\padding3.bin
00056958                            		even
00056958                            
00056958                            ; ---------------------------------------------------------------------------
00056958                            ; Sprite locations index
00056958                            ; ---------------------------------------------------------------------------
00056958 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0005695C 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00056960 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00056964 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00056968 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0005696C 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00056970 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00056974 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00056978 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0005697C 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00056980 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00056984 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00056988 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0005698C 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00056990 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00056994 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00056998 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0005699C 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000569A0 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000569A4 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000569A8 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000569AC 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000569B0 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
000569B4 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000569B8 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000569BC 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000569C0 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000569C4 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
000569C8 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
000569CC 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
000569D0 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
000569D4 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
000569D8 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
000569DC 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
000569E0 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
000569E4 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
000569E8 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
000569EE                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
000569FA                            		even
000569FA                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
00056FB8                            		even
00056FB8                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
00057672                            		even
00057672                            ObjPos_LZ1:	incbin	objpos\lz1.bin
00057AE0                            		even
00057AE0                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00057E22                            		even
00057E22                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00058404                            		even
00058404                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0005889C                            		even
0005889C                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000588CE                            		even
000588CE                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00058900                            		even
00058900                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00058932                            		even
00058932                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00058964                            		even
00058964                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000589AE                            		even
000589AE                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000589EC                            		even
000589EC                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000589F8                            		even
000589F8                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00058EA2                            		even
00058EA2                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00059418                            		even
00059418                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00059958                            		even
00059958                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
00059DC0                            		even
00059DC0                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0005A3A2                            		even
0005A3A2                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0005A82E                            		even
0005A82E                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0005AD98                            		even
0005AD98                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0005B39E                            		even
0005B39E                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0005BADC                            		even
0005BADC                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0005C1BA                            		even
0005C1BA                            ObjPos_FZ:	incbin	objpos\fz.bin
0005C1CC                            		even
0005C1CC                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0005C1FE                            		even
0005C1FE                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0005C230                            		even
0005C230                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0005C262                            		even
0005C262                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0005C294                            		even
0005C294                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0005C2C6                            		even
0005C2C6                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0005C2FE                            		even
0005C2FE                            ObjPos_End:	incbin	objpos\ending.bin
0005C45A                            		even
0005C45A FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0005C460                            ; ---------------------------------------------------------------------------
0005C460                            MartyrTiles:
0005C460                            		incbin	"MartyrSplash/tiles.nem"
0006369C                            		even
0006369C                            
0006369C                            MartyrBGMap:
0006369C                            		incbin	"MartyrSplash/bgmap.eni"
000636DE                            		even
000636DE                            
000636DE                            MartyrFGMap:
000636DE                            		incbin	"MartyrSplash/fgmap.eni"
0006374A                            		even
0006374A                            
0006374A                            MartyrPal:
0006374A                            		incbin	"MartyrSplash/palette.pal"
0006376A                            		even
0006376A                            
0006376A 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0006376E 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00063772 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
00063776 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0006377A 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0006377E 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00063782                            ; ---------------------------------------------------------------------------
00063782                            ; PSG instruments used in music
00063782                            ; ---------------------------------------------------------------------------
00063782 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0006378E 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0006379A 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000637A6                            PSG1:		incbin	sound\psg1.bin
000637BD                            PSG2:		incbin	sound\psg2.bin
000637C4                            PSG3:		incbin	sound\psg3.bin
000637D5                            PSG4:		incbin	sound\psg4.bin
000637E0                            PSG6:		incbin	sound\psg6.bin
000637EF                            PSG5:		incbin	sound\psg5.bin
00063819                            PSG7:		incbin	sound\psg7.bin
00063835                            PSG8:		incbin	sound\psg8.bin
0006385D                            PSG9:		incbin	sound\psg9.bin
0006386E                            
0006386E 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00063876                            ; ---------------------------------------------------------------------------
00063876                            ; Music	Pointers
00063876                            ; ---------------------------------------------------------------------------
00063876 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0006387E 0000 0000 0000 0000        		dc.l Music83, Music84
00063886 0000 0000 0000 0000        		dc.l Music85, Music86
0006388E 0000 0000 0000 0000        		dc.l Music87, Music88
00063896 0000 0000 0000 0000        		dc.l Music89, Music8A
0006389E 0000 0000 0000 0000        		dc.l Music8B, Music8C
000638A6 0000 0000 0000 0000        		dc.l Music8D, Music8E
000638AE 0000 0000 0000 0000        		dc.l Music8F, Music90
000638B6 0000 0000 0000 0000        		dc.l Music91, Music92
000638BE 0000 0000                  		dc.l Music93
000638C2                            ; ---------------------------------------------------------------------------
000638C2                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
000638C2                            ; ---------------------------------------------------------------------------
000638C2 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
000638D2 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
000638E2 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
000638F2 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00063902 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00063912 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00063922 9090 9090                  		dc.b $90, $90, $90, $90
00063926                            
00063926                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00063926                            
00063926                            
00063926                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00063926 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00063934                            
00063934                            loc_71B5A:
00063934 0839 0000 00A1 1100        		btst	#0,($A11100).l
0006393C 66F6                       		bne.s	loc_71B5A
0006393E                            
0006393E 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
00063946 6700                       		beq.s	loc_71B82
00063948 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0006395A 60CA                       		bra.s	sub_71B4C
0006395C                            ; ===========================================================================
0006395C                            
0006395C                            loc_71B82:
0006395C 4DF9 00FF F000             		lea	($FFF000).l,a6
00063962 422E 000E                  		clr.b	$E(a6)
00063966 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0006396A 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0006396E 532E 0001                  		subq.b	#1,1(a6)
00063972 6600                       		bne.s	loc_71B9E
00063974 4EBA 0000                  		jsr	sub_7260C(pc)
00063978                            
00063978                            loc_71B9E:
00063978 102E 0004                  		move.b	4(a6),d0
0006397C 6700                       		beq.s	loc_71BA8
0006397E 4EBA 0000                  		jsr	sub_72504(pc)
00063982                            
00063982                            loc_71BA8:
00063982 4A2E 0024                  		tst.b	$24(a6)
00063986 6700                       		beq.s	loc_71BB2
00063988 4EBA 0000                  		jsr	sub_7267C(pc)
0006398C                            
0006398C                            loc_71BB2:
0006398C 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00063990 6700                       		beq.s	loc_71BBC	; if not, branch
00063992 4EBA 0000                  		jsr	Sound_Play(pc)
00063996                            
00063996                            loc_71BBC:
00063996 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0006399C 6700                       		beq.s	loc_71BC8
0006399E 4EBA 0000                  		jsr	Sound_ChkValue(pc)
000639A2                            
000639A2                            loc_71BC8:
000639A2 4BEE 0040                  		lea	$40(a6),a5
000639A6 4A15                       		tst.b	(a5)
000639A8 6A00                       		bpl.s	loc_71BD4
000639AA 4EBA 0000                  		jsr	sub_71C4E(pc)
000639AE                            
000639AE                            loc_71BD4:
000639AE 422E 0008                  		clr.b	8(a6)
000639B2 7E05                       		moveq	#5,d7
000639B4                            
000639B4                            loc_71BDA:
000639B4 DAFC 0030                  		adda.w	#$30,a5
000639B8 4A15                       		tst.b	(a5)
000639BA 6A00                       		bpl.s	loc_71BE6
000639BC 4EBA 0000                  		jsr	sub_71CCA(pc)
000639C0                            
000639C0                            loc_71BE6:
000639C0 51CF FFF2                  		dbf	d7,loc_71BDA
000639C4                            
000639C4 7E02                       		moveq	#2,d7
000639C6                            
000639C6                            loc_71BEC:
000639C6 DAFC 0030                  		adda.w	#$30,a5
000639CA 4A15                       		tst.b	(a5)
000639CC 6A00                       		bpl.s	loc_71BF8
000639CE 4EBA 0000                  		jsr	sub_72850(pc)
000639D2                            
000639D2                            loc_71BF8:
000639D2 51CF FFF2                  		dbf	d7,loc_71BEC
000639D6                            
000639D6 1D7C 0080 000E             		move.b	#$80,$E(a6)
000639DC 7E02                       		moveq	#2,d7
000639DE                            
000639DE                            loc_71C04:
000639DE DAFC 0030                  		adda.w	#$30,a5
000639E2 4A15                       		tst.b	(a5)
000639E4 6A00                       		bpl.s	loc_71C10
000639E6 4EBA 0000                  		jsr	sub_71CCA(pc)
000639EA                            
000639EA                            loc_71C10:
000639EA 51CF FFF2                  		dbf	d7,loc_71C04
000639EE                            
000639EE 7E02                       		moveq	#2,d7
000639F0                            
000639F0                            loc_71C16:
000639F0 DAFC 0030                  		adda.w	#$30,a5
000639F4 4A15                       		tst.b	(a5)
000639F6 6A00                       		bpl.s	loc_71C22
000639F8 4EBA 0000                  		jsr	sub_72850(pc)
000639FC                            
000639FC                            loc_71C22:
000639FC 51CF FFF2                  		dbf	d7,loc_71C16
00063A00 1D7C 0040 000E             		move.b	#$40,$E(a6)
00063A06 DAFC 0030                  		adda.w	#$30,a5
00063A0A 4A15                       		tst.b	(a5)
00063A0C 6A00                       		bpl.s	loc_71C38
00063A0E 4EBA 0000                  		jsr	sub_71CCA(pc)
00063A12                            
00063A12                            loc_71C38:
00063A12 DAFC 0030                  		adda.w	#$30,a5
00063A16 4A15                       		tst.b	(a5)
00063A18 6A00                       		bpl.s	loc_71C44
00063A1A 4EBA 0000                  		jsr	sub_72850(pc)
00063A1E                            
00063A1E                            loc_71C44:
00063A1E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00063A26 4E75                       		rts	
00063A28                            ; End of function sub_71B4C
00063A28                            
00063A28                            
00063A28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00063A28                            
00063A28                            
00063A28                            sub_71C4E:				; XREF: sub_71B4C
00063A28 532D 000E                  		subq.b	#1,$E(a5)
00063A2C 6600                       		bne.s	locret_71CAA
00063A2E 1D7C 0080 0008             		move.b	#$80,8(a6)
00063A34 286D 0004                  		movea.l	4(a5),a4
00063A38                            
00063A38                            loc_71C5E:
00063A38 7A00                       		moveq	#0,d5
00063A3A 1A1C                       		move.b	(a4)+,d5
00063A3C 0C05 00E0                  		cmpi.b	#-$20,d5
00063A40 6500                       		bcs.s	loc_71C6E
00063A42 4EBA 0000                  		jsr	sub_72A5A(pc)
00063A46 60F0                       		bra.s	loc_71C5E
00063A48                            ; ===========================================================================
00063A48                            
00063A48                            loc_71C6E:
00063A48 4A05                       		tst.b	d5
00063A4A 6A00                       		bpl.s	loc_71C84
00063A4C 1B45 0010                  		move.b	d5,$10(a5)
00063A50 1A1C                       		move.b	(a4)+,d5
00063A52 6A00                       		bpl.s	loc_71C84
00063A54 534C                       		subq.w	#1,a4
00063A56 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00063A5C 6000                       		bra.s	loc_71C88
00063A5E                            ; ===========================================================================
00063A5E                            
00063A5E                            loc_71C84:
00063A5E 4EBA 0000                  		jsr	sub_71D40(pc)
00063A62                            
00063A62                            loc_71C88:
00063A62 2B4C 0004                  		move.l	a4,4(a5)
00063A66 0838 0004 D022             		btst	#4,($FFFFD022).w	; TEMP REPLACE WITH YOSHI FLAG LATER ******
00063A6C 6700                       		beq.s	locret_71CAA
00063A6E 0815 0002                  		btst	#2,(a5)
00063A72 6600                       		bne.s	locret_71CAA
00063A74 7000                       		moveq	#0,d0
00063A76 102D 0010                  		move.b	$10(a5),d0
00063A7A 0C00 0080                  		cmpi.b	#$80,d0
00063A7E 6700                       		beq.s	locret_71CAA
00063A80 0800 0003                  		btst	#3,d0
00063A84 6600                       		bne.s	loc_71CAC
00063A86 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00063A8C                            
00063A8C                            locret_71CAA:
00063A8C 4E75                       		rts	
00063A8E                            ; ===========================================================================
00063A8E                            
00063A8E                            loc_71CAC:
00063A8E 0400 0088                  		subi.b	#$88,d0
00063A92 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00063A96 13C0 00A0 00EA             		move.b	d0,($A000EA).l
00063A9C 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
00063AA4 4E75                       		rts	
00063AA6                            ; End of function sub_71C4E
00063AA6                            
00063AA6                            ; ===========================================================================
00063AA6 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
00063AAC                            
00063AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00063AAC                            
00063AAC                            
00063AAC                            sub_71CCA:				; XREF: sub_71B4C
00063AAC 532D 000E                  		subq.b	#1,$E(a5)
00063AB0 6600                       		bne.s	loc_71CE0
00063AB2 0895 0004                  		bclr	#4,(a5)
00063AB6 4EBA 0000                  		jsr	sub_71CEC(pc)
00063ABA 4EBA 0000                  		jsr	sub_71E18(pc)
00063ABE 6000 0000                  		bra.w	loc_726E2
00063AC2                            ; ===========================================================================
00063AC2                            
00063AC2                            loc_71CE0:
00063AC2 4EBA 0000                  		jsr	sub_71D9E(pc)
00063AC6 4EBA 0000                  		jsr	sub_71DC6(pc)
00063ACA 6000 0000                  		bra.w	loc_71E24
00063ACE                            ; End of function sub_71CCA
00063ACE                            
00063ACE                            
00063ACE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00063ACE                            
00063ACE                            
00063ACE                            sub_71CEC:				; XREF: sub_71CCA
00063ACE 286D 0004                  		movea.l	4(a5),a4
00063AD2 0895 0001                  		bclr	#1,(a5)
00063AD6                            
00063AD6                            loc_71CF4:
00063AD6 7A00                       		moveq	#0,d5
00063AD8 1A1C                       		move.b	(a4)+,d5
00063ADA 0C05 00E0                  		cmpi.b	#-$20,d5
00063ADE 6500                       		bcs.s	loc_71D04
00063AE0 4EBA 0000                  		jsr	sub_72A5A(pc)
00063AE4 60F0                       		bra.s	loc_71CF4
00063AE6                            ; ===========================================================================
00063AE6                            
00063AE6                            loc_71D04:
00063AE6 4EBA 0000                  		jsr	sub_726FE(pc)
00063AEA 4A05                       		tst.b	d5
00063AEC 6A00                       		bpl.s	loc_71D1A
00063AEE 4EBA 0000                  		jsr	sub_71D22(pc)
00063AF2 1A1C                       		move.b	(a4)+,d5
00063AF4 6A00                       		bpl.s	loc_71D1A
00063AF6 534C                       		subq.w	#1,a4
00063AF8 6000 0000                  		bra.w	sub_71D60
00063AFC                            ; ===========================================================================
00063AFC                            
00063AFC                            loc_71D1A:
00063AFC 4EBA 0000                  		jsr	sub_71D40(pc)
00063B00 6000 0000                  		bra.w	sub_71D60
00063B04                            ; End of function sub_71CEC
00063B04                            
00063B04                            
00063B04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00063B04                            
00063B04                            
00063B04                            sub_71D22:				; XREF: sub_71CEC
00063B04 0405 0080                  		subi.b	#$80,d5
00063B08 6700                       		beq.s	loc_71D58
00063B0E 0245 007F                  		andi.w	#$7F,d5
00063B12 E34D                       		lsl.w	#1,d5
00063B14 41FA 0000                  		lea	word_72790(pc),a0
00063B18 3C30 5000                  		move.w	(a0,d5.w),d6
00063B1C 3B46 0010                  		move.w	d6,$10(a5)
00063B20 4E75                       		rts	
00063B22                            ; End of function sub_71D22
00063B22                            
00063B22                            
00063B22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00063B22                            
00063B22                            
00063B22                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00063B22 1005                       		move.b	d5,d0
00063B24 122D 0002                  		move.b	2(a5),d1
00063B28                            
00063B28                            loc_71D46:
00063B28 5301                       		subq.b	#1,d1
00063B2A 6700                       		beq.s	loc_71D4E
00063B2E 60F8                       		bra.s	loc_71D46
00063B30                            ; ===========================================================================
00063B30                            
00063B30                            loc_71D4E:
00063B30 1B40 000F                  		move.b	d0,$F(a5)
00063B34 1B40 000E                  		move.b	d0,$E(a5)
00063B38 4E75                       		rts	
00063B3A                            ; End of function sub_71D40
00063B3A                            
00063B3A                            ; ===========================================================================
00063B3A                            
00063B3A                            loc_71D58:				; XREF: sub_71D22
00063B3A 08D5 0001                  		bset	#1,(a5)
00063B3E 426D 0010                  		clr.w	$10(a5)
00063B42                            
00063B42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00063B42                            
00063B42                            
00063B42                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00063B42 2B4C 0004                  		move.l	a4,4(a5)
00063B46 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00063B4C 0815 0004                  		btst	#4,(a5)
00063B50 6600                       		bne.s	locret_71D9C
00063B52 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00063B58 422D 000C                  		clr.b	$C(a5)
00063B5C 0815 0003                  		btst	#3,(a5)
00063B60 6700                       		beq.s	locret_71D9C
00063B62 206D 0014                  		movea.l	$14(a5),a0
00063B66 1B58 0018                  		move.b	(a0)+,$18(a5)
00063B6A 1B58 0019                  		move.b	(a0)+,$19(a5)
00063B6E 1B58 001A                  		move.b	(a0)+,$1A(a5)
00063B72 1018                       		move.b	(a0)+,d0
00063B74 E208                       		lsr.b	#1,d0
00063B76 1B40 001B                  		move.b	d0,$1B(a5)
00063B7A 426D 001C                  		clr.w	$1C(a5)
00063B7E                            
00063B7E                            locret_71D9C:
00063B7E 4E75                       		rts	
00063B80                            ; End of function sub_71D60
00063B80                            
00063B80                            
00063B80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00063B80                            
00063B80                            
00063B80                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00063B80 4A2D 0012                  		tst.b	$12(a5)
00063B84 6700                       		beq.s	locret_71DC4
00063B86 532D 0012                  		subq.b	#1,$12(a5)
00063B8A 6600                       		bne.s	locret_71DC4
00063B8C 08D5 0001                  		bset	#1,(a5)
00063B90 4A2D 0001                  		tst.b	1(a5)
00063B94 6B00 0000                  		bmi.w	loc_71DBE
00063B98 4EBA 0000                  		jsr	sub_726FE(pc)
00063B9C 584F                       		addq.w	#4,sp
00063B9E 4E75                       		rts	
00063BA0                            ; ===========================================================================
00063BA0                            
00063BA0                            loc_71DBE:
00063BA0 4EBA 0000                  		jsr	sub_729A0(pc)
00063BA4 584F                       		addq.w	#4,sp
00063BA6                            
00063BA6                            locret_71DC4:
00063BA6 4E75                       		rts	
00063BA8                            ; End of function sub_71D9E
00063BA8                            
00063BA8                            
00063BA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00063BA8                            
00063BA8                            
00063BA8                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00063BA8 584F                       		addq.w	#4,sp
00063BAA 0815 0003                  		btst	#3,(a5)
00063BAE 6700                       		beq.s	locret_71E16
00063BB0 4A2D 0018                  		tst.b	$18(a5)
00063BB4 6700                       		beq.s	loc_71DDA
00063BB6 532D 0018                  		subq.b	#1,$18(a5)
00063BBA 4E75                       		rts	
00063BBC                            ; ===========================================================================
00063BBC                            
00063BBC                            loc_71DDA:
00063BBC 532D 0019                  		subq.b	#1,$19(a5)
00063BC0 6700                       		beq.s	loc_71DE2
00063BC2 4E75                       		rts	
00063BC4                            ; ===========================================================================
00063BC4                            
00063BC4                            loc_71DE2:
00063BC4 206D 0014                  		movea.l	$14(a5),a0
00063BC8 1B68 0001 0019             		move.b	1(a0),$19(a5)
00063BCE 4A2D 001B                  		tst.b	$1B(a5)
00063BD2 6600                       		bne.s	loc_71DFE
00063BD4 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00063BDA 442D 001A                  		neg.b	$1A(a5)
00063BDE 4E75                       		rts	
00063BE0                            ; ===========================================================================
00063BE0                            
00063BE0                            loc_71DFE:
00063BE0 532D 001B                  		subq.b	#1,$1B(a5)
00063BE4 1C2D 001A                  		move.b	$1A(a5),d6
00063BE8 4886                       		ext.w	d6
00063BEE 3B46 001C                  		move.w	d6,$1C(a5)
00063BF6 594F                       		subq.w	#4,sp
00063BF8                            
00063BF8                            locret_71E16:
00063BF8 4E75                       		rts	
00063BFA                            ; End of function sub_71DC6
00063BFA                            
00063BFA                            
00063BFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00063BFA                            
00063BFA                            
00063BFA                            sub_71E18:				; XREF: sub_71CCA
00063BFA 0815 0001                  		btst	#1,(a5)
00063BFE 6600                       		bne.s	locret_71E48
00063C00 3C2D 0010                  		move.w	$10(a5),d6
00063C04 6700                       		beq.s	loc_71E4A
00063C06                            
00063C06                            loc_71E24:				; XREF: sub_71CCA
00063C06 102D 001E                  		move.b	$1E(a5),d0
00063C0A 4880                       		ext.w	d0
00063C0E 0815 0002                  		btst	#2,(a5)
00063C12 6600                       		bne.s	locret_71E48
00063C14 3206                       		move.w	d6,d1
00063C16 E049                       		lsr.w	#8,d1
00063C18 103C 00A4                  		move.b	#-$5C,d0
00063C1C 4EBA 0000                  		jsr	sub_72722(pc)
00063C20 1206                       		move.b	d6,d1
00063C22 103C 00A0                  		move.b	#-$60,d0
00063C26 4EBA 0000                  		jsr	sub_72722(pc)
00063C2A                            
00063C2A                            locret_71E48:
00063C2A 4E75                       		rts	
00063C2C                            ; ===========================================================================
00063C2C                            
00063C2C                            loc_71E4A:
00063C2C 08D5 0001                  		bset	#1,(a5)
00063C30 4E75                       		rts	
00063C32                            ; End of function sub_71E18
00063C32                            
00063C32                            ; ===========================================================================
00063C32                            
00063C32                            loc_71E50:				; XREF: sub_71B4C
00063C32 6B00                       		bmi.s	loc_71E94
00063C34 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00063C3A 6700 0000                  		beq.w	loc_71EFE
00063C3E 1D7C 0002 0003             		move.b	#2,3(a6)
00063C44 7602                       		moveq	#2,d3
00063C46 103C 00B4                  		move.b	#-$4C,d0
00063C4A 7200                       		moveq	#0,d1
00063C4C                            
00063C4C                            loc_71E6A:
00063C4C 4EBA 0000                  		jsr	sub_7272E(pc)
00063C50 4EBA 0000                  		jsr	sub_72764(pc)
00063C54 5200                       		addq.b	#1,d0
00063C56 51CB FFF4                  		dbf	d3,loc_71E6A
00063C5A                            
00063C5A 7602                       		moveq	#2,d3
00063C5C 7028                       		moveq	#$28,d0
00063C5E                            
00063C5E                            loc_71E7C:
00063C5E 1203                       		move.b	d3,d1
00063C60 4EBA 0000                  		jsr	sub_7272E(pc)
00063C64 5801                       		addq.b	#4,d1
00063C66 4EBA 0000                  		jsr	sub_7272E(pc)
00063C6A 51CB FFF2                  		dbf	d3,loc_71E7C
00063C6E                            
00063C6E 4EBA 0000                  		jsr	sub_729B6(pc)
00063C72 6000 FDAA                  		bra.w	loc_71C44
00063C76                            ; ===========================================================================
00063C76                            
00063C76                            loc_71E94:				; XREF: loc_71E50
00063C76 422E 0003                  		clr.b	3(a6)
00063C7A 7630                       		moveq	#$30,d3
00063C7C 4BEE 0040                  		lea	$40(a6),a5
00063C80 7806                       		moveq	#6,d4
00063C82                            
00063C82                            loc_71EA0:
00063C82 0815 0007                  		btst	#7,(a5)
00063C86 6700                       		beq.s	loc_71EB8
00063C88 0815 0002                  		btst	#2,(a5)
00063C8C 6600                       		bne.s	loc_71EB8
00063C8E 103C 00B4                  		move.b	#-$4C,d0
00063C92 122D 000A                  		move.b	$A(a5),d1
00063C96 4EBA 0000                  		jsr	sub_72722(pc)
00063C9A                            
00063C9A                            loc_71EB8:
00063C9A DAC3                       		adda.w	d3,a5
00063C9C 51CC FFE4                  		dbf	d4,loc_71EA0
00063CA0                            
00063CA0 4BEE 0220                  		lea	$220(a6),a5
00063CA4 7802                       		moveq	#2,d4
00063CA6                            
00063CA6                            loc_71EC4:
00063CA6 0815 0007                  		btst	#7,(a5)
00063CAA 6700                       		beq.s	loc_71EDC
00063CAC 0815 0002                  		btst	#2,(a5)
00063CB0 6600                       		bne.s	loc_71EDC
00063CB2 103C 00B4                  		move.b	#-$4C,d0
00063CB6 122D 000A                  		move.b	$A(a5),d1
00063CBA 4EBA 0000                  		jsr	sub_72722(pc)
00063CBE                            
00063CBE                            loc_71EDC:
00063CBE DAC3                       		adda.w	d3,a5
00063CC0 51CC FFE4                  		dbf	d4,loc_71EC4
00063CC4                            
00063CC4 4BEE 0340                  		lea	$340(a6),a5
00063CC8 0815 0007                  		btst	#7,(a5)
00063CCC 6700                       		beq.s	loc_71EFE
00063CCE 0815 0002                  		btst	#2,(a5)
00063CD2 6600                       		bne.s	loc_71EFE
00063CD4 103C 00B4                  		move.b	#-$4C,d0
00063CD8 122D 000A                  		move.b	$A(a5),d1
00063CDC 4EBA 0000                  		jsr	sub_72722(pc)
00063CE0                            
00063CE0                            loc_71EFE:
00063CE0 6000 FD3C                  		bra.w	loc_71C44
00063CE4                            
00063CE4                            ; ---------------------------------------------------------------------------
00063CE4                            ; Subroutine to	play a sound or	music track
00063CE4                            ; ---------------------------------------------------------------------------
00063CE4                            
00063CE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00063CE4                            
00063CE4                            
00063CE4                            Sound_Play:				; XREF: sub_71B4C
00063CE4 2079 0006 376A             		movea.l	(Go_SoundTypes).l,a0
00063CEA 43EE 000A                  		lea	$A(a6),a1	; load music track number
00063CEE 1616                       		move.b	0(a6),d3
00063CF0 7802                       		moveq	#2,d4
00063CF2                            
00063CF2                            loc_71F12:
00063CF2 1011                       		move.b	(a1),d0		; move track number to d0
00063CF4 1200                       		move.b	d0,d1
00063CF6 4219                       		clr.b	(a1)+
00063CF8 0400 0081                  		subi.b	#$81,d0
00063CFC 6500                       		bcs.s	loc_71F3E
00063CFE 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00063D04 6700                       		beq.s	loc_71F2C
00063D06 1D41 000A                  		move.b	d1,$A(a6)
00063D0A 6000                       		bra.s	loc_71F3E
00063D0C                            ; ===========================================================================
00063D0C                            
00063D0C                            loc_71F2C:
00063D0C 0240 007F                  		andi.w	#$7F,d0
00063D10 1430 0000                  		move.b	(a0,d0.w),d2
00063D14 B403                       		cmp.b	d3,d2
00063D16 6500                       		bcs.s	loc_71F3E
00063D18 1602                       		move.b	d2,d3
00063D1A 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00063D1E                            
00063D1E                            loc_71F3E:
00063D1E 51CC FFD2                  		dbf	d4,loc_71F12
00063D22                            
00063D22 4A03                       		tst.b	d3
00063D24 6B00                       		bmi.s	locret_71F4A
00063D26 1C83                       		move.b	d3,0(a6)
00063D28                            
00063D28                            locret_71F4A:
00063D28 4E75                       		rts	
00063D2A                            ; End of function Sound_Play
00063D2A                            
00063D2A                            
00063D2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00063D2A                            
00063D2A                            
00063D2A                            Sound_ChkValue:				; XREF: sub_71B4C
00063D2A 7E00                       		moveq	#0,d7
00063D2C 1E2E 0009                  		move.b	9(a6),d7
00063D30 6700 0000                  		beq.w	Sound_E4
00063D34 6A00                       		bpl.s	locret_71F8C
00063D36 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00063D3C 0C07 009F                  		cmpi.b	#$9F,d7
00063D40 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00063D44 0C07 00A0                  		cmpi.b	#$A0,d7
00063D48 6500 0000                  		bcs.w	locret_71F8C
00063D4C 0C07 00CF                  		cmpi.b	#$CF,d7
00063D50 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
00063D54 0C07 00D0                  		cmpi.b	#$D0,d7
00063D58 6500 0000                  		bcs.w	locret_71F8C
00063D5C 0C07 00E0                  		cmpi.b	#$E0,d7
00063D60 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
00063D64 0C07 00E4                  		cmpi.b	#$E4,d7
00063D68 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
00063D6A                            
00063D6A                            locret_71F8C:
00063D6A 4E75                       		rts	
00063D6C                            ; ===========================================================================
00063D6C                            
00063D6C                            Sound_E0toE4:				; XREF: Sound_ChkValue
00063D6C 0407 00E0                  		subi.b	#$E0,d7
00063D70 E54F                       		lsl.w	#2,d7
00063D72 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00063D76                            ; ===========================================================================
00063D76                            
00063D76                            Sound_ExIndex:
00063D76 6000 0000                  		bra.w	Sound_E0
00063D7A                            ; ===========================================================================
00063D7A 6000 0000                  		bra.w	Sound_E1
00063D7E                            ; ===========================================================================
00063D7E 6000 0000                  		bra.w	Sound_E2
00063D82                            ; ===========================================================================
00063D82 6000 0000                  		bra.w	Sound_E3
00063D86                            ; ===========================================================================
00063D86 6000 0000                  		bra.w	Sound_E4
00063D8A                            ; ===========================================================================
00063D8A                            ; ---------------------------------------------------------------------------
00063D8A                            ; Play "Say-gaa" PCM sound
00063D8A                            ; ---------------------------------------------------------------------------
00063D8A                            
00063D8A                            Sound_E1:				; XREF: Sound_ExIndex
00063D8A 13FC 0088 00A0 1FFF        		move.b	#$88,($A01FFF).l
00063D92 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00063D9A 323C 0011                  		move.w	#$11,d1
00063D9E                            
00063D9E                            loc_71FC0:
00063D9E 303C FFFF                  		move.w	#-1,d0
00063DA2                            
00063DA2                            loc_71FC4:
00063DA4 51C8 FFFC                  		dbf	d0,loc_71FC4
00063DA8                            
00063DA8 51C9 FFF4                  		dbf	d1,loc_71FC0
00063DAC                            
00063DAC 584F                       		addq.w	#4,sp
00063DAE 4E75                       		rts	
00063DB0                            ; ===========================================================================
00063DB0                            ; ---------------------------------------------------------------------------
00063DB0                            ; Play music track $81-$9F
00063DB0                            ; ---------------------------------------------------------------------------
00063DB0                            
00063DB0                            Sound_81to9F:				; XREF: Sound_ChkValue
00063DB0 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
00063DB4 6600                       		bne.s	loc_72024	; if not, branch
00063DB6 4A2E 0027                  		tst.b	$27(a6)
00063DBA 6600 0000                  		bne.w	loc_721B6
00063DBE 4BEE 0040                  		lea	$40(a6),a5
00063DC2 7009                       		moveq	#9,d0
00063DC4                            
00063DC4                            loc_71FE6:
00063DC4 0895 0002                  		bclr	#2,(a5)
00063DC8 DAFC 0030                  		adda.w	#$30,a5
00063DCC 51C8 FFF6                  		dbf	d0,loc_71FE6
00063DD0                            
00063DD0 4BEE 0220                  		lea	$220(a6),a5
00063DD4 7005                       		moveq	#5,d0
00063DD6                            
00063DD6                            loc_71FF8:
00063DD6 0895 0007                  		bclr	#7,(a5)
00063DDA DAFC 0030                  		adda.w	#$30,a5
00063DDE 51C8 FFF6                  		dbf	d0,loc_71FF8
00063DE2 4216                       		clr.b	0(a6)
00063DE4 204E                       		movea.l	a6,a0
00063DE6 43EE 03A0                  		lea	$3A0(a6),a1
00063DEA 303C 0087                  		move.w	#$87,d0
00063DEE                            
00063DEE                            loc_72012:
00063DEE 22D8                       		move.l	(a0)+,(a1)+
00063DF0 51C8 FFFC                  		dbf	d0,loc_72012
00063DF4                            
00063DF4 1D7C 0080 0027             		move.b	#$80,$27(a6)
00063DFA 4216                       		clr.b	0(a6)
00063DFC 6000                       		bra.s	loc_7202C
00063DFE                            ; ===========================================================================
00063DFE                            
00063DFE                            loc_72024:
00063DFE 422E 0027                  		clr.b	$27(a6)
00063E02 422E 0026                  		clr.b	$26(a6)
00063E06                            
00063E06                            loc_7202C:
00063E06 4EBA 0000                  		jsr	sub_725CA(pc)
00063E0A 2879 0006 377A             		movea.l	(off_719A0).l,a4
00063E10 0407 0081                  		subi.b	#$81,d7
00063E14 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00063E1A 2879 0006 3772             		movea.l	(Go_MusicIndex).l,a4
00063E20 E54F                       		lsl.w	#2,d7
00063E22 2874 7000                  		movea.l	(a4,d7.w),a4
00063E26 7000                       		moveq	#0,d0
00063E28 3014                       		move.w	(a4),d0
00063E2C 2D40 0018                  		move.l	d0,$18(a6)
00063E30 102C 0005                  		move.b	5(a4),d0
00063E34 1D40 0028                  		move.b	d0,$28(a6)
00063E38 4A2E 002A                  		tst.b	$2A(a6)
00063E3C 6700                       		beq.s	loc_72068
00063E3E 102E 0029                  		move.b	$29(a6),d0
00063E42                            
00063E42                            loc_72068:
00063E42 1D40 0002                  		move.b	d0,2(a6)
00063E46 1D40 0001                  		move.b	d0,1(a6)
00063E4A 7200                       		moveq	#0,d1
00063E4C 264C                       		movea.l	a4,a3
00063E4E 5C4C                       		addq.w	#6,a4
00063E50 7E00                       		moveq	#0,d7
00063E52 1E2B 0002                  		move.b	2(a3),d7
00063E56 6700 0000                  		beq.w	loc_72114
00063E5A 5307                       		subq.b	#1,d7
00063E5C 123C 00C0                  		move.b	#-$40,d1
00063E60 182B 0004                  		move.b	4(a3),d4
00063E64 7C30                       		moveq	#$30,d6
00063E66 1A3C 0001                  		move.b	#1,d5
00063E6A 43EE 0040                  		lea	$40(a6),a1
00063E6E 45FA 0000                  		lea	byte_721BA(pc),a2
00063E72                            
00063E72                            loc_72098:
00063E72 08D1 0007                  		bset	#7,(a1)
00063E76 135A 0001                  		move.b	(a2)+,1(a1)
00063E7A 1344 0002                  		move.b	d4,2(a1)
00063E7E 1346 000D                  		move.b	d6,$D(a1)
00063E82 1341 000A                  		move.b	d1,$A(a1)
00063E86 1345 000E                  		move.b	d5,$E(a1)
00063E8A 7000                       		moveq	#0,d0
00063E8C 301C                       		move.w	(a4)+,d0
00063E90 2340 0004                  		move.l	d0,4(a1)
00063E94 335C 0008                  		move.w	(a4)+,8(a1)
00063E98 D2C6                       		adda.w	d6,a1
00063E9A 51CF FFD6                  		dbf	d7,loc_72098
00063E9E 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00063EA4 6600                       		bne.s	loc_720D8
00063EA6 702B                       		moveq	#$2B,d0
00063EA8 7200                       		moveq	#0,d1
00063EAA 4EBA 0000                  		jsr	sub_7272E(pc)
00063EAE 6000 0000                  		bra.w	loc_72114
00063EB2                            ; ===========================================================================
00063EB2                            
00063EB2                            loc_720D8:
00063EB2 7028                       		moveq	#$28,d0
00063EB4 7206                       		moveq	#6,d1
00063EB6 4EBA 0000                  		jsr	sub_7272E(pc)
00063EBA 103C 0042                  		move.b	#$42,d0
00063EBE 727F                       		moveq	#$7F,d1
00063EC0 4EBA 0000                  		jsr	sub_72764(pc)
00063EC4 103C 004A                  		move.b	#$4A,d0
00063EC8 727F                       		moveq	#$7F,d1
00063ECA 4EBA 0000                  		jsr	sub_72764(pc)
00063ECE 103C 0046                  		move.b	#$46,d0
00063ED2 727F                       		moveq	#$7F,d1
00063ED4 4EBA 0000                  		jsr	sub_72764(pc)
00063ED8 103C 004E                  		move.b	#$4E,d0
00063EDC 727F                       		moveq	#$7F,d1
00063EDE 4EBA 0000                  		jsr	sub_72764(pc)
00063EE2 103C 00B6                  		move.b	#-$4A,d0
00063EE6 123C 00C0                  		move.b	#-$40,d1
00063EEA 4EBA 0000                  		jsr	sub_72764(pc)
00063EEE                            
00063EEE                            loc_72114:
00063EEE 7E00                       		moveq	#0,d7
00063EF0 1E2B 0003                  		move.b	3(a3),d7
00063EF4 6700                       		beq.s	loc_72154
00063EF6 5307                       		subq.b	#1,d7
00063EF8 43EE 0190                  		lea	$190(a6),a1
00063EFC 45FA 0000                  		lea	byte_721C2(pc),a2
00063F00                            
00063F00                            loc_72126:
00063F00 08D1 0007                  		bset	#7,(a1)
00063F04 135A 0001                  		move.b	(a2)+,1(a1)
00063F08 1344 0002                  		move.b	d4,2(a1)
00063F0C 1346 000D                  		move.b	d6,$D(a1)
00063F10 1345 000E                  		move.b	d5,$E(a1)
00063F14 7000                       		moveq	#0,d0
00063F16 301C                       		move.w	(a4)+,d0
00063F1A 2340 0004                  		move.l	d0,4(a1)
00063F1E 335C 0008                  		move.w	(a4)+,8(a1)
00063F22 101C                       		move.b	(a4)+,d0
00063F24 135C 000B                  		move.b	(a4)+,$B(a1)
00063F28 D2C6                       		adda.w	d6,a1
00063F2A 51CF FFD4                  		dbf	d7,loc_72126
00063F2E                            
00063F2E                            loc_72154:
00063F2E 43EE 0220                  		lea	$220(a6),a1
00063F32 7E05                       		moveq	#5,d7
00063F34                            
00063F34                            loc_7215A:
00063F34 4A11                       		tst.b	(a1)
00063F36 6A00 0000                  		bpl.w	loc_7217C
00063F3A 7000                       		moveq	#0,d0
00063F3C 1029 0001                  		move.b	1(a1),d0
00063F40 6B00                       		bmi.s	loc_7216E
00063F42 5500                       		subq.b	#2,d0
00063F44 E508                       		lsl.b	#2,d0
00063F46 6000                       		bra.s	loc_72170
00063F48                            ; ===========================================================================
00063F48                            
00063F48                            loc_7216E:
00063F48 E608                       		lsr.b	#3,d0
00063F4A                            
00063F4A                            loc_72170:
00063F4A 41FA 0000                  		lea	dword_722CC(pc),a0
00063F4E 2070 0000                  		movea.l	(a0,d0.w),a0
00063F52 08D0 0002                  		bset	#2,(a0)
00063F56                            
00063F56                            loc_7217C:
00063F56 D2C6                       		adda.w	d6,a1
00063F58 51CF FFDA                  		dbf	d7,loc_7215A
00063F5C                            
00063F5C 4A6E 0340                  		tst.w	$340(a6)
00063F60 6A00                       		bpl.s	loc_7218E
00063F62 08EE 0002 0100             		bset	#2,$100(a6)
00063F68                            
00063F68                            loc_7218E:
00063F68 4A6E 0370                  		tst.w	$370(a6)
00063F6C 6A00                       		bpl.s	loc_7219A
00063F6E 08EE 0002 01F0             		bset	#2,$1F0(a6)
00063F74                            
00063F74                            loc_7219A:
00063F74 4BEE 0070                  		lea	$70(a6),a5
00063F78 7805                       		moveq	#5,d4
00063F7A                            
00063F7A                            loc_721A0:
00063F7A 4EBA 0000                  		jsr	sub_726FE(pc)
00063F7E DAC6                       		adda.w	d6,a5
00063F80 51CC FFF8                  		dbf	d4,loc_721A0
00063F84 7802                       		moveq	#2,d4
00063F86                            
00063F86                            loc_721AC:
00063F86 4EBA 0000                  		jsr	sub_729A0(pc)
00063F8A DAC6                       		adda.w	d6,a5
00063F8C 51CC FFF8                  		dbf	d4,loc_721AC
00063F90                            
00063F90                            loc_721B6:
00063F90 584F                       		addq.w	#4,sp
00063F92 4E75                       		rts	
00063F94                            ; ===========================================================================
00063F94 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00063F9C                            		even
00063F9C 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00063FA0                            		even
00063FA0                            ; ===========================================================================
00063FA0                            ; ---------------------------------------------------------------------------
00063FA0                            ; Play normal sound effect
00063FA0                            ; ---------------------------------------------------------------------------
00063FA0                            
00063FA0                            Sound_A0toCF:				; XREF: Sound_ChkValue
00063FA0 4A2E 0027                  		tst.b	$27(a6)
00063FA4 6600 0000                  		bne.w	loc_722C6
00063FA8 4A2E 0004                  		tst.b	4(a6)
00063FAC 6600 0000                  		bne.w	loc_722C6
00063FB0 4A2E 0024                  		tst.b	$24(a6)
00063FB4 6600 0000                  		bne.w	loc_722C6
00063FB8 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00063FBC 6600                       		bne.s	Sound_notB5	; if not, branch
00063FBE 4A2E 002B                  		tst.b	$2B(a6)
00063FC2 6600                       		bne.s	loc_721EE
00063FC4 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
00063FC8                            
00063FC8                            loc_721EE:
00063FC8 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00063FCE                            
00063FCE                            Sound_notB5:
00063FCE 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00063FD2 6600                       		bne.s	Sound_notA7	; if not, branch
00063FD4 4A2E 002C                  		tst.b	$2C(a6)
00063FD8 6600 0000                  		bne.w	locret_722C4
00063FDC 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00063FE2                            
00063FE2                            Sound_notA7:
00063FE2 2079 0006 3776             		movea.l	(Go_SoundIndex).l,a0
00063FE8 0407 00A0                  		subi.b	#$A0,d7
00063FEC E54F                       		lsl.w	#2,d7
00063FEE 2670 7000                  		movea.l	(a0,d7.w),a3
00063FF2 224B                       		movea.l	a3,a1
00063FF4 7200                       		moveq	#0,d1
00063FF6 3219                       		move.w	(a1)+,d1
00063FFA 1A19                       		move.b	(a1)+,d5
00063FFC 1E19                       		move.b	(a1)+,d7
00063FFE 5307                       		subq.b	#1,d7
00064000 7C30                       		moveq	#$30,d6
00064002                            
00064002                            loc_72228:
00064002 7600                       		moveq	#0,d3
00064004 1629 0001                  		move.b	1(a1),d3
00064008 1803                       		move.b	d3,d4
0006400A 6B00                       		bmi.s	loc_72244
0006400C 5543                       		subq.w	#2,d3
0006400E E54B                       		lsl.w	#2,d3
00064010 4BFA 0000                  		lea	dword_722CC(pc),a5
00064014 2A75 3000                  		movea.l	(a5,d3.w),a5
00064018 08D5 0002                  		bset	#2,(a5)
0006401C 6000                       		bra.s	loc_7226E
0006401E                            ; ===========================================================================
0006401E                            
0006401E                            loc_72244:
0006401E E64B                       		lsr.w	#3,d3
00064020 4BFA 0000                  		lea	dword_722CC(pc),a5
00064024 2A75 3000                  		movea.l	(a5,d3.w),a5
00064028 08D5 0002                  		bset	#2,(a5)
0006402C 0C04 00C0                  		cmpi.b	#$C0,d4
00064030 6600                       		bne.s	loc_7226E
00064032 1004                       		move.b	d4,d0
00064034 0000 001F                  		ori.b	#$1F,d0
00064038 13C0 00C0 0011             		move.b	d0,($C00011).l
0006403E 0840 0005                  		bchg	#5,d0
00064042 13C0 00C0 0011             		move.b	d0,($C00011).l
00064048                            
00064048                            loc_7226E:
00064048 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0006404C 244D                       		movea.l	a5,a2
0006404E 700B                       		moveq	#$B,d0
00064050                            
00064050                            loc_72276:
00064050 429A                       		clr.l	(a2)+
00064052 51C8 FFFC                  		dbf	d0,loc_72276
00064056                            
00064056 3A99                       		move.w	(a1)+,(a5)
00064058 1B45 0002                  		move.b	d5,2(a5)
0006405C 7000                       		moveq	#0,d0
0006405E 3019                       		move.w	(a1)+,d0
00064062 2B40 0004                  		move.l	d0,4(a5)
00064066 3B59 0008                  		move.w	(a1)+,8(a5)
0006406A 1B7C 0001 000E             		move.b	#1,$E(a5)
00064070 1B46 000D                  		move.b	d6,$D(a5)
00064074 4A04                       		tst.b	d4
00064076 6B00                       		bmi.s	loc_722A8
00064078 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0006407E 2B41 0020                  		move.l	d1,$20(a5)
00064082                            
00064082                            loc_722A8:
00064082 51CF FF7E                  		dbf	d7,loc_72228
00064086                            
00064086 4A2E 0250                  		tst.b	$250(a6)
0006408A 6A00                       		bpl.s	loc_722B8
0006408C 08EE 0002 0340             		bset	#2,$340(a6)
00064092                            
00064092                            loc_722B8:
00064092 4A2E 0310                  		tst.b	$310(a6)
00064096 6A00                       		bpl.s	locret_722C4
00064098 08EE 0002 0370             		bset	#2,$370(a6)
0006409E                            
0006409E                            locret_722C4:
0006409E 4E75                       		rts	
000640A0                            ; ===========================================================================
000640A0                            
000640A0                            loc_722C6:
000640A0 4216                       		clr.b	0(a6)
000640A2 4E75                       		rts	
000640A4                            ; ===========================================================================
000640A4 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
000640A8 0000 0000                  		dc.l 0
000640AC 00FF F100                  		dc.l $FFF100
000640B0 00FF F130                  		dc.l $FFF130
000640B4 00FF F190                  		dc.l $FFF190
000640B8 00FF F1C0                  		dc.l $FFF1C0
000640BC 00FF F1F0                  		dc.l $FFF1F0
000640C0 00FF F1F0                  		dc.l $FFF1F0
000640C4 00FF F220                  dword_722EC:	dc.l $FFF220
000640C8 0000 0000                  		dc.l 0
000640CC 00FF F250                  		dc.l $FFF250
000640D0 00FF F280                  		dc.l $FFF280
000640D4 00FF F2B0                  		dc.l $FFF2B0
000640D8 00FF F2E0                  		dc.l $FFF2E0
000640DC 00FF F310                  		dc.l $FFF310
000640E0 00FF F310                  		dc.l $FFF310
000640E4                            ; ===========================================================================
000640E4                            ; ---------------------------------------------------------------------------
000640E4                            ; Play GHZ waterfall sound
000640E4                            ; ---------------------------------------------------------------------------
000640E4                            
000640E4                            Sound_D0toDF:				; XREF: Sound_ChkValue
000640E4 4A2E 0027                  		tst.b	$27(a6)
000640E8 6600 0000                  		bne.w	locret_723C6
000640EC 4A2E 0004                  		tst.b	4(a6)
000640F0 6600 0000                  		bne.w	locret_723C6
000640F4 4A2E 0024                  		tst.b	$24(a6)
000640F8 6600 0000                  		bne.w	locret_723C6
000640FC 2079 0006 376E             		movea.l	(Go_SoundD0).l,a0
00064102 0407 00D0                  		subi.b	#$D0,d7
00064106 E54F                       		lsl.w	#2,d7
00064108 2670 7000                  		movea.l	(a0,d7.w),a3
0006410C 224B                       		movea.l	a3,a1
0006410E 7000                       		moveq	#0,d0
00064110 3019                       		move.w	(a1)+,d0
00064114 2D40 0020                  		move.l	d0,$20(a6)
00064118 1A19                       		move.b	(a1)+,d5
0006411A 1E19                       		move.b	(a1)+,d7
0006411C 5307                       		subq.b	#1,d7
0006411E 7C30                       		moveq	#$30,d6
00064120                            
00064120                            loc_72348:
00064120 1829 0001                  		move.b	1(a1),d4
00064124 6B00                       		bmi.s	loc_7235A
00064126 08EE 0002 0100             		bset	#2,$100(a6)
0006412C 4BEE 0340                  		lea	$340(a6),a5
00064130 6000                       		bra.s	loc_72364
00064132                            ; ===========================================================================
00064132                            
00064132                            loc_7235A:
00064132 08EE 0002 01F0             		bset	#2,$1F0(a6)
00064138 4BEE 0370                  		lea	$370(a6),a5
0006413C                            
0006413C                            loc_72364:
0006413C 244D                       		movea.l	a5,a2
0006413E 700B                       		moveq	#$B,d0
00064140                            
00064140                            loc_72368:
00064140 429A                       		clr.l	(a2)+
00064142 51C8 FFFC                  		dbf	d0,loc_72368
00064146                            
00064146 3A99                       		move.w	(a1)+,(a5)
00064148 1B45 0002                  		move.b	d5,2(a5)
0006414C 7000                       		moveq	#0,d0
0006414E 3019                       		move.w	(a1)+,d0
00064152 2B40 0004                  		move.l	d0,4(a5)
00064156 3B59 0008                  		move.w	(a1)+,8(a5)
0006415A 1B7C 0001 000E             		move.b	#1,$E(a5)
00064160 1B46 000D                  		move.b	d6,$D(a5)
00064164 4A04                       		tst.b	d4
00064166 6B00                       		bmi.s	loc_72396
00064168 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0006416E                            
0006416E                            loc_72396:
0006416E 51CF FFB0                  		dbf	d7,loc_72348
00064172                            
00064172 4A2E 0250                  		tst.b	$250(a6)
00064176 6A00                       		bpl.s	loc_723A6
00064178 08EE 0002 0340             		bset	#2,$340(a6)
0006417E                            
0006417E                            loc_723A6:
0006417E 4A2E 0310                  		tst.b	$310(a6)
00064182 6A00                       		bpl.s	locret_723C6
00064184 08EE 0002 0370             		bset	#2,$370(a6)
0006418A 0004 001F                  		ori.b	#$1F,d4
0006418E 13C4 00C0 0011             		move.b	d4,($C00011).l
00064194 0844 0005                  		bchg	#5,d4
00064198 13C4 00C0 0011             		move.b	d4,($C00011).l
0006419E                            
0006419E                            locret_723C6:
0006419E 4E75                       		rts	
000641A0                            ; End of function Sound_ChkValue
000641A0                            
000641A0                            ; ===========================================================================
000641A0 00FF F100                  		dc.l $FFF100
000641A4 00FF F1F0                  		dc.l $FFF1F0
000641A8 00FF F250                  		dc.l $FFF250
000641AC 00FF F310                  		dc.l $FFF310
000641B0 00FF F340                  		dc.l $FFF340
000641B4 00FF F370                  		dc.l $FFF370
000641B8                            
000641B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000641B8                            
000641B8                            
000641B8                            Snd_FadeOut1:				; XREF: Sound_E0
000641B8 4216                       		clr.b	0(a6)
000641BA 4BEE 0220                  		lea	$220(a6),a5
000641BE 7E05                       		moveq	#5,d7
000641C0                            
000641C0                            loc_723EA:
000641C0 4A15                       		tst.b	(a5)
000641C2 6A00 0000                  		bpl.w	loc_72472
000641C6 0895 0007                  		bclr	#7,(a5)
000641CA 7600                       		moveq	#0,d3
000641CC 162D 0001                  		move.b	1(a5),d3
000641D0 6B00                       		bmi.s	loc_7243C
000641D2 4EBA 0000                  		jsr	sub_726FE(pc)
000641D6 0C03 0004                  		cmpi.b	#4,d3
000641DA 6600                       		bne.s	loc_72416
000641DC 4A2E 0340                  		tst.b	$340(a6)
000641E0 6A00                       		bpl.s	loc_72416
000641E2 4BEE 0340                  		lea	$340(a6),a5
000641E6 226E 0020                  		movea.l	$20(a6),a1
000641EA 6000                       		bra.s	loc_72428
000641EC                            ; ===========================================================================
000641EC                            
000641EC                            loc_72416:
000641EC 5503                       		subq.b	#2,d3
000641EE E50B                       		lsl.b	#2,d3
000641F0 41FA FEB2                  		lea	dword_722CC(pc),a0
000641F4 264D                       		movea.l	a5,a3
000641F6 2A70 3000                  		movea.l	(a0,d3.w),a5
000641FA 226E 0018                  		movea.l	$18(a6),a1
000641FE                            
000641FE                            loc_72428:
000641FE 0895 0002                  		bclr	#2,(a5)
00064202 08D5 0001                  		bset	#1,(a5)
00064206 102D 000B                  		move.b	$B(a5),d0
0006420A 4EBA 0000                  		jsr	sub_72C4E(pc)
0006420E 2A4B                       		movea.l	a3,a5
00064210 6000                       		bra.s	loc_72472
00064212                            ; ===========================================================================
00064212                            
00064212                            loc_7243C:
00064212 4EBA 0000                  		jsr	sub_729A0(pc)
00064216 41EE 0370                  		lea	$370(a6),a0
0006421A 0C03 00E0                  		cmpi.b	#$E0,d3
0006421E 6700                       		beq.s	loc_7245A
00064220 0C03 00C0                  		cmpi.b	#$C0,d3
00064224 6700                       		beq.s	loc_7245A
00064226 E60B                       		lsr.b	#3,d3
00064228 41FA FE7A                  		lea	dword_722CC(pc),a0
0006422C 2070 3000                  		movea.l	(a0,d3.w),a0
00064230                            
00064230                            loc_7245A:
00064230 0890 0002                  		bclr	#2,(a0)
00064234 08D0 0001                  		bset	#1,(a0)
00064238 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0006423E 6600                       		bne.s	loc_72472
00064240 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00064248                            
00064248                            loc_72472:
00064248 DAFC 0030                  		adda.w	#$30,a5
0006424C 51CF FF72                  		dbf	d7,loc_723EA
00064250                            
00064250 4E75                       		rts	
00064252                            ; End of function Snd_FadeOut1
00064252                            
00064252                            
00064252                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00064252                            
00064252                            
00064252                            Snd_FadeOut2:				; XREF: Sound_E0
00064252 4BEE 0340                  		lea	$340(a6),a5
00064256 4A15                       		tst.b	(a5)
00064258 6A00                       		bpl.s	loc_724AE
0006425A 0895 0007                  		bclr	#7,(a5)
0006425E 0815 0002                  		btst	#2,(a5)
00064262 6600                       		bne.s	loc_724AE
00064264 4EBA 0000                  		jsr	loc_7270A(pc)
00064268 4BEE 0100                  		lea	$100(a6),a5
0006426C 0895 0002                  		bclr	#2,(a5)
00064270 08D5 0001                  		bset	#1,(a5)
00064274 4A15                       		tst.b	(a5)
00064276 6A00                       		bpl.s	loc_724AE
00064278 226E 0018                  		movea.l	$18(a6),a1
0006427C 102D 000B                  		move.b	$B(a5),d0
00064280 4EBA 0000                  		jsr	sub_72C4E(pc)
00064284                            
00064284                            loc_724AE:
00064284 4BEE 0370                  		lea	$370(a6),a5
00064288 4A15                       		tst.b	(a5)
0006428A 6A00                       		bpl.s	locret_724E4
0006428C 0895 0007                  		bclr	#7,(a5)
00064290 0815 0002                  		btst	#2,(a5)
00064294 6600                       		bne.s	locret_724E4
00064296 4EBA 0000                  		jsr	loc_729A6(pc)
0006429A 4BEE 01F0                  		lea	$1F0(a6),a5
0006429E 0895 0002                  		bclr	#2,(a5)
000642A2 08D5 0001                  		bset	#1,(a5)
000642A6 4A15                       		tst.b	(a5)
000642A8 6A00                       		bpl.s	locret_724E4
000642AA 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000642B0 6600                       		bne.s	locret_724E4
000642B2 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000642BA                            
000642BA                            locret_724E4:
000642BA 4E75                       		rts	
000642BC                            ; End of function Snd_FadeOut2
000642BC                            
000642BC                            ; ===========================================================================
000642BC                            ; ---------------------------------------------------------------------------
000642BC                            ; Fade out music
000642BC                            ; ---------------------------------------------------------------------------
000642BC                            
000642BC                            Sound_E0:				; XREF: Sound_ExIndex
000642BC 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
000642C0 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
000642C4 1D7C 0003 0006             		move.b	#3,6(a6)
000642CA 1D7C 0028 0004             		move.b	#$28,4(a6)
000642D0 422E 0040                  		clr.b	$40(a6)
000642D4 422E 002A                  		clr.b	$2A(a6)
000642D8 4E75                       		rts	
000642DA                            
000642DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000642DA                            
000642DA                            
000642DA                            sub_72504:				; XREF: sub_71B4C
000642DA 102E 0006                  		move.b	6(a6),d0
000642DE 6700                       		beq.s	loc_72510
000642E0 532E 0006                  		subq.b	#1,6(a6)
000642E4 4E75                       		rts	
000642E6                            ; ===========================================================================
000642E6                            
000642E6                            loc_72510:
000642E6 532E 0004                  		subq.b	#1,4(a6)
000642EA 6700 0000                  		beq.w	Sound_E4
000642EE 1D7C 0003 0006             		move.b	#3,6(a6)
000642F4 4BEE 0070                  		lea	$70(a6),a5
000642F8 7E05                       		moveq	#5,d7
000642FA                            
000642FA                            loc_72524:
000642FA 4A15                       		tst.b	(a5)
000642FC 6A00                       		bpl.s	loc_72538
000642FE 522D 0009                  		addq.b	#1,9(a5)
00064302 6A00                       		bpl.s	loc_72534
00064304 0895 0007                  		bclr	#7,(a5)
00064308 6000                       		bra.s	loc_72538
0006430A                            ; ===========================================================================
0006430A                            
0006430A                            loc_72534:
0006430A 4EBA 0000                  		jsr	sub_72CB4(pc)
0006430E                            
0006430E                            loc_72538:
0006430E DAFC 0030                  		adda.w	#$30,a5
00064312 51CF FFE6                  		dbf	d7,loc_72524
00064316                            
00064316 7E02                       		moveq	#2,d7
00064318                            
00064318                            loc_72542:
00064318 4A15                       		tst.b	(a5)
0006431A 6A00                       		bpl.s	loc_72560
0006431C 522D 0009                  		addq.b	#1,9(a5)
00064320 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00064326 6500                       		bcs.s	loc_72558
00064328 0895 0007                  		bclr	#7,(a5)
0006432C 6000                       		bra.s	loc_72560
0006432E                            ; ===========================================================================
0006432E                            
0006432E                            loc_72558:
0006432E 1C2D 0009                  		move.b	9(a5),d6
00064332 4EBA 0000                  		jsr	sub_7296A(pc)
00064336                            
00064336                            loc_72560:
00064336 DAFC 0030                  		adda.w	#$30,a5
0006433A 51CF FFDC                  		dbf	d7,loc_72542
0006433E                            
0006433E 4E75                       		rts	
00064340                            ; End of function sub_72504
00064340                            
00064340                            
00064340                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00064340                            
00064340                            
00064340                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00064340 7602                       		moveq	#2,d3
00064342 7028                       		moveq	#$28,d0
00064344                            
00064344                            loc_7256E:
00064344 1203                       		move.b	d3,d1
00064346 4EBA 0000                  		jsr	sub_7272E(pc)
0006434A 5801                       		addq.b	#4,d1
0006434C 4EBA 0000                  		jsr	sub_7272E(pc)
00064350 51CB FFF2                  		dbf	d3,loc_7256E
00064354                            
00064354 7040                       		moveq	#$40,d0
00064356 727F                       		moveq	#$7F,d1
00064358 7802                       		moveq	#2,d4
0006435A                            
0006435A                            loc_72584:
0006435A 7603                       		moveq	#3,d3
0006435C                            
0006435C                            loc_72586:
0006435C 4EBA 0000                  		jsr	sub_7272E(pc)
00064360 4EBA 0000                  		jsr	sub_72764(pc)
00064364 5840                       		addq.w	#4,d0
00064366 51CB FFF4                  		dbf	d3,loc_72586
0006436A                            
0006436A 0400 000F                  		subi.b	#$F,d0
0006436E 51CC FFEA                  		dbf	d4,loc_72584
00064372                            
00064372 4E75                       		rts	
00064374                            ; End of function sub_7256A
00064374                            
00064374                            ; ===========================================================================
00064374                            ; ---------------------------------------------------------------------------
00064374                            ; Stop music
00064374                            ; ---------------------------------------------------------------------------
00064374                            
00064374                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00064374 702B                       		moveq	#$2B,d0
00064376 123C 0080                  		move.b	#$80,d1
0006437A 4EBA 0000                  		jsr	sub_7272E(pc)
0006437E 7027                       		moveq	#$27,d0
00064380 7200                       		moveq	#0,d1
00064382 4EBA 0000                  		jsr	sub_7272E(pc)
00064386 204E                       		movea.l	a6,a0
00064388 303C 00E3                  		move.w	#$E3,d0
0006438C                            
0006438C                            loc_725B6:
0006438C 4298                       		clr.l	(a0)+
0006438E 51C8 FFFC                  		dbf	d0,loc_725B6
00064392                            
00064392 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00064398 4EBA FFA6                  		jsr	sub_7256A(pc)
0006439C 6000 0000                  		bra.w	sub_729B6
000643A0                            
000643A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000643A0                            
000643A0                            
000643A0                            sub_725CA:				; XREF: Sound_ChkValue
000643A0 204E                       		movea.l	a6,a0
000643A2 1216                       		move.b	0(a6),d1
000643A4 142E 0027                  		move.b	$27(a6),d2
000643A8 162E 002A                  		move.b	$2A(a6),d3
000643AC 182E 0026                  		move.b	$26(a6),d4
000643B0 3A2E 000A                  		move.w	$A(a6),d5
000643B4 303C 0087                  		move.w	#$87,d0
000643B8                            
000643B8                            loc_725E4:
000643B8 4298                       		clr.l	(a0)+
000643BA 51C8 FFFC                  		dbf	d0,loc_725E4
000643BE                            
000643BE 1C81                       		move.b	d1,0(a6)
000643C0 1D42 0027                  		move.b	d2,$27(a6)
000643C4 1D43 002A                  		move.b	d3,$2A(a6)
000643C8 1D44 0026                  		move.b	d4,$26(a6)
000643CC 3D45 000A                  		move.w	d5,$A(a6)
000643D0 1D7C 0080 0009             		move.b	#$80,9(a6)
000643D6 4EBA FF68                  		jsr	sub_7256A(pc)
000643DA 6000 0000                  		bra.w	sub_729B6
000643DE                            ; End of function sub_725CA
000643DE                            
000643DE                            
000643DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000643DE                            
000643DE                            
000643DE                            sub_7260C:				; XREF: sub_71B4C
000643DE 1D6E 0002 0001             		move.b	2(a6),1(a6)
000643E4 41EE 004E                  		lea	$4E(a6),a0
000643E8 7030                       		moveq	#$30,d0
000643EA 7209                       		moveq	#9,d1
000643EC                            
000643EC                            loc_7261A:
000643EC 5210                       		addq.b	#1,(a0)
000643EE D0C0                       		adda.w	d0,a0
000643F0 51C9 FFFA                  		dbf	d1,loc_7261A
000643F4                            
000643F4 4E75                       		rts	
000643F6                            ; End of function sub_7260C
000643F6                            
000643F6                            ; ===========================================================================
000643F6                            ; ---------------------------------------------------------------------------
000643F6                            ; Speed	up music
000643F6                            ; ---------------------------------------------------------------------------
000643F6                            
000643F6                            Sound_E2:				; XREF: Sound_ExIndex
000643F6 4A2E 0027                  		tst.b	$27(a6)
000643FA 6600                       		bne.s	loc_7263E
000643FC 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00064402 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00064408 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0006440E 4E75                       		rts	
00064410                            ; ===========================================================================
00064410                            
00064410                            loc_7263E:
00064410 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
00064416 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0006441C 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
00064422 4E75                       		rts	
00064424                            ; ===========================================================================
00064424                            ; ---------------------------------------------------------------------------
00064424                            ; Change music back to normal speed
00064424                            ; ---------------------------------------------------------------------------
00064424                            
00064424                            Sound_E3:				; XREF: Sound_ExIndex
00064424 4A2E 0027                  		tst.b	$27(a6)
00064428 6600                       		bne.s	loc_7266A
0006442A 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00064430 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00064436 422E 002A                  		clr.b	$2A(a6)
0006443A 4E75                       		rts	
0006443C                            ; ===========================================================================
0006443C                            
0006443C                            loc_7266A:
0006443C 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
00064442 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
00064448 422E 03CA                  		clr.b	$3CA(a6)
0006444C 4E75                       		rts	
0006444E                            
0006444E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006444E                            
0006444E                            
0006444E                            sub_7267C:				; XREF: sub_71B4C
0006444E 4A2E 0025                  		tst.b	$25(a6)
00064452 6700                       		beq.s	loc_72688
00064454 532E 0025                  		subq.b	#1,$25(a6)
00064458 4E75                       		rts	
0006445A                            ; ===========================================================================
0006445A                            
0006445A                            loc_72688:
0006445A 4A2E 0026                  		tst.b	$26(a6)
0006445E 6700                       		beq.s	loc_726D6
00064460 532E 0026                  		subq.b	#1,$26(a6)
00064464 1D7C 0002 0025             		move.b	#2,$25(a6)
0006446A 4BEE 0070                  		lea	$70(a6),a5
0006446E 7E05                       		moveq	#5,d7
00064470                            
00064470                            loc_7269E:
00064470 4A15                       		tst.b	(a5)
00064472 6A00                       		bpl.s	loc_726AA
00064474 532D 0009                  		subq.b	#1,9(a5)
00064478 4EBA 0000                  		jsr	sub_72CB4(pc)
0006447C                            
0006447C                            loc_726AA:
0006447C DAFC 0030                  		adda.w	#$30,a5
00064480 51CF FFEE                  		dbf	d7,loc_7269E
00064484 7E02                       		moveq	#2,d7
00064486                            
00064486                            loc_726B4:
00064486 4A15                       		tst.b	(a5)
00064488 6A00                       		bpl.s	loc_726CC
0006448A 532D 0009                  		subq.b	#1,9(a5)
0006448E 1C2D 0009                  		move.b	9(a5),d6
00064492 0C06 0010                  		cmpi.b	#$10,d6
00064496 6500                       		bcs.s	loc_726C8
00064498 7C0F                       		moveq	#$F,d6
0006449A                            
0006449A                            loc_726C8:
0006449A 4EBA 0000                  		jsr	sub_7296A(pc)
0006449E                            
0006449E                            loc_726CC:
0006449E DAFC 0030                  		adda.w	#$30,a5
000644A2 51CF FFE2                  		dbf	d7,loc_726B4
000644A6 4E75                       		rts	
000644A8                            ; ===========================================================================
000644A8                            
000644A8                            loc_726D6:
000644A8 08AE 0002 0040             		bclr	#2,$40(a6)
000644AE 422E 0024                  		clr.b	$24(a6)
000644B2 4E75                       		rts	
000644B4                            ; End of function sub_7267C
000644B4                            
000644B4                            ; ===========================================================================
000644B4                            
000644B4                            loc_726E2:				; XREF: sub_71CCA
000644B4 0815 0001                  		btst	#1,(a5)
000644B8 6600                       		bne.s	locret_726FC
000644BA 0815 0002                  		btst	#2,(a5)
000644BE 6600                       		bne.s	locret_726FC
000644C0 7028                       		moveq	#$28,d0
000644C2 122D 0001                  		move.b	1(a5),d1
000644C6 0001 00F0                  		ori.b	#-$10,d1
000644CA 6000 0000                  		bra.w	sub_7272E
000644CE                            ; ===========================================================================
000644CE                            
000644CE                            locret_726FC:
000644CE 4E75                       		rts	
000644D0                            
000644D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000644D0                            
000644D0                            
000644D0                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000644D0 0815 0004                  		btst	#4,(a5)
000644D4 6600                       		bne.s	locret_72714
000644D6 0815 0002                  		btst	#2,(a5)
000644DA 6600                       		bne.s	locret_72714
000644DC                            
000644DC                            loc_7270A:				; XREF: Snd_FadeOut2
000644DC 7028                       		moveq	#$28,d0
000644DE 122D 0001                  		move.b	1(a5),d1
000644E2 6000 0000                  		bra.w	sub_7272E
000644E6                            ; ===========================================================================
000644E6                            
000644E6                            locret_72714:
000644E6 4E75                       		rts	
000644E8                            ; End of function sub_726FE
000644E8                            
000644E8                            ; ===========================================================================
000644E8                            
000644E8                            loc_72716:				; XREF: sub_72A5A
000644E8 0815 0002                  		btst	#2,(a5)
000644EC 6600                       		bne.s	locret_72720
000644EE 6000 0000                  		bra.w	sub_72722
000644F2                            ; ===========================================================================
000644F2                            
000644F2                            locret_72720:
000644F2 4E75                       		rts	
000644F4                            
000644F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000644F4                            
000644F4                            
000644F4                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000644F4 082D 0002 0001             		btst	#2,1(a5)
000644FA 6600                       		bne.s	loc_7275A
00064500                            ; End of function sub_72722
00064500                            
00064500                            
00064500                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00064500                            
00064500                            
00064500                            sub_7272E:				; XREF: loc_71E6A
00064500 1439 00A0 4000             		move.b	($A04000).l,d2
00064506 0802 0007                  		btst	#7,d2
0006450A 66F4                       		bne.s	sub_7272E
0006450C 13C0 00A0 4000             		move.b	d0,($A04000).l
00064518                            
00064518                            loc_72746:
00064518 1439 00A0 4000             		move.b	($A04000).l,d2
0006451E 0802 0007                  		btst	#7,d2
00064522 66F4                       		bne.s	loc_72746
00064524                            
00064524 13C1 00A0 4001             		move.b	d1,($A04001).l
0006452A 4E75                       		rts	
0006452C                            ; End of function sub_7272E
0006452C                            
0006452C                            ; ===========================================================================
0006452C                            
0006452C                            loc_7275A:				; XREF: sub_72722
0006452C 142D 0001                  		move.b	1(a5),d2
00064530 0882 0002                  		bclr	#2,d2
00064536                            
00064536                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00064536                            
00064536                            
00064536                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
00064536 1439 00A0 4000             		move.b	($A04000).l,d2
0006453C 0802 0007                  		btst	#7,d2
00064540 66F4                       		bne.s	sub_72764
00064542 13C0 00A0 4002             		move.b	d0,($A04002).l
0006454E                            
0006454E                            loc_7277C:
0006454E 1439 00A0 4000             		move.b	($A04000).l,d2
00064554 0802 0007                  		btst	#7,d2
00064558 66F4                       		bne.s	loc_7277C
0006455A                            
0006455A 13C1 00A0 4003             		move.b	d1,($A04003).l
00064560 4E75                       		rts	
00064562                            ; End of function sub_72764
00064562                            
00064562                            ; ===========================================================================
00064562 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00064574 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00064586 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00064596 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000645A6 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000645B6 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000645C6 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000645D6 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000645E6 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000645F6 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00064606 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00064616 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00064622                            
00064622                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00064622                            
00064622                            
00064622                            sub_72850:				; XREF: sub_71B4C
00064622 532D 000E                  		subq.b	#1,$E(a5)
00064626 6600                       		bne.s	loc_72866
00064628 0895 0004                  		bclr	#4,(a5)
0006462C 4EBA 0000                  		jsr	sub_72878(pc)
00064630 4EBA 0000                  		jsr	sub_728DC(pc)
00064634 6000 0000                  		bra.w	loc_7292E
00064638                            ; ===========================================================================
00064638                            
00064638                            loc_72866:
00064638 4EBA F546                  		jsr	sub_71D9E(pc)
0006463C 4EBA 0000                  		jsr	sub_72926(pc)
00064640 4EBA F566                  		jsr	sub_71DC6(pc)
00064644 4EBA 0000                  		jsr	sub_728E2(pc)
00064648 4E75                       		rts	
0006464A                            ; End of function sub_72850
0006464A                            
0006464A                            
0006464A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006464A                            
0006464A                            
0006464A                            sub_72878:				; XREF: sub_72850
0006464A 0895 0001                  		bclr	#1,(a5)
0006464E 286D 0004                  		movea.l	4(a5),a4
00064652                            
00064652                            loc_72880:
00064652 7A00                       		moveq	#0,d5
00064654 1A1C                       		move.b	(a4)+,d5
00064656 0C05 00E0                  		cmpi.b	#$E0,d5
0006465A 6500                       		bcs.s	loc_72890
0006465C 4EBA 0000                  		jsr	sub_72A5A(pc)
00064660 60F0                       		bra.s	loc_72880
00064662                            ; ===========================================================================
00064662                            
00064662                            loc_72890:
00064662 4A05                       		tst.b	d5
00064664 6A00                       		bpl.s	loc_728A4
00064666 4EBA 0000                  		jsr	sub_728AC(pc)
0006466A 1A1C                       		move.b	(a4)+,d5
0006466C 4A05                       		tst.b	d5
0006466E 6A00                       		bpl.s	loc_728A4
00064670 534C                       		subq.w	#1,a4
00064672 6000 F4CE                  		bra.w	sub_71D60
00064676                            ; ===========================================================================
00064676                            
00064676                            loc_728A4:
00064676 4EBA F4AA                  		jsr	sub_71D40(pc)
0006467A 6000 F4C6                  		bra.w	sub_71D60
0006467E                            ; End of function sub_72878
0006467E                            
0006467E                            
0006467E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006467E                            
0006467E                            
0006467E                            sub_728AC:				; XREF: sub_72878
0006467E 0405 0081                  		subi.b	#$81,d5
00064682 6500                       		bcs.s	loc_728CA
00064688 0245 007F                  		andi.w	#$7F,d5
0006468C E34D                       		lsl.w	#1,d5
0006468E 41FA 0000                  		lea	word_729CE(pc),a0
00064692 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00064698 6000 F4A8                  		bra.w	sub_71D60
0006469C                            ; ===========================================================================
0006469C                            
0006469C                            loc_728CA:
0006469C 08D5 0001                  		bset	#1,(a5)
000646A0 3B7C FFFF 0010             		move.w	#-1,$10(a5)
000646A6 4EBA F49A                  		jsr	sub_71D60(pc)
000646AA 6000 0000                  		bra.w	sub_729A0
000646AE                            ; End of function sub_728AC
000646AE                            
000646AE                            
000646AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000646AE                            
000646AE                            
000646AE                            sub_728DC:				; XREF: sub_72850
000646AE 3C2D 0010                  		move.w	$10(a5),d6
000646B2 6B00                       		bmi.s	loc_72920
000646B4                            ; End of function sub_728DC
000646B4                            
000646B4                            
000646B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000646B4                            
000646B4                            
000646B4                            sub_728E2:				; XREF: sub_72850
000646B4 102D 001E                  		move.b	$1E(a5),d0
000646B8 4880                       		ext.w	d0
000646BC 0815 0002                  		btst	#2,(a5)
000646C0 6600                       		bne.s	locret_7291E
000646C2 0815 0001                  		btst	#1,(a5)
000646C6 6600                       		bne.s	locret_7291E
000646C8 102D 0001                  		move.b	1(a5),d0
000646CC 0C00 00E0                  		cmpi.b	#$E0,d0
000646D0 6600                       		bne.s	loc_72904
000646D2 103C 00C0                  		move.b	#$C0,d0
000646D6                            
000646D6                            loc_72904:
000646D6 3206                       		move.w	d6,d1
000646D8 0201 000F                  		andi.b	#$F,d1
000646DE E84E                       		lsr.w	#4,d6
000646E0 0206 003F                  		andi.b	#$3F,d6
000646E4 13C0 00C0 0011             		move.b	d0,($C00011).l
000646EA 13C6 00C0 0011             		move.b	d6,($C00011).l
000646F0                            
000646F0                            locret_7291E:
000646F0 4E75                       		rts	
000646F2                            ; End of function sub_728E2
000646F2                            
000646F2                            ; ===========================================================================
000646F2                            
000646F2                            loc_72920:				; XREF: sub_728DC
000646F2 08D5 0001                  		bset	#1,(a5)
000646F6 4E75                       		rts	
000646F8                            
000646F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000646F8                            
000646F8                            
000646F8                            sub_72926:				; XREF: sub_72850
000646F8 4A2D 000B                  		tst.b	$B(a5)
000646FC 6700 0000                  		beq.w	locret_7298A
00064700                            
00064700                            loc_7292E:				; XREF: sub_72850
00064700 1C2D 0009                  		move.b	9(a5),d6
00064704 7000                       		moveq	#0,d0
00064706 102D 000B                  		move.b	$B(a5),d0
0006470A 6700                       		beq.s	sub_7296A
0006470C 2079 0006 377E             		movea.l	(Go_PSGIndex).l,a0
00064712 5340                       		subq.w	#1,d0
00064714 E548                       		lsl.w	#2,d0
00064716 2070 0000                  		movea.l	(a0,d0.w),a0
0006471A 102D 000C                  		move.b	$C(a5),d0
0006471E 1030 0000                  		move.b	(a0,d0.w),d0
00064722 522D 000C                  		addq.b	#1,$C(a5)
00064726 0800 0007                  		btst	#7,d0
0006472A 6700                       		beq.s	loc_72960
0006472C 0C00 0080                  		cmpi.b	#$80,d0
00064730 6700                       		beq.s	loc_7299A
00064732                            
00064732                            loc_72960:
00064734 0C06 0010                  		cmpi.b	#$10,d6
00064738 6500                       		bcs.s	sub_7296A
0006473A 7C0F                       		moveq	#$F,d6
0006473C                            ; End of function sub_72926
0006473C                            
0006473C                            
0006473C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006473C                            
0006473C                            
0006473C                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0006473C 0815 0001                  		btst	#1,(a5)
00064740 6600                       		bne.s	locret_7298A
00064742 0815 0002                  		btst	#2,(a5)
00064746 6600                       		bne.s	locret_7298A
00064748 0815 0004                  		btst	#4,(a5)
0006474C 6600                       		bne.s	loc_7298C
0006474E                            
0006474E                            loc_7297C:
00064752 0606 0010                  		addi.b	#$10,d6
00064756 13C6 00C0 0011             		move.b	d6,($C00011).l
0006475C                            
0006475C                            locret_7298A:
0006475C 4E75                       		rts	
0006475E                            ; ===========================================================================
0006475E                            
0006475E                            loc_7298C:
0006475E 4A2D 0013                  		tst.b	$13(a5)
00064762 67EA                       		beq.s	loc_7297C
00064764 4A2D 0012                  		tst.b	$12(a5)
00064768 66E4                       		bne.s	loc_7297C
0006476A 4E75                       		rts	
0006476C                            ; End of function sub_7296A
0006476C                            
0006476C                            ; ===========================================================================
0006476C                            
0006476C                            loc_7299A:				; XREF: sub_72926
0006476C 532D 000C                  		subq.b	#1,$C(a5)
00064770 4E75                       		rts	
00064772                            
00064772                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00064772                            
00064772                            
00064772                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00064772 0815 0002                  		btst	#2,(a5)
00064776 6600                       		bne.s	locret_729B4
00064778                            
00064778                            loc_729A6:				; XREF: Snd_FadeOut2
00064778 102D 0001                  		move.b	1(a5),d0
0006477C 0000 001F                  		ori.b	#$1F,d0
00064780 13C0 00C0 0011             		move.b	d0,($C00011).l
00064786                            
00064786                            locret_729B4:
00064786 4E75                       		rts	
00064788                            ; End of function sub_729A0
00064788                            
00064788                            
00064788                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00064788                            
00064788                            
00064788                            sub_729B6:				; XREF: loc_71E7C
00064788 41F9 00C0 0011             		lea	($C00011).l,a0
0006478E 10BC 009F                  		move.b	#$9F,(a0)
00064792 10BC 00BF                  		move.b	#$BF,(a0)
00064796 10BC 00DF                  		move.b	#$DF,(a0)
0006479A 10BC 00FF                  		move.b	#$FF,(a0)
0006479E 4E75                       		rts	
000647A0                            ; End of function sub_729B6
000647A0                            
000647A0                            ; ===========================================================================
000647A0 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000647B2 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000647C4 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000647D8 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000647EC 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00064800 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00064814 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00064828 0011 0000                  		dc.w $11, 0
0006482C                            
0006482C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006482C                            
0006482C                            
0006482C                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0006482C 0445 00E0                  		subi.w	#$E0,d5
00064830 E54D                       		lsl.w	#2,d5
00064832 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00064836                            ; End of function sub_72A5A
00064836                            
00064836                            ; ===========================================================================
00064836                            
00064836                            loc_72A64:
00064836 6000 0000                  		bra.w	loc_72ACC
0006483A                            ; ===========================================================================
0006483A 6000 0000                  		bra.w	loc_72AEC
0006483E                            ; ===========================================================================
0006483E 6000 0000                  		bra.w	loc_72AF2
00064842                            ; ===========================================================================
00064842 6000 0000                  		bra.w	loc_72AF8
00064846                            ; ===========================================================================
00064846 6000 0000                  		bra.w	loc_72B14
0006484A                            ; ===========================================================================
0006484A 6000 0000                  		bra.w	loc_72B9E
0006484E                            ; ===========================================================================
0006484E 6000 0000                  		bra.w	loc_72BA4
00064852                            ; ===========================================================================
00064852 6000 0000                  		bra.w	loc_72BAE
00064856                            ; ===========================================================================
00064856 6000 0000                  		bra.w	loc_72BB4
0006485A                            ; ===========================================================================
0006485A 6000 0000                  		bra.w	loc_72BBE
0006485E                            ; ===========================================================================
0006485E 6000 0000                  		bra.w	loc_72BC6
00064862                            ; ===========================================================================
00064862 6000 0000                  		bra.w	loc_72BD0
00064866                            ; ===========================================================================
00064866 6000 0000                  		bra.w	loc_72BE6
0006486A                            ; ===========================================================================
0006486A 6000 0000                  		bra.w	loc_72BEE
0006486E                            ; ===========================================================================
0006486E 6000 0000                  		bra.w	loc_72BF4
00064872                            ; ===========================================================================
00064872 6000 0000                  		bra.w	loc_72C26
00064876                            ; ===========================================================================
00064876 6000 0000                  		bra.w	loc_72D30
0006487A                            ; ===========================================================================
0006487A 6000 0000                  		bra.w	loc_72D52
0006487E                            ; ===========================================================================
0006487E 6000 0000                  		bra.w	loc_72D58
00064882                            ; ===========================================================================
00064882 6000 0000                  		bra.w	loc_72E06
00064886                            ; ===========================================================================
00064886 6000 0000                  		bra.w	loc_72E20
0006488A                            ; ===========================================================================
0006488A 6000 0000                  		bra.w	loc_72E26
0006488E                            ; ===========================================================================
0006488E 6000 0000                  		bra.w	loc_72E2C
00064892                            ; ===========================================================================
00064892 6000 0000                  		bra.w	loc_72E38
00064896                            ; ===========================================================================
00064896 6000 0000                  		bra.w	loc_72E52
0006489A                            ; ===========================================================================
0006489A 6000 0000                  		bra.w	loc_72E64
0006489E                            ; ===========================================================================
0006489E                            
0006489E                            loc_72ACC:				; XREF: loc_72A64
0006489E 121C                       		move.b	(a4)+,d1
000648A0 4A2D 0001                  		tst.b	1(a5)
000648A4 6B00                       		bmi.s	locret_72AEA
000648A6 102D 000A                  		move.b	$A(a5),d0
000648AA 0200 0037                  		andi.b	#$37,d0
000648B0 1B41 000A                  		move.b	d1,$A(a5)
000648B4 103C 00B4                  		move.b	#$B4,d0
000648B8 6000 FC2E                  		bra.w	loc_72716
000648BC                            ; ===========================================================================
000648BC                            
000648BC                            locret_72AEA:
000648BC 4E75                       		rts	
000648BE                            ; ===========================================================================
000648BE                            
000648BE                            loc_72AEC:				; XREF: loc_72A64
000648BE 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000648C2 4E75                       		rts	
000648C4                            ; ===========================================================================
000648C4                            
000648C4                            loc_72AF2:				; XREF: loc_72A64
000648C4 1D5C 0007                  		move.b	(a4)+,7(a6)
000648C8 4E75                       		rts	
000648CA                            ; ===========================================================================
000648CA                            
000648CA                            loc_72AF8:				; XREF: loc_72A64
000648CA 7000                       		moveq	#0,d0
000648CC 102D 000D                  		move.b	$D(a5),d0
000648D0 2875 0000                  		movea.l	(a5,d0.w),a4
000648D4 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000648DC 544C                       		addq.w	#2,a4
000648DE 5800                       		addq.b	#4,d0
000648E0 1B40 000D                  		move.b	d0,$D(a5)
000648E4 4E75                       		rts	
000648E6                            ; ===========================================================================
000648E6                            
000648E6                            loc_72B14:				; XREF: loc_72A64
000648E6 204E                       		movea.l	a6,a0
000648E8 43EE 03A0                  		lea	$3A0(a6),a1
000648EC 303C 0087                  		move.w	#$87,d0
000648F0                            
000648F0                            loc_72B1E:
000648F0 20D9                       		move.l	(a1)+,(a0)+
000648F2 51C8 FFFC                  		dbf	d0,loc_72B1E
000648F6                            
000648F6 08EE 0002 0040             		bset	#2,$40(a6)
000648FC 264D                       		movea.l	a5,a3
000648FE 1C3C 0028                  		move.b	#$28,d6
00064906 7E05                       		moveq	#5,d7
00064908 4BEE 0070                  		lea	$70(a6),a5
0006490C                            
0006490C                            loc_72B3A:
0006490C 0815 0007                  		btst	#7,(a5)
00064910 6700                       		beq.s	loc_72B5C
00064912 08D5 0001                  		bset	#1,(a5)
0006491A 0815 0002                  		btst	#2,(a5)
0006491E 6600                       		bne.s	loc_72B5C
00064920 7000                       		moveq	#0,d0
00064922 102D 000B                  		move.b	$B(a5),d0
00064926 226E 0018                  		movea.l	$18(a6),a1
0006492A 4EBA 0000                  		jsr	sub_72C4E(pc)
0006492E                            
0006492E                            loc_72B5C:
0006492E DAFC 0030                  		adda.w	#$30,a5
00064932 51CF FFD8                  		dbf	d7,loc_72B3A
00064936                            
00064936 7E02                       		moveq	#2,d7
00064938                            
00064938                            loc_72B66:
00064938 0815 0007                  		btst	#7,(a5)
0006493C 6700                       		beq.s	loc_72B78
0006493E 08D5 0001                  		bset	#1,(a5)
00064942 4EBA FE2E                  		jsr	sub_729A0(pc)
0006494A                            
0006494A                            loc_72B78:
0006494A DAFC 0030                  		adda.w	#$30,a5
0006494E 51CF FFE8                  		dbf	d7,loc_72B66
00064952 2A4B                       		movea.l	a3,a5
00064954 1D7C 0080 0024             		move.b	#$80,$24(a6)
0006495A 1D7C 0028 0026             		move.b	#$28,$26(a6)
00064960 422E 0027                  		clr.b	$27(a6)
00064964 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0006496C 504F                       		addq.w	#8,sp
0006496E 4E75                       		rts	
00064970                            ; ===========================================================================
00064970                            
00064970                            loc_72B9E:				; XREF: loc_72A64
00064970 1B5C 0002                  		move.b	(a4)+,2(a5)
00064974 4E75                       		rts	
00064976                            ; ===========================================================================
00064976                            
00064976                            loc_72BA4:				; XREF: loc_72A64
00064976 101C                       		move.b	(a4)+,d0
0006497C 6000 0000                  		bra.w	sub_72CB4
00064980                            ; ===========================================================================
00064980                            
00064980                            loc_72BAE:				; XREF: loc_72A64
00064980 08D5 0004                  		bset	#4,(a5)
00064984 4E75                       		rts	
00064986                            ; ===========================================================================
00064986                            
00064986                            loc_72BB4:				; XREF: loc_72A64
00064986 1B54 0012                  		move.b	(a4),$12(a5)
0006498A 1B5C 0013                  		move.b	(a4)+,$13(a5)
0006498E 4E75                       		rts	
00064990                            ; ===========================================================================
00064990                            
00064990                            loc_72BBE:				; XREF: loc_72A64
00064990 101C                       		move.b	(a4)+,d0
00064996 4E75                       		rts	
00064998                            ; ===========================================================================
00064998                            
00064998                            loc_72BC6:				; XREF: loc_72A64
00064998 1D54 0002                  		move.b	(a4),2(a6)
0006499C 1D5C 0001                  		move.b	(a4)+,1(a6)
000649A0 4E75                       		rts	
000649A2                            ; ===========================================================================
000649A2                            
000649A2                            loc_72BD0:				; XREF: loc_72A64
000649A2 41EE 0040                  		lea	$40(a6),a0
000649A6 101C                       		move.b	(a4)+,d0
000649A8 7230                       		moveq	#$30,d1
000649AA 7409                       		moveq	#9,d2
000649AC                            
000649AC                            loc_72BDA:
000649AC 1140 0002                  		move.b	d0,2(a0)
000649B0 D0C1                       		adda.w	d1,a0
000649B2 51CA FFF8                  		dbf	d2,loc_72BDA
000649B6                            
000649B6 4E75                       		rts	
000649B8                            ; ===========================================================================
000649B8                            
000649B8                            loc_72BE6:				; XREF: loc_72A64
000649B8 101C                       		move.b	(a4)+,d0
000649BE 4E75                       		rts	
000649C0                            ; ===========================================================================
000649C0                            
000649C0                            loc_72BEE:				; XREF: loc_72A64
000649C0 422E 002C                  		clr.b	$2C(a6)
000649C4 4E75                       		rts	
000649C6                            ; ===========================================================================
000649C6                            
000649C6                            loc_72BF4:				; XREF: loc_72A64
000649C6 0895 0007                  		bclr	#7,(a5)
000649CA 0895 0004                  		bclr	#4,(a5)
000649CE 4EBA FB00                  		jsr	sub_726FE(pc)
000649D2 4A2E 0250                  		tst.b	$250(a6)
000649D6 6B00                       		bmi.s	loc_72C22
000649D8 264D                       		movea.l	a5,a3
000649DA 4BEE 0100                  		lea	$100(a6),a5
000649DE 226E 0018                  		movea.l	$18(a6),a1
000649E2 0895 0002                  		bclr	#2,(a5)
000649E6 08D5 0001                  		bset	#1,(a5)
000649EA 102D 000B                  		move.b	$B(a5),d0
000649EE 4EBA 0000                  		jsr	sub_72C4E(pc)
000649F2 2A4B                       		movea.l	a3,a5
000649F4                            
000649F4                            loc_72C22:
000649F4 504F                       		addq.w	#8,sp
000649F6 4E75                       		rts	
000649F8                            ; ===========================================================================
000649F8                            
000649F8                            loc_72C26:				; XREF: loc_72A64
000649F8 7000                       		moveq	#0,d0
000649FA 101C                       		move.b	(a4)+,d0
000649FC 1B40 000B                  		move.b	d0,$B(a5)
00064A00 0815 0002                  		btst	#2,(a5)
00064A04 6600 0000                  		bne.w	locret_72CAA
00064A08 226E 0018                  		movea.l	$18(a6),a1
00064A0C 4A2E 000E                  		tst.b	$E(a6)
00064A10 6700                       		beq.s	sub_72C4E
00064A12 226D 0020                  		movea.l	$20(a5),a1
00064A16 4A2E 000E                  		tst.b	$E(a6)
00064A1A 6B00                       		bmi.s	sub_72C4E
00064A1C 226E 0020                  		movea.l	$20(a6),a1
00064A20                            
00064A20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00064A20                            
00064A20                            
00064A20                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00064A20 5340                       		subq.w	#1,d0
00064A22 6B00                       		bmi.s	loc_72C5C
00064A24 323C 0019                  		move.w	#$19,d1
00064A28                            
00064A28                            loc_72C56:
00064A28 D2C1                       		adda.w	d1,a1
00064A2A 51C8 FFFC                  		dbf	d0,loc_72C56
00064A2E                            
00064A2E                            loc_72C5C:
00064A2E 1219                       		move.b	(a1)+,d1
00064A30 1B41 001F                  		move.b	d1,$1F(a5)
00064A34 1801                       		move.b	d1,d4
00064A36 103C 00B0                  		move.b	#$B0,d0
00064A3A 4EBA FAB8                  		jsr	sub_72722(pc)
00064A3E 45FA 0000                  		lea	byte_72D18(pc),a2
00064A42 7613                       		moveq	#$13,d3
00064A44                            
00064A44                            loc_72C72:
00064A44 101A                       		move.b	(a2)+,d0
00064A46 1219                       		move.b	(a1)+,d1
00064A48 4EBA FAAA                  		jsr	sub_72722(pc)
00064A4C 51CB FFF6                  		dbf	d3,loc_72C72
00064A50 7A03                       		moveq	#3,d5
00064A52 0244 0007                  		andi.w	#7,d4
00064A56 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00064A5A 162D 0009                  		move.b	9(a5),d3
00064A5E                            
00064A5E                            loc_72C8C:
00064A5E 101A                       		move.b	(a2)+,d0
00064A60 1219                       		move.b	(a1)+,d1
00064A62 E20C                       		lsr.b	#1,d4
00064A64 6400                       		bcc.s	loc_72C96
00064A68                            
00064A68                            loc_72C96:
00064A68 4EBA FA8A                  		jsr	sub_72722(pc)
00064A6C 51CD FFF0                  		dbf	d5,loc_72C8C
00064A70 103C 00B4                  		move.b	#$B4,d0
00064A74 122D 000A                  		move.b	$A(a5),d1
00064A78 4EBA FA7A                  		jsr	sub_72722(pc)
00064A7C                            
00064A7C                            locret_72CAA:
00064A7C 4E75                       		rts	
00064A7E                            ; End of function sub_72C4E
00064A7E                            
00064A7E                            ; ===========================================================================
00064A7E 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00064A86                            
00064A86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00064A86                            
00064A86                            
00064A86                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00064A86 0815 0002                  		btst	#2,(a5)
00064A8A 6600                       		bne.s	locret_72D16
00064A8C 7000                       		moveq	#0,d0
00064A8E 102D 000B                  		move.b	$B(a5),d0
00064A92 226E 0018                  		movea.l	$18(a6),a1
00064A96 4A2E 000E                  		tst.b	$E(a6)
00064A9A 6700                       		beq.s	loc_72CD8
00064A9C 226E 0020                  		movea.l	$20(a6),a1
00064AA0 4A2E 000E                  		tst.b	$E(a6)
00064AA4 6B00                       		bmi.s	loc_72CD8
00064AA6 226E 0020                  		movea.l	$20(a6),a1
00064AAA                            
00064AAA                            loc_72CD8:
00064AAA 5340                       		subq.w	#1,d0
00064AAC 6B00                       		bmi.s	loc_72CE6
00064AAE 323C 0019                  		move.w	#$19,d1
00064AB2                            
00064AB2                            loc_72CE0:
00064AB2 D2C1                       		adda.w	d1,a1
00064AB4 51C8 FFFC                  		dbf	d0,loc_72CE0
00064AB8                            
00064AB8                            loc_72CE6:
00064AB8 D2FC 0015                  		adda.w	#$15,a1
00064ABC 45FA 0000                  		lea	byte_72D2C(pc),a2
00064AC0 102D 001F                  		move.b	$1F(a5),d0
00064AC4 0240 0007                  		andi.w	#7,d0
00064AC8 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00064ACC 162D 0009                  		move.b	9(a5),d3
00064AD0 6B00                       		bmi.s	locret_72D16
00064AD2 7A03                       		moveq	#3,d5
00064AD4                            
00064AD4                            loc_72D02:
00064AD4 101A                       		move.b	(a2)+,d0
00064AD6 1219                       		move.b	(a1)+,d1
00064AD8 E20C                       		lsr.b	#1,d4
00064ADA 6400                       		bcc.s	loc_72D12
00064ADE 6500                       		bcs.s	loc_72D12
00064AE0 4EBA FA12                  		jsr	sub_72722(pc)
00064AE4                            
00064AE4                            loc_72D12:
00064AE4 51CD FFEE                  		dbf	d5,loc_72D02
00064AE8                            
00064AE8                            locret_72D16:
00064AE8 4E75                       		rts	
00064AEA                            ; End of function sub_72CB4
00064AEA                            
00064AEA                            ; ===========================================================================
00064AEA 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00064AF4 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00064AFE 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00064B02                            ; ===========================================================================
00064B02                            
00064B02                            loc_72D30:				; XREF: loc_72A64
00064B02 08D5 0003                  		bset	#3,(a5)
00064B06 2B4C 0014                  		move.l	a4,$14(a5)
00064B0A 1B5C 0018                  		move.b	(a4)+,$18(a5)
00064B0E 1B5C 0019                  		move.b	(a4)+,$19(a5)
00064B12 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00064B16 101C                       		move.b	(a4)+,d0
00064B18 E208                       		lsr.b	#1,d0
00064B1A 1B40 001B                  		move.b	d0,$1B(a5)
00064B1E 426D 001C                  		clr.w	$1C(a5)
00064B22 4E75                       		rts	
00064B24                            ; ===========================================================================
00064B24                            
00064B24                            loc_72D52:				; XREF: loc_72A64
00064B24 08D5 0003                  		bset	#3,(a5)
00064B28 4E75                       		rts	
00064B2A                            ; ===========================================================================
00064B2A                            
00064B2A                            loc_72D58:				; XREF: loc_72A64
00064B2A 0895 0007                  		bclr	#7,(a5)
00064B2E 0895 0004                  		bclr	#4,(a5)
00064B32 4A2D 0001                  		tst.b	1(a5)
00064B36 6B00                       		bmi.s	loc_72D74
00064B38 4A2E 0008                  		tst.b	8(a6)
00064B3C 6B00 0000                  		bmi.w	loc_72E02
00064B40 4EBA F98E                  		jsr	sub_726FE(pc)
00064B44 6000                       		bra.s	loc_72D78
00064B46                            ; ===========================================================================
00064B46                            
00064B46                            loc_72D74:
00064B46 4EBA FC2A                  		jsr	sub_729A0(pc)
00064B4A                            
00064B4A                            loc_72D78:
00064B4A 4A2E 000E                  		tst.b	$E(a6)
00064B4E 6A00 0000                  		bpl.w	loc_72E02
00064B52 4216                       		clr.b	0(a6)
00064B54 7000                       		moveq	#0,d0
00064B56 102D 0001                  		move.b	1(a5),d0
00064B5A 6B00                       		bmi.s	loc_72DCC
00064B5C 41FA F546                  		lea	dword_722CC(pc),a0
00064B60 264D                       		movea.l	a5,a3
00064B62 0C00 0004                  		cmpi.b	#4,d0
00064B66 6600                       		bne.s	loc_72DA8
00064B68 4A2E 0340                  		tst.b	$340(a6)
00064B6C 6A00                       		bpl.s	loc_72DA8
00064B6E 4BEE 0340                  		lea	$340(a6),a5
00064B72 226E 0020                  		movea.l	$20(a6),a1
00064B76 6000                       		bra.s	loc_72DB8
00064B78                            ; ===========================================================================
00064B78                            
00064B78                            loc_72DA8:
00064B78 5500                       		subq.b	#2,d0
00064B7A E508                       		lsl.b	#2,d0
00064B7C 2A70 0000                  		movea.l	(a0,d0.w),a5
00064B80 4A15                       		tst.b	(a5)
00064B82 6A00                       		bpl.s	loc_72DC8
00064B84 226E 0018                  		movea.l	$18(a6),a1
00064B88                            
00064B88                            loc_72DB8:
00064B88 0895 0002                  		bclr	#2,(a5)
00064B8C 08D5 0001                  		bset	#1,(a5)
00064B90 102D 000B                  		move.b	$B(a5),d0
00064B94 4EBA FE8A                  		jsr	sub_72C4E(pc)
00064B98                            
00064B98                            loc_72DC8:
00064B98 2A4B                       		movea.l	a3,a5
00064B9A 6000                       		bra.s	loc_72E02
00064B9C                            ; ===========================================================================
00064B9C                            
00064B9C                            loc_72DCC:
00064B9C 41EE 0370                  		lea	$370(a6),a0
00064BA0 4A10                       		tst.b	(a0)
00064BA2 6A00                       		bpl.s	loc_72DE0
00064BA4 0C00 00E0                  		cmpi.b	#$E0,d0
00064BA8 6700                       		beq.s	loc_72DEA
00064BAA 0C00 00C0                  		cmpi.b	#$C0,d0
00064BAE 6700                       		beq.s	loc_72DEA
00064BB0                            
00064BB0                            loc_72DE0:
00064BB0 41FA F4F2                  		lea	dword_722CC(pc),a0
00064BB4 E608                       		lsr.b	#3,d0
00064BB6 2070 0000                  		movea.l	(a0,d0.w),a0
00064BBA                            
00064BBA                            loc_72DEA:
00064BBA 0890 0002                  		bclr	#2,(a0)
00064BBE 08D0 0001                  		bset	#1,(a0)
00064BC2 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00064BC8 6600                       		bne.s	loc_72E02
00064BCA 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00064BD2                            
00064BD2                            loc_72E02:
00064BD2 504F                       		addq.w	#8,sp
00064BD4 4E75                       		rts	
00064BD6                            ; ===========================================================================
00064BD6                            
00064BD6                            loc_72E06:				; XREF: loc_72A64
00064BD6 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00064BDC 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00064BE0 0815 0002                  		btst	#2,(a5)
00064BE4 6600                       		bne.s	locret_72E1E
00064BE6 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00064BEE                            
00064BEE                            locret_72E1E:
00064BEE 4E75                       		rts	
00064BF0                            ; ===========================================================================
00064BF0                            
00064BF0                            loc_72E20:				; XREF: loc_72A64
00064BF0 0895 0003                  		bclr	#3,(a5)
00064BF4 4E75                       		rts	
00064BF6                            ; ===========================================================================
00064BF6                            
00064BF6                            loc_72E26:				; XREF: loc_72A64
00064BF6 1B5C 000B                  		move.b	(a4)+,$B(a5)
00064BFA 4E75                       		rts	
00064BFC                            ; ===========================================================================
00064BFC                            
00064BFC                            loc_72E2C:				; XREF: loc_72A64
00064BFC 101C                       		move.b	(a4)+,d0
00064BFE E148                       		lsl.w	#8,d0
00064C00 101C                       		move.b	(a4)+,d0
00064C02 D8C0                       		adda.w	d0,a4
00064C04 534C                       		subq.w	#1,a4
00064C06 4E75                       		rts	
00064C08                            ; ===========================================================================
00064C08                            
00064C08                            loc_72E38:				; XREF: loc_72A64
00064C08 7000                       		moveq	#0,d0
00064C0A 101C                       		move.b	(a4)+,d0
00064C0C 121C                       		move.b	(a4)+,d1
00064C0E 4A35 0024                  		tst.b	$24(a5,d0.w)
00064C12 6600                       		bne.s	loc_72E48
00064C14 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00064C18                            
00064C18                            loc_72E48:
00064C18 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00064C1C 66DE                       		bne.s	loc_72E2C
00064C1E 544C                       		addq.w	#2,a4
00064C20 4E75                       		rts	
00064C22                            ; ===========================================================================
00064C22                            
00064C22                            loc_72E52:				; XREF: loc_72A64
00064C22 7000                       		moveq	#0,d0
00064C24 102D 000D                  		move.b	$D(a5),d0
00064C28 5900                       		subq.b	#4,d0
00064C2A 2B8C 0000                  		move.l	a4,(a5,d0.w)
00064C2E 1B40 000D                  		move.b	d0,$D(a5)
00064C32 60C8                       		bra.s	loc_72E2C
00064C34                            ; ===========================================================================
00064C34                            
00064C34                            loc_72E64:				; XREF: loc_72A64
00064C34 103C 0088                  		move.b	#$88,d0
00064C38 123C 000F                  		move.b	#$F,d1
00064C3C 4EBA F8C2                  		jsr	sub_7272E(pc)
00064C40 103C 008C                  		move.b	#$8C,d0
00064C44 123C 000F                  		move.b	#$F,d1
00064C48 6000 F8B6                  		bra.w	sub_7272E
00064C4C                            ; ===========================================================================
00064C4C                            Kos_Z80:	incbin	sound\z80_1.bin
00064CFC 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00064CFE 21                         		dc.b $21
00064CFF 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00064D01                            		incbin	sound\z80_2.bin
000663AC                            		even
000663AC                            Music81:	incbin	sound\music81.bin
000673E6 00                         		even
000673E6                            Music82:	incbin	sound\music82.bin
00067836                            		even
00067836                            Music83:	incbin	sound\music83.bin
00067C94                            		even
00067C94                            Music84:	incbin	sound\music84.bin
00068102                            		even
00068102                            Music85:	incbin	sound\music85.bin
0006854E                            		even
0006854E                            Music86:	incbin	sound\music86.bin
00068A9E                            		even
00068A9E                            Music87:	incbin	sound\music87.bin
00068C84                            		even
00068C84                            Music88:	incbin	sound\music88.bin
00068D72                            		even
00068D72                            Music89:	incbin	sound\music89.bin
0006909E                            		even
0006909E                            Music8A:	incbin	sound\music8A.bin
0006924A                            		even
0006924A                            Music8B:	incbin	sound\music8B.bin
000694E4                            		even
000694E4                            Music8C:	incbin	sound\music8C.bin
00069700                            		even
00069700                            Music8D:	incbin	sound\music8D.bin
0006991C                            		even
0006991C                            Music8E:	incbin	sound\music8E.bin
00069A72                            		even
00069A72                            Music8F:	incbin	sound\music8F.bin
00069BC2                            		even
00069BC2                            Music90:	incbin	sound\music90.bin
00069D20                            		even
00069D20                            Music91:	incbin	sound\music91.bin
0006AFEE                            		even
0006AFEE                            Music92:	incbin	sound\music92.bin
0006B118                            		even
0006B118                            Music93:	incbin	sound\music93.bin
0006B1E6                            		even
0006B1E6                            ; ---------------------------------------------------------------------------
0006B1E6                            ; Sound	effect pointers
0006B1E6                            ; ---------------------------------------------------------------------------
0006B1E6 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
0006B1F2 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
0006B1FE 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
0006B20A 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
0006B216 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
0006B222 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
0006B22E 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
0006B23A 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
0006B246 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
0006B252 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
0006B25E 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
0006B26A 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
0006B276 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
0006B282 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
0006B28E 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
0006B29A 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
0006B2A6 0000 0000                  SoundD0Index:	dc.l SoundD0
0006B2AA                            SoundA0:	incbin	sound\soundA0.bin
0006B2C0                            		even
0006B2C0                            SoundA1:	incbin	sound\soundA1.bin
0006B2EA                            		even
0006B2EA                            SoundA2:	incbin	sound\soundA2.bin
0006B30A                            		even
0006B30A                            SoundA3:	incbin	sound\soundA3.bin
0006B33C                            		even
0006B33C                            SoundA4:	incbin	sound\soundA4.bin
0006B372                            		even
0006B372                            SoundA5:	incbin	sound\soundA5.bin
0006B39E                            		even
0006B39E                            SoundA6:	incbin	sound\soundA6.bin
0006B3CE                            		even
0006B3CE                            SoundA7:	incbin	sound\soundA7.bin
0006B3FE                            		even
0006B3FE                            SoundA8:	incbin	sound\soundA8.bin
0006B432                            		even
0006B432                            SoundA9:	incbin	sound\soundA9.bin
0006B444                            		even
0006B444                            SoundAA:	incbin	sound\soundAA.bin
0006B486                            		even
0006B486                            SoundAB:	incbin	sound\soundAB.bin
0006B4A6                            		even
0006B4A6                            SoundAC:	incbin	sound\soundAC.bin
0006B4DA                            		even
0006B4DA                            SoundAD:	incbin	sound\soundAD.bin
0006B510                            		even
0006B510                            SoundAE:	incbin	sound\soundAE.bin
0006B55A                            		even
0006B55A                            SoundAF:	incbin	sound\soundAF.bin
0006B588                            		even
0006B588                            SoundB0:	incbin	sound\soundB0.bin
0006B5BA                            		even
0006B5BA                            SoundB1:	incbin	sound\soundB1.bin
0006B5E6                            		even
0006B5E6                            SoundB2:	incbin	sound\soundB2.bin
0006B636                            		even
0006B636                            SoundB3:	incbin	sound\soundB3.bin
0006B680                            		even
0006B680                            SoundB4:	incbin	sound\soundB4.bin
0006B6DC                            		even
0006B6DC                            SoundB5:	incbin	sound\soundB5.bin
0006B708                            		even
0006B708                            SoundB6:	incbin	sound\soundB6.bin
0006B726                            		even
0006B726                            SoundB7:	incbin	sound\soundB7.bin
0006B762                            		even
0006B762                            SoundB8:	incbin	sound\soundB8.bin
0006B780                            		even
0006B780                            SoundB9:	incbin	sound\soundB9.bin
0006B7E4                            		even
0006B7E4                            SoundBA:	incbin	sound\soundBA.bin
0006B80C                            		even
0006B80C                            SoundBB:	incbin	sound\soundBB.bin
0006B838                            		even
0006B838                            SoundBC:	incbin	sound\soundBC.bin
0006B87A                            		even
0006B87A                            SoundBD:	incbin	sound\soundBD.bin
0006B8CE                            		even
0006B8CE                            SoundBE:	incbin	sound\soundBE.bin
0006B908                            		even
0006B908                            SoundBF:	incbin	sound\soundBF.bin
0006B97A                            		even
0006B97A                            SoundC0:	incbin	sound\soundC0.bin
0006B9A8                            		even
0006B9A8                            SoundC1:	incbin	sound\soundC1.bin
0006B9E2                            		even
0006B9E2                            SoundC2:	incbin	sound\soundC2.bin
0006BA0C                            		even
0006BA0C                            SoundC3:	incbin	sound\soundC3.bin
0006BA86                            		even
0006BA86                            SoundC4:	incbin	sound\soundC4.bin
0006BAAE                            		even
0006BAAE                            SoundC5:	incbin	sound\soundC5.bin
0006BB16                            		even
0006BB16                            SoundC6:	incbin	sound\soundC6.bin
0006BB58                            		even
0006BB58                            SoundC7:	incbin	sound\soundC7.bin
0006BB86                            		even
0006BB86                            SoundC8:	incbin	sound\soundC8.bin
0006BB98                            		even
0006BB98                            SoundC9:	incbin	sound\soundC9.bin
0006BBC6                            		even
0006BBC6                            SoundCA:	incbin	sound\soundCA.bin
0006BBF4                            		even
0006BBF4                            SoundCB:	incbin	sound\soundCB.bin
0006BC40                            		even
0006BC40                            SoundCC:	incbin	sound\soundCC.bin
0006BC7A                            		even
0006BC7A                            SoundCD:	incbin	sound\soundCD.bin
0006BC88                            		even
0006BC88                            SoundCE:	incbin	sound\soundCE.bin
0006BCB4                            		even
0006BCB4                            SoundCF:	incbin	sound\soundCF.bin
0006BCEC                            		even
0006BCEC                            SoundD0:	incbin	sound\soundD0.bin
0006BD26                            		even
0006BD26                            SegaPCM:	incbin	sound\segapcm.bin
0007269E                            		even
0007269E                            
0007269E                            ; ==============================================================
0007269E                            ; --------------------------------------------------------------
0007269E                            ; Debugging modules
0007269E                            ; --------------------------------------------------------------
0007269E                            
0007269E                               include   "ErrorHandler.asm"
0007269E                            
0007269E                            ; ===============================================================
0007269E                            ; ---------------------------------------------------------------
0007269E                            ; Error handling and debugging modules
0007269E                            ; 2016-2017, Vladikcomper
0007269E                            ; ---------------------------------------------------------------
0007269E                            ; Error handler functions and calls
0007269E                            ; ---------------------------------------------------------------
0007269E                            
0007269E                            ; ---------------------------------------------------------------
0007269E                            ; Error handler control flags
0007269E                            ; ---------------------------------------------------------------
0007269E                            
0007269E                            ; Screen appearence flags
0007269E =00000001                  _eh_address_error	equ	$01		; use for address and bus errors only (tells error handler to display additional "Address" field)
0007269E =00000002                  _eh_show_sr_usp		equ	$02		; displays SR and USP registers content on error screen
0007269E =00000010                  _eh_disassemble		equ	$10		; disassembles the instruction where the error happened + vint and hint handlers
0007269E                            
0007269E                            ; Advanced execution flags
0007269E                            ; WARNING! For experts only, DO NOT USES them unless you know what you're doing
0007269E =00000020                  _eh_return		equ	$20
0007269E =00000040                  _eh_enter_console	equ	$40
0007269E =00000080                  _eh_align_offset	equ	$80
0007269E                            
0007269E                            ; ---------------------------------------------------------------
0007269E                            ; Errors vector table
0007269E                            ; ---------------------------------------------------------------
0007269E                            
0007269E                            ; Default screen configuration
0007269E =00000000                  _eh_default			equ	0 ;_eh_show_sr_usp
0007269E                            
0007269E                            ; ---------------------------------------------------------------
0007269E                            
0007269E                            BusError:
0007269E 4EB9 0000 0000 4255 5320+  	__ErrorMessage "BUS ERROR", _eh_default|_eh_address_error|_eh_disassemble
000726B0                            
000726B0                            AddressError:
000726B0 4EB9 0000 0000 4144 4452+  	__ErrorMessage "ADDRESS ERROR", _eh_default|_eh_address_error|_eh_disassemble
000726C6                            
000726C6                            IllegalInstr:
000726C6 4EB9 0000 0000 494C 4C45+  	__ErrorMessage "ILLEGAL INSTRUCTION", _eh_default|_eh_disassemble
000726E2                            
000726E2                            ZeroDivide:
000726E2 4EB9 0000 0000 5A45 524F+  	__ErrorMessage "ZERO DIVIDE", _eh_default|_eh_disassemble
000726F6                            
000726F6                            ChkInstr:
000726F6 4EB9 0000 0000 4348 4B20+  	__ErrorMessage "CHK INSTRUCTION", _eh_default|_eh_disassemble
0007270E                            
0007270E                            TrapvInstr:
0007270E 4EB9 0000 0000 5452 4150+  	__ErrorMessage "TRAPV INSTRUCTION", _eh_default|_eh_disassemble
00072728                            
00072728                            PrivilegeViol:
00072728 4EB9 0000 0000 5052 4956+  	__ErrorMessage "PRIVILEGE VIOLATION", _eh_default|_eh_disassemble
00072744                            
00072744                            Trace:
00072744 4EB9 0000 0000 5452 4143+  	__ErrorMessage "TRACE", _eh_default|_eh_disassemble
00072752                            
00072752                            Line1010Emu:
00072752 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE A EMULATOR", _eh_default|_eh_disassemble
0007276A                            
0007276A                            Line1111Emu:
0007276A 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE F EMULATOR", _eh_default|_eh_disassemble
00072782                            
00072782                            ErrorExcept:
00072782 4EB9 0000 0000 4552 524F+  	__ErrorMessage "ERROR EXCEPTION", _eh_default|_eh_disassemble
0007279A                            
0007279A                            ; ---------------------------------------------------------------
0007279A                            ; Import error handler global functions
0007279A                            ; ---------------------------------------------------------------
0007279A                            
0007279A                            ErrorHandler.__global__error_initconsole equ ErrorHandler+$158
0007279A                            ErrorHandler.__global__errorhandler_setupvdp equ ErrorHandler+$25C
0007279A                            ErrorHandler.__global__console_loadpalette equ ErrorHandler+$AE2
0007279A                            ErrorHandler.__global__console_setposasxy_stack equ ErrorHandler+$B1E
0007279A                            ErrorHandler.__global__console_setposasxy equ ErrorHandler+$B24
0007279A                            ErrorHandler.__global__console_getposasxy equ ErrorHandler+$B50
0007279A                            ErrorHandler.__global__console_startnewline equ ErrorHandler+$B72
0007279A                            ErrorHandler.__global__console_setbasepattern equ ErrorHandler+$B9A
0007279A                            ErrorHandler.__global__console_setwidth equ ErrorHandler+$BAE
0007279A                            ErrorHandler.__global__console_writeline_withpattern equ ErrorHandler+$BC4
0007279A                            ErrorHandler.__global__console_writeline equ ErrorHandler+$BC6
0007279A                            ErrorHandler.__global__console_write equ ErrorHandler+$BCA
0007279A                            ErrorHandler.__global__console_writeline_formatted equ ErrorHandler+$C76
0007279A                            ErrorHandler.__global__console_write_formatted equ ErrorHandler+$C7A
0007279A                            ErrorHandler.__global__decode68k equ ErrorHandler+$CE6
0007279A                            
0007279A                            ; ---------------------------------------------------------------
0007279A                            ; Error handler external functions (compiled only when used)
0007279A                            ; ---------------------------------------------------------------
0007279A                            
0007279A                            
0007279A                            
0007279A                            
0007279A                            
0007279A                            ; ---------------------------------------------------------------
0007279A                            ; Include error handler binary module
0007279A                            ; ---------------------------------------------------------------
0007279A                            
0007279A                            ErrorHandler:
0007279A                            	incbin	ErrorHandler.bin
000741AE                            
000741AE                            ; ---------------------------------------------------------------
000741AE                            ; WARNING!
000741AE                            ;	DO NOT put any data from now on! DO NOT use ROM padding!
000741AE                            ;	Symbol data should be appended here after ROM is compiled
000741AE                            ;	by ConvSym utility, otherwise debugger modules won't be able
000741AE                            ;	to resolve symbol names.
000741AE                            ; ---------------------------------------------------------------
000741AE                            ; ---------------------------------------------------------------
000741AE                            
000741AE                            ; end of 'ROM'
000741AE                            EndOfRom:
000741AE                            
000741AE                            
